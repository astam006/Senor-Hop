
senor_hop.elf:     file format elf32-littlenios2
senor_hop.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00008d44 memsz 0x00008d44 flags r-x
    LOAD off    0x00009d64 vaddr 0x00008d64 paddr 0x0000a7dc align 2**12
         filesz 0x00001a78 memsz 0x00001a78 flags rw-
    LOAD off    0x0000c254 vaddr 0x0000c254 paddr 0x0000c254 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008954  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000025c  00008b08  00008b08  00009b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a78  00008d64  0000a7dc  00009d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000c254  0000c254  0000c254  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000b7dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c58  00000000  00000000  0000b808  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000012c3  00000000  00000000  0000c460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001eccd  00000000  00000000  0000d723  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000070e5  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010b4c  00000000  00000000  000334d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001628  00000000  00000000  00044024  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ea3  00000000  00000000  0004564c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005ef3  00000000  00000000  000474ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0004d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005f0  00000000  00000000  0004d408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000506e6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000506e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000506ec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000506ed  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000506ee  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000506f2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000506f6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000506fa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00050703  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005070c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00050715  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00050720  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00058933  00000000  00000000  00050741  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00008b08 l    d  .rodata	00000000 .rodata
00008d64 l    d  .rwdata	00000000 .rwdata
0000c254 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00008bcc l     O .rodata	00000010 bp
00008bdc l     O .rodata	00000010 dp_l
00008bec l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00008bfc l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
000023ac l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00008d64 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00003a98 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009164 l     O .rwdata	00001060 JTAG_UART
0000a1c4 l     O .rwdata	0000002c Char_LCD_16x2
00003eb0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000040f0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00004318 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004994 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00005214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005290 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005370 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005828 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005964 l     F .text	000000dc alt_file_locked
00005bc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00006830 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006c14 l     F .text	00000058 std
00006d20 l     F .text	00000008 __fp_lock
00006d28 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008304 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00008438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00008558 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000086a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00008868 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000a7d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00008aa4 l     F .text	00000060 alt_get_errno
000081a4 g     F .text	00000070 _isatty_r
00003b04 g     F .text	0000006c alt_main
0000c2a4 g     O .bss	00000100 alt_irq
00001f1c g     F .text	00000018 fabs
00008214 g     F .text	00000078 _lseek_r
0000a7dc g       *ABS*	00000000 __flash_rwdata_start
00004b10 g     F .text	00000034 alt_up_character_lcd_send_cmd
00002ecc g     F .text	00000088 __eqdf2
0000c534 g       *ABS*	00000000 __alt_heap_start
00007de0 g     F .text	00000068 __sseek
00006c7c g     F .text	000000a4 __sinit
00006474 g     F .text	00000130 __swbuf_r
00006d7c g     F .text	00000068 __sfmoreglue
00008728 g     F .text	00000020 __malloc_unlock
00006d6c g     F .text	00000010 _cleanup
00002fdc g     F .text	00000088 __gtdf2
00003970 g     F .text	00000010 __errno
00004a94 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008130 g     F .text	00000074 _fstat_r
0000c26c g     O .bss	00000004 errno
0000c258 g     O .bss	00000004 alt_argv
000127a0 g       *ABS*	00000000 _gp
0000a218 g     O .rwdata	00000180 alt_fd_list
00005498 g     F .text	00000094 alt_find_dev
00006174 g     F .text	000000a0 memcpy
00004ca8 g     F .text	0000004c alt_up_character_lcd_write_fd
00006d60 g     F .text	0000000c _cleanup_r
00003174 g     F .text	000000f8 __floatsidf
000058ec g     F .text	00000078 alt_io_redirect
00003064 g     F .text	00000088 __ltdf2
00008b08 g       *ABS*	00000000 __DTOR_END__
00004530 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008498 g     F .text	000000c0 isatty
00006024 g     F .text	00000090 alt_icache_flush
0000c270 g     O .bss	00000004 __malloc_top_pad
00007d68 g     F .text	00000070 _sbrk_r
0000828c g     F .text	00000078 _read_r
0000a7bc g     O .rwdata	00000004 alt_max_fd
00003770 g     F .text	00000138 __unpack_d
0000800c g     F .text	00000110 _fclose_r
00006be0 g     F .text	00000034 fflush
0000c274 g     O .bss	00000004 __malloc_max_sbrked_mem
0000283c g     F .text	00000074 __adddf3
000085b8 g     F .text	000000f0 lseek
0000a7a0 g     O .rwdata	00000004 __fdlib_version
0000a7a8 g     O .rwdata	00000004 _global_impure_ptr
0000c534 g       *ABS*	00000000 __bss_end
00005730 g     F .text	000000f8 alt_iic_isr_register
00005d20 g     F .text	0000010c alt_tick
00006d48 g     F .text	00000018 __fp_lock_all
000056e8 g     F .text	00000048 alt_ic_irq_enabled
00005c88 g     F .text	00000098 alt_alarm_stop
0000c260 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000a1f0 g     O .rwdata	00000028 alt_dev_null
00001f98 g     F .text	00000210 rint
00004f90 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00005274 g     F .text	0000001c alt_dcache_flush_all
0000326c g     F .text	000000d8 __fixdfsi
0000a7dc g       *ABS*	00000000 __ram_rwdata_end
0000a7b4 g     O .rwdata	00000008 alt_dev_list
00008984 g     F .text	00000120 write
00006318 g     F .text	000000e8 _putc_r
00008d64 g       *ABS*	00000000 __ram_rodata_end
00008364 g     F .text	000000d4 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000030ec g     F .text	00000088 __ledf2
0000c534 g       *ABS*	00000000 end
00004030 g     F .text	000000c0 altera_avalon_jtag_uart_init
00008b04 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00004a04 g     F .text	00000090 alt_avalon_timer_sc_init
000033dc g     F .text	00000080 __clzsi2
00004754 g     F .text	00000240 altera_avalon_jtag_uart_write
00006c6c g     F .text	00000004 __sfp_lock_acquire
00004bb8 g     F .text	00000078 alt_up_character_lcd_write
00007000 g     F .text	00000314 _free_r
00003b70 g     F .text	00000258 alt_printf
00006834 g     F .text	000001b0 __call_exitprocs
0000a7d4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
0000c264 g     O .bss	00000004 _alt_tick_rate
0000c268 g     O .bss	00000004 _alt_nticks
00008748 g     F .text	00000120 read
00003e3c g     F .text	00000074 alt_sys_init
00004e1c g     F .text	000000b0 alt_up_character_lcd_shift_display
000066fc g     F .text	00000134 __register_exitproc
00004ecc g     F .text	00000090 alt_up_character_lcd_erase_pos
00000954 g     F .text	00001300 __ieee754_pow
000043c8 g     F .text	00000074 altera_avalon_jtag_uart_close
000004cc g     F .text	00000488 pow
00008d64 g       *ABS*	00000000 __ram_rwdata_start
00008b08 g       *ABS*	00000000 __ram_rodata_start
0000c27c g     O .bss	00000028 __malloc_current_mallinfo
00003ee8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00005f6c g     F .text	000000b8 alt_get_fd
000038a8 g     F .text	000000c8 __fpcmp_parts_d
00007f9c g     F .text	00000070 _close_r
00006100 g     F .text	00000074 memcmp
00003f98 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000c534 g       *ABS*	00000000 __alt_stack_base
00003fe0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000065c0 g     F .text	0000013c __swsetup_r
00002c74 g     F .text	00000258 __divdf3
00006de4 g     F .text	000000f0 __sfp
0000a398 g     O .rwdata	00000408 __malloc_av_
00006c78 g     F .text	00000004 __sinit_lock_release
000028b0 g     F .text	000003c4 __muldf3
00007ec4 g     F .text	00000060 __sread
00005e4c g     F .text	00000120 alt_find_file
000052bc g     F .text	000000b4 alt_dev_llist_insert
00008708 g     F .text	00000020 __malloc_lock
000088c8 g     F .text	000000bc sbrk
000069e4 g     F .text	000001fc _fflush_r
0000c254 g       *ABS*	00000000 __bss_start
00003980 g     F .text	00000098 memset
000001f0 g     F .text	000002dc main
0000c25c g     O .bss	00000004 alt_envp
0000c278 g     O .bss	00000004 __malloc_max_total_mem
00003f40 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000065a4 g     F .text	0000001c __swbuf
00004d6c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00007dd8 g     F .text	00000008 __sclose
00001f80 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0000811c g     F .text	00000014 fclose
0000c3a4 g     O .bss	00000190 _atexit0
00007628 g     F .text	00000740 _malloc_r
0000a7c0 g     O .rwdata	00000004 alt_errno
000073dc g     F .text	000000b8 _fwalk
00006214 g     F .text	00000104 putc
00008c0c g     O .rodata	00000014 __thenan_df
00004b78 g     F .text	00000040 alt_up_character_lcd_open_dev
00006ed4 g     F .text	0000012c _malloc_trim_r
00008b08 g       *ABS*	00000000 __CTOR_END__
00001f34 g     F .text	0000001c finite
00004b44 g     F .text	00000034 alt_up_character_lcd_init
00008b08 g       *ABS*	00000000 __flash_rodata_start
00008b08 g       *ABS*	00000000 __DTOR_LIST__
00002388 g     F .text	00000024 copysign
00002f54 g     F .text	00000088 __nedf2
00003e08 g     F .text	00000034 alt_irq_init
00005c28 g     F .text	00000060 alt_release_fd
00004f5c g     F .text	00000034 alt_up_character_lcd_cursor_off
00008c20 g     O .rodata	00000100 __clz_tab
000060b4 g     F .text	00000014 atexit
00007f24 g     F .text	00000078 _write_r
0000a7a4 g     O .rwdata	00000004 _impure_ptr
0000c254 g     O .bss	00000004 alt_argc
000021a8 g     F .text	000001e0 scalbn
00005434 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006d30 g     F .text	00000018 __fp_unlock_all
0000a7ac g     O .rwdata	00000008 alt_fs_list
00001f88 g     F .text	00000010 nan
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001c54 g     F .text	000002c8 __ieee754_sqrt
0000555c g     F .text	00000050 alt_ic_isr_register
0000a7dc g       *ABS*	00000000 _edata
0000c534 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000443c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00005648 g     F .text	000000a0 alt_ic_irq_disable
00007e48 g     F .text	0000007c __swrite
0000a7d0 g     O .rwdata	00000004 __malloc_trim_threshold
00005e2c g     F .text	00000020 altera_nios2_qsys_irq_init
000060c8 g     F .text	00000038 exit
00007314 g     F .text	000000c8 _fwalk_reent
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006c70 g     F .text	00000004 __sfp_lock_release
00004c30 g     F .text	00000078 alt_up_character_lcd_string
00008344 g     F .text	00000020 _exit
00001f50 g     F .text	00000030 __isnand
00004fc4 g     F .text	00000154 alt_alarm_start
00003344 g     F .text	00000098 __muldi3
00007494 g     F .text	00000194 __smakebuf_r
00006400 g     F .text	00000074 strlen
00005a40 g     F .text	00000188 open
00003dc8 g     F .text	00000040 alt_putchar
0000552c g     F .text	00000030 alt_icache_flush_all
00004cf4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0000a7c4 g     O .rwdata	00000004 alt_priority_mask
000055ac g     F .text	0000009c alt_ic_irq_enable
000027bc g     F .text	00000080 __subdf3
0000a7c8 g     O .rwdata	00000008 alt_alarm_list
000053d0 g     F .text	00000064 _do_ctors
00005118 g     F .text	000000fc close
00003a18 g     F .text	00000080 alt_load
0000345c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006c74 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18f0a904 	addi	r3,r3,-15708
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18f0a904 	addi	r3,r3,-15708
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d689e814 	ori	gp,gp,10144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10b09514 	ori	r2,r2,49748

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18f14d14 	ori	r3,r3,50484

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0003a180 	call	3a18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	0003b040 	call	3b04 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
     1f0:	deffe404 	addi	sp,sp,-112
     1f4:	dfc01b15 	stw	ra,108(sp)
     1f8:	df001a15 	stw	fp,104(sp)
     1fc:	dc001915 	stw	r16,100(sp)
     200:	df001904 	addi	fp,sp,100
	alt_up_character_lcd_dev *lcd_dev;

	/* create a message to be displayed on the VGA and LCD displays */
	char text_top_row[40] = "Senor Hop\0";
     204:	00c00074 	movhi	r3,1
     208:	18e2dd04 	addi	r3,r3,-29836
     20c:	18800017 	ldw	r2,0(r3)
     210:	e0bfeb15 	stw	r2,-84(fp)
     214:	18800117 	ldw	r2,4(r3)
     218:	e0bfec15 	stw	r2,-80(fp)
     21c:	1880020b 	ldhu	r2,8(r3)
     220:	e0bfed0d 	sth	r2,-76(fp)
     224:	18800283 	ldbu	r2,10(r3)
     228:	e0bfed85 	stb	r2,-74(fp)
     22c:	e13fedc4 	addi	r4,fp,-73
     230:	01800744 	movi	r6,29
     234:	000b883a 	mov	r5,zero
     238:	00039800 	call	3980 <memset>
	char text_bottom_row[40] = "Get Some\0";
     23c:	00c00074 	movhi	r3,1
     240:	18e2e704 	addi	r3,r3,-29796
     244:	18800017 	ldw	r2,0(r3)
     248:	e0bff515 	stw	r2,-44(fp)
     24c:	18800117 	ldw	r2,4(r3)
     250:	e0bff615 	stw	r2,-40(fp)
     254:	1880020b 	ldhu	r2,8(r3)
     258:	e0bff70d 	sth	r2,-36(fp)
     25c:	e13ff784 	addi	r4,fp,-34
     260:	01800784 	movi	r6,30
     264:	000b883a 	mov	r5,zero
     268:	00039800 	call	3980 <memset>

	/* loop controller*/
	int cursor = 0;
     26c:	e03fe915 	stw	zero,-92(fp)

	/* test inputs for display loop */
	/* these should be read from input ports */
	unsigned short top = 0x1111;
     270:	00844444 	movi	r2,4369
     274:	e0bfe88d 	sth	r2,-94(fp)
	unsigned short bottom = 0x8444;
     278:	00a11104 	movi	r2,-31676
     27c:	e0bfe80d 	sth	r2,-96(fp)
	int location = 0;
     280:	e03fe715 	stw	zero,-100(fp)

	/* output text message to the LCD */
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     284:	01000074 	movhi	r4,1
     288:	2122c204 	addi	r4,r4,-29944
     28c:	0004b780 	call	4b78 <alt_up_character_lcd_open_dev>
     290:	e0bfea15 	stw	r2,-88(fp)
	if (lcd_dev == NULL)
     294:	e0bfea17 	ldw	r2,-88(fp)
     298:	1004c03a 	cmpne	r2,r2,zero
     29c:	1000061e 	bne	r2,zero,2b8 <main+0xc8>
	{
		alt_printf ("Error: could not open character LCD device\n");
     2a0:	01000074 	movhi	r4,1
     2a4:	2122c704 	addi	r4,r4,-29924
     2a8:	0003b700 	call	3b70 <alt_printf>
		return -1;
     2ac:	00bfffc4 	movi	r2,-1
     2b0:	e0bfff15 	stw	r2,-4(fp)
     2b4:	00007e06 	br	4b0 <main+0x2c0>
	}
	else
		alt_printf ("Opened character LCD device\n");
     2b8:	01000074 	movhi	r4,1
     2bc:	2122d204 	addi	r4,r4,-29880
     2c0:	0003b700 	call	3b70 <alt_printf>
    //alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
	//alt_up_character_lcd_string (lcd_dev, text_top_row);
	//alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 1);	// set LCD cursor location to bottom row
	//alt_up_character_lcd_string (lcd_dev, text_bottom_row);
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor
     2c4:	e13fea17 	ldw	r4,-88(fp)
     2c8:	0004f5c0 	call	4f5c <alt_up_character_lcd_cursor_off>


//start loop for display during game
while(1)
	{
		cursor = 0;
     2cc:	e03fe915 	stw	zero,-92(fp)
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 0);	// set LCD cursor location to top row
     2d0:	e17fe917 	ldw	r5,-92(fp)
     2d4:	e13fea17 	ldw	r4,-88(fp)
     2d8:	000d883a 	mov	r6,zero
     2dc:	0004cf40 	call	4cf4 <alt_up_character_lcd_set_cursor_pos>
		if(location == 1){
     2e0:	e0bfe717 	ldw	r2,-100(fp)
     2e4:	10800058 	cmpnei	r2,r2,1
     2e8:	1000321e 	bne	r2,zero,3b4 <main+0x1c4>
			alt_up_character_lcd_write (lcd_dev, ">", 1);
     2ec:	e13fea17 	ldw	r4,-88(fp)
     2f0:	01400074 	movhi	r5,1
     2f4:	2962da04 	addi	r5,r5,-29848
     2f8:	01800044 	movi	r6,1
     2fc:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
			cursor = 1;
     300:	00800044 	movi	r2,1
     304:	e0bfe915 	stw	r2,-92(fp)
		}

		while(cursor < 16){
     308:	00002a06 	br	3b4 <main+0x1c4>
		    alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 0);	// set LCD cursor location to top row
     30c:	e17fe917 	ldw	r5,-92(fp)
     310:	e13fea17 	ldw	r4,-88(fp)
     314:	000d883a 	mov	r6,zero
     318:	0004cf40 	call	4cf4 <alt_up_character_lcd_set_cursor_pos>
			if((top / (int)pow(2,(15-cursor)))%2 != 0)
     31c:	e43fe88b 	ldhu	r16,-94(fp)
     320:	00c003c4 	movi	r3,15
     324:	e0bfe917 	ldw	r2,-92(fp)
     328:	1889c83a 	sub	r4,r3,r2
     32c:	00031740 	call	3174 <__floatsidf>
     330:	100f883a 	mov	r7,r2
     334:	1811883a 	mov	r8,r3
     338:	0009883a 	mov	r4,zero
     33c:	01500034 	movhi	r5,16384
     340:	380d883a 	mov	r6,r7
     344:	400f883a 	mov	r7,r8
     348:	00004cc0 	call	4cc <pow>
     34c:	1009883a 	mov	r4,r2
     350:	180b883a 	mov	r5,r3
     354:	2005883a 	mov	r2,r4
     358:	2807883a 	mov	r3,r5
     35c:	1009883a 	mov	r4,r2
     360:	180b883a 	mov	r5,r3
     364:	000326c0 	call	326c <__fixdfsi>
     368:	8085283a 	div	r2,r16,r2
     36c:	1080004c 	andi	r2,r2,1
     370:	10803fcc 	andi	r2,r2,255
     374:	1005003a 	cmpeq	r2,r2,zero
     378:	1000061e 	bne	r2,zero,394 <main+0x1a4>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
     37c:	e13fea17 	ldw	r4,-88(fp)
     380:	01400074 	movhi	r5,1
     384:	2962db04 	addi	r5,r5,-29844
     388:	01800044 	movi	r6,1
     38c:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
     390:	00000506 	br	3a8 <main+0x1b8>
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
     394:	e13fea17 	ldw	r4,-88(fp)
     398:	01400074 	movhi	r5,1
     39c:	2962dc04 	addi	r5,r5,-29840
     3a0:	01800044 	movi	r6,1
     3a4:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
			cursor++;
     3a8:	e0bfe917 	ldw	r2,-92(fp)
     3ac:	10800044 	addi	r2,r2,1
     3b0:	e0bfe915 	stw	r2,-92(fp)
		if(location == 1){
			alt_up_character_lcd_write (lcd_dev, ">", 1);
			cursor = 1;
		}

		while(cursor < 16){
     3b4:	e0bfe917 	ldw	r2,-92(fp)
     3b8:	10800410 	cmplti	r2,r2,16
     3bc:	103fd31e 	bne	r2,zero,30c <main+0x11c>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
			cursor++;
		}
		cursor = 0;
     3c0:	e03fe915 	stw	zero,-92(fp)
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
     3c4:	e17fe917 	ldw	r5,-92(fp)
     3c8:	e13fea17 	ldw	r4,-88(fp)
     3cc:	01800044 	movi	r6,1
     3d0:	0004cf40 	call	4cf4 <alt_up_character_lcd_set_cursor_pos>
		if(location == 0){
     3d4:	e0bfe717 	ldw	r2,-100(fp)
     3d8:	1004c03a 	cmpne	r2,r2,zero
     3dc:	1000301e 	bne	r2,zero,4a0 <main+0x2b0>
			alt_up_character_lcd_write (lcd_dev, ">", 1);
     3e0:	e13fea17 	ldw	r4,-88(fp)
     3e4:	01400074 	movhi	r5,1
     3e8:	2962da04 	addi	r5,r5,-29848
     3ec:	01800044 	movi	r6,1
     3f0:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
			cursor = 1;}
     3f4:	00800044 	movi	r2,1
     3f8:	e0bfe915 	stw	r2,-92(fp)
	while(cursor < 16){
     3fc:	00002806 	br	4a0 <main+0x2b0>
		    alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
     400:	e17fe917 	ldw	r5,-92(fp)
     404:	e13fea17 	ldw	r4,-88(fp)
     408:	01800044 	movi	r6,1
     40c:	0004cf40 	call	4cf4 <alt_up_character_lcd_set_cursor_pos>
			if((bottom / (int)pow(2,(15-cursor)))%2 != 0)
     410:	e43fe80b 	ldhu	r16,-96(fp)
     414:	00c003c4 	movi	r3,15
     418:	e0bfe917 	ldw	r2,-92(fp)
     41c:	1889c83a 	sub	r4,r3,r2
     420:	00031740 	call	3174 <__floatsidf>
     424:	100f883a 	mov	r7,r2
     428:	1811883a 	mov	r8,r3
     42c:	0009883a 	mov	r4,zero
     430:	01500034 	movhi	r5,16384
     434:	380d883a 	mov	r6,r7
     438:	400f883a 	mov	r7,r8
     43c:	00004cc0 	call	4cc <pow>
     440:	100b883a 	mov	r5,r2
     444:	180d883a 	mov	r6,r3
     448:	2809883a 	mov	r4,r5
     44c:	300b883a 	mov	r5,r6
     450:	000326c0 	call	326c <__fixdfsi>
     454:	8085283a 	div	r2,r16,r2
     458:	1080004c 	andi	r2,r2,1
     45c:	10803fcc 	andi	r2,r2,255
     460:	1005003a 	cmpeq	r2,r2,zero
     464:	1000061e 	bne	r2,zero,480 <main+0x290>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
     468:	e13fea17 	ldw	r4,-88(fp)
     46c:	01400074 	movhi	r5,1
     470:	2962db04 	addi	r5,r5,-29844
     474:	01800044 	movi	r6,1
     478:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
     47c:	00000506 	br	494 <main+0x2a4>
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
     480:	e13fea17 	ldw	r4,-88(fp)
     484:	01400074 	movhi	r5,1
     488:	2962dc04 	addi	r5,r5,-29840
     48c:	01800044 	movi	r6,1
     490:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
			cursor++;
     494:	e0bfe917 	ldw	r2,-92(fp)
     498:	10800044 	addi	r2,r2,1
     49c:	e0bfe915 	stw	r2,-92(fp)
		cursor = 0;
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
		if(location == 0){
			alt_up_character_lcd_write (lcd_dev, ">", 1);
			cursor = 1;}
	while(cursor < 16){
     4a0:	e0bfe917 	ldw	r2,-92(fp)
     4a4:	10800410 	cmplti	r2,r2,16
     4a8:	103fd51e 	bne	r2,zero,400 <main+0x210>
				alt_up_character_lcd_write (lcd_dev, " ", 1);
			cursor++;
		}


	}
     4ac:	003f8706 	br	2cc <main+0xdc>

}
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	e037883a 	mov	sp,fp
     4b8:	dfc00217 	ldw	ra,8(sp)
     4bc:	df000117 	ldw	fp,4(sp)
     4c0:	dc000017 	ldw	r16,0(sp)
     4c4:	dec00304 	addi	sp,sp,12
     4c8:	f800283a 	ret

000004cc <pow>:
     4cc:	deffee04 	addi	sp,sp,-72
     4d0:	ddc01015 	stw	r23,64(sp)
     4d4:	05c00074 	movhi	r23,1
     4d8:	bde9e804 	addi	r23,r23,-22624
     4dc:	dd800f15 	stw	r22,60(sp)
     4e0:	dd400e15 	stw	r21,56(sp)
     4e4:	dd000d15 	stw	r20,52(sp)
     4e8:	dcc00c15 	stw	r19,48(sp)
     4ec:	dc800b15 	stw	r18,44(sp)
     4f0:	dc400a15 	stw	r17,40(sp)
     4f4:	dc000915 	stw	r16,36(sp)
     4f8:	2029883a 	mov	r20,r4
     4fc:	dfc01115 	stw	ra,68(sp)
     500:	3025883a 	mov	r18,r6
     504:	282b883a 	mov	r21,r5
     508:	3827883a 	mov	r19,r7
     50c:	00009540 	call	954 <__ieee754_pow>
     510:	b9000017 	ldw	r4,0(r23)
     514:	05bfffc4 	movi	r22,-1
     518:	1021883a 	mov	r16,r2
     51c:	1823883a 	mov	r17,r3
     520:	25800426 	beq	r4,r22,534 <pow+0x68>
     524:	9009883a 	mov	r4,r18
     528:	980b883a 	mov	r5,r19
     52c:	0001f500 	call	1f50 <__isnand>
     530:	10000d26 	beq	r2,zero,568 <pow+0x9c>
     534:	8005883a 	mov	r2,r16
     538:	8807883a 	mov	r3,r17
     53c:	dfc01117 	ldw	ra,68(sp)
     540:	ddc01017 	ldw	r23,64(sp)
     544:	dd800f17 	ldw	r22,60(sp)
     548:	dd400e17 	ldw	r21,56(sp)
     54c:	dd000d17 	ldw	r20,52(sp)
     550:	dcc00c17 	ldw	r19,48(sp)
     554:	dc800b17 	ldw	r18,44(sp)
     558:	dc400a17 	ldw	r17,40(sp)
     55c:	dc000917 	ldw	r16,36(sp)
     560:	dec01204 	addi	sp,sp,72
     564:	f800283a 	ret
     568:	a009883a 	mov	r4,r20
     56c:	a80b883a 	mov	r5,r21
     570:	0001f500 	call	1f50 <__isnand>
     574:	1000151e 	bne	r2,zero,5cc <pow+0x100>
     578:	000d883a 	mov	r6,zero
     57c:	000f883a 	mov	r7,zero
     580:	a009883a 	mov	r4,r20
     584:	a80b883a 	mov	r5,r21
     588:	0002ecc0 	call	2ecc <__eqdf2>
     58c:	1000541e 	bne	r2,zero,6e0 <pow+0x214>
     590:	000d883a 	mov	r6,zero
     594:	000f883a 	mov	r7,zero
     598:	9009883a 	mov	r4,r18
     59c:	980b883a 	mov	r5,r19
     5a0:	0002ecc0 	call	2ecc <__eqdf2>
     5a4:	10002c1e 	bne	r2,zero,658 <pow+0x18c>
     5a8:	b8800017 	ldw	r2,0(r23)
     5ac:	d8000615 	stw	zero,24(sp)
     5b0:	d8000715 	stw	zero,28(sp)
     5b4:	10001226 	beq	r2,zero,600 <pow+0x134>
     5b8:	008ffc34 	movhi	r2,16368
     5bc:	d8800715 	stw	r2,28(sp)
     5c0:	dc000617 	ldw	r16,24(sp)
     5c4:	dc400717 	ldw	r17,28(sp)
     5c8:	003fda06 	br	534 <pow+0x68>
     5cc:	000d883a 	mov	r6,zero
     5d0:	000f883a 	mov	r7,zero
     5d4:	9009883a 	mov	r4,r18
     5d8:	980b883a 	mov	r5,r19
     5dc:	0002ecc0 	call	2ecc <__eqdf2>
     5e0:	103fd41e 	bne	r2,zero,534 <pow+0x68>
     5e4:	b8c00017 	ldw	r3,0(r23)
     5e8:	010ffc34 	movhi	r4,16368
     5ec:	d8000615 	stw	zero,24(sp)
     5f0:	d9000715 	stw	r4,28(sp)
     5f4:	1d801526 	beq	r3,r22,64c <pow+0x180>
     5f8:	00800084 	movi	r2,2
     5fc:	18801326 	beq	r3,r2,64c <pow+0x180>
     600:	00800074 	movhi	r2,1
     604:	10a2f104 	addi	r2,r2,-29756
     608:	00c00044 	movi	r3,1
     60c:	d809883a 	mov	r4,sp
     610:	dcc00515 	stw	r19,20(sp)
     614:	dd400315 	stw	r21,12(sp)
     618:	d8800115 	stw	r2,4(sp)
     61c:	d8c00015 	stw	r3,0(sp)
     620:	dc800415 	stw	r18,16(sp)
     624:	dd000215 	stw	r20,8(sp)
     628:	d8000815 	stw	zero,32(sp)
     62c:	0001f800 	call	1f80 <matherr>
     630:	10002726 	beq	r2,zero,6d0 <pow+0x204>
     634:	d8800817 	ldw	r2,32(sp)
     638:	103fe126 	beq	r2,zero,5c0 <pow+0xf4>
     63c:	00039700 	call	3970 <__errno>
     640:	d8c00817 	ldw	r3,32(sp)
     644:	10c00015 	stw	r3,0(r2)
     648:	003fdd06 	br	5c0 <pow+0xf4>
     64c:	d9000715 	stw	r4,28(sp)
     650:	d8000615 	stw	zero,24(sp)
     654:	003fda06 	br	5c0 <pow+0xf4>
     658:	9009883a 	mov	r4,r18
     65c:	980b883a 	mov	r5,r19
     660:	0001f340 	call	1f34 <finite>
     664:	103fb326 	beq	r2,zero,534 <pow+0x68>
     668:	000d883a 	mov	r6,zero
     66c:	000f883a 	mov	r7,zero
     670:	9009883a 	mov	r4,r18
     674:	980b883a 	mov	r5,r19
     678:	00030640 	call	3064 <__ltdf2>
     67c:	103fad0e 	bge	r2,zero,534 <pow+0x68>
     680:	b9000017 	ldw	r4,0(r23)
     684:	00800044 	movi	r2,1
     688:	00c00074 	movhi	r3,1
     68c:	18e2f104 	addi	r3,r3,-29756
     690:	d8800015 	stw	r2,0(sp)
     694:	d8c00115 	stw	r3,4(sp)
     698:	dd400315 	stw	r21,12(sp)
     69c:	dcc00515 	stw	r19,20(sp)
     6a0:	d8000815 	stw	zero,32(sp)
     6a4:	dd000215 	stw	r20,8(sp)
     6a8:	dc800415 	stw	r18,16(sp)
     6ac:	20005626 	beq	r4,zero,808 <pow+0x33c>
     6b0:	00bffc34 	movhi	r2,65520
     6b4:	d8800715 	stw	r2,28(sp)
     6b8:	00800084 	movi	r2,2
     6bc:	d8000615 	stw	zero,24(sp)
     6c0:	20800326 	beq	r4,r2,6d0 <pow+0x204>
     6c4:	d809883a 	mov	r4,sp
     6c8:	0001f800 	call	1f80 <matherr>
     6cc:	103fd91e 	bne	r2,zero,634 <pow+0x168>
     6d0:	00039700 	call	3970 <__errno>
     6d4:	00c00844 	movi	r3,33
     6d8:	10c00015 	stw	r3,0(r2)
     6dc:	003fd506 	br	634 <pow+0x168>
     6e0:	8009883a 	mov	r4,r16
     6e4:	880b883a 	mov	r5,r17
     6e8:	0001f340 	call	1f34 <finite>
     6ec:	10002426 	beq	r2,zero,780 <pow+0x2b4>
     6f0:	000d883a 	mov	r6,zero
     6f4:	000f883a 	mov	r7,zero
     6f8:	8009883a 	mov	r4,r16
     6fc:	880b883a 	mov	r5,r17
     700:	0002ecc0 	call	2ecc <__eqdf2>
     704:	103f8b1e 	bne	r2,zero,534 <pow+0x68>
     708:	a009883a 	mov	r4,r20
     70c:	a80b883a 	mov	r5,r21
     710:	0001f340 	call	1f34 <finite>
     714:	103f8726 	beq	r2,zero,534 <pow+0x68>
     718:	9009883a 	mov	r4,r18
     71c:	980b883a 	mov	r5,r19
     720:	0001f340 	call	1f34 <finite>
     724:	103f8326 	beq	r2,zero,534 <pow+0x68>
     728:	b9000017 	ldw	r4,0(r23)
     72c:	00800104 	movi	r2,4
     730:	d8800015 	stw	r2,0(sp)
     734:	00c00074 	movhi	r3,1
     738:	18e2f104 	addi	r3,r3,-29756
     73c:	00800084 	movi	r2,2
     740:	d8c00115 	stw	r3,4(sp)
     744:	dd400315 	stw	r21,12(sp)
     748:	dcc00515 	stw	r19,20(sp)
     74c:	d8000815 	stw	zero,32(sp)
     750:	dd000215 	stw	r20,8(sp)
     754:	dc800415 	stw	r18,16(sp)
     758:	d8000615 	stw	zero,24(sp)
     75c:	d8000715 	stw	zero,28(sp)
     760:	20800326 	beq	r4,r2,770 <pow+0x2a4>
     764:	d809883a 	mov	r4,sp
     768:	0001f800 	call	1f80 <matherr>
     76c:	103fb11e 	bne	r2,zero,634 <pow+0x168>
     770:	00039700 	call	3970 <__errno>
     774:	00c00884 	movi	r3,34
     778:	10c00015 	stw	r3,0(r2)
     77c:	003fad06 	br	634 <pow+0x168>
     780:	a009883a 	mov	r4,r20
     784:	a80b883a 	mov	r5,r21
     788:	0001f340 	call	1f34 <finite>
     78c:	103fd826 	beq	r2,zero,6f0 <pow+0x224>
     790:	9009883a 	mov	r4,r18
     794:	980b883a 	mov	r5,r19
     798:	0001f340 	call	1f34 <finite>
     79c:	103fd426 	beq	r2,zero,6f0 <pow+0x224>
     7a0:	880b883a 	mov	r5,r17
     7a4:	8009883a 	mov	r4,r16
     7a8:	0001f500 	call	1f50 <__isnand>
     7ac:	10001926 	beq	r2,zero,814 <pow+0x348>
     7b0:	bc000017 	ldw	r16,0(r23)
     7b4:	00800044 	movi	r2,1
     7b8:	00c00074 	movhi	r3,1
     7bc:	18e2f104 	addi	r3,r3,-29756
     7c0:	d8800015 	stw	r2,0(sp)
     7c4:	d8c00115 	stw	r3,4(sp)
     7c8:	dd400315 	stw	r21,12(sp)
     7cc:	dcc00515 	stw	r19,20(sp)
     7d0:	d8000815 	stw	zero,32(sp)
     7d4:	dd000215 	stw	r20,8(sp)
     7d8:	dc800415 	stw	r18,16(sp)
     7dc:	80000a26 	beq	r16,zero,808 <pow+0x33c>
     7e0:	0009883a 	mov	r4,zero
     7e4:	000d883a 	mov	r6,zero
     7e8:	000b883a 	mov	r5,zero
     7ec:	000f883a 	mov	r7,zero
     7f0:	0002c740 	call	2c74 <__divdf3>
     7f4:	d8800615 	stw	r2,24(sp)
     7f8:	00800084 	movi	r2,2
     7fc:	d8c00715 	stw	r3,28(sp)
     800:	80bfb01e 	bne	r16,r2,6c4 <pow+0x1f8>
     804:	003fb206 	br	6d0 <pow+0x204>
     808:	d8000615 	stw	zero,24(sp)
     80c:	d8000715 	stw	zero,28(sp)
     810:	003fac06 	br	6c4 <pow+0x1f8>
     814:	b8800017 	ldw	r2,0(r23)
     818:	00c000c4 	movi	r3,3
     81c:	01000074 	movhi	r4,1
     820:	2122f104 	addi	r4,r4,-29756
     824:	d8c00015 	stw	r3,0(sp)
     828:	d9000115 	stw	r4,4(sp)
     82c:	d8000815 	stw	zero,32(sp)
     830:	dd000215 	stw	r20,8(sp)
     834:	dd400315 	stw	r21,12(sp)
     838:	dc800415 	stw	r18,16(sp)
     83c:	dcc00515 	stw	r19,20(sp)
     840:	1000251e 	bne	r2,zero,8d8 <pow+0x40c>
     844:	05b80034 	movhi	r22,57344
     848:	0091fc34 	movhi	r2,18416
     84c:	10bfffc4 	addi	r2,r2,-1
     850:	000d883a 	mov	r6,zero
     854:	000f883a 	mov	r7,zero
     858:	a80b883a 	mov	r5,r21
     85c:	a009883a 	mov	r4,r20
     860:	d8800715 	stw	r2,28(sp)
     864:	dd800615 	stw	r22,24(sp)
     868:	00030640 	call	3064 <__ltdf2>
     86c:	103fbd0e 	bge	r2,zero,764 <pow+0x298>
     870:	0005883a 	mov	r2,zero
     874:	00cff834 	movhi	r3,16352
     878:	180f883a 	mov	r7,r3
     87c:	100d883a 	mov	r6,r2
     880:	980b883a 	mov	r5,r19
     884:	9009883a 	mov	r4,r18
     888:	00028b00 	call	28b0 <__muldf3>
     88c:	1009883a 	mov	r4,r2
     890:	180b883a 	mov	r5,r3
     894:	1021883a 	mov	r16,r2
     898:	1823883a 	mov	r17,r3
     89c:	0001f980 	call	1f98 <rint>
     8a0:	180f883a 	mov	r7,r3
     8a4:	8009883a 	mov	r4,r16
     8a8:	880b883a 	mov	r5,r17
     8ac:	100d883a 	mov	r6,r2
     8b0:	0002f540 	call	2f54 <__nedf2>
     8b4:	10000426 	beq	r2,zero,8c8 <pow+0x3fc>
     8b8:	00b1fc34 	movhi	r2,51184
     8bc:	10bfffc4 	addi	r2,r2,-1
     8c0:	dd800615 	stw	r22,24(sp)
     8c4:	d8800715 	stw	r2,28(sp)
     8c8:	b8c00017 	ldw	r3,0(r23)
     8cc:	00800084 	movi	r2,2
     8d0:	18bfa41e 	bne	r3,r2,764 <pow+0x298>
     8d4:	003fa606 	br	770 <pow+0x2a4>
     8d8:	009ffc34 	movhi	r2,32752
     8dc:	000d883a 	mov	r6,zero
     8e0:	000f883a 	mov	r7,zero
     8e4:	a80b883a 	mov	r5,r21
     8e8:	a009883a 	mov	r4,r20
     8ec:	d8800715 	stw	r2,28(sp)
     8f0:	d8000615 	stw	zero,24(sp)
     8f4:	00030640 	call	3064 <__ltdf2>
     8f8:	103ff30e 	bge	r2,zero,8c8 <pow+0x3fc>
     8fc:	0005883a 	mov	r2,zero
     900:	00cff834 	movhi	r3,16352
     904:	180f883a 	mov	r7,r3
     908:	100d883a 	mov	r6,r2
     90c:	980b883a 	mov	r5,r19
     910:	9009883a 	mov	r4,r18
     914:	00028b00 	call	28b0 <__muldf3>
     918:	1009883a 	mov	r4,r2
     91c:	180b883a 	mov	r5,r3
     920:	1021883a 	mov	r16,r2
     924:	1823883a 	mov	r17,r3
     928:	0001f980 	call	1f98 <rint>
     92c:	180f883a 	mov	r7,r3
     930:	8009883a 	mov	r4,r16
     934:	880b883a 	mov	r5,r17
     938:	100d883a 	mov	r6,r2
     93c:	0002f540 	call	2f54 <__nedf2>
     940:	103fe126 	beq	r2,zero,8c8 <pow+0x3fc>
     944:	00bffc34 	movhi	r2,65520
     948:	d8800715 	stw	r2,28(sp)
     94c:	d8000615 	stw	zero,24(sp)
     950:	003fdd06 	br	8c8 <pow+0x3fc>

00000954 <__ieee754_pow>:
     954:	deffbb04 	addi	sp,sp,-276
     958:	3005883a 	mov	r2,r6
     95c:	dd404015 	stw	r21,256(sp)
     960:	dd003f15 	stw	r20,252(sp)
     964:	d9802815 	stw	r6,160(sp)
     968:	2029883a 	mov	r20,r4
     96c:	282b883a 	mov	r21,r5
     970:	3009883a 	mov	r4,r6
     974:	380b883a 	mov	r5,r7
     978:	01a00034 	movhi	r6,32768
     97c:	31bfffc4 	addi	r6,r6,-1
     980:	dc003b15 	stw	r16,236(sp)
     984:	29a0703a 	and	r16,r5,r6
     988:	1404b03a 	or	r2,r2,r16
     98c:	dd804115 	stw	r22,260(sp)
     990:	dc403c15 	stw	r17,240(sp)
     994:	d9c02915 	stw	r7,164(sp)
     998:	382d883a 	mov	r22,r7
     99c:	dfc04415 	stw	ra,272(sp)
     9a0:	200f883a 	mov	r7,r4
     9a4:	df004315 	stw	fp,268(sp)
     9a8:	ddc04215 	stw	r23,264(sp)
     9ac:	dcc03e15 	stw	r19,248(sp)
     9b0:	dc803d15 	stw	r18,244(sp)
     9b4:	a023883a 	mov	r17,r20
     9b8:	2809883a 	mov	r4,r5
     9bc:	10000826 	beq	r2,zero,9e0 <__ieee754_pow+0x8c>
     9c0:	a9a4703a 	and	r18,r21,r6
     9c4:	009ffc34 	movhi	r2,32752
     9c8:	a827883a 	mov	r19,r21
     9cc:	1480180e 	bge	r2,r18,a30 <__ieee754_pow+0xdc>
     9d0:	00b00434 	movhi	r2,49168
     9d4:	9085883a 	add	r2,r18,r2
     9d8:	8884b03a 	or	r2,r17,r2
     9dc:	1000321e 	bne	r2,zero,aa8 <__ieee754_pow+0x154>
     9e0:	0009883a 	mov	r4,zero
     9e4:	014ffc34 	movhi	r5,16368
     9e8:	d9002815 	stw	r4,160(sp)
     9ec:	d9402915 	stw	r5,164(sp)
     9f0:	d9002817 	ldw	r4,160(sp)
     9f4:	d9402917 	ldw	r5,164(sp)
     9f8:	2005883a 	mov	r2,r4
     9fc:	2807883a 	mov	r3,r5
     a00:	dfc04417 	ldw	ra,272(sp)
     a04:	df004317 	ldw	fp,268(sp)
     a08:	ddc04217 	ldw	r23,264(sp)
     a0c:	dd804117 	ldw	r22,260(sp)
     a10:	dd404017 	ldw	r21,256(sp)
     a14:	dd003f17 	ldw	r20,252(sp)
     a18:	dcc03e17 	ldw	r19,248(sp)
     a1c:	dc803d17 	ldw	r18,244(sp)
     a20:	dc403c17 	ldw	r17,240(sp)
     a24:	dc003b17 	ldw	r16,236(sp)
     a28:	dec04504 	addi	sp,sp,276
     a2c:	f800283a 	ret
     a30:	90802b26 	beq	r18,r2,ae0 <__ieee754_pow+0x18c>
     a34:	143fe616 	blt	r2,r16,9d0 <__ieee754_pow+0x7c>
     a38:	80806126 	beq	r16,r2,bc0 <__ieee754_pow+0x26c>
     a3c:	982e403a 	cmpge	r23,r19,zero
     a40:	b8004e26 	beq	r23,zero,b7c <__ieee754_pow+0x228>
     a44:	0039883a 	mov	fp,zero
     a48:	3800281e 	bne	r7,zero,aec <__ieee754_pow+0x198>
     a4c:	009ffc34 	movhi	r2,32752
     a50:	80804f26 	beq	r16,r2,b90 <__ieee754_pow+0x23c>
     a54:	008ffc34 	movhi	r2,16368
     a58:	80808226 	beq	r16,r2,c64 <__ieee754_pow+0x310>
     a5c:	00900034 	movhi	r2,16384
     a60:	20828426 	beq	r4,r2,1474 <__ieee754_pow+0xb20>
     a64:	008ff834 	movhi	r2,16352
     a68:	2080201e 	bne	r4,r2,aec <__ieee754_pow+0x198>
     a6c:	98001f16 	blt	r19,zero,aec <__ieee754_pow+0x198>
     a70:	a80b883a 	mov	r5,r21
     a74:	a009883a 	mov	r4,r20
     a78:	dfc04417 	ldw	ra,272(sp)
     a7c:	df004317 	ldw	fp,268(sp)
     a80:	ddc04217 	ldw	r23,264(sp)
     a84:	dd804117 	ldw	r22,260(sp)
     a88:	dd404017 	ldw	r21,256(sp)
     a8c:	dd003f17 	ldw	r20,252(sp)
     a90:	dcc03e17 	ldw	r19,248(sp)
     a94:	dc803d17 	ldw	r18,244(sp)
     a98:	dc403c17 	ldw	r17,240(sp)
     a9c:	dc003b17 	ldw	r16,236(sp)
     aa0:	dec04504 	addi	sp,sp,276
     aa4:	0001c541 	jmpi	1c54 <__ieee754_sqrt>
     aa8:	01000074 	movhi	r4,1
     aac:	2122f204 	addi	r4,r4,-29752
     ab0:	dfc04417 	ldw	ra,272(sp)
     ab4:	df004317 	ldw	fp,268(sp)
     ab8:	ddc04217 	ldw	r23,264(sp)
     abc:	dd804117 	ldw	r22,260(sp)
     ac0:	dd404017 	ldw	r21,256(sp)
     ac4:	dd003f17 	ldw	r20,252(sp)
     ac8:	dcc03e17 	ldw	r19,248(sp)
     acc:	dc803d17 	ldw	r18,244(sp)
     ad0:	dc403c17 	ldw	r17,240(sp)
     ad4:	dc003b17 	ldw	r16,236(sp)
     ad8:	dec04504 	addi	sp,sp,276
     adc:	0001f881 	jmpi	1f88 <nan>
     ae0:	a03fbb1e 	bne	r20,zero,9d0 <__ieee754_pow+0x7c>
     ae4:	003fd306 	br	a34 <__ieee754_pow+0xe0>
     ae8:	0039883a 	mov	fp,zero
     aec:	a009883a 	mov	r4,r20
     af0:	a80b883a 	mov	r5,r21
     af4:	0001f1c0 	call	1f1c <fabs>
     af8:	1015883a 	mov	r10,r2
     afc:	1817883a 	mov	r11,r3
     b00:	88001226 	beq	r17,zero,b4c <__ieee754_pow+0x1f8>
     b04:	9804d7fa 	srli	r2,r19,31
     b08:	10bfffc4 	addi	r2,r2,-1
     b0c:	1706b03a 	or	r3,r2,fp
     b10:	d8802515 	stw	r2,148(sp)
     b14:	18002c1e 	bne	r3,zero,bc8 <__ieee754_pow+0x274>
     b18:	a80f883a 	mov	r7,r21
     b1c:	a009883a 	mov	r4,r20
     b20:	a80b883a 	mov	r5,r21
     b24:	a00d883a 	mov	r6,r20
     b28:	00027bc0 	call	27bc <__subdf3>
     b2c:	1009883a 	mov	r4,r2
     b30:	180b883a 	mov	r5,r3
     b34:	100d883a 	mov	r6,r2
     b38:	180f883a 	mov	r7,r3
     b3c:	0002c740 	call	2c74 <__divdf3>
     b40:	d8802815 	stw	r2,160(sp)
     b44:	d8c02915 	stw	r3,164(sp)
     b48:	003fa906 	br	9f0 <__ieee754_pow+0x9c>
     b4c:	009ffc34 	movhi	r2,32752
     b50:	90800326 	beq	r18,r2,b60 <__ieee754_pow+0x20c>
     b54:	90000226 	beq	r18,zero,b60 <__ieee754_pow+0x20c>
     b58:	008ffc34 	movhi	r2,16368
     b5c:	90bfe91e 	bne	r18,r2,b04 <__ieee754_pow+0x1b0>
     b60:	b0026316 	blt	r22,zero,14f0 <__ieee754_pow+0xb9c>
     b64:	5011883a 	mov	r8,r10
     b68:	5813883a 	mov	r9,r11
     b6c:	b8023126 	beq	r23,zero,1434 <__ieee754_pow+0xae0>
     b70:	da002815 	stw	r8,160(sp)
     b74:	da402915 	stw	r9,164(sp)
     b78:	003f9d06 	br	9f0 <__ieee754_pow+0x9c>
     b7c:	0090d034 	movhi	r2,17216
     b80:	10bfffc4 	addi	r2,r2,-1
     b84:	1400270e 	bge	r2,r16,c24 <__ieee754_pow+0x2d0>
     b88:	07000084 	movi	fp,2
     b8c:	003fae06 	br	a48 <__ieee754_pow+0xf4>
     b90:	00b00434 	movhi	r2,49168
     b94:	9085883a 	add	r2,r18,r2
     b98:	8884b03a 	or	r2,r17,r2
     b9c:	103f9026 	beq	r2,zero,9e0 <__ieee754_pow+0x8c>
     ba0:	008ffc34 	movhi	r2,16368
     ba4:	10bfffc4 	addi	r2,r2,-1
     ba8:	1482d00e 	bge	r2,r18,16ec <__ieee754_pow+0xd98>
     bac:	b03f900e 	bge	r22,zero,9f0 <__ieee754_pow+0x9c>
     bb0:	0005883a 	mov	r2,zero
     bb4:	d8802815 	stw	r2,160(sp)
     bb8:	d8802915 	stw	r2,164(sp)
     bbc:	003f8c06 	br	9f0 <__ieee754_pow+0x9c>
     bc0:	383f9e26 	beq	r7,zero,a3c <__ieee754_pow+0xe8>
     bc4:	003f8206 	br	9d0 <__ieee754_pow+0x7c>
     bc8:	00907834 	movhi	r2,16864
     bcc:	1400290e 	bge	r2,r16,c74 <__ieee754_pow+0x320>
     bd0:	0090fc34 	movhi	r2,17392
     bd4:	1402500e 	bge	r2,r16,1518 <__ieee754_pow+0xbc4>
     bd8:	008ffc34 	movhi	r2,16368
     bdc:	10bfffc4 	addi	r2,r2,-1
     be0:	14800b0e 	bge	r2,r18,c10 <__ieee754_pow+0x2bc>
     be4:	05800b0e 	bge	zero,r22,c14 <__ieee754_pow+0x2c0>
     be8:	00a20034 	movhi	r2,34816
     bec:	109d6704 	addi	r2,r2,30108
     bf0:	00df8e34 	movhi	r3,32312
     bf4:	18f90f04 	addi	r3,r3,-7108
     bf8:	100d883a 	mov	r6,r2
     bfc:	180f883a 	mov	r7,r3
     c00:	1009883a 	mov	r4,r2
     c04:	180b883a 	mov	r5,r3
     c08:	00028b00 	call	28b0 <__muldf3>
     c0c:	003fcc06 	br	b40 <__ieee754_pow+0x1ec>
     c10:	b03ff516 	blt	r22,zero,be8 <__ieee754_pow+0x294>
     c14:	0007883a 	mov	r3,zero
     c18:	d8c02815 	stw	r3,160(sp)
     c1c:	d8c02915 	stw	r3,164(sp)
     c20:	003f7306 	br	9f0 <__ieee754_pow+0x9c>
     c24:	008ffc34 	movhi	r2,16368
     c28:	10bfffc4 	addi	r2,r2,-1
     c2c:	143f850e 	bge	r2,r16,a44 <__ieee754_pow+0xf0>
     c30:	8005d53a 	srai	r2,r16,20
     c34:	01400504 	movi	r5,20
     c38:	10ff0044 	addi	r3,r2,-1023
     c3c:	28c3e10e 	bge	r5,r3,1bc4 <__ieee754_pow+0x1270>
     c40:	00800d04 	movi	r2,52
     c44:	10c5c83a 	sub	r2,r2,r3
     c48:	3886d83a 	srl	r3,r7,r2
     c4c:	1884983a 	sll	r2,r3,r2
     c50:	38bf7c1e 	bne	r7,r2,a44 <__ieee754_pow+0xf0>
     c54:	18c0004c 	andi	r3,r3,1
     c58:	00800084 	movi	r2,2
     c5c:	10f9c83a 	sub	fp,r2,r3
     c60:	003f7906 	br	a48 <__ieee754_pow+0xf4>
     c64:	b0038516 	blt	r22,zero,1a7c <__ieee754_pow+0x1128>
     c68:	dd002815 	stw	r20,160(sp)
     c6c:	dd402915 	stw	r21,164(sp)
     c70:	003f5f06 	br	9f0 <__ieee754_pow+0x9c>
     c74:	00800434 	movhi	r2,16
     c78:	10bfffc4 	addi	r2,r2,-1
     c7c:	1482900e 	bge	r2,r18,16c0 <__ieee754_pow+0xd6c>
     c80:	000b883a 	mov	r5,zero
     c84:	9005d53a 	srai	r2,r18,20
     c88:	00c00434 	movhi	r3,16
     c8c:	18ffffc4 	addi	r3,r3,-1
     c90:	90c8703a 	and	r4,r18,r3
     c94:	2887883a 	add	r3,r5,r2
     c98:	18bf0044 	addi	r2,r3,-1023
     c9c:	d8800015 	stw	r2,0(sp)
     ca0:	00800134 	movhi	r2,4
     ca4:	10a62384 	addi	r2,r2,-26482
     ca8:	250ffc34 	orhi	r20,r4,16368
     cac:	1101ee0e 	bge	r2,r4,1468 <__ieee754_pow+0xb14>
     cb0:	00800334 	movhi	r2,12
     cb4:	10ad9e44 	addi	r2,r2,-18823
     cb8:	1101e716 	blt	r2,r4,1458 <__ieee754_pow+0xb04>
     cbc:	01000044 	movi	r4,1
     cc0:	04000334 	movhi	r16,12
     cc4:	200890fa 	slli	r4,r4,3
     cc8:	da800115 	stw	r10,4(sp)
     ccc:	dd000215 	stw	r20,8(sp)
     cd0:	d9002c15 	stw	r4,176(sp)
     cd4:	d9402c17 	ldw	r5,176(sp)
     cd8:	01000074 	movhi	r4,1
     cdc:	2122f304 	addi	r4,r4,-29748
     ce0:	a02bd07a 	srai	r21,r20,1
     ce4:	2909883a 	add	r4,r5,r4
     ce8:	25800017 	ldw	r22,0(r4)
     cec:	25c00117 	ldw	r23,4(r4)
     cf0:	a00b883a 	mov	r5,r20
     cf4:	5009883a 	mov	r4,r10
     cf8:	b00d883a 	mov	r6,r22
     cfc:	b80f883a 	mov	r7,r23
     d00:	00027bc0 	call	27bc <__subdf3>
     d04:	d9000117 	ldw	r4,4(sp)
     d08:	a00b883a 	mov	r5,r20
     d0c:	b00d883a 	mov	r6,r22
     d10:	b80f883a 	mov	r7,r23
     d14:	1025883a 	mov	r18,r2
     d18:	1827883a 	mov	r19,r3
     d1c:	000283c0 	call	283c <__adddf3>
     d20:	0011883a 	mov	r8,zero
     d24:	024ffc34 	movhi	r9,16368
     d28:	480b883a 	mov	r5,r9
     d2c:	4009883a 	mov	r4,r8
     d30:	180f883a 	mov	r7,r3
     d34:	100d883a 	mov	r6,r2
     d38:	0002c740 	call	2c74 <__divdf3>
     d3c:	d8c02e15 	stw	r3,184(sp)
     d40:	d8800f15 	stw	r2,60(sp)
     d44:	d8802d15 	stw	r2,180(sp)
     d48:	d8802e17 	ldw	r2,184(sp)
     d4c:	d9800f17 	ldw	r6,60(sp)
     d50:	9009883a 	mov	r4,r18
     d54:	980b883a 	mov	r5,r19
     d58:	100f883a 	mov	r7,r2
     d5c:	dc800b15 	stw	r18,44(sp)
     d60:	dcc00c15 	stw	r19,48(sp)
     d64:	d8801015 	stw	r2,64(sp)
     d68:	00028b00 	call	28b0 <__muldf3>
     d6c:	d8c03015 	stw	r3,192(sp)
     d70:	d9003017 	ldw	r4,192(sp)
     d74:	d8802f15 	stw	r2,188(sp)
     d78:	d8800315 	stw	r2,12(sp)
     d7c:	ad480034 	orhi	r21,r21,8192
     d80:	0005883a 	mov	r2,zero
     d84:	ac2b883a 	add	r21,r21,r16
     d88:	000b883a 	mov	r5,zero
     d8c:	1021883a 	mov	r16,r2
     d90:	2005883a 	mov	r2,r4
     d94:	800d883a 	mov	r6,r16
     d98:	a80f883a 	mov	r7,r21
     d9c:	d9000415 	stw	r4,16(sp)
     da0:	d9002715 	stw	r4,156(sp)
     da4:	d9402615 	stw	r5,152(sp)
     da8:	d9401615 	stw	r5,88(sp)
     dac:	d9001715 	stw	r4,92(sp)
     db0:	100b883a 	mov	r5,r2
     db4:	0009883a 	mov	r4,zero
     db8:	00028b00 	call	28b0 <__muldf3>
     dbc:	d9000b17 	ldw	r4,44(sp)
     dc0:	980b883a 	mov	r5,r19
     dc4:	180f883a 	mov	r7,r3
     dc8:	100d883a 	mov	r6,r2
     dcc:	00027bc0 	call	27bc <__subdf3>
     dd0:	8009883a 	mov	r4,r16
     dd4:	a80b883a 	mov	r5,r21
     dd8:	b80f883a 	mov	r7,r23
     ddc:	b00d883a 	mov	r6,r22
     de0:	1021883a 	mov	r16,r2
     de4:	1823883a 	mov	r17,r3
     de8:	00027bc0 	call	27bc <__subdf3>
     dec:	d9000117 	ldw	r4,4(sp)
     df0:	a00b883a 	mov	r5,r20
     df4:	180f883a 	mov	r7,r3
     df8:	100d883a 	mov	r6,r2
     dfc:	00027bc0 	call	27bc <__subdf3>
     e00:	d9001617 	ldw	r4,88(sp)
     e04:	d9402717 	ldw	r5,156(sp)
     e08:	180f883a 	mov	r7,r3
     e0c:	100d883a 	mov	r6,r2
     e10:	00028b00 	call	28b0 <__muldf3>
     e14:	180f883a 	mov	r7,r3
     e18:	880b883a 	mov	r5,r17
     e1c:	8009883a 	mov	r4,r16
     e20:	100d883a 	mov	r6,r2
     e24:	00027bc0 	call	27bc <__subdf3>
     e28:	d9000f17 	ldw	r4,60(sp)
     e2c:	d9402e17 	ldw	r5,184(sp)
     e30:	180f883a 	mov	r7,r3
     e34:	100d883a 	mov	r6,r2
     e38:	00028b00 	call	28b0 <__muldf3>
     e3c:	d9000317 	ldw	r4,12(sp)
     e40:	d9403017 	ldw	r5,192(sp)
     e44:	d8803115 	stw	r2,196(sp)
     e48:	200d883a 	mov	r6,r4
     e4c:	280f883a 	mov	r7,r5
     e50:	d8c03215 	stw	r3,200(sp)
     e54:	00028b00 	call	28b0 <__muldf3>
     e58:	1009883a 	mov	r4,r2
     e5c:	180b883a 	mov	r5,r3
     e60:	100d883a 	mov	r6,r2
     e64:	180f883a 	mov	r7,r3
     e68:	1021883a 	mov	r16,r2
     e6c:	1823883a 	mov	r17,r3
     e70:	00028b00 	call	28b0 <__muldf3>
     e74:	02129174 	movhi	r8,19013
     e78:	4213bbc4 	addi	r8,r8,20207
     e7c:	024ff2b4 	movhi	r9,16330
     e80:	4a5f8a04 	addi	r9,r9,32296
     e84:	480f883a 	mov	r7,r9
     e88:	8009883a 	mov	r4,r16
     e8c:	880b883a 	mov	r5,r17
     e90:	400d883a 	mov	r6,r8
     e94:	1029883a 	mov	r20,r2
     e98:	182b883a 	mov	r21,r3
     e9c:	00028b00 	call	28b0 <__muldf3>
     ea0:	0224f2b4 	movhi	r8,37834
     ea4:	4236d944 	addi	r8,r8,-9371
     ea8:	024ff3b4 	movhi	r9,16334
     eac:	4a619284 	addi	r9,r9,-31158
     eb0:	480f883a 	mov	r7,r9
     eb4:	400d883a 	mov	r6,r8
     eb8:	180b883a 	mov	r5,r3
     ebc:	1009883a 	mov	r4,r2
     ec0:	000283c0 	call	283c <__adddf3>
     ec4:	180f883a 	mov	r7,r3
     ec8:	8009883a 	mov	r4,r16
     ecc:	880b883a 	mov	r5,r17
     ed0:	100d883a 	mov	r6,r2
     ed4:	00028b00 	call	28b0 <__muldf3>
     ed8:	022a4774 	movhi	r8,43293
     edc:	42104044 	addi	r8,r8,16641
     ee0:	024ff474 	movhi	r9,16337
     ee4:	4a5d1804 	addi	r9,r9,29792
     ee8:	480f883a 	mov	r7,r9
     eec:	400d883a 	mov	r6,r8
     ef0:	180b883a 	mov	r5,r3
     ef4:	1009883a 	mov	r4,r2
     ef8:	000283c0 	call	283c <__adddf3>
     efc:	180f883a 	mov	r7,r3
     f00:	8009883a 	mov	r4,r16
     f04:	880b883a 	mov	r5,r17
     f08:	100d883a 	mov	r6,r2
     f0c:	00028b00 	call	28b0 <__muldf3>
     f10:	021463f4 	movhi	r8,20879
     f14:	42099344 	addi	r8,r8,9805
     f18:	024ff574 	movhi	r9,16341
     f1c:	4a555544 	addi	r9,r9,21845
     f20:	480f883a 	mov	r7,r9
     f24:	400d883a 	mov	r6,r8
     f28:	180b883a 	mov	r5,r3
     f2c:	1009883a 	mov	r4,r2
     f30:	000283c0 	call	283c <__adddf3>
     f34:	180f883a 	mov	r7,r3
     f38:	8009883a 	mov	r4,r16
     f3c:	880b883a 	mov	r5,r17
     f40:	100d883a 	mov	r6,r2
     f44:	00028b00 	call	28b0 <__muldf3>
     f48:	0236dc34 	movhi	r8,56176
     f4c:	422affc4 	addi	r8,r8,-21505
     f50:	024ff6f4 	movhi	r9,16347
     f54:	4a5b6d84 	addi	r9,r9,28086
     f58:	480f883a 	mov	r7,r9
     f5c:	400d883a 	mov	r6,r8
     f60:	180b883a 	mov	r5,r3
     f64:	1009883a 	mov	r4,r2
     f68:	000283c0 	call	283c <__adddf3>
     f6c:	180f883a 	mov	r7,r3
     f70:	8009883a 	mov	r4,r16
     f74:	880b883a 	mov	r5,r17
     f78:	100d883a 	mov	r6,r2
     f7c:	00028b00 	call	28b0 <__muldf3>
     f80:	020cccf4 	movhi	r8,13107
     f84:	420cc0c4 	addi	r8,r8,13059
     f88:	024ff8f4 	movhi	r9,16355
     f8c:	4a4cccc4 	addi	r9,r9,13107
     f90:	480f883a 	mov	r7,r9
     f94:	400d883a 	mov	r6,r8
     f98:	180b883a 	mov	r5,r3
     f9c:	1009883a 	mov	r4,r2
     fa0:	000283c0 	call	283c <__adddf3>
     fa4:	180f883a 	mov	r7,r3
     fa8:	a80b883a 	mov	r5,r21
     fac:	a009883a 	mov	r4,r20
     fb0:	100d883a 	mov	r6,r2
     fb4:	00028b00 	call	28b0 <__muldf3>
     fb8:	d9000317 	ldw	r4,12(sp)
     fbc:	d9403017 	ldw	r5,192(sp)
     fc0:	d9801617 	ldw	r6,88(sp)
     fc4:	d9c02717 	ldw	r7,156(sp)
     fc8:	1021883a 	mov	r16,r2
     fcc:	1823883a 	mov	r17,r3
     fd0:	000283c0 	call	283c <__adddf3>
     fd4:	d9003117 	ldw	r4,196(sp)
     fd8:	d9403217 	ldw	r5,200(sp)
     fdc:	180f883a 	mov	r7,r3
     fe0:	100d883a 	mov	r6,r2
     fe4:	d9001415 	stw	r4,80(sp)
     fe8:	d9401515 	stw	r5,84(sp)
     fec:	00028b00 	call	28b0 <__muldf3>
     ff0:	180f883a 	mov	r7,r3
     ff4:	8009883a 	mov	r4,r16
     ff8:	880b883a 	mov	r5,r17
     ffc:	100d883a 	mov	r6,r2
    1000:	000283c0 	call	283c <__adddf3>
    1004:	d9001617 	ldw	r4,88(sp)
    1008:	d9402717 	ldw	r5,156(sp)
    100c:	d8803315 	stw	r2,204(sp)
    1010:	200d883a 	mov	r6,r4
    1014:	280f883a 	mov	r7,r5
    1018:	d8c03415 	stw	r3,208(sp)
    101c:	00028b00 	call	28b0 <__muldf3>
    1020:	182f883a 	mov	r23,r3
    1024:	05500234 	movhi	r21,16392
    1028:	0029883a 	mov	r20,zero
    102c:	b80b883a 	mov	r5,r23
    1030:	a00d883a 	mov	r6,r20
    1034:	a80f883a 	mov	r7,r21
    1038:	1009883a 	mov	r4,r2
    103c:	d8800715 	stw	r2,28(sp)
    1040:	d8c00815 	stw	r3,32(sp)
    1044:	000283c0 	call	283c <__adddf3>
    1048:	d9003317 	ldw	r4,204(sp)
    104c:	d9403417 	ldw	r5,208(sp)
    1050:	180f883a 	mov	r7,r3
    1054:	100d883a 	mov	r6,r2
    1058:	d9000515 	stw	r4,20(sp)
    105c:	d9400615 	stw	r5,24(sp)
    1060:	000283c0 	call	283c <__adddf3>
    1064:	d9001617 	ldw	r4,88(sp)
    1068:	d9402717 	ldw	r5,156(sp)
    106c:	0025883a 	mov	r18,zero
    1070:	900d883a 	mov	r6,r18
    1074:	180f883a 	mov	r7,r3
    1078:	1823883a 	mov	r17,r3
    107c:	00028b00 	call	28b0 <__muldf3>
    1080:	d9001417 	ldw	r4,80(sp)
    1084:	d9403217 	ldw	r5,200(sp)
    1088:	880f883a 	mov	r7,r17
    108c:	900d883a 	mov	r6,r18
    1090:	d8803515 	stw	r2,212(sp)
    1094:	d8c03615 	stw	r3,216(sp)
    1098:	00028b00 	call	28b0 <__muldf3>
    109c:	a80f883a 	mov	r7,r21
    10a0:	880b883a 	mov	r5,r17
    10a4:	000d883a 	mov	r6,zero
    10a8:	9009883a 	mov	r4,r18
    10ac:	1021883a 	mov	r16,r2
    10b0:	1823883a 	mov	r17,r3
    10b4:	00027bc0 	call	27bc <__subdf3>
    10b8:	d9800717 	ldw	r6,28(sp)
    10bc:	b80f883a 	mov	r7,r23
    10c0:	180b883a 	mov	r5,r3
    10c4:	1009883a 	mov	r4,r2
    10c8:	00027bc0 	call	27bc <__subdf3>
    10cc:	d9000517 	ldw	r4,20(sp)
    10d0:	d9403417 	ldw	r5,208(sp)
    10d4:	180f883a 	mov	r7,r3
    10d8:	100d883a 	mov	r6,r2
    10dc:	00027bc0 	call	27bc <__subdf3>
    10e0:	d9000317 	ldw	r4,12(sp)
    10e4:	d9403017 	ldw	r5,192(sp)
    10e8:	180f883a 	mov	r7,r3
    10ec:	100d883a 	mov	r6,r2
    10f0:	00028b00 	call	28b0 <__muldf3>
    10f4:	180f883a 	mov	r7,r3
    10f8:	880b883a 	mov	r5,r17
    10fc:	8009883a 	mov	r4,r16
    1100:	100d883a 	mov	r6,r2
    1104:	000283c0 	call	283c <__adddf3>
    1108:	102d883a 	mov	r22,r2
    110c:	d9003617 	ldw	r4,216(sp)
    1110:	d8803517 	ldw	r2,212(sp)
    1114:	d9403617 	ldw	r5,216(sp)
    1118:	182f883a 	mov	r23,r3
    111c:	b00d883a 	mov	r6,r22
    1120:	b80f883a 	mov	r7,r23
    1124:	d9000a15 	stw	r4,40(sp)
    1128:	1009883a 	mov	r4,r2
    112c:	054ffbf4 	movhi	r21,16367
    1130:	ad71c244 	addi	r21,r21,-14583
    1134:	dd800d15 	stw	r22,52(sp)
    1138:	ddc00e15 	stw	r23,56(sp)
    113c:	05380034 	movhi	r20,57344
    1140:	d8800915 	stw	r2,36(sp)
    1144:	000283c0 	call	283c <__adddf3>
    1148:	180b883a 	mov	r5,r3
    114c:	a00d883a 	mov	r6,r20
    1150:	a80f883a 	mov	r7,r21
    1154:	9009883a 	mov	r4,r18
    1158:	1823883a 	mov	r17,r3
    115c:	00028b00 	call	28b0 <__muldf3>
    1160:	020516f4 	movhi	r8,5211
    1164:	42007d44 	addi	r8,r8,501
    1168:	026f8fb4 	movhi	r9,48702
    116c:	4a4bf804 	addi	r9,r9,12256
    1170:	480f883a 	mov	r7,r9
    1174:	400d883a 	mov	r6,r8
    1178:	880b883a 	mov	r5,r17
    117c:	9009883a 	mov	r4,r18
    1180:	d8803715 	stw	r2,220(sp)
    1184:	d8c03815 	stw	r3,224(sp)
    1188:	00028b00 	call	28b0 <__muldf3>
    118c:	d9800917 	ldw	r6,36(sp)
    1190:	d9c03617 	ldw	r7,216(sp)
    1194:	880b883a 	mov	r5,r17
    1198:	9009883a 	mov	r4,r18
    119c:	1021883a 	mov	r16,r2
    11a0:	1823883a 	mov	r17,r3
    11a4:	00027bc0 	call	27bc <__subdf3>
    11a8:	d9000d17 	ldw	r4,52(sp)
    11ac:	b80b883a 	mov	r5,r23
    11b0:	180f883a 	mov	r7,r3
    11b4:	100d883a 	mov	r6,r2
    11b8:	00027bc0 	call	27bc <__subdf3>
    11bc:	180b883a 	mov	r5,r3
    11c0:	a80f883a 	mov	r7,r21
    11c4:	01b70eb4 	movhi	r6,56378
    11c8:	3180ff44 	addi	r6,r6,1021
    11cc:	1009883a 	mov	r4,r2
    11d0:	00028b00 	call	28b0 <__muldf3>
    11d4:	180f883a 	mov	r7,r3
    11d8:	880b883a 	mov	r5,r17
    11dc:	8009883a 	mov	r4,r16
    11e0:	100d883a 	mov	r6,r2
    11e4:	000283c0 	call	283c <__adddf3>
    11e8:	d9402c17 	ldw	r5,176(sp)
    11ec:	01000074 	movhi	r4,1
    11f0:	2122f704 	addi	r4,r4,-29732
    11f4:	2909883a 	add	r4,r5,r4
    11f8:	22400117 	ldw	r9,4(r4)
    11fc:	22000017 	ldw	r8,0(r4)
    1200:	180b883a 	mov	r5,r3
    1204:	480f883a 	mov	r7,r9
    1208:	400d883a 	mov	r6,r8
    120c:	1009883a 	mov	r4,r2
    1210:	000283c0 	call	283c <__adddf3>
    1214:	d9000017 	ldw	r4,0(sp)
    1218:	182f883a 	mov	r23,r3
    121c:	102d883a 	mov	r22,r2
    1220:	00031740 	call	3174 <__floatsidf>
    1224:	d9402c17 	ldw	r5,176(sp)
    1228:	01000074 	movhi	r4,1
    122c:	2122fb04 	addi	r4,r4,-29716
    1230:	b00d883a 	mov	r6,r22
    1234:	2911883a 	add	r8,r5,r4
    1238:	d9003717 	ldw	r4,220(sp)
    123c:	d9403817 	ldw	r5,224(sp)
    1240:	45000017 	ldw	r20,0(r8)
    1244:	d9002315 	stw	r4,140(sp)
    1248:	d9003817 	ldw	r4,224(sp)
    124c:	45400117 	ldw	r21,4(r8)
    1250:	b80f883a 	mov	r7,r23
    1254:	d9002415 	stw	r4,144(sp)
    1258:	d9002317 	ldw	r4,140(sp)
    125c:	1021883a 	mov	r16,r2
    1260:	1823883a 	mov	r17,r3
    1264:	dd802115 	stw	r22,132(sp)
    1268:	ddc02215 	stw	r23,136(sp)
    126c:	000283c0 	call	283c <__adddf3>
    1270:	180b883a 	mov	r5,r3
    1274:	1009883a 	mov	r4,r2
    1278:	a00d883a 	mov	r6,r20
    127c:	a80f883a 	mov	r7,r21
    1280:	000283c0 	call	283c <__adddf3>
    1284:	180f883a 	mov	r7,r3
    1288:	8009883a 	mov	r4,r16
    128c:	880b883a 	mov	r5,r17
    1290:	100d883a 	mov	r6,r2
    1294:	000283c0 	call	283c <__adddf3>
    1298:	180b883a 	mov	r5,r3
    129c:	0009883a 	mov	r4,zero
    12a0:	800d883a 	mov	r6,r16
    12a4:	880f883a 	mov	r7,r17
    12a8:	d9001b15 	stw	r4,108(sp)
    12ac:	d8c01c15 	stw	r3,112(sp)
    12b0:	00027bc0 	call	27bc <__subdf3>
    12b4:	180b883a 	mov	r5,r3
    12b8:	a80f883a 	mov	r7,r21
    12bc:	1009883a 	mov	r4,r2
    12c0:	a00d883a 	mov	r6,r20
    12c4:	00027bc0 	call	27bc <__subdf3>
    12c8:	d9802317 	ldw	r6,140(sp)
    12cc:	d9c03817 	ldw	r7,224(sp)
    12d0:	180b883a 	mov	r5,r3
    12d4:	1009883a 	mov	r4,r2
    12d8:	00027bc0 	call	27bc <__subdf3>
    12dc:	d9002117 	ldw	r4,132(sp)
    12e0:	1011883a 	mov	r8,r2
    12e4:	1813883a 	mov	r9,r3
    12e8:	b80b883a 	mov	r5,r23
    12ec:	480f883a 	mov	r7,r9
    12f0:	400d883a 	mov	r6,r8
    12f4:	00027bc0 	call	27bc <__subdf3>
    12f8:	1823883a 	mov	r17,r3
    12fc:	d8c02517 	ldw	r3,148(sp)
    1300:	1021883a 	mov	r16,r2
    1304:	e0bfffc4 	addi	r2,fp,-1
    1308:	1884b03a 	or	r2,r3,r2
    130c:	1000731e 	bne	r2,zero,14dc <__ieee754_pow+0xb88>
    1310:	0009883a 	mov	r4,zero
    1314:	016ffc34 	movhi	r5,49136
    1318:	d9001915 	stw	r4,100(sp)
    131c:	d9401a15 	stw	r5,104(sp)
    1320:	d9402917 	ldw	r5,164(sp)
    1324:	d9002817 	ldw	r4,160(sp)
    1328:	0029883a 	mov	r20,zero
    132c:	a00d883a 	mov	r6,r20
    1330:	280f883a 	mov	r7,r5
    1334:	2827883a 	mov	r19,r5
    1338:	00027bc0 	call	27bc <__subdf3>
    133c:	d9001b17 	ldw	r4,108(sp)
    1340:	d9401c17 	ldw	r5,112(sp)
    1344:	180f883a 	mov	r7,r3
    1348:	100d883a 	mov	r6,r2
    134c:	00028b00 	call	28b0 <__muldf3>
    1350:	d9c02917 	ldw	r7,164(sp)
    1354:	d9802817 	ldw	r6,160(sp)
    1358:	880b883a 	mov	r5,r17
    135c:	8009883a 	mov	r4,r16
    1360:	1823883a 	mov	r17,r3
    1364:	1021883a 	mov	r16,r2
    1368:	00028b00 	call	28b0 <__muldf3>
    136c:	180f883a 	mov	r7,r3
    1370:	880b883a 	mov	r5,r17
    1374:	8009883a 	mov	r4,r16
    1378:	100d883a 	mov	r6,r2
    137c:	000283c0 	call	283c <__adddf3>
    1380:	d9401c17 	ldw	r5,112(sp)
    1384:	d9001b17 	ldw	r4,108(sp)
    1388:	a00d883a 	mov	r6,r20
    138c:	980f883a 	mov	r7,r19
    1390:	1029883a 	mov	r20,r2
    1394:	182b883a 	mov	r21,r3
    1398:	00028b00 	call	28b0 <__muldf3>
    139c:	1025883a 	mov	r18,r2
    13a0:	1827883a 	mov	r19,r3
    13a4:	a009883a 	mov	r4,r20
    13a8:	a80b883a 	mov	r5,r21
    13ac:	900d883a 	mov	r6,r18
    13b0:	980f883a 	mov	r7,r19
    13b4:	dd001d15 	stw	r20,116(sp)
    13b8:	dc801f15 	stw	r18,124(sp)
    13bc:	dd401e15 	stw	r21,120(sp)
    13c0:	dcc02015 	stw	r19,128(sp)
    13c4:	000283c0 	call	283c <__adddf3>
    13c8:	1823883a 	mov	r17,r3
    13cc:	01102434 	movhi	r4,16528
    13d0:	213fffc4 	addi	r4,r4,-1
    13d4:	1021883a 	mov	r16,r2
    13d8:	182f883a 	mov	r23,r3
    13dc:	dc401815 	stw	r17,96(sp)
    13e0:	100b883a 	mov	r5,r2
    13e4:	20c02c0e 	bge	r4,r3,1498 <__ieee754_pow+0xb44>
    13e8:	00afdc34 	movhi	r2,49008
    13ec:	1885883a 	add	r2,r3,r2
    13f0:	2884b03a 	or	r2,r5,r2
    13f4:	1001a626 	beq	r2,zero,1a90 <__ieee754_pow+0x113c>
    13f8:	04220034 	movhi	r16,34816
    13fc:	841d6704 	addi	r16,r16,30108
    1400:	045f8e34 	movhi	r17,32312
    1404:	8c790f04 	addi	r17,r17,-7108
    1408:	d9401a17 	ldw	r5,104(sp)
    140c:	d9001917 	ldw	r4,100(sp)
    1410:	800d883a 	mov	r6,r16
    1414:	880f883a 	mov	r7,r17
    1418:	00028b00 	call	28b0 <__muldf3>
    141c:	180b883a 	mov	r5,r3
    1420:	800d883a 	mov	r6,r16
    1424:	880f883a 	mov	r7,r17
    1428:	1009883a 	mov	r4,r2
    142c:	00028b00 	call	28b0 <__muldf3>
    1430:	003dc306 	br	b40 <__ieee754_pow+0x1ec>
    1434:	00b00434 	movhi	r2,49168
    1438:	9085883a 	add	r2,r18,r2
    143c:	e084b03a 	or	r2,fp,r2
    1440:	1000af1e 	bne	r2,zero,1700 <__ieee754_pow+0xdac>
    1444:	480f883a 	mov	r7,r9
    1448:	4009883a 	mov	r4,r8
    144c:	480b883a 	mov	r5,r9
    1450:	400d883a 	mov	r6,r8
    1454:	003db406 	br	b28 <__ieee754_pow+0x1d4>
    1458:	00bffc34 	movhi	r2,65520
    145c:	18ff0084 	addi	r3,r3,-1022
    1460:	a0a9883a 	add	r20,r20,r2
    1464:	d8c00015 	stw	r3,0(sp)
    1468:	0009883a 	mov	r4,zero
    146c:	04000234 	movhi	r16,8
    1470:	003e1406 	br	cc4 <__ieee754_pow+0x370>
    1474:	a80f883a 	mov	r7,r21
    1478:	a009883a 	mov	r4,r20
    147c:	a80b883a 	mov	r5,r21
    1480:	a00d883a 	mov	r6,r20
    1484:	00028b00 	call	28b0 <__muldf3>
    1488:	180b883a 	mov	r5,r3
    148c:	d8802815 	stw	r2,160(sp)
    1490:	d9402915 	stw	r5,164(sp)
    1494:	003d5606 	br	9f0 <__ieee754_pow+0x9c>
    1498:	d9001817 	ldw	r4,96(sp)
    149c:	00a00034 	movhi	r2,32768
    14a0:	10bfffc4 	addi	r2,r2,-1
    14a4:	00d02474 	movhi	r3,16529
    14a8:	18f2ffc4 	addi	r3,r3,-13313
    14ac:	20b8703a 	and	fp,r4,r2
    14b0:	1f009d0e 	bge	r3,fp,1728 <__ieee754_pow+0xdd4>
    14b4:	008fdbf4 	movhi	r2,16239
    14b8:	108d0004 	addi	r2,r2,13312
    14bc:	2085883a 	add	r2,r4,r2
    14c0:	1144b03a 	or	r2,r2,r5
    14c4:	1001c626 	beq	r2,zero,1be0 <__ieee754_pow+0x128c>
    14c8:	0430be74 	movhi	r16,49913
    14cc:	843cd644 	addi	r16,r16,-3239
    14d0:	04406974 	movhi	r17,421
    14d4:	8c5b87c4 	addi	r17,r17,28191
    14d8:	003fcb06 	br	1408 <__ieee754_pow+0xab4>
    14dc:	0005883a 	mov	r2,zero
    14e0:	00cffc34 	movhi	r3,16368
    14e4:	d8801915 	stw	r2,100(sp)
    14e8:	d8c01a15 	stw	r3,104(sp)
    14ec:	003f8c06 	br	1320 <__ieee754_pow+0x9cc>
    14f0:	0005883a 	mov	r2,zero
    14f4:	00cffc34 	movhi	r3,16368
    14f8:	180b883a 	mov	r5,r3
    14fc:	580f883a 	mov	r7,r11
    1500:	1009883a 	mov	r4,r2
    1504:	500d883a 	mov	r6,r10
    1508:	0002c740 	call	2c74 <__divdf3>
    150c:	1011883a 	mov	r8,r2
    1510:	1813883a 	mov	r9,r3
    1514:	003d9506 	br	b6c <__ieee754_pow+0x218>
    1518:	008ffc34 	movhi	r2,16368
    151c:	10bfff84 	addi	r2,r2,-2
    1520:	14bdbb0e 	bge	r2,r18,c10 <__ieee754_pow+0x2bc>
    1524:	008ffc34 	movhi	r2,16368
    1528:	14bdae16 	blt	r2,r18,be4 <__ieee754_pow+0x290>
    152c:	580b883a 	mov	r5,r11
    1530:	5009883a 	mov	r4,r10
    1534:	000d883a 	mov	r6,zero
    1538:	100f883a 	mov	r7,r2
    153c:	00027bc0 	call	27bc <__subdf3>
    1540:	1021883a 	mov	r16,r2
    1544:	1823883a 	mov	r17,r3
    1548:	00980034 	movhi	r2,24576
    154c:	00cffdf4 	movhi	r3,16375
    1550:	18c551c4 	addi	r3,r3,5447
    1554:	8009883a 	mov	r4,r16
    1558:	880b883a 	mov	r5,r17
    155c:	180f883a 	mov	r7,r3
    1560:	100d883a 	mov	r6,r2
    1564:	00028b00 	call	28b0 <__muldf3>
    1568:	023e17b4 	movhi	r8,63582
    156c:	4237d104 	addi	r8,r8,-8380
    1570:	024f9574 	movhi	r9,15957
    1574:	4a6b82c4 	addi	r9,r9,-20981
    1578:	480f883a 	mov	r7,r9
    157c:	400d883a 	mov	r6,r8
    1580:	8009883a 	mov	r4,r16
    1584:	880b883a 	mov	r5,r17
    1588:	102d883a 	mov	r22,r2
    158c:	182f883a 	mov	r23,r3
    1590:	00028b00 	call	28b0 <__muldf3>
    1594:	8009883a 	mov	r4,r16
    1598:	880b883a 	mov	r5,r17
    159c:	800d883a 	mov	r6,r16
    15a0:	880f883a 	mov	r7,r17
    15a4:	d8802a15 	stw	r2,168(sp)
    15a8:	d8c02b15 	stw	r3,172(sp)
    15ac:	00028b00 	call	28b0 <__muldf3>
    15b0:	0011883a 	mov	r8,zero
    15b4:	026ff434 	movhi	r9,49104
    15b8:	480f883a 	mov	r7,r9
    15bc:	8009883a 	mov	r4,r16
    15c0:	880b883a 	mov	r5,r17
    15c4:	400d883a 	mov	r6,r8
    15c8:	1029883a 	mov	r20,r2
    15cc:	182b883a 	mov	r21,r3
    15d0:	00028b00 	call	28b0 <__muldf3>
    15d4:	02155574 	movhi	r8,21845
    15d8:	42155544 	addi	r8,r8,21845
    15dc:	024ff574 	movhi	r9,16341
    15e0:	4a555544 	addi	r9,r9,21845
    15e4:	480f883a 	mov	r7,r9
    15e8:	400d883a 	mov	r6,r8
    15ec:	180b883a 	mov	r5,r3
    15f0:	1009883a 	mov	r4,r2
    15f4:	000283c0 	call	283c <__adddf3>
    15f8:	180f883a 	mov	r7,r3
    15fc:	8009883a 	mov	r4,r16
    1600:	880b883a 	mov	r5,r17
    1604:	100d883a 	mov	r6,r2
    1608:	00028b00 	call	28b0 <__muldf3>
    160c:	0011883a 	mov	r8,zero
    1610:	024ff834 	movhi	r9,16352
    1614:	480b883a 	mov	r5,r9
    1618:	4009883a 	mov	r4,r8
    161c:	180f883a 	mov	r7,r3
    1620:	100d883a 	mov	r6,r2
    1624:	00027bc0 	call	27bc <__subdf3>
    1628:	180f883a 	mov	r7,r3
    162c:	a80b883a 	mov	r5,r21
    1630:	a009883a 	mov	r4,r20
    1634:	100d883a 	mov	r6,r2
    1638:	00028b00 	call	28b0 <__muldf3>
    163c:	02194b34 	movhi	r8,25900
    1640:	4220bf84 	addi	r8,r8,-32002
    1644:	026ffdf4 	movhi	r9,49143
    1648:	4a4551c4 	addi	r9,r9,5447
    164c:	480f883a 	mov	r7,r9
    1650:	400d883a 	mov	r6,r8
    1654:	180b883a 	mov	r5,r3
    1658:	1009883a 	mov	r4,r2
    165c:	00028b00 	call	28b0 <__muldf3>
    1660:	d9402b17 	ldw	r5,172(sp)
    1664:	d9002a17 	ldw	r4,168(sp)
    1668:	180f883a 	mov	r7,r3
    166c:	100d883a 	mov	r6,r2
    1670:	000283c0 	call	283c <__adddf3>
    1674:	100d883a 	mov	r6,r2
    1678:	b009883a 	mov	r4,r22
    167c:	b80b883a 	mov	r5,r23
    1680:	180f883a 	mov	r7,r3
    1684:	1021883a 	mov	r16,r2
    1688:	1823883a 	mov	r17,r3
    168c:	000283c0 	call	283c <__adddf3>
    1690:	180b883a 	mov	r5,r3
    1694:	0009883a 	mov	r4,zero
    1698:	b00d883a 	mov	r6,r22
    169c:	b80f883a 	mov	r7,r23
    16a0:	d9001b15 	stw	r4,108(sp)
    16a4:	d8c01c15 	stw	r3,112(sp)
    16a8:	00027bc0 	call	27bc <__subdf3>
    16ac:	1011883a 	mov	r8,r2
    16b0:	1813883a 	mov	r9,r3
    16b4:	8009883a 	mov	r4,r16
    16b8:	880b883a 	mov	r5,r17
    16bc:	003f0b06 	br	12ec <__ieee754_pow+0x998>
    16c0:	0005883a 	mov	r2,zero
    16c4:	00d0d034 	movhi	r3,17216
    16c8:	580b883a 	mov	r5,r11
    16cc:	5009883a 	mov	r4,r10
    16d0:	180f883a 	mov	r7,r3
    16d4:	100d883a 	mov	r6,r2
    16d8:	00028b00 	call	28b0 <__muldf3>
    16dc:	1015883a 	mov	r10,r2
    16e0:	1825883a 	mov	r18,r3
    16e4:	017ff2c4 	movi	r5,-53
    16e8:	003d6606 	br	c84 <__ieee754_pow+0x330>
    16ec:	b03d300e 	bge	r22,zero,bb0 <__ieee754_pow+0x25c>
    16f0:	d9402917 	ldw	r5,164(sp)
    16f4:	28e0003c 	xorhi	r3,r5,32768
    16f8:	d8c02915 	stw	r3,164(sp)
    16fc:	003cbc06 	br	9f0 <__ieee754_pow+0x9c>
    1700:	00800044 	movi	r2,1
    1704:	e0bd1a1e 	bne	fp,r2,b70 <__ieee754_pow+0x21c>
    1708:	48e0003c 	xorhi	r3,r9,32768
    170c:	da002815 	stw	r8,160(sp)
    1710:	d8c02915 	stw	r3,164(sp)
    1714:	003cb606 	br	9f0 <__ieee754_pow+0x9c>
    1718:	d9001817 	ldw	r4,96(sp)
    171c:	00a00034 	movhi	r2,32768
    1720:	10bfffc4 	addi	r2,r2,-1
    1724:	20b8703a 	and	fp,r4,r2
    1728:	008ff834 	movhi	r2,16352
    172c:	1700fc16 	blt	r2,fp,1b20 <__ieee754_pow+0x11cc>
    1730:	0039883a 	mov	fp,zero
    1734:	d8001315 	stw	zero,76(sp)
    1738:	0025883a 	mov	r18,zero
    173c:	0005883a 	mov	r2,zero
    1740:	00cff9b4 	movhi	r3,16358
    1744:	18cb90c4 	addi	r3,r3,11843
    1748:	9009883a 	mov	r4,r18
    174c:	b80b883a 	mov	r5,r23
    1750:	180f883a 	mov	r7,r3
    1754:	100d883a 	mov	r6,r2
    1758:	00028b00 	call	28b0 <__muldf3>
    175c:	d9c02017 	ldw	r7,128(sp)
    1760:	d9801f17 	ldw	r6,124(sp)
    1764:	9009883a 	mov	r4,r18
    1768:	b80b883a 	mov	r5,r23
    176c:	b823883a 	mov	r17,r23
    1770:	102d883a 	mov	r22,r2
    1774:	182f883a 	mov	r23,r3
    1778:	00027bc0 	call	27bc <__subdf3>
    177c:	d9401e17 	ldw	r5,120(sp)
    1780:	d9001d17 	ldw	r4,116(sp)
    1784:	180f883a 	mov	r7,r3
    1788:	100d883a 	mov	r6,r2
    178c:	00027bc0 	call	27bc <__subdf3>
    1790:	023fbeb4 	movhi	r8,65274
    1794:	420e7bc4 	addi	r8,r8,14831
    1798:	024ff9b4 	movhi	r9,16358
    179c:	4a4b9084 	addi	r9,r9,11842
    17a0:	480f883a 	mov	r7,r9
    17a4:	400d883a 	mov	r6,r8
    17a8:	180b883a 	mov	r5,r3
    17ac:	1009883a 	mov	r4,r2
    17b0:	00028b00 	call	28b0 <__muldf3>
    17b4:	02032a34 	movhi	r8,3240
    17b8:	421b0e44 	addi	r8,r8,27705
    17bc:	026f8834 	movhi	r9,48672
    17c0:	4a571844 	addi	r9,r9,23649
    17c4:	480f883a 	mov	r7,r9
    17c8:	400d883a 	mov	r6,r8
    17cc:	9009883a 	mov	r4,r18
    17d0:	880b883a 	mov	r5,r17
    17d4:	1021883a 	mov	r16,r2
    17d8:	1823883a 	mov	r17,r3
    17dc:	00028b00 	call	28b0 <__muldf3>
    17e0:	180f883a 	mov	r7,r3
    17e4:	880b883a 	mov	r5,r17
    17e8:	8009883a 	mov	r4,r16
    17ec:	100d883a 	mov	r6,r2
    17f0:	000283c0 	call	283c <__adddf3>
    17f4:	100d883a 	mov	r6,r2
    17f8:	b009883a 	mov	r4,r22
    17fc:	b80b883a 	mov	r5,r23
    1800:	180f883a 	mov	r7,r3
    1804:	1021883a 	mov	r16,r2
    1808:	1823883a 	mov	r17,r3
    180c:	000283c0 	call	283c <__adddf3>
    1810:	1009883a 	mov	r4,r2
    1814:	180b883a 	mov	r5,r3
    1818:	b00d883a 	mov	r6,r22
    181c:	b80f883a 	mov	r7,r23
    1820:	d8803915 	stw	r2,228(sp)
    1824:	d8c03a15 	stw	r3,232(sp)
    1828:	d8801115 	stw	r2,68(sp)
    182c:	d8c01215 	stw	r3,72(sp)
    1830:	00027bc0 	call	27bc <__subdf3>
    1834:	180f883a 	mov	r7,r3
    1838:	8009883a 	mov	r4,r16
    183c:	880b883a 	mov	r5,r17
    1840:	100d883a 	mov	r6,r2
    1844:	00027bc0 	call	27bc <__subdf3>
    1848:	d9001117 	ldw	r4,68(sp)
    184c:	d9403a17 	ldw	r5,232(sp)
    1850:	1029883a 	mov	r20,r2
    1854:	200d883a 	mov	r6,r4
    1858:	280f883a 	mov	r7,r5
    185c:	182b883a 	mov	r21,r3
    1860:	00028b00 	call	28b0 <__muldf3>
    1864:	1021883a 	mov	r16,r2
    1868:	1823883a 	mov	r17,r3
    186c:	009caff4 	movhi	r2,29375
    1870:	10a93404 	addi	r2,r2,-23344
    1874:	00cf99b4 	movhi	r3,15974
    1878:	18cdda44 	addi	r3,r3,14185
    187c:	8009883a 	mov	r4,r16
    1880:	880b883a 	mov	r5,r17
    1884:	180f883a 	mov	r7,r3
    1888:	100d883a 	mov	r6,r2
    188c:	00028b00 	call	28b0 <__muldf3>
    1890:	023174b4 	movhi	r8,50642
    1894:	421afc44 	addi	r8,r8,27633
    1898:	024faf34 	movhi	r9,16060
    189c:	4a6f5044 	addi	r9,r9,-17087
    18a0:	480f883a 	mov	r7,r9
    18a4:	400d883a 	mov	r6,r8
    18a8:	180b883a 	mov	r5,r3
    18ac:	1009883a 	mov	r4,r2
    18b0:	00027bc0 	call	27bc <__subdf3>
    18b4:	180f883a 	mov	r7,r3
    18b8:	8009883a 	mov	r4,r16
    18bc:	880b883a 	mov	r5,r17
    18c0:	100d883a 	mov	r6,r2
    18c4:	00028b00 	call	28b0 <__muldf3>
    18c8:	022bc9b4 	movhi	r8,44838
    18cc:	42378b04 	addi	r8,r8,-8660
    18d0:	024fc474 	movhi	r9,16145
    18d4:	4a559a84 	addi	r9,r9,22122
    18d8:	480f883a 	mov	r7,r9
    18dc:	400d883a 	mov	r6,r8
    18e0:	180b883a 	mov	r5,r3
    18e4:	1009883a 	mov	r4,r2
    18e8:	000283c0 	call	283c <__adddf3>
    18ec:	180f883a 	mov	r7,r3
    18f0:	8009883a 	mov	r4,r16
    18f4:	880b883a 	mov	r5,r17
    18f8:	100d883a 	mov	r6,r2
    18fc:	00028b00 	call	28b0 <__muldf3>
    1900:	0205aff4 	movhi	r8,5823
    1904:	422f64c4 	addi	r8,r8,-17005
    1908:	024fd9f4 	movhi	r9,16231
    190c:	4a705b04 	addi	r9,r9,-16020
    1910:	480f883a 	mov	r7,r9
    1914:	400d883a 	mov	r6,r8
    1918:	180b883a 	mov	r5,r3
    191c:	1009883a 	mov	r4,r2
    1920:	00027bc0 	call	27bc <__subdf3>
    1924:	180f883a 	mov	r7,r3
    1928:	8009883a 	mov	r4,r16
    192c:	880b883a 	mov	r5,r17
    1930:	100d883a 	mov	r6,r2
    1934:	00028b00 	call	28b0 <__muldf3>
    1938:	02155574 	movhi	r8,21845
    193c:	42154f84 	addi	r8,r8,21822
    1940:	024ff174 	movhi	r9,16325
    1944:	4a555544 	addi	r9,r9,21845
    1948:	480f883a 	mov	r7,r9
    194c:	400d883a 	mov	r6,r8
    1950:	180b883a 	mov	r5,r3
    1954:	1009883a 	mov	r4,r2
    1958:	000283c0 	call	283c <__adddf3>
    195c:	180f883a 	mov	r7,r3
    1960:	8009883a 	mov	r4,r16
    1964:	880b883a 	mov	r5,r17
    1968:	100d883a 	mov	r6,r2
    196c:	00028b00 	call	28b0 <__muldf3>
    1970:	d9001117 	ldw	r4,68(sp)
    1974:	d9403a17 	ldw	r5,232(sp)
    1978:	180f883a 	mov	r7,r3
    197c:	100d883a 	mov	r6,r2
    1980:	00027bc0 	call	27bc <__subdf3>
    1984:	d9001117 	ldw	r4,68(sp)
    1988:	d9403a17 	ldw	r5,232(sp)
    198c:	100d883a 	mov	r6,r2
    1990:	180f883a 	mov	r7,r3
    1994:	1021883a 	mov	r16,r2
    1998:	1823883a 	mov	r17,r3
    199c:	00028b00 	call	28b0 <__muldf3>
    19a0:	0011883a 	mov	r8,zero
    19a4:	02500034 	movhi	r9,16384
    19a8:	480f883a 	mov	r7,r9
    19ac:	400d883a 	mov	r6,r8
    19b0:	8009883a 	mov	r4,r16
    19b4:	880b883a 	mov	r5,r17
    19b8:	1021883a 	mov	r16,r2
    19bc:	1823883a 	mov	r17,r3
    19c0:	00027bc0 	call	27bc <__subdf3>
    19c4:	180f883a 	mov	r7,r3
    19c8:	880b883a 	mov	r5,r17
    19cc:	8009883a 	mov	r4,r16
    19d0:	100d883a 	mov	r6,r2
    19d4:	0002c740 	call	2c74 <__divdf3>
    19d8:	d9001117 	ldw	r4,68(sp)
    19dc:	d9403a17 	ldw	r5,232(sp)
    19e0:	a00d883a 	mov	r6,r20
    19e4:	a80f883a 	mov	r7,r21
    19e8:	1025883a 	mov	r18,r2
    19ec:	1827883a 	mov	r19,r3
    19f0:	00028b00 	call	28b0 <__muldf3>
    19f4:	180f883a 	mov	r7,r3
    19f8:	a009883a 	mov	r4,r20
    19fc:	a80b883a 	mov	r5,r21
    1a00:	100d883a 	mov	r6,r2
    1a04:	000283c0 	call	283c <__adddf3>
    1a08:	180f883a 	mov	r7,r3
    1a0c:	980b883a 	mov	r5,r19
    1a10:	9009883a 	mov	r4,r18
    1a14:	100d883a 	mov	r6,r2
    1a18:	00027bc0 	call	27bc <__subdf3>
    1a1c:	d9801117 	ldw	r6,68(sp)
    1a20:	d9c03a17 	ldw	r7,232(sp)
    1a24:	180b883a 	mov	r5,r3
    1a28:	1009883a 	mov	r4,r2
    1a2c:	00027bc0 	call	27bc <__subdf3>
    1a30:	0011883a 	mov	r8,zero
    1a34:	024ffc34 	movhi	r9,16368
    1a38:	480b883a 	mov	r5,r9
    1a3c:	180f883a 	mov	r7,r3
    1a40:	4009883a 	mov	r4,r8
    1a44:	100d883a 	mov	r6,r2
    1a48:	00027bc0 	call	27bc <__subdf3>
    1a4c:	100b883a 	mov	r5,r2
    1a50:	d8801317 	ldw	r2,76(sp)
    1a54:	10d5883a 	add	r10,r2,r3
    1a58:	5005d53a 	srai	r2,r10,20
    1a5c:	0080720e 	bge	zero,r2,1c28 <__ieee754_pow+0x12d4>
    1a60:	2811883a 	mov	r8,r5
    1a64:	5013883a 	mov	r9,r10
    1a68:	d9c01a17 	ldw	r7,104(sp)
    1a6c:	d9801917 	ldw	r6,100(sp)
    1a70:	480b883a 	mov	r5,r9
    1a74:	4009883a 	mov	r4,r8
    1a78:	003e8206 	br	1484 <__ieee754_pow+0xb30>
    1a7c:	0009883a 	mov	r4,zero
    1a80:	800b883a 	mov	r5,r16
    1a84:	a80f883a 	mov	r7,r21
    1a88:	a00d883a 	mov	r6,r20
    1a8c:	003c2b06 	br	b3c <__ieee754_pow+0x1e8>
    1a90:	d9001d17 	ldw	r4,116(sp)
    1a94:	00994b34 	movhi	r2,25900
    1a98:	10a0bf84 	addi	r2,r2,-32002
    1a9c:	00cf25f4 	movhi	r3,15511
    1aa0:	18c551c4 	addi	r3,r3,5447
    1aa4:	a80b883a 	mov	r5,r21
    1aa8:	180f883a 	mov	r7,r3
    1aac:	100d883a 	mov	r6,r2
    1ab0:	000283c0 	call	283c <__adddf3>
    1ab4:	d9801f17 	ldw	r6,124(sp)
    1ab8:	880b883a 	mov	r5,r17
    1abc:	8009883a 	mov	r4,r16
    1ac0:	980f883a 	mov	r7,r19
    1ac4:	1021883a 	mov	r16,r2
    1ac8:	1823883a 	mov	r17,r3
    1acc:	00027bc0 	call	27bc <__subdf3>
    1ad0:	180f883a 	mov	r7,r3
    1ad4:	880b883a 	mov	r5,r17
    1ad8:	8009883a 	mov	r4,r16
    1adc:	100d883a 	mov	r6,r2
    1ae0:	0002fdc0 	call	2fdc <__gtdf2>
    1ae4:	00bf0c0e 	bge	zero,r2,1718 <__ieee754_pow+0xdc4>
    1ae8:	04220034 	movhi	r16,34816
    1aec:	841d6704 	addi	r16,r16,30108
    1af0:	045f8e34 	movhi	r17,32312
    1af4:	8c790f04 	addi	r17,r17,-7108
    1af8:	d9401a17 	ldw	r5,104(sp)
    1afc:	d9001917 	ldw	r4,100(sp)
    1b00:	800d883a 	mov	r6,r16
    1b04:	880f883a 	mov	r7,r17
    1b08:	00028b00 	call	28b0 <__muldf3>
    1b0c:	180b883a 	mov	r5,r3
    1b10:	800d883a 	mov	r6,r16
    1b14:	880f883a 	mov	r7,r17
    1b18:	1009883a 	mov	r4,r2
    1b1c:	003e5906 	br	1484 <__ieee754_pow+0xb30>
    1b20:	e005d53a 	srai	r2,fp,20
    1b24:	01800434 	movhi	r6,16
    1b28:	d9401817 	ldw	r5,96(sp)
    1b2c:	10bf0084 	addi	r2,r2,-1022
    1b30:	308dd83a 	sra	r6,r6,r2
    1b34:	02000434 	movhi	r8,16
    1b38:	423fffc4 	addi	r8,r8,-1
    1b3c:	0005883a 	mov	r2,zero
    1b40:	298d883a 	add	r6,r5,r6
    1b44:	318b883a 	add	r5,r6,r6
    1b48:	320e703a 	and	r7,r6,r8
    1b4c:	1013883a 	mov	r9,r2
    1b50:	280ad57a 	srli	r5,r5,21
    1b54:	d8801817 	ldw	r2,96(sp)
    1b58:	01000504 	movi	r4,20
    1b5c:	297f0044 	addi	r5,r5,-1023
    1b60:	4151d83a 	sra	r8,r8,r5
    1b64:	39c00434 	orhi	r7,r7,16
    1b68:	2149c83a 	sub	r4,r4,r5
    1b6c:	0210303a 	nor	r8,zero,r8
    1b70:	3939d83a 	sra	fp,r7,r4
    1b74:	320e703a 	and	r7,r6,r8
    1b78:	10002916 	blt	r2,zero,1c20 <__ieee754_pow+0x12cc>
    1b7c:	d9402017 	ldw	r5,128(sp)
    1b80:	d9001f17 	ldw	r4,124(sp)
    1b84:	480d883a 	mov	r6,r9
    1b88:	00027bc0 	call	27bc <__subdf3>
    1b8c:	180b883a 	mov	r5,r3
    1b90:	d9402015 	stw	r5,128(sp)
    1b94:	280f883a 	mov	r7,r5
    1b98:	d9001d17 	ldw	r4,116(sp)
    1b9c:	d9401e17 	ldw	r5,120(sp)
    1ba0:	1007883a 	mov	r3,r2
    1ba4:	180d883a 	mov	r6,r3
    1ba8:	d8801f15 	stw	r2,124(sp)
    1bac:	000283c0 	call	283c <__adddf3>
    1bb0:	180b883a 	mov	r5,r3
    1bb4:	e006953a 	slli	r3,fp,20
    1bb8:	282f883a 	mov	r23,r5
    1bbc:	d8c01315 	stw	r3,76(sp)
    1bc0:	003edd06 	br	1738 <__ieee754_pow+0xde4>
    1bc4:	383bc81e 	bne	r7,zero,ae8 <__ieee754_pow+0x194>
    1bc8:	28c5c83a 	sub	r2,r5,r3
    1bcc:	8087d83a 	sra	r3,r16,r2
    1bd0:	1884983a 	sll	r2,r3,r2
    1bd4:	80801b26 	beq	r16,r2,1c44 <__ieee754_pow+0x12f0>
    1bd8:	0039883a 	mov	fp,zero
    1bdc:	003b9d06 	br	a54 <__ieee754_pow+0x100>
    1be0:	d9801f17 	ldw	r6,124(sp)
    1be4:	8009883a 	mov	r4,r16
    1be8:	880b883a 	mov	r5,r17
    1bec:	980f883a 	mov	r7,r19
    1bf0:	00027bc0 	call	27bc <__subdf3>
    1bf4:	d9001d17 	ldw	r4,116(sp)
    1bf8:	a80b883a 	mov	r5,r21
    1bfc:	180f883a 	mov	r7,r3
    1c00:	100d883a 	mov	r6,r2
    1c04:	00030ec0 	call	30ec <__ledf2>
    1c08:	00bfc516 	blt	zero,r2,1b20 <__ieee754_pow+0x11cc>
    1c0c:	0430be74 	movhi	r16,49913
    1c10:	843cd644 	addi	r16,r16,-3239
    1c14:	04406974 	movhi	r17,421
    1c18:	8c5b87c4 	addi	r17,r17,28191
    1c1c:	003fb606 	br	1af8 <__ieee754_pow+0x11a4>
    1c20:	0739c83a 	sub	fp,zero,fp
    1c24:	003fd506 	br	1b7c <__ieee754_pow+0x1228>
    1c28:	2809883a 	mov	r4,r5
    1c2c:	e00d883a 	mov	r6,fp
    1c30:	180b883a 	mov	r5,r3
    1c34:	00021a80 	call	21a8 <scalbn>
    1c38:	1011883a 	mov	r8,r2
    1c3c:	1813883a 	mov	r9,r3
    1c40:	003f8906 	br	1a68 <__ieee754_pow+0x1114>
    1c44:	18c0004c 	andi	r3,r3,1
    1c48:	00800084 	movi	r2,2
    1c4c:	10f9c83a 	sub	fp,r2,r3
    1c50:	003b8006 	br	a54 <__ieee754_pow+0x100>

00001c54 <__ieee754_sqrt>:
    1c54:	defffd04 	addi	sp,sp,-12
    1c58:	dc000015 	stw	r16,0(sp)
    1c5c:	009ffc34 	movhi	r2,32752
    1c60:	2021883a 	mov	r16,r4
    1c64:	291ffc2c 	andhi	r4,r5,32752
    1c68:	dc400115 	stw	r17,4(sp)
    1c6c:	dfc00215 	stw	ra,8(sp)
    1c70:	2823883a 	mov	r17,r5
    1c74:	280f883a 	mov	r7,r5
    1c78:	2807883a 	mov	r3,r5
    1c7c:	8011883a 	mov	r8,r16
    1c80:	20807d26 	beq	r4,r2,1e78 <__ieee754_sqrt+0x224>
    1c84:	01408d0e 	bge	zero,r5,1ebc <__ieee754_sqrt+0x268>
    1c88:	380dd53a 	srai	r6,r7,20
    1c8c:	3000131e 	bne	r6,zero,1cdc <__ieee754_sqrt+0x88>
    1c90:	1800041e 	bne	r3,zero,1ca4 <__ieee754_sqrt+0x50>
    1c94:	400ed2fa 	srli	r7,r8,11
    1c98:	31bffac4 	addi	r6,r6,-21
    1c9c:	4010957a 	slli	r8,r8,21
    1ca0:	383ffc26 	beq	r7,zero,1c94 <__ieee754_sqrt+0x40>
    1ca4:	3880042c 	andhi	r2,r7,16
    1ca8:	1000991e 	bne	r2,zero,1f10 <__ieee754_sqrt+0x2bc>
    1cac:	0009883a 	mov	r4,zero
    1cb0:	39cf883a 	add	r7,r7,r7
    1cb4:	3880042c 	andhi	r2,r7,16
    1cb8:	21000044 	addi	r4,r4,1
    1cbc:	103ffc26 	beq	r2,zero,1cb0 <__ieee754_sqrt+0x5c>
    1cc0:	00800804 	movi	r2,32
    1cc4:	1105c83a 	sub	r2,r2,r4
    1cc8:	4086d83a 	srl	r3,r8,r2
    1ccc:	4110983a 	sll	r8,r8,r4
    1cd0:	3105c83a 	sub	r2,r6,r4
    1cd4:	38ceb03a 	or	r7,r7,r3
    1cd8:	11800044 	addi	r6,r2,1
    1cdc:	31bf0044 	addi	r6,r6,-1023
    1ce0:	30c0004c 	andi	r3,r6,1
    1ce4:	00800434 	movhi	r2,16
    1ce8:	10bfffc4 	addi	r2,r2,-1
    1cec:	3884703a 	and	r2,r7,r2
    1cf0:	1807003a 	cmpeq	r3,r3,zero
    1cf4:	11000434 	orhi	r4,r2,16
    1cf8:	18005426 	beq	r3,zero,1e4c <__ieee754_sqrt+0x1f8>
    1cfc:	4004d7fa 	srli	r2,r8,31
    1d00:	4207883a 	add	r3,r8,r8
    1d04:	02800834 	movhi	r10,32
    1d08:	1105883a 	add	r2,r2,r4
    1d0c:	2089883a 	add	r4,r4,r2
    1d10:	0011883a 	mov	r8,zero
    1d14:	000b883a 	mov	r5,zero
    1d18:	0013883a 	mov	r9,zero
    1d1c:	02c00584 	movi	r11,22
    1d20:	520f883a 	add	r7,r10,r8
    1d24:	1804d7fa 	srli	r2,r3,31
    1d28:	4a400044 	addi	r9,r9,1
    1d2c:	18c7883a 	add	r3,r3,r3
    1d30:	21c00316 	blt	r4,r7,1d40 <__ieee754_sqrt+0xec>
    1d34:	21c9c83a 	sub	r4,r4,r7
    1d38:	2a8b883a 	add	r5,r5,r10
    1d3c:	51d1883a 	add	r8,r10,r7
    1d40:	1105883a 	add	r2,r2,r4
    1d44:	5014d07a 	srli	r10,r10,1
    1d48:	2089883a 	add	r4,r4,r2
    1d4c:	4afff41e 	bne	r9,r11,1d20 <__ieee754_sqrt+0xcc>
    1d50:	02600034 	movhi	r9,32768
    1d54:	0017883a 	mov	r11,zero
    1d58:	0019883a 	mov	r12,zero
    1d5c:	0015883a 	mov	r10,zero
    1d60:	4821883a 	mov	r16,r9
    1d64:	03c00804 	movi	r15,32
    1d68:	00000806 	br	1d8c <__ieee754_sqrt+0x138>
    1d6c:	22003426 	beq	r4,r8,1e40 <__ieee754_sqrt+0x1ec>
    1d70:	1804d7fa 	srli	r2,r3,31
    1d74:	52800044 	addi	r10,r10,1
    1d78:	18c7883a 	add	r3,r3,r3
    1d7c:	1105883a 	add	r2,r2,r4
    1d80:	2089883a 	add	r4,r4,r2
    1d84:	4812d07a 	srli	r9,r9,1
    1d88:	53c01326 	beq	r10,r15,1dd8 <__ieee754_sqrt+0x184>
    1d8c:	4acf883a 	add	r7,r9,r11
    1d90:	413ff60e 	bge	r8,r4,1d6c <__ieee754_sqrt+0x118>
    1d94:	38a0002c 	andhi	r2,r7,32768
    1d98:	3a57883a 	add	r11,r7,r9
    1d9c:	14002426 	beq	r2,r16,1e30 <__ieee754_sqrt+0x1dc>
    1da0:	4005883a 	mov	r2,r8
    1da4:	2209c83a 	sub	r4,r4,r8
    1da8:	19c0012e 	bgeu	r3,r7,1db0 <__ieee754_sqrt+0x15c>
    1dac:	213fffc4 	addi	r4,r4,-1
    1db0:	19c7c83a 	sub	r3,r3,r7
    1db4:	1011883a 	mov	r8,r2
    1db8:	1804d7fa 	srli	r2,r3,31
    1dbc:	52800044 	addi	r10,r10,1
    1dc0:	6259883a 	add	r12,r12,r9
    1dc4:	1105883a 	add	r2,r2,r4
    1dc8:	18c7883a 	add	r3,r3,r3
    1dcc:	2089883a 	add	r4,r4,r2
    1dd0:	4812d07a 	srli	r9,r9,1
    1dd4:	53ffed1e 	bne	r10,r15,1d8c <__ieee754_sqrt+0x138>
    1dd8:	20c4b03a 	or	r2,r4,r3
    1ddc:	1000201e 	bne	r2,zero,1e60 <__ieee754_sqrt+0x20c>
    1de0:	600ed07a 	srli	r7,r12,1
    1de4:	2880004c 	andi	r2,r5,1
    1de8:	1005003a 	cmpeq	r2,r2,zero
    1dec:	1000011e 	bne	r2,zero,1df4 <__ieee754_sqrt+0x1a0>
    1df0:	39e00034 	orhi	r7,r7,32768
    1df4:	300dd07a 	srai	r6,r6,1
    1df8:	280bd07a 	srai	r5,r5,1
    1dfc:	010ff834 	movhi	r4,16352
    1e00:	300c953a 	slli	r6,r6,20
    1e04:	290b883a 	add	r5,r5,r4
    1e08:	3821883a 	mov	r16,r7
    1e0c:	299d883a 	add	r14,r5,r6
    1e10:	7023883a 	mov	r17,r14
    1e14:	8005883a 	mov	r2,r16
    1e18:	8807883a 	mov	r3,r17
    1e1c:	dfc00217 	ldw	ra,8(sp)
    1e20:	dc400117 	ldw	r17,4(sp)
    1e24:	dc000017 	ldw	r16,0(sp)
    1e28:	dec00304 	addi	sp,sp,12
    1e2c:	f800283a 	ret
    1e30:	5884703a 	and	r2,r11,r2
    1e34:	103fda1e 	bne	r2,zero,1da0 <__ieee754_sqrt+0x14c>
    1e38:	40800044 	addi	r2,r8,1
    1e3c:	003fd906 	br	1da4 <__ieee754_sqrt+0x150>
    1e40:	19ffd42e 	bgeu	r3,r7,1d94 <__ieee754_sqrt+0x140>
    1e44:	2011883a 	mov	r8,r4
    1e48:	003fc906 	br	1d70 <__ieee754_sqrt+0x11c>
    1e4c:	4004d7fa 	srli	r2,r8,31
    1e50:	4211883a 	add	r8,r8,r8
    1e54:	1105883a 	add	r2,r2,r4
    1e58:	2089883a 	add	r4,r4,r2
    1e5c:	003fa706 	br	1cfc <__ieee754_sqrt+0xa8>
    1e60:	00bfffc4 	movi	r2,-1
    1e64:	60802726 	beq	r12,r2,1f04 <__ieee754_sqrt+0x2b0>
    1e68:	6080004c 	andi	r2,r12,1
    1e6c:	6085883a 	add	r2,r12,r2
    1e70:	100ed07a 	srli	r7,r2,1
    1e74:	003fdb06 	br	1de4 <__ieee754_sqrt+0x190>
    1e78:	8009883a 	mov	r4,r16
    1e7c:	800d883a 	mov	r6,r16
    1e80:	00028b00 	call	28b0 <__muldf3>
    1e84:	180f883a 	mov	r7,r3
    1e88:	880b883a 	mov	r5,r17
    1e8c:	8009883a 	mov	r4,r16
    1e90:	100d883a 	mov	r6,r2
    1e94:	000283c0 	call	283c <__adddf3>
    1e98:	1021883a 	mov	r16,r2
    1e9c:	1823883a 	mov	r17,r3
    1ea0:	8005883a 	mov	r2,r16
    1ea4:	8807883a 	mov	r3,r17
    1ea8:	dfc00217 	ldw	ra,8(sp)
    1eac:	dc400117 	ldw	r17,4(sp)
    1eb0:	dc000017 	ldw	r16,0(sp)
    1eb4:	dec00304 	addi	sp,sp,12
    1eb8:	f800283a 	ret
    1ebc:	00a00034 	movhi	r2,32768
    1ec0:	10bfffc4 	addi	r2,r2,-1
    1ec4:	2884703a 	and	r2,r5,r2
    1ec8:	8084b03a 	or	r2,r16,r2
    1ecc:	103fd126 	beq	r2,zero,1e14 <__ieee754_sqrt+0x1c0>
    1ed0:	283f6d26 	beq	r5,zero,1c88 <__ieee754_sqrt+0x34>
    1ed4:	280f883a 	mov	r7,r5
    1ed8:	8009883a 	mov	r4,r16
    1edc:	800d883a 	mov	r6,r16
    1ee0:	00027bc0 	call	27bc <__subdf3>
    1ee4:	1009883a 	mov	r4,r2
    1ee8:	180b883a 	mov	r5,r3
    1eec:	100d883a 	mov	r6,r2
    1ef0:	180f883a 	mov	r7,r3
    1ef4:	0002c740 	call	2c74 <__divdf3>
    1ef8:	1021883a 	mov	r16,r2
    1efc:	1823883a 	mov	r17,r3
    1f00:	003fc406 	br	1e14 <__ieee754_sqrt+0x1c0>
    1f04:	29400044 	addi	r5,r5,1
    1f08:	000f883a 	mov	r7,zero
    1f0c:	003fb506 	br	1de4 <__ieee754_sqrt+0x190>
    1f10:	0009883a 	mov	r4,zero
    1f14:	00800804 	movi	r2,32
    1f18:	003f6b06 	br	1cc8 <__ieee754_sqrt+0x74>

00001f1c <fabs>:
    1f1c:	01e00034 	movhi	r7,32768
    1f20:	39ffffc4 	addi	r7,r7,-1
    1f24:	394e703a 	and	r7,r7,r5
    1f28:	2005883a 	mov	r2,r4
    1f2c:	3807883a 	mov	r3,r7
    1f30:	f800283a 	ret

00001f34 <finite>:
    1f34:	00a00034 	movhi	r2,32768
    1f38:	10bfffc4 	addi	r2,r2,-1
    1f3c:	2884703a 	and	r2,r5,r2
    1f40:	01600434 	movhi	r5,32784
    1f44:	1145883a 	add	r2,r2,r5
    1f48:	1004d7fa 	srli	r2,r2,31
    1f4c:	f800283a 	ret

00001f50 <__isnand>:
    1f50:	200d883a 	mov	r6,r4
    1f54:	0109c83a 	sub	r4,zero,r4
    1f58:	2188b03a 	or	r4,r4,r6
    1f5c:	2008d7fa 	srli	r4,r4,31
    1f60:	00a00034 	movhi	r2,32768
    1f64:	10bfffc4 	addi	r2,r2,-1
    1f68:	1144703a 	and	r2,r2,r5
    1f6c:	2088b03a 	or	r4,r4,r2
    1f70:	009ffc34 	movhi	r2,32752
    1f74:	1105c83a 	sub	r2,r2,r4
    1f78:	1004d7fa 	srli	r2,r2,31
    1f7c:	f800283a 	ret

00001f80 <matherr>:
    1f80:	0005883a 	mov	r2,zero
    1f84:	f800283a 	ret

00001f88 <nan>:
    1f88:	015ffe34 	movhi	r5,32760
    1f8c:	0005883a 	mov	r2,zero
    1f90:	2807883a 	mov	r3,r5
    1f94:	f800283a 	ret

00001f98 <rint>:
    1f98:	2015883a 	mov	r10,r4
    1f9c:	2809d53a 	srai	r4,r5,20
    1fa0:	defff904 	addi	sp,sp,-28
    1fa4:	034004c4 	movi	r13,19
    1fa8:	2101ffcc 	andi	r4,r4,2047
    1fac:	227f0044 	addi	r9,r4,-1023
    1fb0:	dc800415 	stw	r18,16(sp)
    1fb4:	dfc00615 	stw	ra,24(sp)
    1fb8:	dcc00515 	stw	r19,20(sp)
    1fbc:	dc400315 	stw	r17,12(sp)
    1fc0:	dc000215 	stw	r16,8(sp)
    1fc4:	2817883a 	mov	r11,r5
    1fc8:	500d883a 	mov	r6,r10
    1fcc:	2824d7fa 	srli	r18,r5,31
    1fd0:	6a403016 	blt	r13,r9,2094 <rint+0xfc>
    1fd4:	48004916 	blt	r9,zero,20fc <rint+0x164>
    1fd8:	00800434 	movhi	r2,16
    1fdc:	10bfffc4 	addi	r2,r2,-1
    1fe0:	1247d83a 	sra	r3,r2,r9
    1fe4:	2809883a 	mov	r4,r5
    1fe8:	1944703a 	and	r2,r3,r5
    1fec:	5084b03a 	or	r2,r10,r2
    1ff0:	10001f26 	beq	r2,zero,2070 <rint+0xd8>
    1ff4:	180ad07a 	srli	r5,r3,1
    1ff8:	5944703a 	and	r2,r11,r5
    1ffc:	5084b03a 	or	r2,r10,r2
    2000:	10000626 	beq	r2,zero,201c <rint+0x84>
    2004:	4b406626 	beq	r9,r13,21a0 <rint+0x208>
    2008:	00c000b4 	movhi	r3,2
    200c:	1a47d83a 	sra	r3,r3,r9
    2010:	0144303a 	nor	r2,zero,r5
    2014:	5884703a 	and	r2,r11,r2
    2018:	10c8b03a 	or	r4,r2,r3
    201c:	900690fa 	slli	r3,r18,3
    2020:	00800074 	movhi	r2,1
    2024:	10a2ff04 	addi	r2,r2,-29700
    2028:	200f883a 	mov	r7,r4
    202c:	1887883a 	add	r3,r3,r2
    2030:	1c000017 	ldw	r16,0(r3)
    2034:	1c400117 	ldw	r17,4(r3)
    2038:	8009883a 	mov	r4,r16
    203c:	880b883a 	mov	r5,r17
    2040:	000283c0 	call	283c <__adddf3>
    2044:	d8800015 	stw	r2,0(sp)
    2048:	d8c00115 	stw	r3,4(sp)
    204c:	d8800017 	ldw	r2,0(sp)
    2050:	d8c00117 	ldw	r3,4(sp)
    2054:	880f883a 	mov	r7,r17
    2058:	800d883a 	mov	r6,r16
    205c:	180b883a 	mov	r5,r3
    2060:	1009883a 	mov	r4,r2
    2064:	00027bc0 	call	27bc <__subdf3>
    2068:	1015883a 	mov	r10,r2
    206c:	1817883a 	mov	r11,r3
    2070:	5005883a 	mov	r2,r10
    2074:	5807883a 	mov	r3,r11
    2078:	dfc00617 	ldw	ra,24(sp)
    207c:	dcc00517 	ldw	r19,20(sp)
    2080:	dc800417 	ldw	r18,16(sp)
    2084:	dc400317 	ldw	r17,12(sp)
    2088:	dc000217 	ldw	r16,8(sp)
    208c:	dec00704 	addi	sp,sp,28
    2090:	f800283a 	ret
    2094:	00800cc4 	movi	r2,51
    2098:	12400f16 	blt	r2,r9,20d8 <rint+0x140>
    209c:	213efb44 	addi	r4,r4,-1043
    20a0:	00bfffc4 	movi	r2,-1
    20a4:	1104d83a 	srl	r2,r2,r4
    20a8:	5086703a 	and	r3,r10,r2
    20ac:	183ff026 	beq	r3,zero,2070 <rint+0xd8>
    20b0:	100ad07a 	srli	r5,r2,1
    20b4:	5144703a 	and	r2,r10,r5
    20b8:	10000526 	beq	r2,zero,20d0 <rint+0x138>
    20bc:	00d00034 	movhi	r3,16384
    20c0:	1907d83a 	sra	r3,r3,r4
    20c4:	0144303a 	nor	r2,zero,r5
    20c8:	5084703a 	and	r2,r10,r2
    20cc:	10ccb03a 	or	r6,r2,r3
    20d0:	5809883a 	mov	r4,r11
    20d4:	003fd106 	br	201c <rint+0x84>
    20d8:	00810004 	movi	r2,1024
    20dc:	48bfe41e 	bne	r9,r2,2070 <rint+0xd8>
    20e0:	5009883a 	mov	r4,r10
    20e4:	500d883a 	mov	r6,r10
    20e8:	280f883a 	mov	r7,r5
    20ec:	000283c0 	call	283c <__adddf3>
    20f0:	1015883a 	mov	r10,r2
    20f4:	1817883a 	mov	r11,r3
    20f8:	003fdd06 	br	2070 <rint+0xd8>
    20fc:	04e00034 	movhi	r19,32768
    2100:	9cffffc4 	addi	r19,r19,-1
    2104:	2cc4703a 	and	r2,r5,r19
    2108:	5084b03a 	or	r2,r10,r2
    210c:	103fd826 	beq	r2,zero,2070 <rint+0xd8>
    2110:	00c00434 	movhi	r3,16
    2114:	18ffffc4 	addi	r3,r3,-1
    2118:	28c6703a 	and	r3,r5,r3
    211c:	50c6b03a 	or	r3,r10,r3
    2120:	00cdc83a 	sub	r6,zero,r3
    2124:	900a90fa 	slli	r5,r18,3
    2128:	1986b03a 	or	r3,r3,r6
    212c:	01000074 	movhi	r4,1
    2130:	2122ff04 	addi	r4,r4,-29700
    2134:	1806d33a 	srli	r3,r3,12
    2138:	290b883a 	add	r5,r5,r4
    213c:	2c000017 	ldw	r16,0(r5)
    2140:	2c400117 	ldw	r17,4(r5)
    2144:	593fffac 	andhi	r4,r11,65534
    2148:	18c0022c 	andhi	r3,r3,8
    214c:	1906b03a 	or	r3,r3,r4
    2150:	500d883a 	mov	r6,r10
    2154:	180f883a 	mov	r7,r3
    2158:	8009883a 	mov	r4,r16
    215c:	880b883a 	mov	r5,r17
    2160:	000283c0 	call	283c <__adddf3>
    2164:	d8800015 	stw	r2,0(sp)
    2168:	d8c00115 	stw	r3,4(sp)
    216c:	d8800017 	ldw	r2,0(sp)
    2170:	d8c00117 	ldw	r3,4(sp)
    2174:	880f883a 	mov	r7,r17
    2178:	800d883a 	mov	r6,r16
    217c:	180b883a 	mov	r5,r3
    2180:	1009883a 	mov	r4,r2
    2184:	00027bc0 	call	27bc <__subdf3>
    2188:	901297fa 	slli	r9,r18,31
    218c:	98d0703a 	and	r8,r19,r3
    2190:	1015883a 	mov	r10,r2
    2194:	4250b03a 	or	r8,r8,r9
    2198:	4017883a 	mov	r11,r8
    219c:	003fb406 	br	2070 <rint+0xd8>
    21a0:	01900034 	movhi	r6,16384
    21a4:	003f9d06 	br	201c <rint+0x84>

000021a8 <scalbn>:
    21a8:	2011883a 	mov	r8,r4
    21ac:	291ffc2c 	andhi	r4,r5,32752
    21b0:	2009d53a 	srai	r4,r4,20
    21b4:	defffd04 	addi	sp,sp,-12
    21b8:	dc000015 	stw	r16,0(sp)
    21bc:	dfc00215 	stw	ra,8(sp)
    21c0:	dc400115 	stw	r17,4(sp)
    21c4:	2813883a 	mov	r9,r5
    21c8:	2815883a 	mov	r10,r5
    21cc:	3021883a 	mov	r16,r6
    21d0:	2000281e 	bne	r4,zero,2274 <scalbn+0xcc>
    21d4:	00a00034 	movhi	r2,32768
    21d8:	10bfffc4 	addi	r2,r2,-1
    21dc:	2884703a 	and	r2,r5,r2
    21e0:	4084b03a 	or	r2,r8,r2
    21e4:	10001826 	beq	r2,zero,2248 <scalbn+0xa0>
    21e8:	0005883a 	mov	r2,zero
    21ec:	00d0d434 	movhi	r3,17232
    21f0:	4009883a 	mov	r4,r8
    21f4:	100d883a 	mov	r6,r2
    21f8:	180f883a 	mov	r7,r3
    21fc:	00028b00 	call	28b0 <__muldf3>
    2200:	100b883a 	mov	r5,r2
    2204:	1011883a 	mov	r8,r2
    2208:	00bffff4 	movhi	r2,65535
    220c:	108f2c04 	addi	r2,r2,15536
    2210:	180d883a 	mov	r6,r3
    2214:	1813883a 	mov	r9,r3
    2218:	8080120e 	bge	r16,r2,2264 <scalbn+0xbc>
    221c:	00b0be74 	movhi	r2,49913
    2220:	10bcd644 	addi	r2,r2,-3239
    2224:	00c06974 	movhi	r3,421
    2228:	18db87c4 	addi	r3,r3,28191
    222c:	2809883a 	mov	r4,r5
    2230:	180f883a 	mov	r7,r3
    2234:	300b883a 	mov	r5,r6
    2238:	100d883a 	mov	r6,r2
    223c:	00028b00 	call	28b0 <__muldf3>
    2240:	1011883a 	mov	r8,r2
    2244:	1813883a 	mov	r9,r3
    2248:	4005883a 	mov	r2,r8
    224c:	4807883a 	mov	r3,r9
    2250:	dfc00217 	ldw	ra,8(sp)
    2254:	dc400117 	ldw	r17,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00304 	addi	sp,sp,12
    2260:	f800283a 	ret
    2264:	189ffc2c 	andhi	r2,r3,32752
    2268:	1005d53a 	srai	r2,r2,20
    226c:	1815883a 	mov	r10,r3
    2270:	113ff284 	addi	r4,r2,-54
    2274:	0081ffc4 	movi	r2,2047
    2278:	20801126 	beq	r4,r2,22c0 <scalbn+0x118>
    227c:	2409883a 	add	r4,r4,r16
    2280:	0081ff84 	movi	r2,2046
    2284:	11001c16 	blt	r2,r4,22f8 <scalbn+0x150>
    2288:	0100290e 	bge	zero,r4,2330 <scalbn+0x188>
    228c:	200a953a 	slli	r5,r4,20
    2290:	01200434 	movhi	r4,32784
    2294:	213fffc4 	addi	r4,r4,-1
    2298:	5108703a 	and	r4,r10,r4
    229c:	2148b03a 	or	r4,r4,r5
    22a0:	2013883a 	mov	r9,r4
    22a4:	4005883a 	mov	r2,r8
    22a8:	4807883a 	mov	r3,r9
    22ac:	dfc00217 	ldw	ra,8(sp)
    22b0:	dc400117 	ldw	r17,4(sp)
    22b4:	dc000017 	ldw	r16,0(sp)
    22b8:	dec00304 	addi	sp,sp,12
    22bc:	f800283a 	ret
    22c0:	480f883a 	mov	r7,r9
    22c4:	4009883a 	mov	r4,r8
    22c8:	480b883a 	mov	r5,r9
    22cc:	400d883a 	mov	r6,r8
    22d0:	000283c0 	call	283c <__adddf3>
    22d4:	1011883a 	mov	r8,r2
    22d8:	1813883a 	mov	r9,r3
    22dc:	4005883a 	mov	r2,r8
    22e0:	4807883a 	mov	r3,r9
    22e4:	dfc00217 	ldw	ra,8(sp)
    22e8:	dc400117 	ldw	r17,4(sp)
    22ec:	dc000017 	ldw	r16,0(sp)
    22f0:	dec00304 	addi	sp,sp,12
    22f4:	f800283a 	ret
    22f8:	04220034 	movhi	r16,34816
    22fc:	841d6704 	addi	r16,r16,30108
    2300:	045f8e34 	movhi	r17,32312
    2304:	8c790f04 	addi	r17,r17,-7108
    2308:	480f883a 	mov	r7,r9
    230c:	400d883a 	mov	r6,r8
    2310:	8009883a 	mov	r4,r16
    2314:	880b883a 	mov	r5,r17
    2318:	00023880 	call	2388 <copysign>
    231c:	180b883a 	mov	r5,r3
    2320:	800d883a 	mov	r6,r16
    2324:	880f883a 	mov	r7,r17
    2328:	1009883a 	mov	r4,r2
    232c:	003fc306 	br	223c <scalbn+0x94>
    2330:	00bff284 	movi	r2,-54
    2334:	11000716 	blt	r2,r4,2354 <scalbn+0x1ac>
    2338:	00b0d414 	movui	r2,50000
    233c:	143fee16 	blt	r2,r16,22f8 <scalbn+0x150>
    2340:	0430be74 	movhi	r16,49913
    2344:	843cd644 	addi	r16,r16,-3239
    2348:	04406974 	movhi	r17,421
    234c:	8c5b87c4 	addi	r17,r17,28191
    2350:	003fed06 	br	2308 <scalbn+0x160>
    2354:	21000d84 	addi	r4,r4,54
    2358:	2008953a 	slli	r4,r4,20
    235c:	01e00434 	movhi	r7,32784
    2360:	39ffffc4 	addi	r7,r7,-1
    2364:	51ce703a 	and	r7,r10,r7
    2368:	390eb03a 	or	r7,r7,r4
    236c:	024f2434 	movhi	r9,15504
    2370:	4009883a 	mov	r4,r8
    2374:	0011883a 	mov	r8,zero
    2378:	380b883a 	mov	r5,r7
    237c:	400d883a 	mov	r6,r8
    2380:	480f883a 	mov	r7,r9
    2384:	003fad06 	br	223c <scalbn+0x94>

00002388 <copysign>:
    2388:	3813883a 	mov	r9,r7
    238c:	01e00034 	movhi	r7,32768
    2390:	39ffffc4 	addi	r7,r7,-1
    2394:	394e703a 	and	r7,r7,r5
    2398:	4aa0002c 	andhi	r10,r9,32768
    239c:	3a8eb03a 	or	r7,r7,r10
    23a0:	2005883a 	mov	r2,r4
    23a4:	3807883a 	mov	r3,r7
    23a8:	f800283a 	ret

000023ac <_fpadd_parts>:
    23ac:	defff804 	addi	sp,sp,-32
    23b0:	dcc00315 	stw	r19,12(sp)
    23b4:	2027883a 	mov	r19,r4
    23b8:	21000017 	ldw	r4,0(r4)
    23bc:	00c00044 	movi	r3,1
    23c0:	dd400515 	stw	r21,20(sp)
    23c4:	dd000415 	stw	r20,16(sp)
    23c8:	ddc00715 	stw	r23,28(sp)
    23cc:	dd800615 	stw	r22,24(sp)
    23d0:	dc800215 	stw	r18,8(sp)
    23d4:	dc400115 	stw	r17,4(sp)
    23d8:	dc000015 	stw	r16,0(sp)
    23dc:	282b883a 	mov	r21,r5
    23e0:	3029883a 	mov	r20,r6
    23e4:	1900632e 	bgeu	r3,r4,2574 <_fpadd_parts+0x1c8>
    23e8:	28800017 	ldw	r2,0(r5)
    23ec:	1880812e 	bgeu	r3,r2,25f4 <_fpadd_parts+0x248>
    23f0:	00c00104 	movi	r3,4
    23f4:	20c0dc26 	beq	r4,r3,2768 <_fpadd_parts+0x3bc>
    23f8:	10c07e26 	beq	r2,r3,25f4 <_fpadd_parts+0x248>
    23fc:	00c00084 	movi	r3,2
    2400:	10c06726 	beq	r2,r3,25a0 <_fpadd_parts+0x1f4>
    2404:	20c07b26 	beq	r4,r3,25f4 <_fpadd_parts+0x248>
    2408:	9dc00217 	ldw	r23,8(r19)
    240c:	28c00217 	ldw	r3,8(r5)
    2410:	9c400317 	ldw	r17,12(r19)
    2414:	2bc00317 	ldw	r15,12(r5)
    2418:	b8cdc83a 	sub	r6,r23,r3
    241c:	9c800417 	ldw	r18,16(r19)
    2420:	2c000417 	ldw	r16,16(r5)
    2424:	3009883a 	mov	r4,r6
    2428:	30009716 	blt	r6,zero,2688 <_fpadd_parts+0x2dc>
    242c:	00800fc4 	movi	r2,63
    2430:	11806b16 	blt	r2,r6,25e0 <_fpadd_parts+0x234>
    2434:	0100a40e 	bge	zero,r4,26c8 <_fpadd_parts+0x31c>
    2438:	35bff804 	addi	r22,r6,-32
    243c:	b000bc16 	blt	r22,zero,2730 <_fpadd_parts+0x384>
    2440:	8596d83a 	srl	r11,r16,r22
    2444:	0019883a 	mov	r12,zero
    2448:	0013883a 	mov	r9,zero
    244c:	01000044 	movi	r4,1
    2450:	0015883a 	mov	r10,zero
    2454:	b000be16 	blt	r22,zero,2750 <_fpadd_parts+0x3a4>
    2458:	2590983a 	sll	r8,r4,r22
    245c:	000f883a 	mov	r7,zero
    2460:	00bfffc4 	movi	r2,-1
    2464:	3889883a 	add	r4,r7,r2
    2468:	408b883a 	add	r5,r8,r2
    246c:	21cd803a 	cmpltu	r6,r4,r7
    2470:	314b883a 	add	r5,r6,r5
    2474:	7904703a 	and	r2,r15,r4
    2478:	8146703a 	and	r3,r16,r5
    247c:	10c4b03a 	or	r2,r2,r3
    2480:	10000226 	beq	r2,zero,248c <_fpadd_parts+0xe0>
    2484:	02400044 	movi	r9,1
    2488:	0015883a 	mov	r10,zero
    248c:	5a5eb03a 	or	r15,r11,r9
    2490:	62a0b03a 	or	r16,r12,r10
    2494:	99400117 	ldw	r5,4(r19)
    2498:	a8800117 	ldw	r2,4(r21)
    249c:	28806e26 	beq	r5,r2,2658 <_fpadd_parts+0x2ac>
    24a0:	28006626 	beq	r5,zero,263c <_fpadd_parts+0x290>
    24a4:	7c45c83a 	sub	r2,r15,r17
    24a8:	7889803a 	cmpltu	r4,r15,r2
    24ac:	8487c83a 	sub	r3,r16,r18
    24b0:	1909c83a 	sub	r4,r3,r4
    24b4:	100d883a 	mov	r6,r2
    24b8:	200f883a 	mov	r7,r4
    24bc:	38007716 	blt	r7,zero,269c <_fpadd_parts+0x2f0>
    24c0:	a5c00215 	stw	r23,8(r20)
    24c4:	a1c00415 	stw	r7,16(r20)
    24c8:	a0000115 	stw	zero,4(r20)
    24cc:	a1800315 	stw	r6,12(r20)
    24d0:	a2000317 	ldw	r8,12(r20)
    24d4:	a2400417 	ldw	r9,16(r20)
    24d8:	00bfffc4 	movi	r2,-1
    24dc:	408b883a 	add	r5,r8,r2
    24e0:	2a09803a 	cmpltu	r4,r5,r8
    24e4:	488d883a 	add	r6,r9,r2
    24e8:	01c40034 	movhi	r7,4096
    24ec:	39ffffc4 	addi	r7,r7,-1
    24f0:	218d883a 	add	r6,r4,r6
    24f4:	39801736 	bltu	r7,r6,2554 <_fpadd_parts+0x1a8>
    24f8:	31c06526 	beq	r6,r7,2690 <_fpadd_parts+0x2e4>
    24fc:	a3000217 	ldw	r12,8(r20)
    2500:	4209883a 	add	r4,r8,r8
    2504:	00bfffc4 	movi	r2,-1
    2508:	220f803a 	cmpltu	r7,r4,r8
    250c:	4a4b883a 	add	r5,r9,r9
    2510:	394f883a 	add	r7,r7,r5
    2514:	2095883a 	add	r10,r4,r2
    2518:	3897883a 	add	r11,r7,r2
    251c:	510d803a 	cmpltu	r6,r10,r4
    2520:	6099883a 	add	r12,r12,r2
    2524:	32d7883a 	add	r11,r6,r11
    2528:	00840034 	movhi	r2,4096
    252c:	10bfffc4 	addi	r2,r2,-1
    2530:	2011883a 	mov	r8,r4
    2534:	3813883a 	mov	r9,r7
    2538:	a1000315 	stw	r4,12(r20)
    253c:	a1c00415 	stw	r7,16(r20)
    2540:	a3000215 	stw	r12,8(r20)
    2544:	12c00336 	bltu	r2,r11,2554 <_fpadd_parts+0x1a8>
    2548:	58bfed1e 	bne	r11,r2,2500 <_fpadd_parts+0x154>
    254c:	00bfff84 	movi	r2,-2
    2550:	12bfeb2e 	bgeu	r2,r10,2500 <_fpadd_parts+0x154>
    2554:	a2800417 	ldw	r10,16(r20)
    2558:	008000c4 	movi	r2,3
    255c:	00c80034 	movhi	r3,8192
    2560:	18ffffc4 	addi	r3,r3,-1
    2564:	a2400317 	ldw	r9,12(r20)
    2568:	a0800015 	stw	r2,0(r20)
    256c:	1a802336 	bltu	r3,r10,25fc <_fpadd_parts+0x250>
    2570:	a027883a 	mov	r19,r20
    2574:	9805883a 	mov	r2,r19
    2578:	ddc00717 	ldw	r23,28(sp)
    257c:	dd800617 	ldw	r22,24(sp)
    2580:	dd400517 	ldw	r21,20(sp)
    2584:	dd000417 	ldw	r20,16(sp)
    2588:	dcc00317 	ldw	r19,12(sp)
    258c:	dc800217 	ldw	r18,8(sp)
    2590:	dc400117 	ldw	r17,4(sp)
    2594:	dc000017 	ldw	r16,0(sp)
    2598:	dec00804 	addi	sp,sp,32
    259c:	f800283a 	ret
    25a0:	20fff41e 	bne	r4,r3,2574 <_fpadd_parts+0x1c8>
    25a4:	31000015 	stw	r4,0(r6)
    25a8:	98800117 	ldw	r2,4(r19)
    25ac:	30800115 	stw	r2,4(r6)
    25b0:	98c00217 	ldw	r3,8(r19)
    25b4:	30c00215 	stw	r3,8(r6)
    25b8:	98800317 	ldw	r2,12(r19)
    25bc:	30800315 	stw	r2,12(r6)
    25c0:	98c00417 	ldw	r3,16(r19)
    25c4:	30c00415 	stw	r3,16(r6)
    25c8:	98800117 	ldw	r2,4(r19)
    25cc:	28c00117 	ldw	r3,4(r5)
    25d0:	3027883a 	mov	r19,r6
    25d4:	10c4703a 	and	r2,r2,r3
    25d8:	30800115 	stw	r2,4(r6)
    25dc:	003fe506 	br	2574 <_fpadd_parts+0x1c8>
    25e0:	1dc02616 	blt	r3,r23,267c <_fpadd_parts+0x2d0>
    25e4:	0023883a 	mov	r17,zero
    25e8:	182f883a 	mov	r23,r3
    25ec:	0025883a 	mov	r18,zero
    25f0:	003fa806 	br	2494 <_fpadd_parts+0xe8>
    25f4:	a827883a 	mov	r19,r21
    25f8:	003fde06 	br	2574 <_fpadd_parts+0x1c8>
    25fc:	01800044 	movi	r6,1
    2600:	500497fa 	slli	r2,r10,31
    2604:	4808d07a 	srli	r4,r9,1
    2608:	518ad83a 	srl	r5,r10,r6
    260c:	a2000217 	ldw	r8,8(r20)
    2610:	1108b03a 	or	r4,r2,r4
    2614:	0007883a 	mov	r3,zero
    2618:	4984703a 	and	r2,r9,r6
    261c:	208cb03a 	or	r6,r4,r2
    2620:	28ceb03a 	or	r7,r5,r3
    2624:	42000044 	addi	r8,r8,1
    2628:	a027883a 	mov	r19,r20
    262c:	a1c00415 	stw	r7,16(r20)
    2630:	a2000215 	stw	r8,8(r20)
    2634:	a1800315 	stw	r6,12(r20)
    2638:	003fce06 	br	2574 <_fpadd_parts+0x1c8>
    263c:	8bc5c83a 	sub	r2,r17,r15
    2640:	8889803a 	cmpltu	r4,r17,r2
    2644:	9407c83a 	sub	r3,r18,r16
    2648:	1909c83a 	sub	r4,r3,r4
    264c:	100d883a 	mov	r6,r2
    2650:	200f883a 	mov	r7,r4
    2654:	003f9906 	br	24bc <_fpadd_parts+0x110>
    2658:	7c45883a 	add	r2,r15,r17
    265c:	13c9803a 	cmpltu	r4,r2,r15
    2660:	8487883a 	add	r3,r16,r18
    2664:	20c9883a 	add	r4,r4,r3
    2668:	a1400115 	stw	r5,4(r20)
    266c:	a5c00215 	stw	r23,8(r20)
    2670:	a0800315 	stw	r2,12(r20)
    2674:	a1000415 	stw	r4,16(r20)
    2678:	003fb606 	br	2554 <_fpadd_parts+0x1a8>
    267c:	001f883a 	mov	r15,zero
    2680:	0021883a 	mov	r16,zero
    2684:	003f8306 	br	2494 <_fpadd_parts+0xe8>
    2688:	018dc83a 	sub	r6,zero,r6
    268c:	003f6706 	br	242c <_fpadd_parts+0x80>
    2690:	00bfff84 	movi	r2,-2
    2694:	117faf36 	bltu	r2,r5,2554 <_fpadd_parts+0x1a8>
    2698:	003f9806 	br	24fc <_fpadd_parts+0x150>
    269c:	0005883a 	mov	r2,zero
    26a0:	1189c83a 	sub	r4,r2,r6
    26a4:	1105803a 	cmpltu	r2,r2,r4
    26a8:	01cbc83a 	sub	r5,zero,r7
    26ac:	2885c83a 	sub	r2,r5,r2
    26b0:	01800044 	movi	r6,1
    26b4:	a1800115 	stw	r6,4(r20)
    26b8:	a5c00215 	stw	r23,8(r20)
    26bc:	a1000315 	stw	r4,12(r20)
    26c0:	a0800415 	stw	r2,16(r20)
    26c4:	003f8206 	br	24d0 <_fpadd_parts+0x124>
    26c8:	203f7226 	beq	r4,zero,2494 <_fpadd_parts+0xe8>
    26cc:	35bff804 	addi	r22,r6,-32
    26d0:	b9af883a 	add	r23,r23,r6
    26d4:	b0003116 	blt	r22,zero,279c <_fpadd_parts+0x3f0>
    26d8:	959ad83a 	srl	r13,r18,r22
    26dc:	001d883a 	mov	r14,zero
    26e0:	000f883a 	mov	r7,zero
    26e4:	01000044 	movi	r4,1
    26e8:	0011883a 	mov	r8,zero
    26ec:	b0002516 	blt	r22,zero,2784 <_fpadd_parts+0x3d8>
    26f0:	2594983a 	sll	r10,r4,r22
    26f4:	0013883a 	mov	r9,zero
    26f8:	00bfffc4 	movi	r2,-1
    26fc:	4889883a 	add	r4,r9,r2
    2700:	508b883a 	add	r5,r10,r2
    2704:	224d803a 	cmpltu	r6,r4,r9
    2708:	314b883a 	add	r5,r6,r5
    270c:	8904703a 	and	r2,r17,r4
    2710:	9146703a 	and	r3,r18,r5
    2714:	10c4b03a 	or	r2,r2,r3
    2718:	10000226 	beq	r2,zero,2724 <_fpadd_parts+0x378>
    271c:	01c00044 	movi	r7,1
    2720:	0011883a 	mov	r8,zero
    2724:	69e2b03a 	or	r17,r13,r7
    2728:	7224b03a 	or	r18,r14,r8
    272c:	003f5906 	br	2494 <_fpadd_parts+0xe8>
    2730:	8407883a 	add	r3,r16,r16
    2734:	008007c4 	movi	r2,31
    2738:	1185c83a 	sub	r2,r2,r6
    273c:	1886983a 	sll	r3,r3,r2
    2740:	7996d83a 	srl	r11,r15,r6
    2744:	8198d83a 	srl	r12,r16,r6
    2748:	1ad6b03a 	or	r11,r3,r11
    274c:	003f3e06 	br	2448 <_fpadd_parts+0x9c>
    2750:	2006d07a 	srli	r3,r4,1
    2754:	008007c4 	movi	r2,31
    2758:	1185c83a 	sub	r2,r2,r6
    275c:	1890d83a 	srl	r8,r3,r2
    2760:	218e983a 	sll	r7,r4,r6
    2764:	003f3e06 	br	2460 <_fpadd_parts+0xb4>
    2768:	113f821e 	bne	r2,r4,2574 <_fpadd_parts+0x1c8>
    276c:	28c00117 	ldw	r3,4(r5)
    2770:	98800117 	ldw	r2,4(r19)
    2774:	10ff7f26 	beq	r2,r3,2574 <_fpadd_parts+0x1c8>
    2778:	04c00074 	movhi	r19,1
    277c:	9ce30304 	addi	r19,r19,-29684
    2780:	003f7c06 	br	2574 <_fpadd_parts+0x1c8>
    2784:	2006d07a 	srli	r3,r4,1
    2788:	008007c4 	movi	r2,31
    278c:	1185c83a 	sub	r2,r2,r6
    2790:	1894d83a 	srl	r10,r3,r2
    2794:	2192983a 	sll	r9,r4,r6
    2798:	003fd706 	br	26f8 <_fpadd_parts+0x34c>
    279c:	9487883a 	add	r3,r18,r18
    27a0:	008007c4 	movi	r2,31
    27a4:	1185c83a 	sub	r2,r2,r6
    27a8:	1886983a 	sll	r3,r3,r2
    27ac:	899ad83a 	srl	r13,r17,r6
    27b0:	919cd83a 	srl	r14,r18,r6
    27b4:	1b5ab03a 	or	r13,r3,r13
    27b8:	003fc906 	br	26e0 <_fpadd_parts+0x334>

000027bc <__subdf3>:
    27bc:	deffea04 	addi	sp,sp,-88
    27c0:	dcc01415 	stw	r19,80(sp)
    27c4:	dcc00404 	addi	r19,sp,16
    27c8:	2011883a 	mov	r8,r4
    27cc:	2813883a 	mov	r9,r5
    27d0:	dc401315 	stw	r17,76(sp)
    27d4:	d809883a 	mov	r4,sp
    27d8:	980b883a 	mov	r5,r19
    27dc:	dc400904 	addi	r17,sp,36
    27e0:	dfc01515 	stw	ra,84(sp)
    27e4:	da400115 	stw	r9,4(sp)
    27e8:	d9c00315 	stw	r7,12(sp)
    27ec:	da000015 	stw	r8,0(sp)
    27f0:	d9800215 	stw	r6,8(sp)
    27f4:	00037700 	call	3770 <__unpack_d>
    27f8:	d9000204 	addi	r4,sp,8
    27fc:	880b883a 	mov	r5,r17
    2800:	00037700 	call	3770 <__unpack_d>
    2804:	d8800a17 	ldw	r2,40(sp)
    2808:	880b883a 	mov	r5,r17
    280c:	9809883a 	mov	r4,r19
    2810:	d9800e04 	addi	r6,sp,56
    2814:	1080005c 	xori	r2,r2,1
    2818:	d8800a15 	stw	r2,40(sp)
    281c:	00023ac0 	call	23ac <_fpadd_parts>
    2820:	1009883a 	mov	r4,r2
    2824:	000345c0 	call	345c <__pack_d>
    2828:	dfc01517 	ldw	ra,84(sp)
    282c:	dcc01417 	ldw	r19,80(sp)
    2830:	dc401317 	ldw	r17,76(sp)
    2834:	dec01604 	addi	sp,sp,88
    2838:	f800283a 	ret

0000283c <__adddf3>:
    283c:	deffea04 	addi	sp,sp,-88
    2840:	dcc01415 	stw	r19,80(sp)
    2844:	dcc00404 	addi	r19,sp,16
    2848:	2011883a 	mov	r8,r4
    284c:	2813883a 	mov	r9,r5
    2850:	dc401315 	stw	r17,76(sp)
    2854:	d809883a 	mov	r4,sp
    2858:	980b883a 	mov	r5,r19
    285c:	dc400904 	addi	r17,sp,36
    2860:	dfc01515 	stw	ra,84(sp)
    2864:	da400115 	stw	r9,4(sp)
    2868:	d9c00315 	stw	r7,12(sp)
    286c:	da000015 	stw	r8,0(sp)
    2870:	d9800215 	stw	r6,8(sp)
    2874:	00037700 	call	3770 <__unpack_d>
    2878:	d9000204 	addi	r4,sp,8
    287c:	880b883a 	mov	r5,r17
    2880:	00037700 	call	3770 <__unpack_d>
    2884:	d9800e04 	addi	r6,sp,56
    2888:	9809883a 	mov	r4,r19
    288c:	880b883a 	mov	r5,r17
    2890:	00023ac0 	call	23ac <_fpadd_parts>
    2894:	1009883a 	mov	r4,r2
    2898:	000345c0 	call	345c <__pack_d>
    289c:	dfc01517 	ldw	ra,84(sp)
    28a0:	dcc01417 	ldw	r19,80(sp)
    28a4:	dc401317 	ldw	r17,76(sp)
    28a8:	dec01604 	addi	sp,sp,88
    28ac:	f800283a 	ret

000028b0 <__muldf3>:
    28b0:	deffe004 	addi	sp,sp,-128
    28b4:	dc401815 	stw	r17,96(sp)
    28b8:	dc400404 	addi	r17,sp,16
    28bc:	2011883a 	mov	r8,r4
    28c0:	2813883a 	mov	r9,r5
    28c4:	dc001715 	stw	r16,92(sp)
    28c8:	d809883a 	mov	r4,sp
    28cc:	880b883a 	mov	r5,r17
    28d0:	dc000904 	addi	r16,sp,36
    28d4:	dfc01f15 	stw	ra,124(sp)
    28d8:	da400115 	stw	r9,4(sp)
    28dc:	d9c00315 	stw	r7,12(sp)
    28e0:	da000015 	stw	r8,0(sp)
    28e4:	d9800215 	stw	r6,8(sp)
    28e8:	ddc01e15 	stw	r23,120(sp)
    28ec:	dd801d15 	stw	r22,116(sp)
    28f0:	dd401c15 	stw	r21,112(sp)
    28f4:	dd001b15 	stw	r20,108(sp)
    28f8:	dcc01a15 	stw	r19,104(sp)
    28fc:	dc801915 	stw	r18,100(sp)
    2900:	00037700 	call	3770 <__unpack_d>
    2904:	d9000204 	addi	r4,sp,8
    2908:	800b883a 	mov	r5,r16
    290c:	00037700 	call	3770 <__unpack_d>
    2910:	d9000417 	ldw	r4,16(sp)
    2914:	00800044 	movi	r2,1
    2918:	1100102e 	bgeu	r2,r4,295c <__muldf3+0xac>
    291c:	d8c00917 	ldw	r3,36(sp)
    2920:	10c0062e 	bgeu	r2,r3,293c <__muldf3+0x8c>
    2924:	00800104 	movi	r2,4
    2928:	20800a26 	beq	r4,r2,2954 <__muldf3+0xa4>
    292c:	1880cc26 	beq	r3,r2,2c60 <__muldf3+0x3b0>
    2930:	00800084 	movi	r2,2
    2934:	20800926 	beq	r4,r2,295c <__muldf3+0xac>
    2938:	1880191e 	bne	r3,r2,29a0 <__muldf3+0xf0>
    293c:	d8c00a17 	ldw	r3,40(sp)
    2940:	d8800517 	ldw	r2,20(sp)
    2944:	8009883a 	mov	r4,r16
    2948:	10c4c03a 	cmpne	r2,r2,r3
    294c:	d8800a15 	stw	r2,40(sp)
    2950:	00000706 	br	2970 <__muldf3+0xc0>
    2954:	00800084 	movi	r2,2
    2958:	1880c326 	beq	r3,r2,2c68 <__muldf3+0x3b8>
    295c:	d8800517 	ldw	r2,20(sp)
    2960:	d8c00a17 	ldw	r3,40(sp)
    2964:	8809883a 	mov	r4,r17
    2968:	10c4c03a 	cmpne	r2,r2,r3
    296c:	d8800515 	stw	r2,20(sp)
    2970:	000345c0 	call	345c <__pack_d>
    2974:	dfc01f17 	ldw	ra,124(sp)
    2978:	ddc01e17 	ldw	r23,120(sp)
    297c:	dd801d17 	ldw	r22,116(sp)
    2980:	dd401c17 	ldw	r21,112(sp)
    2984:	dd001b17 	ldw	r20,108(sp)
    2988:	dcc01a17 	ldw	r19,104(sp)
    298c:	dc801917 	ldw	r18,100(sp)
    2990:	dc401817 	ldw	r17,96(sp)
    2994:	dc001717 	ldw	r16,92(sp)
    2998:	dec02004 	addi	sp,sp,128
    299c:	f800283a 	ret
    29a0:	dd800717 	ldw	r22,28(sp)
    29a4:	dc800c17 	ldw	r18,48(sp)
    29a8:	002b883a 	mov	r21,zero
    29ac:	0023883a 	mov	r17,zero
    29b0:	a80b883a 	mov	r5,r21
    29b4:	b00d883a 	mov	r6,r22
    29b8:	880f883a 	mov	r7,r17
    29bc:	ddc00817 	ldw	r23,32(sp)
    29c0:	dcc00d17 	ldw	r19,52(sp)
    29c4:	9009883a 	mov	r4,r18
    29c8:	00033440 	call	3344 <__muldi3>
    29cc:	001b883a 	mov	r13,zero
    29d0:	680f883a 	mov	r7,r13
    29d4:	b009883a 	mov	r4,r22
    29d8:	000b883a 	mov	r5,zero
    29dc:	980d883a 	mov	r6,r19
    29e0:	b82d883a 	mov	r22,r23
    29e4:	002f883a 	mov	r23,zero
    29e8:	db401615 	stw	r13,88(sp)
    29ec:	d8801315 	stw	r2,76(sp)
    29f0:	d8c01415 	stw	r3,80(sp)
    29f4:	dcc01515 	stw	r19,84(sp)
    29f8:	00033440 	call	3344 <__muldi3>
    29fc:	b00d883a 	mov	r6,r22
    2a00:	000b883a 	mov	r5,zero
    2a04:	9009883a 	mov	r4,r18
    2a08:	b80f883a 	mov	r7,r23
    2a0c:	1021883a 	mov	r16,r2
    2a10:	1823883a 	mov	r17,r3
    2a14:	00033440 	call	3344 <__muldi3>
    2a18:	8085883a 	add	r2,r16,r2
    2a1c:	140d803a 	cmpltu	r6,r2,r16
    2a20:	88c7883a 	add	r3,r17,r3
    2a24:	30cd883a 	add	r6,r6,r3
    2a28:	1029883a 	mov	r20,r2
    2a2c:	302b883a 	mov	r21,r6
    2a30:	da801317 	ldw	r10,76(sp)
    2a34:	dac01417 	ldw	r11,80(sp)
    2a38:	db001517 	ldw	r12,84(sp)
    2a3c:	db401617 	ldw	r13,88(sp)
    2a40:	3440612e 	bgeu	r6,r17,2bc8 <__muldf3+0x318>
    2a44:	0009883a 	mov	r4,zero
    2a48:	5105883a 	add	r2,r10,r4
    2a4c:	128d803a 	cmpltu	r6,r2,r10
    2a50:	5d07883a 	add	r3,r11,r20
    2a54:	30cd883a 	add	r6,r6,r3
    2a58:	0021883a 	mov	r16,zero
    2a5c:	04400044 	movi	r17,1
    2a60:	1025883a 	mov	r18,r2
    2a64:	3027883a 	mov	r19,r6
    2a68:	32c06236 	bltu	r6,r11,2bf4 <__muldf3+0x344>
    2a6c:	59807a26 	beq	r11,r6,2c58 <__muldf3+0x3a8>
    2a70:	680b883a 	mov	r5,r13
    2a74:	b80f883a 	mov	r7,r23
    2a78:	6009883a 	mov	r4,r12
    2a7c:	b00d883a 	mov	r6,r22
    2a80:	00033440 	call	3344 <__muldi3>
    2a84:	1009883a 	mov	r4,r2
    2a88:	000f883a 	mov	r7,zero
    2a8c:	1545883a 	add	r2,r2,r21
    2a90:	1111803a 	cmpltu	r8,r2,r4
    2a94:	19c7883a 	add	r3,r3,r7
    2a98:	40c7883a 	add	r3,r8,r3
    2a9c:	88cb883a 	add	r5,r17,r3
    2aa0:	d8c00617 	ldw	r3,24(sp)
    2aa4:	8089883a 	add	r4,r16,r2
    2aa8:	d8800b17 	ldw	r2,44(sp)
    2aac:	18c00104 	addi	r3,r3,4
    2ab0:	240d803a 	cmpltu	r6,r4,r16
    2ab4:	10c7883a 	add	r3,r2,r3
    2ab8:	2013883a 	mov	r9,r4
    2abc:	d8800a17 	ldw	r2,40(sp)
    2ac0:	d9000517 	ldw	r4,20(sp)
    2ac4:	314d883a 	add	r6,r6,r5
    2ac8:	3015883a 	mov	r10,r6
    2acc:	2088c03a 	cmpne	r4,r4,r2
    2ad0:	00880034 	movhi	r2,8192
    2ad4:	10bfffc4 	addi	r2,r2,-1
    2ad8:	d9000f15 	stw	r4,60(sp)
    2adc:	d8c01015 	stw	r3,64(sp)
    2ae0:	1180162e 	bgeu	r2,r6,2b3c <__muldf3+0x28c>
    2ae4:	1811883a 	mov	r8,r3
    2ae8:	101f883a 	mov	r15,r2
    2aec:	980497fa 	slli	r2,r19,31
    2af0:	9016d07a 	srli	r11,r18,1
    2af4:	500697fa 	slli	r3,r10,31
    2af8:	480cd07a 	srli	r6,r9,1
    2afc:	500ed07a 	srli	r7,r10,1
    2b00:	12d6b03a 	or	r11,r2,r11
    2b04:	00800044 	movi	r2,1
    2b08:	198cb03a 	or	r6,r3,r6
    2b0c:	4888703a 	and	r4,r9,r2
    2b10:	9818d07a 	srli	r12,r19,1
    2b14:	001b883a 	mov	r13,zero
    2b18:	03a00034 	movhi	r14,32768
    2b1c:	3013883a 	mov	r9,r6
    2b20:	3815883a 	mov	r10,r7
    2b24:	4091883a 	add	r8,r8,r2
    2b28:	20000226 	beq	r4,zero,2b34 <__muldf3+0x284>
    2b2c:	5b64b03a 	or	r18,r11,r13
    2b30:	63a6b03a 	or	r19,r12,r14
    2b34:	7abfed36 	bltu	r15,r10,2aec <__muldf3+0x23c>
    2b38:	da001015 	stw	r8,64(sp)
    2b3c:	00840034 	movhi	r2,4096
    2b40:	10bfffc4 	addi	r2,r2,-1
    2b44:	12801436 	bltu	r2,r10,2b98 <__muldf3+0x2e8>
    2b48:	da001017 	ldw	r8,64(sp)
    2b4c:	101f883a 	mov	r15,r2
    2b50:	4a45883a 	add	r2,r9,r9
    2b54:	124d803a 	cmpltu	r6,r2,r9
    2b58:	5287883a 	add	r3,r10,r10
    2b5c:	9497883a 	add	r11,r18,r18
    2b60:	5c8f803a 	cmpltu	r7,r11,r18
    2b64:	9cd9883a 	add	r12,r19,r19
    2b68:	01000044 	movi	r4,1
    2b6c:	30cd883a 	add	r6,r6,r3
    2b70:	3b0f883a 	add	r7,r7,r12
    2b74:	423fffc4 	addi	r8,r8,-1
    2b78:	1013883a 	mov	r9,r2
    2b7c:	3015883a 	mov	r10,r6
    2b80:	111ab03a 	or	r13,r2,r4
    2b84:	98003016 	blt	r19,zero,2c48 <__muldf3+0x398>
    2b88:	5825883a 	mov	r18,r11
    2b8c:	3827883a 	mov	r19,r7
    2b90:	7abfef2e 	bgeu	r15,r10,2b50 <__muldf3+0x2a0>
    2b94:	da001015 	stw	r8,64(sp)
    2b98:	00803fc4 	movi	r2,255
    2b9c:	488e703a 	and	r7,r9,r2
    2ba0:	00802004 	movi	r2,128
    2ba4:	0007883a 	mov	r3,zero
    2ba8:	0011883a 	mov	r8,zero
    2bac:	38801826 	beq	r7,r2,2c10 <__muldf3+0x360>
    2bb0:	008000c4 	movi	r2,3
    2bb4:	d9000e04 	addi	r4,sp,56
    2bb8:	da801215 	stw	r10,72(sp)
    2bbc:	d8800e15 	stw	r2,56(sp)
    2bc0:	da401115 	stw	r9,68(sp)
    2bc4:	003f6a06 	br	2970 <__muldf3+0xc0>
    2bc8:	89802126 	beq	r17,r6,2c50 <__muldf3+0x3a0>
    2bcc:	0009883a 	mov	r4,zero
    2bd0:	5105883a 	add	r2,r10,r4
    2bd4:	128d803a 	cmpltu	r6,r2,r10
    2bd8:	5d07883a 	add	r3,r11,r20
    2bdc:	30cd883a 	add	r6,r6,r3
    2be0:	0021883a 	mov	r16,zero
    2be4:	0023883a 	mov	r17,zero
    2be8:	1025883a 	mov	r18,r2
    2bec:	3027883a 	mov	r19,r6
    2bf0:	32ff9e2e 	bgeu	r6,r11,2a6c <__muldf3+0x1bc>
    2bf4:	00800044 	movi	r2,1
    2bf8:	8089883a 	add	r4,r16,r2
    2bfc:	240d803a 	cmpltu	r6,r4,r16
    2c00:	344d883a 	add	r6,r6,r17
    2c04:	2021883a 	mov	r16,r4
    2c08:	3023883a 	mov	r17,r6
    2c0c:	003f9806 	br	2a70 <__muldf3+0x1c0>
    2c10:	403fe71e 	bne	r8,zero,2bb0 <__muldf3+0x300>
    2c14:	01004004 	movi	r4,256
    2c18:	4904703a 	and	r2,r9,r4
    2c1c:	10c4b03a 	or	r2,r2,r3
    2c20:	103fe31e 	bne	r2,zero,2bb0 <__muldf3+0x300>
    2c24:	94c4b03a 	or	r2,r18,r19
    2c28:	103fe126 	beq	r2,zero,2bb0 <__muldf3+0x300>
    2c2c:	49c5883a 	add	r2,r9,r7
    2c30:	1251803a 	cmpltu	r8,r2,r9
    2c34:	4291883a 	add	r8,r8,r10
    2c38:	013fc004 	movi	r4,-256
    2c3c:	1112703a 	and	r9,r2,r4
    2c40:	4015883a 	mov	r10,r8
    2c44:	003fda06 	br	2bb0 <__muldf3+0x300>
    2c48:	6813883a 	mov	r9,r13
    2c4c:	003fce06 	br	2b88 <__muldf3+0x2d8>
    2c50:	143f7c36 	bltu	r2,r16,2a44 <__muldf3+0x194>
    2c54:	003fdd06 	br	2bcc <__muldf3+0x31c>
    2c58:	12bf852e 	bgeu	r2,r10,2a70 <__muldf3+0x1c0>
    2c5c:	003fe506 	br	2bf4 <__muldf3+0x344>
    2c60:	00800084 	movi	r2,2
    2c64:	20bf351e 	bne	r4,r2,293c <__muldf3+0x8c>
    2c68:	01000074 	movhi	r4,1
    2c6c:	21230304 	addi	r4,r4,-29684
    2c70:	003f3f06 	br	2970 <__muldf3+0xc0>

00002c74 <__divdf3>:
    2c74:	deffed04 	addi	sp,sp,-76
    2c78:	dcc01115 	stw	r19,68(sp)
    2c7c:	dcc00404 	addi	r19,sp,16
    2c80:	2011883a 	mov	r8,r4
    2c84:	2813883a 	mov	r9,r5
    2c88:	dc000e15 	stw	r16,56(sp)
    2c8c:	d809883a 	mov	r4,sp
    2c90:	980b883a 	mov	r5,r19
    2c94:	dc000904 	addi	r16,sp,36
    2c98:	dfc01215 	stw	ra,72(sp)
    2c9c:	da400115 	stw	r9,4(sp)
    2ca0:	d9c00315 	stw	r7,12(sp)
    2ca4:	da000015 	stw	r8,0(sp)
    2ca8:	d9800215 	stw	r6,8(sp)
    2cac:	dc801015 	stw	r18,64(sp)
    2cb0:	dc400f15 	stw	r17,60(sp)
    2cb4:	00037700 	call	3770 <__unpack_d>
    2cb8:	d9000204 	addi	r4,sp,8
    2cbc:	800b883a 	mov	r5,r16
    2cc0:	00037700 	call	3770 <__unpack_d>
    2cc4:	d9000417 	ldw	r4,16(sp)
    2cc8:	00800044 	movi	r2,1
    2ccc:	11000b2e 	bgeu	r2,r4,2cfc <__divdf3+0x88>
    2cd0:	d9400917 	ldw	r5,36(sp)
    2cd4:	1140762e 	bgeu	r2,r5,2eb0 <__divdf3+0x23c>
    2cd8:	d8800517 	ldw	r2,20(sp)
    2cdc:	d8c00a17 	ldw	r3,40(sp)
    2ce0:	01800104 	movi	r6,4
    2ce4:	10c4f03a 	xor	r2,r2,r3
    2ce8:	d8800515 	stw	r2,20(sp)
    2cec:	21800226 	beq	r4,r6,2cf8 <__divdf3+0x84>
    2cf0:	00800084 	movi	r2,2
    2cf4:	2080141e 	bne	r4,r2,2d48 <__divdf3+0xd4>
    2cf8:	29000926 	beq	r5,r4,2d20 <__divdf3+0xac>
    2cfc:	9809883a 	mov	r4,r19
    2d00:	000345c0 	call	345c <__pack_d>
    2d04:	dfc01217 	ldw	ra,72(sp)
    2d08:	dcc01117 	ldw	r19,68(sp)
    2d0c:	dc801017 	ldw	r18,64(sp)
    2d10:	dc400f17 	ldw	r17,60(sp)
    2d14:	dc000e17 	ldw	r16,56(sp)
    2d18:	dec01304 	addi	sp,sp,76
    2d1c:	f800283a 	ret
    2d20:	01000074 	movhi	r4,1
    2d24:	21230304 	addi	r4,r4,-29684
    2d28:	000345c0 	call	345c <__pack_d>
    2d2c:	dfc01217 	ldw	ra,72(sp)
    2d30:	dcc01117 	ldw	r19,68(sp)
    2d34:	dc801017 	ldw	r18,64(sp)
    2d38:	dc400f17 	ldw	r17,60(sp)
    2d3c:	dc000e17 	ldw	r16,56(sp)
    2d40:	dec01304 	addi	sp,sp,76
    2d44:	f800283a 	ret
    2d48:	29805b26 	beq	r5,r6,2eb8 <__divdf3+0x244>
    2d4c:	28802d26 	beq	r5,r2,2e04 <__divdf3+0x190>
    2d50:	d8c00617 	ldw	r3,24(sp)
    2d54:	d8800b17 	ldw	r2,44(sp)
    2d58:	d9c00817 	ldw	r7,32(sp)
    2d5c:	dc400d17 	ldw	r17,52(sp)
    2d60:	188bc83a 	sub	r5,r3,r2
    2d64:	d9800717 	ldw	r6,28(sp)
    2d68:	dc000c17 	ldw	r16,48(sp)
    2d6c:	d9400615 	stw	r5,24(sp)
    2d70:	3c403836 	bltu	r7,r17,2e54 <__divdf3+0x1e0>
    2d74:	89c03626 	beq	r17,r7,2e50 <__divdf3+0x1dc>
    2d78:	0015883a 	mov	r10,zero
    2d7c:	001d883a 	mov	r14,zero
    2d80:	02c40034 	movhi	r11,4096
    2d84:	001f883a 	mov	r15,zero
    2d88:	003f883a 	mov	ra,zero
    2d8c:	04800f44 	movi	r18,61
    2d90:	00000f06 	br	2dd0 <__divdf3+0x15c>
    2d94:	601d883a 	mov	r14,r12
    2d98:	681f883a 	mov	r15,r13
    2d9c:	400d883a 	mov	r6,r8
    2da0:	100f883a 	mov	r7,r2
    2da4:	3191883a 	add	r8,r6,r6
    2da8:	5808d07a 	srli	r4,r11,1
    2dac:	4185803a 	cmpltu	r2,r8,r6
    2db0:	39d3883a 	add	r9,r7,r7
    2db4:	28c6b03a 	or	r3,r5,r3
    2db8:	1245883a 	add	r2,r2,r9
    2dbc:	1815883a 	mov	r10,r3
    2dc0:	2017883a 	mov	r11,r4
    2dc4:	400d883a 	mov	r6,r8
    2dc8:	100f883a 	mov	r7,r2
    2dcc:	fc801726 	beq	ra,r18,2e2c <__divdf3+0x1b8>
    2dd0:	580a97fa 	slli	r5,r11,31
    2dd4:	5006d07a 	srli	r3,r10,1
    2dd8:	ffc00044 	addi	ra,ra,1
    2ddc:	3c7ff136 	bltu	r7,r17,2da4 <__divdf3+0x130>
    2de0:	3411c83a 	sub	r8,r6,r16
    2de4:	3205803a 	cmpltu	r2,r6,r8
    2de8:	3c53c83a 	sub	r9,r7,r17
    2dec:	7298b03a 	or	r12,r14,r10
    2df0:	7adab03a 	or	r13,r15,r11
    2df4:	4885c83a 	sub	r2,r9,r2
    2df8:	89ffe61e 	bne	r17,r7,2d94 <__divdf3+0x120>
    2dfc:	343fe936 	bltu	r6,r16,2da4 <__divdf3+0x130>
    2e00:	003fe406 	br	2d94 <__divdf3+0x120>
    2e04:	9809883a 	mov	r4,r19
    2e08:	d9800415 	stw	r6,16(sp)
    2e0c:	000345c0 	call	345c <__pack_d>
    2e10:	dfc01217 	ldw	ra,72(sp)
    2e14:	dcc01117 	ldw	r19,68(sp)
    2e18:	dc801017 	ldw	r18,64(sp)
    2e1c:	dc400f17 	ldw	r17,60(sp)
    2e20:	dc000e17 	ldw	r16,56(sp)
    2e24:	dec01304 	addi	sp,sp,76
    2e28:	f800283a 	ret
    2e2c:	00803fc4 	movi	r2,255
    2e30:	7090703a 	and	r8,r14,r2
    2e34:	00802004 	movi	r2,128
    2e38:	0007883a 	mov	r3,zero
    2e3c:	0013883a 	mov	r9,zero
    2e40:	40800d26 	beq	r8,r2,2e78 <__divdf3+0x204>
    2e44:	dbc00815 	stw	r15,32(sp)
    2e48:	db800715 	stw	r14,28(sp)
    2e4c:	003fab06 	br	2cfc <__divdf3+0x88>
    2e50:	343fc92e 	bgeu	r6,r16,2d78 <__divdf3+0x104>
    2e54:	3185883a 	add	r2,r6,r6
    2e58:	1189803a 	cmpltu	r4,r2,r6
    2e5c:	39c7883a 	add	r3,r7,r7
    2e60:	20c9883a 	add	r4,r4,r3
    2e64:	297fffc4 	addi	r5,r5,-1
    2e68:	100d883a 	mov	r6,r2
    2e6c:	200f883a 	mov	r7,r4
    2e70:	d9400615 	stw	r5,24(sp)
    2e74:	003fc006 	br	2d78 <__divdf3+0x104>
    2e78:	483ff21e 	bne	r9,zero,2e44 <__divdf3+0x1d0>
    2e7c:	01004004 	movi	r4,256
    2e80:	7104703a 	and	r2,r14,r4
    2e84:	10c4b03a 	or	r2,r2,r3
    2e88:	103fee1e 	bne	r2,zero,2e44 <__divdf3+0x1d0>
    2e8c:	31c4b03a 	or	r2,r6,r7
    2e90:	103fec26 	beq	r2,zero,2e44 <__divdf3+0x1d0>
    2e94:	7205883a 	add	r2,r14,r8
    2e98:	1391803a 	cmpltu	r8,r2,r14
    2e9c:	43d1883a 	add	r8,r8,r15
    2ea0:	013fc004 	movi	r4,-256
    2ea4:	111c703a 	and	r14,r2,r4
    2ea8:	401f883a 	mov	r15,r8
    2eac:	003fe506 	br	2e44 <__divdf3+0x1d0>
    2eb0:	8009883a 	mov	r4,r16
    2eb4:	003f9206 	br	2d00 <__divdf3+0x8c>
    2eb8:	9809883a 	mov	r4,r19
    2ebc:	d8000715 	stw	zero,28(sp)
    2ec0:	d8000815 	stw	zero,32(sp)
    2ec4:	d8000615 	stw	zero,24(sp)
    2ec8:	003f8d06 	br	2d00 <__divdf3+0x8c>

00002ecc <__eqdf2>:
    2ecc:	deffef04 	addi	sp,sp,-68
    2ed0:	dc400f15 	stw	r17,60(sp)
    2ed4:	dc400404 	addi	r17,sp,16
    2ed8:	2005883a 	mov	r2,r4
    2edc:	2807883a 	mov	r3,r5
    2ee0:	dc000e15 	stw	r16,56(sp)
    2ee4:	d809883a 	mov	r4,sp
    2ee8:	880b883a 	mov	r5,r17
    2eec:	dc000904 	addi	r16,sp,36
    2ef0:	d8c00115 	stw	r3,4(sp)
    2ef4:	d8800015 	stw	r2,0(sp)
    2ef8:	d9800215 	stw	r6,8(sp)
    2efc:	dfc01015 	stw	ra,64(sp)
    2f00:	d9c00315 	stw	r7,12(sp)
    2f04:	00037700 	call	3770 <__unpack_d>
    2f08:	d9000204 	addi	r4,sp,8
    2f0c:	800b883a 	mov	r5,r16
    2f10:	00037700 	call	3770 <__unpack_d>
    2f14:	d8800417 	ldw	r2,16(sp)
    2f18:	00c00044 	movi	r3,1
    2f1c:	180d883a 	mov	r6,r3
    2f20:	1880062e 	bgeu	r3,r2,2f3c <__eqdf2+0x70>
    2f24:	d8800917 	ldw	r2,36(sp)
    2f28:	8809883a 	mov	r4,r17
    2f2c:	800b883a 	mov	r5,r16
    2f30:	1880022e 	bgeu	r3,r2,2f3c <__eqdf2+0x70>
    2f34:	00038a80 	call	38a8 <__fpcmp_parts_d>
    2f38:	100d883a 	mov	r6,r2
    2f3c:	3005883a 	mov	r2,r6
    2f40:	dfc01017 	ldw	ra,64(sp)
    2f44:	dc400f17 	ldw	r17,60(sp)
    2f48:	dc000e17 	ldw	r16,56(sp)
    2f4c:	dec01104 	addi	sp,sp,68
    2f50:	f800283a 	ret

00002f54 <__nedf2>:
    2f54:	deffef04 	addi	sp,sp,-68
    2f58:	dc400f15 	stw	r17,60(sp)
    2f5c:	dc400404 	addi	r17,sp,16
    2f60:	2005883a 	mov	r2,r4
    2f64:	2807883a 	mov	r3,r5
    2f68:	dc000e15 	stw	r16,56(sp)
    2f6c:	d809883a 	mov	r4,sp
    2f70:	880b883a 	mov	r5,r17
    2f74:	dc000904 	addi	r16,sp,36
    2f78:	d8c00115 	stw	r3,4(sp)
    2f7c:	d8800015 	stw	r2,0(sp)
    2f80:	d9800215 	stw	r6,8(sp)
    2f84:	dfc01015 	stw	ra,64(sp)
    2f88:	d9c00315 	stw	r7,12(sp)
    2f8c:	00037700 	call	3770 <__unpack_d>
    2f90:	d9000204 	addi	r4,sp,8
    2f94:	800b883a 	mov	r5,r16
    2f98:	00037700 	call	3770 <__unpack_d>
    2f9c:	d8800417 	ldw	r2,16(sp)
    2fa0:	00c00044 	movi	r3,1
    2fa4:	180d883a 	mov	r6,r3
    2fa8:	1880062e 	bgeu	r3,r2,2fc4 <__nedf2+0x70>
    2fac:	d8800917 	ldw	r2,36(sp)
    2fb0:	8809883a 	mov	r4,r17
    2fb4:	800b883a 	mov	r5,r16
    2fb8:	1880022e 	bgeu	r3,r2,2fc4 <__nedf2+0x70>
    2fbc:	00038a80 	call	38a8 <__fpcmp_parts_d>
    2fc0:	100d883a 	mov	r6,r2
    2fc4:	3005883a 	mov	r2,r6
    2fc8:	dfc01017 	ldw	ra,64(sp)
    2fcc:	dc400f17 	ldw	r17,60(sp)
    2fd0:	dc000e17 	ldw	r16,56(sp)
    2fd4:	dec01104 	addi	sp,sp,68
    2fd8:	f800283a 	ret

00002fdc <__gtdf2>:
    2fdc:	deffef04 	addi	sp,sp,-68
    2fe0:	dc400f15 	stw	r17,60(sp)
    2fe4:	dc400404 	addi	r17,sp,16
    2fe8:	2005883a 	mov	r2,r4
    2fec:	2807883a 	mov	r3,r5
    2ff0:	dc000e15 	stw	r16,56(sp)
    2ff4:	d809883a 	mov	r4,sp
    2ff8:	880b883a 	mov	r5,r17
    2ffc:	dc000904 	addi	r16,sp,36
    3000:	d8c00115 	stw	r3,4(sp)
    3004:	d8800015 	stw	r2,0(sp)
    3008:	d9800215 	stw	r6,8(sp)
    300c:	dfc01015 	stw	ra,64(sp)
    3010:	d9c00315 	stw	r7,12(sp)
    3014:	00037700 	call	3770 <__unpack_d>
    3018:	d9000204 	addi	r4,sp,8
    301c:	800b883a 	mov	r5,r16
    3020:	00037700 	call	3770 <__unpack_d>
    3024:	d8800417 	ldw	r2,16(sp)
    3028:	00c00044 	movi	r3,1
    302c:	01bfffc4 	movi	r6,-1
    3030:	1880062e 	bgeu	r3,r2,304c <__gtdf2+0x70>
    3034:	d8800917 	ldw	r2,36(sp)
    3038:	8809883a 	mov	r4,r17
    303c:	800b883a 	mov	r5,r16
    3040:	1880022e 	bgeu	r3,r2,304c <__gtdf2+0x70>
    3044:	00038a80 	call	38a8 <__fpcmp_parts_d>
    3048:	100d883a 	mov	r6,r2
    304c:	3005883a 	mov	r2,r6
    3050:	dfc01017 	ldw	ra,64(sp)
    3054:	dc400f17 	ldw	r17,60(sp)
    3058:	dc000e17 	ldw	r16,56(sp)
    305c:	dec01104 	addi	sp,sp,68
    3060:	f800283a 	ret

00003064 <__ltdf2>:
    3064:	deffef04 	addi	sp,sp,-68
    3068:	dc400f15 	stw	r17,60(sp)
    306c:	dc400404 	addi	r17,sp,16
    3070:	2005883a 	mov	r2,r4
    3074:	2807883a 	mov	r3,r5
    3078:	dc000e15 	stw	r16,56(sp)
    307c:	d809883a 	mov	r4,sp
    3080:	880b883a 	mov	r5,r17
    3084:	dc000904 	addi	r16,sp,36
    3088:	d8c00115 	stw	r3,4(sp)
    308c:	d8800015 	stw	r2,0(sp)
    3090:	d9800215 	stw	r6,8(sp)
    3094:	dfc01015 	stw	ra,64(sp)
    3098:	d9c00315 	stw	r7,12(sp)
    309c:	00037700 	call	3770 <__unpack_d>
    30a0:	d9000204 	addi	r4,sp,8
    30a4:	800b883a 	mov	r5,r16
    30a8:	00037700 	call	3770 <__unpack_d>
    30ac:	d8800417 	ldw	r2,16(sp)
    30b0:	00c00044 	movi	r3,1
    30b4:	180d883a 	mov	r6,r3
    30b8:	1880062e 	bgeu	r3,r2,30d4 <__ltdf2+0x70>
    30bc:	d8800917 	ldw	r2,36(sp)
    30c0:	8809883a 	mov	r4,r17
    30c4:	800b883a 	mov	r5,r16
    30c8:	1880022e 	bgeu	r3,r2,30d4 <__ltdf2+0x70>
    30cc:	00038a80 	call	38a8 <__fpcmp_parts_d>
    30d0:	100d883a 	mov	r6,r2
    30d4:	3005883a 	mov	r2,r6
    30d8:	dfc01017 	ldw	ra,64(sp)
    30dc:	dc400f17 	ldw	r17,60(sp)
    30e0:	dc000e17 	ldw	r16,56(sp)
    30e4:	dec01104 	addi	sp,sp,68
    30e8:	f800283a 	ret

000030ec <__ledf2>:
    30ec:	deffef04 	addi	sp,sp,-68
    30f0:	dc400f15 	stw	r17,60(sp)
    30f4:	dc400404 	addi	r17,sp,16
    30f8:	2005883a 	mov	r2,r4
    30fc:	2807883a 	mov	r3,r5
    3100:	dc000e15 	stw	r16,56(sp)
    3104:	d809883a 	mov	r4,sp
    3108:	880b883a 	mov	r5,r17
    310c:	dc000904 	addi	r16,sp,36
    3110:	d8c00115 	stw	r3,4(sp)
    3114:	d8800015 	stw	r2,0(sp)
    3118:	d9800215 	stw	r6,8(sp)
    311c:	dfc01015 	stw	ra,64(sp)
    3120:	d9c00315 	stw	r7,12(sp)
    3124:	00037700 	call	3770 <__unpack_d>
    3128:	d9000204 	addi	r4,sp,8
    312c:	800b883a 	mov	r5,r16
    3130:	00037700 	call	3770 <__unpack_d>
    3134:	d8800417 	ldw	r2,16(sp)
    3138:	00c00044 	movi	r3,1
    313c:	180d883a 	mov	r6,r3
    3140:	1880062e 	bgeu	r3,r2,315c <__ledf2+0x70>
    3144:	d8800917 	ldw	r2,36(sp)
    3148:	8809883a 	mov	r4,r17
    314c:	800b883a 	mov	r5,r16
    3150:	1880022e 	bgeu	r3,r2,315c <__ledf2+0x70>
    3154:	00038a80 	call	38a8 <__fpcmp_parts_d>
    3158:	100d883a 	mov	r6,r2
    315c:	3005883a 	mov	r2,r6
    3160:	dfc01017 	ldw	ra,64(sp)
    3164:	dc400f17 	ldw	r17,60(sp)
    3168:	dc000e17 	ldw	r16,56(sp)
    316c:	dec01104 	addi	sp,sp,68
    3170:	f800283a 	ret

00003174 <__floatsidf>:
    3174:	2006d7fa 	srli	r3,r4,31
    3178:	defff604 	addi	sp,sp,-40
    317c:	008000c4 	movi	r2,3
    3180:	dfc00915 	stw	ra,36(sp)
    3184:	dcc00815 	stw	r19,32(sp)
    3188:	dc800715 	stw	r18,28(sp)
    318c:	dc400615 	stw	r17,24(sp)
    3190:	dc000515 	stw	r16,20(sp)
    3194:	d8800015 	stw	r2,0(sp)
    3198:	d8c00115 	stw	r3,4(sp)
    319c:	20000f1e 	bne	r4,zero,31dc <__floatsidf+0x68>
    31a0:	00800084 	movi	r2,2
    31a4:	d8800015 	stw	r2,0(sp)
    31a8:	d809883a 	mov	r4,sp
    31ac:	000345c0 	call	345c <__pack_d>
    31b0:	1009883a 	mov	r4,r2
    31b4:	180b883a 	mov	r5,r3
    31b8:	2005883a 	mov	r2,r4
    31bc:	2807883a 	mov	r3,r5
    31c0:	dfc00917 	ldw	ra,36(sp)
    31c4:	dcc00817 	ldw	r19,32(sp)
    31c8:	dc800717 	ldw	r18,28(sp)
    31cc:	dc400617 	ldw	r17,24(sp)
    31d0:	dc000517 	ldw	r16,20(sp)
    31d4:	dec00a04 	addi	sp,sp,40
    31d8:	f800283a 	ret
    31dc:	00800f04 	movi	r2,60
    31e0:	1807003a 	cmpeq	r3,r3,zero
    31e4:	d8800215 	stw	r2,8(sp)
    31e8:	18001126 	beq	r3,zero,3230 <__floatsidf+0xbc>
    31ec:	0027883a 	mov	r19,zero
    31f0:	2025883a 	mov	r18,r4
    31f4:	d9000315 	stw	r4,12(sp)
    31f8:	dcc00415 	stw	r19,16(sp)
    31fc:	00033dc0 	call	33dc <__clzsi2>
    3200:	11000744 	addi	r4,r2,29
    3204:	013fe80e 	bge	zero,r4,31a8 <__floatsidf+0x34>
    3208:	10bfff44 	addi	r2,r2,-3
    320c:	10000c16 	blt	r2,zero,3240 <__floatsidf+0xcc>
    3210:	90a2983a 	sll	r17,r18,r2
    3214:	0021883a 	mov	r16,zero
    3218:	d8800217 	ldw	r2,8(sp)
    321c:	dc400415 	stw	r17,16(sp)
    3220:	dc000315 	stw	r16,12(sp)
    3224:	1105c83a 	sub	r2,r2,r4
    3228:	d8800215 	stw	r2,8(sp)
    322c:	003fde06 	br	31a8 <__floatsidf+0x34>
    3230:	00a00034 	movhi	r2,32768
    3234:	20800a26 	beq	r4,r2,3260 <__floatsidf+0xec>
    3238:	0109c83a 	sub	r4,zero,r4
    323c:	003feb06 	br	31ec <__floatsidf+0x78>
    3240:	9006d07a 	srli	r3,r18,1
    3244:	008007c4 	movi	r2,31
    3248:	1105c83a 	sub	r2,r2,r4
    324c:	1886d83a 	srl	r3,r3,r2
    3250:	9922983a 	sll	r17,r19,r4
    3254:	9120983a 	sll	r16,r18,r4
    3258:	1c62b03a 	or	r17,r3,r17
    325c:	003fee06 	br	3218 <__floatsidf+0xa4>
    3260:	0009883a 	mov	r4,zero
    3264:	01707834 	movhi	r5,49632
    3268:	003fd306 	br	31b8 <__floatsidf+0x44>

0000326c <__fixdfsi>:
    326c:	defff804 	addi	sp,sp,-32
    3270:	2005883a 	mov	r2,r4
    3274:	2807883a 	mov	r3,r5
    3278:	d809883a 	mov	r4,sp
    327c:	d9400204 	addi	r5,sp,8
    3280:	d8c00115 	stw	r3,4(sp)
    3284:	d8800015 	stw	r2,0(sp)
    3288:	dfc00715 	stw	ra,28(sp)
    328c:	00037700 	call	3770 <__unpack_d>
    3290:	d8c00217 	ldw	r3,8(sp)
    3294:	00800084 	movi	r2,2
    3298:	1880051e 	bne	r3,r2,32b0 <__fixdfsi+0x44>
    329c:	0007883a 	mov	r3,zero
    32a0:	1805883a 	mov	r2,r3
    32a4:	dfc00717 	ldw	ra,28(sp)
    32a8:	dec00804 	addi	sp,sp,32
    32ac:	f800283a 	ret
    32b0:	00800044 	movi	r2,1
    32b4:	10fff92e 	bgeu	r2,r3,329c <__fixdfsi+0x30>
    32b8:	00800104 	movi	r2,4
    32bc:	18800426 	beq	r3,r2,32d0 <__fixdfsi+0x64>
    32c0:	d8c00417 	ldw	r3,16(sp)
    32c4:	183ff516 	blt	r3,zero,329c <__fixdfsi+0x30>
    32c8:	00800784 	movi	r2,30
    32cc:	10c0080e 	bge	r2,r3,32f0 <__fixdfsi+0x84>
    32d0:	d8800317 	ldw	r2,12(sp)
    32d4:	1000121e 	bne	r2,zero,3320 <__fixdfsi+0xb4>
    32d8:	00e00034 	movhi	r3,32768
    32dc:	18ffffc4 	addi	r3,r3,-1
    32e0:	1805883a 	mov	r2,r3
    32e4:	dfc00717 	ldw	ra,28(sp)
    32e8:	dec00804 	addi	sp,sp,32
    32ec:	f800283a 	ret
    32f0:	00800f04 	movi	r2,60
    32f4:	10d1c83a 	sub	r8,r2,r3
    32f8:	40bff804 	addi	r2,r8,-32
    32fc:	d9800517 	ldw	r6,20(sp)
    3300:	d9c00617 	ldw	r7,24(sp)
    3304:	10000816 	blt	r2,zero,3328 <__fixdfsi+0xbc>
    3308:	3888d83a 	srl	r4,r7,r2
    330c:	d8800317 	ldw	r2,12(sp)
    3310:	2007883a 	mov	r3,r4
    3314:	103fe226 	beq	r2,zero,32a0 <__fixdfsi+0x34>
    3318:	0107c83a 	sub	r3,zero,r4
    331c:	003fe006 	br	32a0 <__fixdfsi+0x34>
    3320:	00e00034 	movhi	r3,32768
    3324:	003fde06 	br	32a0 <__fixdfsi+0x34>
    3328:	39c7883a 	add	r3,r7,r7
    332c:	008007c4 	movi	r2,31
    3330:	1205c83a 	sub	r2,r2,r8
    3334:	1886983a 	sll	r3,r3,r2
    3338:	3208d83a 	srl	r4,r6,r8
    333c:	1908b03a 	or	r4,r3,r4
    3340:	003ff206 	br	330c <__fixdfsi+0xa0>

00003344 <__muldi3>:
    3344:	2011883a 	mov	r8,r4
    3348:	427fffcc 	andi	r9,r8,65535
    334c:	4018d43a 	srli	r12,r8,16
    3350:	32bfffcc 	andi	r10,r6,65535
    3354:	3016d43a 	srli	r11,r6,16
    3358:	4a85383a 	mul	r2,r9,r10
    335c:	6295383a 	mul	r10,r12,r10
    3360:	4ad3383a 	mul	r9,r9,r11
    3364:	113fffcc 	andi	r4,r2,65535
    3368:	1004d43a 	srli	r2,r2,16
    336c:	4a93883a 	add	r9,r9,r10
    3370:	3807883a 	mov	r3,r7
    3374:	1245883a 	add	r2,r2,r9
    3378:	280f883a 	mov	r7,r5
    337c:	180b883a 	mov	r5,r3
    3380:	1006943a 	slli	r3,r2,16
    3384:	defffd04 	addi	sp,sp,-12
    3388:	dc800215 	stw	r18,8(sp)
    338c:	1907883a 	add	r3,r3,r4
    3390:	dc400115 	stw	r17,4(sp)
    3394:	dc000015 	stw	r16,0(sp)
    3398:	4165383a 	mul	r18,r8,r5
    339c:	31e3383a 	mul	r17,r6,r7
    33a0:	1012d43a 	srli	r9,r2,16
    33a4:	62d9383a 	mul	r12,r12,r11
    33a8:	181f883a 	mov	r15,r3
    33ac:	1280022e 	bgeu	r2,r10,33b8 <__muldi3+0x74>
    33b0:	00800074 	movhi	r2,1
    33b4:	6099883a 	add	r12,r12,r2
    33b8:	624d883a 	add	r6,r12,r9
    33bc:	9187883a 	add	r3,r18,r6
    33c0:	88c7883a 	add	r3,r17,r3
    33c4:	7805883a 	mov	r2,r15
    33c8:	dc800217 	ldw	r18,8(sp)
    33cc:	dc400117 	ldw	r17,4(sp)
    33d0:	dc000017 	ldw	r16,0(sp)
    33d4:	dec00304 	addi	sp,sp,12
    33d8:	f800283a 	ret

000033dc <__clzsi2>:
    33dc:	00bfffd4 	movui	r2,65535
    33e0:	11000e36 	bltu	r2,r4,341c <__clzsi2+0x40>
    33e4:	00803fc4 	movi	r2,255
    33e8:	01400204 	movi	r5,8
    33ec:	0007883a 	mov	r3,zero
    33f0:	11001036 	bltu	r2,r4,3434 <__clzsi2+0x58>
    33f4:	000b883a 	mov	r5,zero
    33f8:	20c6d83a 	srl	r3,r4,r3
    33fc:	00800074 	movhi	r2,1
    3400:	10a30804 	addi	r2,r2,-29664
    3404:	1887883a 	add	r3,r3,r2
    3408:	18800003 	ldbu	r2,0(r3)
    340c:	00c00804 	movi	r3,32
    3410:	2885883a 	add	r2,r5,r2
    3414:	1885c83a 	sub	r2,r3,r2
    3418:	f800283a 	ret
    341c:	01400404 	movi	r5,16
    3420:	00804034 	movhi	r2,256
    3424:	10bfffc4 	addi	r2,r2,-1
    3428:	2807883a 	mov	r3,r5
    342c:	113ff22e 	bgeu	r2,r4,33f8 <__clzsi2+0x1c>
    3430:	01400604 	movi	r5,24
    3434:	2807883a 	mov	r3,r5
    3438:	20c6d83a 	srl	r3,r4,r3
    343c:	00800074 	movhi	r2,1
    3440:	10a30804 	addi	r2,r2,-29664
    3444:	1887883a 	add	r3,r3,r2
    3448:	18800003 	ldbu	r2,0(r3)
    344c:	00c00804 	movi	r3,32
    3450:	2885883a 	add	r2,r5,r2
    3454:	1885c83a 	sub	r2,r3,r2
    3458:	f800283a 	ret

0000345c <__pack_d>:
    345c:	20c00017 	ldw	r3,0(r4)
    3460:	defffd04 	addi	sp,sp,-12
    3464:	dc000015 	stw	r16,0(sp)
    3468:	dc800215 	stw	r18,8(sp)
    346c:	dc400115 	stw	r17,4(sp)
    3470:	00800044 	movi	r2,1
    3474:	22000317 	ldw	r8,12(r4)
    3478:	001f883a 	mov	r15,zero
    347c:	22400417 	ldw	r9,16(r4)
    3480:	24000117 	ldw	r16,4(r4)
    3484:	10c0552e 	bgeu	r2,r3,35dc <__pack_d+0x180>
    3488:	00800104 	movi	r2,4
    348c:	18804f26 	beq	r3,r2,35cc <__pack_d+0x170>
    3490:	00800084 	movi	r2,2
    3494:	18800226 	beq	r3,r2,34a0 <__pack_d+0x44>
    3498:	4244b03a 	or	r2,r8,r9
    349c:	10001a1e 	bne	r2,zero,3508 <__pack_d+0xac>
    34a0:	000d883a 	mov	r6,zero
    34a4:	000f883a 	mov	r7,zero
    34a8:	0011883a 	mov	r8,zero
    34ac:	00800434 	movhi	r2,16
    34b0:	10bfffc4 	addi	r2,r2,-1
    34b4:	301d883a 	mov	r14,r6
    34b8:	3884703a 	and	r2,r7,r2
    34bc:	400a953a 	slli	r5,r8,20
    34c0:	79bffc2c 	andhi	r6,r15,65520
    34c4:	308cb03a 	or	r6,r6,r2
    34c8:	00e00434 	movhi	r3,32784
    34cc:	18ffffc4 	addi	r3,r3,-1
    34d0:	800497fa 	slli	r2,r16,31
    34d4:	30c6703a 	and	r3,r6,r3
    34d8:	1946b03a 	or	r3,r3,r5
    34dc:	01600034 	movhi	r5,32768
    34e0:	297fffc4 	addi	r5,r5,-1
    34e4:	194a703a 	and	r5,r3,r5
    34e8:	288ab03a 	or	r5,r5,r2
    34ec:	2807883a 	mov	r3,r5
    34f0:	7005883a 	mov	r2,r14
    34f4:	dc800217 	ldw	r18,8(sp)
    34f8:	dc400117 	ldw	r17,4(sp)
    34fc:	dc000017 	ldw	r16,0(sp)
    3500:	dec00304 	addi	sp,sp,12
    3504:	f800283a 	ret
    3508:	21000217 	ldw	r4,8(r4)
    350c:	00bf0084 	movi	r2,-1022
    3510:	20803f16 	blt	r4,r2,3610 <__pack_d+0x1b4>
    3514:	0080ffc4 	movi	r2,1023
    3518:	11002c16 	blt	r2,r4,35cc <__pack_d+0x170>
    351c:	00803fc4 	movi	r2,255
    3520:	408c703a 	and	r6,r8,r2
    3524:	00802004 	movi	r2,128
    3528:	0007883a 	mov	r3,zero
    352c:	000f883a 	mov	r7,zero
    3530:	2280ffc4 	addi	r10,r4,1023
    3534:	30801e26 	beq	r6,r2,35b0 <__pack_d+0x154>
    3538:	00801fc4 	movi	r2,127
    353c:	4089883a 	add	r4,r8,r2
    3540:	220d803a 	cmpltu	r6,r4,r8
    3544:	324d883a 	add	r6,r6,r9
    3548:	2011883a 	mov	r8,r4
    354c:	3013883a 	mov	r9,r6
    3550:	00880034 	movhi	r2,8192
    3554:	10bfffc4 	addi	r2,r2,-1
    3558:	12400d36 	bltu	r2,r9,3590 <__pack_d+0x134>
    355c:	4804963a 	slli	r2,r9,24
    3560:	400cd23a 	srli	r6,r8,8
    3564:	480ed23a 	srli	r7,r9,8
    3568:	013fffc4 	movi	r4,-1
    356c:	118cb03a 	or	r6,r2,r6
    3570:	01400434 	movhi	r5,16
    3574:	297fffc4 	addi	r5,r5,-1
    3578:	3104703a 	and	r2,r6,r4
    357c:	3946703a 	and	r3,r7,r5
    3580:	5201ffcc 	andi	r8,r10,2047
    3584:	100d883a 	mov	r6,r2
    3588:	180f883a 	mov	r7,r3
    358c:	003fc706 	br	34ac <__pack_d+0x50>
    3590:	480897fa 	slli	r4,r9,31
    3594:	4004d07a 	srli	r2,r8,1
    3598:	4806d07a 	srli	r3,r9,1
    359c:	52800044 	addi	r10,r10,1
    35a0:	2084b03a 	or	r2,r4,r2
    35a4:	1011883a 	mov	r8,r2
    35a8:	1813883a 	mov	r9,r3
    35ac:	003feb06 	br	355c <__pack_d+0x100>
    35b0:	383fe11e 	bne	r7,zero,3538 <__pack_d+0xdc>
    35b4:	01004004 	movi	r4,256
    35b8:	4104703a 	and	r2,r8,r4
    35bc:	10c4b03a 	or	r2,r2,r3
    35c0:	103fe326 	beq	r2,zero,3550 <__pack_d+0xf4>
    35c4:	3005883a 	mov	r2,r6
    35c8:	003fdc06 	br	353c <__pack_d+0xe0>
    35cc:	000d883a 	mov	r6,zero
    35d0:	000f883a 	mov	r7,zero
    35d4:	0201ffc4 	movi	r8,2047
    35d8:	003fb406 	br	34ac <__pack_d+0x50>
    35dc:	0005883a 	mov	r2,zero
    35e0:	00c00234 	movhi	r3,8
    35e4:	408cb03a 	or	r6,r8,r2
    35e8:	48ceb03a 	or	r7,r9,r3
    35ec:	013fffc4 	movi	r4,-1
    35f0:	01400434 	movhi	r5,16
    35f4:	297fffc4 	addi	r5,r5,-1
    35f8:	3104703a 	and	r2,r6,r4
    35fc:	3946703a 	and	r3,r7,r5
    3600:	100d883a 	mov	r6,r2
    3604:	180f883a 	mov	r7,r3
    3608:	0201ffc4 	movi	r8,2047
    360c:	003fa706 	br	34ac <__pack_d+0x50>
    3610:	1109c83a 	sub	r4,r2,r4
    3614:	00800e04 	movi	r2,56
    3618:	11004316 	blt	r2,r4,3728 <__pack_d+0x2cc>
    361c:	21fff804 	addi	r7,r4,-32
    3620:	38004516 	blt	r7,zero,3738 <__pack_d+0x2dc>
    3624:	49d8d83a 	srl	r12,r9,r7
    3628:	001b883a 	mov	r13,zero
    362c:	0023883a 	mov	r17,zero
    3630:	01400044 	movi	r5,1
    3634:	0025883a 	mov	r18,zero
    3638:	38004716 	blt	r7,zero,3758 <__pack_d+0x2fc>
    363c:	29d6983a 	sll	r11,r5,r7
    3640:	0015883a 	mov	r10,zero
    3644:	00bfffc4 	movi	r2,-1
    3648:	5089883a 	add	r4,r10,r2
    364c:	588b883a 	add	r5,r11,r2
    3650:	228d803a 	cmpltu	r6,r4,r10
    3654:	314b883a 	add	r5,r6,r5
    3658:	4104703a 	and	r2,r8,r4
    365c:	4946703a 	and	r3,r9,r5
    3660:	10c4b03a 	or	r2,r2,r3
    3664:	10000226 	beq	r2,zero,3670 <__pack_d+0x214>
    3668:	04400044 	movi	r17,1
    366c:	0025883a 	mov	r18,zero
    3670:	00803fc4 	movi	r2,255
    3674:	644eb03a 	or	r7,r12,r17
    3678:	3892703a 	and	r9,r7,r2
    367c:	00802004 	movi	r2,128
    3680:	6c90b03a 	or	r8,r13,r18
    3684:	0015883a 	mov	r10,zero
    3688:	48801626 	beq	r9,r2,36e4 <__pack_d+0x288>
    368c:	01001fc4 	movi	r4,127
    3690:	3905883a 	add	r2,r7,r4
    3694:	11cd803a 	cmpltu	r6,r2,r7
    3698:	320d883a 	add	r6,r6,r8
    369c:	100f883a 	mov	r7,r2
    36a0:	00840034 	movhi	r2,4096
    36a4:	10bfffc4 	addi	r2,r2,-1
    36a8:	3011883a 	mov	r8,r6
    36ac:	0007883a 	mov	r3,zero
    36b0:	11801b36 	bltu	r2,r6,3720 <__pack_d+0x2c4>
    36b4:	4004963a 	slli	r2,r8,24
    36b8:	3808d23a 	srli	r4,r7,8
    36bc:	400ad23a 	srli	r5,r8,8
    36c0:	1813883a 	mov	r9,r3
    36c4:	1108b03a 	or	r4,r2,r4
    36c8:	00bfffc4 	movi	r2,-1
    36cc:	00c00434 	movhi	r3,16
    36d0:	18ffffc4 	addi	r3,r3,-1
    36d4:	208c703a 	and	r6,r4,r2
    36d8:	28ce703a 	and	r7,r5,r3
    36dc:	4a01ffcc 	andi	r8,r9,2047
    36e0:	003f7206 	br	34ac <__pack_d+0x50>
    36e4:	503fe91e 	bne	r10,zero,368c <__pack_d+0x230>
    36e8:	01004004 	movi	r4,256
    36ec:	3904703a 	and	r2,r7,r4
    36f0:	0007883a 	mov	r3,zero
    36f4:	10c4b03a 	or	r2,r2,r3
    36f8:	10000626 	beq	r2,zero,3714 <__pack_d+0x2b8>
    36fc:	3a45883a 	add	r2,r7,r9
    3700:	11cd803a 	cmpltu	r6,r2,r7
    3704:	320d883a 	add	r6,r6,r8
    3708:	100f883a 	mov	r7,r2
    370c:	3011883a 	mov	r8,r6
    3710:	0007883a 	mov	r3,zero
    3714:	00840034 	movhi	r2,4096
    3718:	10bfffc4 	addi	r2,r2,-1
    371c:	123fe52e 	bgeu	r2,r8,36b4 <__pack_d+0x258>
    3720:	00c00044 	movi	r3,1
    3724:	003fe306 	br	36b4 <__pack_d+0x258>
    3728:	0009883a 	mov	r4,zero
    372c:	0013883a 	mov	r9,zero
    3730:	000b883a 	mov	r5,zero
    3734:	003fe406 	br	36c8 <__pack_d+0x26c>
    3738:	4a47883a 	add	r3,r9,r9
    373c:	008007c4 	movi	r2,31
    3740:	1105c83a 	sub	r2,r2,r4
    3744:	1886983a 	sll	r3,r3,r2
    3748:	4118d83a 	srl	r12,r8,r4
    374c:	491ad83a 	srl	r13,r9,r4
    3750:	1b18b03a 	or	r12,r3,r12
    3754:	003fb506 	br	362c <__pack_d+0x1d0>
    3758:	2806d07a 	srli	r3,r5,1
    375c:	008007c4 	movi	r2,31
    3760:	1105c83a 	sub	r2,r2,r4
    3764:	1896d83a 	srl	r11,r3,r2
    3768:	2914983a 	sll	r10,r5,r4
    376c:	003fb506 	br	3644 <__pack_d+0x1e8>

00003770 <__unpack_d>:
    3770:	20c00117 	ldw	r3,4(r4)
    3774:	22400017 	ldw	r9,0(r4)
    3778:	00800434 	movhi	r2,16
    377c:	10bfffc4 	addi	r2,r2,-1
    3780:	1808d53a 	srli	r4,r3,20
    3784:	180cd7fa 	srli	r6,r3,31
    3788:	1894703a 	and	r10,r3,r2
    378c:	2201ffcc 	andi	r8,r4,2047
    3790:	281b883a 	mov	r13,r5
    3794:	4817883a 	mov	r11,r9
    3798:	29800115 	stw	r6,4(r5)
    379c:	5019883a 	mov	r12,r10
    37a0:	40001e1e 	bne	r8,zero,381c <__unpack_d+0xac>
    37a4:	4a84b03a 	or	r2,r9,r10
    37a8:	10001926 	beq	r2,zero,3810 <__unpack_d+0xa0>
    37ac:	4804d63a 	srli	r2,r9,24
    37b0:	500c923a 	slli	r6,r10,8
    37b4:	013f0084 	movi	r4,-1022
    37b8:	00c40034 	movhi	r3,4096
    37bc:	18ffffc4 	addi	r3,r3,-1
    37c0:	118cb03a 	or	r6,r2,r6
    37c4:	008000c4 	movi	r2,3
    37c8:	480a923a 	slli	r5,r9,8
    37cc:	68800015 	stw	r2,0(r13)
    37d0:	69000215 	stw	r4,8(r13)
    37d4:	19800b36 	bltu	r3,r6,3804 <__unpack_d+0x94>
    37d8:	200f883a 	mov	r7,r4
    37dc:	1811883a 	mov	r8,r3
    37e0:	2945883a 	add	r2,r5,r5
    37e4:	1149803a 	cmpltu	r4,r2,r5
    37e8:	3187883a 	add	r3,r6,r6
    37ec:	20c9883a 	add	r4,r4,r3
    37f0:	100b883a 	mov	r5,r2
    37f4:	200d883a 	mov	r6,r4
    37f8:	39ffffc4 	addi	r7,r7,-1
    37fc:	413ff82e 	bgeu	r8,r4,37e0 <__unpack_d+0x70>
    3800:	69c00215 	stw	r7,8(r13)
    3804:	69800415 	stw	r6,16(r13)
    3808:	69400315 	stw	r5,12(r13)
    380c:	f800283a 	ret
    3810:	00800084 	movi	r2,2
    3814:	28800015 	stw	r2,0(r5)
    3818:	f800283a 	ret
    381c:	0081ffc4 	movi	r2,2047
    3820:	40800f26 	beq	r8,r2,3860 <__unpack_d+0xf0>
    3824:	480cd63a 	srli	r6,r9,24
    3828:	5006923a 	slli	r3,r10,8
    382c:	4804923a 	slli	r2,r9,8
    3830:	0009883a 	mov	r4,zero
    3834:	30c6b03a 	or	r3,r6,r3
    3838:	01440034 	movhi	r5,4096
    383c:	110cb03a 	or	r6,r2,r4
    3840:	423f0044 	addi	r8,r8,-1023
    3844:	194eb03a 	or	r7,r3,r5
    3848:	008000c4 	movi	r2,3
    384c:	69c00415 	stw	r7,16(r13)
    3850:	6a000215 	stw	r8,8(r13)
    3854:	68800015 	stw	r2,0(r13)
    3858:	69800315 	stw	r6,12(r13)
    385c:	f800283a 	ret
    3860:	4a84b03a 	or	r2,r9,r10
    3864:	1000031e 	bne	r2,zero,3874 <__unpack_d+0x104>
    3868:	00800104 	movi	r2,4
    386c:	28800015 	stw	r2,0(r5)
    3870:	f800283a 	ret
    3874:	0009883a 	mov	r4,zero
    3878:	01400234 	movhi	r5,8
    387c:	4904703a 	and	r2,r9,r4
    3880:	5146703a 	and	r3,r10,r5
    3884:	10c4b03a 	or	r2,r2,r3
    3888:	10000526 	beq	r2,zero,38a0 <__unpack_d+0x130>
    388c:	00800044 	movi	r2,1
    3890:	68800015 	stw	r2,0(r13)
    3894:	6b000415 	stw	r12,16(r13)
    3898:	6ac00315 	stw	r11,12(r13)
    389c:	f800283a 	ret
    38a0:	68000015 	stw	zero,0(r13)
    38a4:	003ffb06 	br	3894 <__unpack_d+0x124>

000038a8 <__fpcmp_parts_d>:
    38a8:	21800017 	ldw	r6,0(r4)
    38ac:	00c00044 	movi	r3,1
    38b0:	19800a2e 	bgeu	r3,r6,38dc <__fpcmp_parts_d+0x34>
    38b4:	28800017 	ldw	r2,0(r5)
    38b8:	1880082e 	bgeu	r3,r2,38dc <__fpcmp_parts_d+0x34>
    38bc:	00c00104 	movi	r3,4
    38c0:	30c02626 	beq	r6,r3,395c <__fpcmp_parts_d+0xb4>
    38c4:	10c02226 	beq	r2,r3,3950 <__fpcmp_parts_d+0xa8>
    38c8:	00c00084 	movi	r3,2
    38cc:	30c00526 	beq	r6,r3,38e4 <__fpcmp_parts_d+0x3c>
    38d0:	10c0071e 	bne	r2,r3,38f0 <__fpcmp_parts_d+0x48>
    38d4:	20800117 	ldw	r2,4(r4)
    38d8:	1000091e 	bne	r2,zero,3900 <__fpcmp_parts_d+0x58>
    38dc:	00800044 	movi	r2,1
    38e0:	f800283a 	ret
    38e4:	10c01a1e 	bne	r2,r3,3950 <__fpcmp_parts_d+0xa8>
    38e8:	0005883a 	mov	r2,zero
    38ec:	f800283a 	ret
    38f0:	22000117 	ldw	r8,4(r4)
    38f4:	28800117 	ldw	r2,4(r5)
    38f8:	40800326 	beq	r8,r2,3908 <__fpcmp_parts_d+0x60>
    38fc:	403ff726 	beq	r8,zero,38dc <__fpcmp_parts_d+0x34>
    3900:	00bfffc4 	movi	r2,-1
    3904:	f800283a 	ret
    3908:	20c00217 	ldw	r3,8(r4)
    390c:	28800217 	ldw	r2,8(r5)
    3910:	10fffa16 	blt	r2,r3,38fc <__fpcmp_parts_d+0x54>
    3914:	18800916 	blt	r3,r2,393c <__fpcmp_parts_d+0x94>
    3918:	21c00417 	ldw	r7,16(r4)
    391c:	28c00417 	ldw	r3,16(r5)
    3920:	21800317 	ldw	r6,12(r4)
    3924:	28800317 	ldw	r2,12(r5)
    3928:	19fff436 	bltu	r3,r7,38fc <__fpcmp_parts_d+0x54>
    392c:	38c00526 	beq	r7,r3,3944 <__fpcmp_parts_d+0x9c>
    3930:	38c00236 	bltu	r7,r3,393c <__fpcmp_parts_d+0x94>
    3934:	19ffec1e 	bne	r3,r7,38e8 <__fpcmp_parts_d+0x40>
    3938:	30bfeb2e 	bgeu	r6,r2,38e8 <__fpcmp_parts_d+0x40>
    393c:	403fe71e 	bne	r8,zero,38dc <__fpcmp_parts_d+0x34>
    3940:	003fef06 	br	3900 <__fpcmp_parts_d+0x58>
    3944:	11bffa2e 	bgeu	r2,r6,3930 <__fpcmp_parts_d+0x88>
    3948:	403fe426 	beq	r8,zero,38dc <__fpcmp_parts_d+0x34>
    394c:	003fec06 	br	3900 <__fpcmp_parts_d+0x58>
    3950:	28800117 	ldw	r2,4(r5)
    3954:	103fe11e 	bne	r2,zero,38dc <__fpcmp_parts_d+0x34>
    3958:	003fe906 	br	3900 <__fpcmp_parts_d+0x58>
    395c:	11bfdd1e 	bne	r2,r6,38d4 <__fpcmp_parts_d+0x2c>
    3960:	28c00117 	ldw	r3,4(r5)
    3964:	20800117 	ldw	r2,4(r4)
    3968:	1885c83a 	sub	r2,r3,r2
    396c:	f800283a 	ret

00003970 <__errno>:
    3970:	00c00074 	movhi	r3,1
    3974:	18e9e904 	addi	r3,r3,-22620
    3978:	18800017 	ldw	r2,0(r3)
    397c:	f800283a 	ret

00003980 <memset>:
    3980:	008000c4 	movi	r2,3
    3984:	29403fcc 	andi	r5,r5,255
    3988:	2007883a 	mov	r3,r4
    398c:	1180022e 	bgeu	r2,r6,3998 <memset+0x18>
    3990:	2084703a 	and	r2,r4,r2
    3994:	10000826 	beq	r2,zero,39b8 <memset+0x38>
    3998:	30000526 	beq	r6,zero,39b0 <memset+0x30>
    399c:	2805883a 	mov	r2,r5
    39a0:	30cd883a 	add	r6,r6,r3
    39a4:	18800005 	stb	r2,0(r3)
    39a8:	18c00044 	addi	r3,r3,1
    39ac:	19bffd1e 	bne	r3,r6,39a4 <memset+0x24>
    39b0:	2005883a 	mov	r2,r4
    39b4:	f800283a 	ret
    39b8:	2804923a 	slli	r2,r5,8
    39bc:	020003c4 	movi	r8,15
    39c0:	200f883a 	mov	r7,r4
    39c4:	2884b03a 	or	r2,r5,r2
    39c8:	1006943a 	slli	r3,r2,16
    39cc:	10c6b03a 	or	r3,r2,r3
    39d0:	41800a2e 	bgeu	r8,r6,39fc <memset+0x7c>
    39d4:	4005883a 	mov	r2,r8
    39d8:	31bffc04 	addi	r6,r6,-16
    39dc:	38c00015 	stw	r3,0(r7)
    39e0:	38c00115 	stw	r3,4(r7)
    39e4:	38c00215 	stw	r3,8(r7)
    39e8:	38c00315 	stw	r3,12(r7)
    39ec:	39c00404 	addi	r7,r7,16
    39f0:	11bff936 	bltu	r2,r6,39d8 <memset+0x58>
    39f4:	008000c4 	movi	r2,3
    39f8:	1180052e 	bgeu	r2,r6,3a10 <memset+0x90>
    39fc:	31bfff04 	addi	r6,r6,-4
    3a00:	008000c4 	movi	r2,3
    3a04:	38c00015 	stw	r3,0(r7)
    3a08:	39c00104 	addi	r7,r7,4
    3a0c:	11bffb36 	bltu	r2,r6,39fc <memset+0x7c>
    3a10:	3807883a 	mov	r3,r7
    3a14:	003fe006 	br	3998 <memset+0x18>

00003a18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3a18:	defffe04 	addi	sp,sp,-8
    3a1c:	dfc00115 	stw	ra,4(sp)
    3a20:	df000015 	stw	fp,0(sp)
    3a24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3a28:	01000074 	movhi	r4,1
    3a2c:	2129f704 	addi	r4,r4,-22564
    3a30:	01400074 	movhi	r5,1
    3a34:	29635904 	addi	r5,r5,-29340
    3a38:	01800074 	movhi	r6,1
    3a3c:	31a9f704 	addi	r6,r6,-22564
    3a40:	0003a980 	call	3a98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3a44:	01000034 	movhi	r4,0
    3a48:	21000804 	addi	r4,r4,32
    3a4c:	01400034 	movhi	r5,0
    3a50:	29400804 	addi	r5,r5,32
    3a54:	01800034 	movhi	r6,0
    3a58:	31806d04 	addi	r6,r6,436
    3a5c:	0003a980 	call	3a98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3a60:	01000074 	movhi	r4,1
    3a64:	2122c204 	addi	r4,r4,-29944
    3a68:	01400074 	movhi	r5,1
    3a6c:	2962c204 	addi	r5,r5,-29944
    3a70:	01800074 	movhi	r6,1
    3a74:	31a35904 	addi	r6,r6,-29340
    3a78:	0003a980 	call	3a98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3a7c:	00052740 	call	5274 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3a80:	000552c0 	call	552c <alt_icache_flush_all>
}
    3a84:	e037883a 	mov	sp,fp
    3a88:	dfc00117 	ldw	ra,4(sp)
    3a8c:	df000017 	ldw	fp,0(sp)
    3a90:	dec00204 	addi	sp,sp,8
    3a94:	f800283a 	ret

00003a98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3a98:	defffc04 	addi	sp,sp,-16
    3a9c:	df000315 	stw	fp,12(sp)
    3aa0:	df000304 	addi	fp,sp,12
    3aa4:	e13ffd15 	stw	r4,-12(fp)
    3aa8:	e17ffe15 	stw	r5,-8(fp)
    3aac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3ab0:	e0fffe17 	ldw	r3,-8(fp)
    3ab4:	e0bffd17 	ldw	r2,-12(fp)
    3ab8:	18800e26 	beq	r3,r2,3af4 <alt_load_section+0x5c>
  {
    while( to != end )
    3abc:	00000a06 	br	3ae8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    3ac0:	e0bffd17 	ldw	r2,-12(fp)
    3ac4:	10c00017 	ldw	r3,0(r2)
    3ac8:	e0bffe17 	ldw	r2,-8(fp)
    3acc:	10c00015 	stw	r3,0(r2)
    3ad0:	e0bffe17 	ldw	r2,-8(fp)
    3ad4:	10800104 	addi	r2,r2,4
    3ad8:	e0bffe15 	stw	r2,-8(fp)
    3adc:	e0bffd17 	ldw	r2,-12(fp)
    3ae0:	10800104 	addi	r2,r2,4
    3ae4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3ae8:	e0fffe17 	ldw	r3,-8(fp)
    3aec:	e0bfff17 	ldw	r2,-4(fp)
    3af0:	18bff31e 	bne	r3,r2,3ac0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3af4:	e037883a 	mov	sp,fp
    3af8:	df000017 	ldw	fp,0(sp)
    3afc:	dec00104 	addi	sp,sp,4
    3b00:	f800283a 	ret

00003b04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3b04:	defffd04 	addi	sp,sp,-12
    3b08:	dfc00215 	stw	ra,8(sp)
    3b0c:	df000115 	stw	fp,4(sp)
    3b10:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3b14:	0009883a 	mov	r4,zero
    3b18:	0003e080 	call	3e08 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3b1c:	0003e3c0 	call	3e3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3b20:	01000074 	movhi	r4,1
    3b24:	21234904 	addi	r4,r4,-29404
    3b28:	01400074 	movhi	r5,1
    3b2c:	29634904 	addi	r5,r5,-29404
    3b30:	01800074 	movhi	r6,1
    3b34:	31a34904 	addi	r6,r6,-29404
    3b38:	00058ec0 	call	58ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3b3c:	00053d00 	call	53d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3b40:	01000034 	movhi	r4,0
    3b44:	21150d04 	addi	r4,r4,21556
    3b48:	00060b40 	call	60b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3b4c:	d126ad17 	ldw	r4,-25932(gp)
    3b50:	d166ae17 	ldw	r5,-25928(gp)
    3b54:	d1a6af17 	ldw	r6,-25924(gp)
    3b58:	00001f00 	call	1f0 <main>
    3b5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3b60:	01000044 	movi	r4,1
    3b64:	00051180 	call	5118 <close>
  exit (result);
    3b68:	e13fff17 	ldw	r4,-4(fp)
    3b6c:	00060c80 	call	60c8 <exit>

00003b70 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    3b70:	defff204 	addi	sp,sp,-56
    3b74:	dfc00a15 	stw	ra,40(sp)
    3b78:	df000915 	stw	fp,36(sp)
    3b7c:	df000904 	addi	fp,sp,36
    3b80:	e1400215 	stw	r5,8(fp)
    3b84:	e1800315 	stw	r6,12(fp)
    3b88:	e1c00415 	stw	r7,16(fp)
    3b8c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    3b90:	e0800204 	addi	r2,fp,8
    3b94:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    3b98:	e0bfff17 	ldw	r2,-4(fp)
    3b9c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    3ba0:	00007806 	br	3d84 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    3ba4:	e0bffc07 	ldb	r2,-16(fp)
    3ba8:	10800960 	cmpeqi	r2,r2,37
    3bac:	1000031e 	bne	r2,zero,3bbc <alt_printf+0x4c>
        {
            alt_putchar(c);
    3bb0:	e13ffc07 	ldb	r4,-16(fp)
    3bb4:	0003dc80 	call	3dc8 <alt_putchar>
    3bb8:	00007206 	br	3d84 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    3bbc:	e0bffd17 	ldw	r2,-12(fp)
    3bc0:	10800003 	ldbu	r2,0(r2)
    3bc4:	e0bffc05 	stb	r2,-16(fp)
    3bc8:	e0bffc07 	ldb	r2,-16(fp)
    3bcc:	1004c03a 	cmpne	r2,r2,zero
    3bd0:	1007883a 	mov	r3,r2
    3bd4:	e0bffd17 	ldw	r2,-12(fp)
    3bd8:	10800044 	addi	r2,r2,1
    3bdc:	e0bffd15 	stw	r2,-12(fp)
    3be0:	18803fcc 	andi	r2,r3,255
    3be4:	1005003a 	cmpeq	r2,r2,zero
    3be8:	1000721e 	bne	r2,zero,3db4 <alt_printf+0x244>
            {
                if (c == '%')
    3bec:	e0bffc07 	ldb	r2,-16(fp)
    3bf0:	10800958 	cmpnei	r2,r2,37
    3bf4:	1000031e 	bne	r2,zero,3c04 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    3bf8:	e13ffc07 	ldb	r4,-16(fp)
    3bfc:	0003dc80 	call	3dc8 <alt_putchar>
    3c00:	00006006 	br	3d84 <alt_printf+0x214>
                } 
                else if (c == 'c')
    3c04:	e0bffc07 	ldb	r2,-16(fp)
    3c08:	108018d8 	cmpnei	r2,r2,99
    3c0c:	1000091e 	bne	r2,zero,3c34 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    3c10:	e0fffe17 	ldw	r3,-8(fp)
    3c14:	18800104 	addi	r2,r3,4
    3c18:	e0bffe15 	stw	r2,-8(fp)
    3c1c:	1805883a 	mov	r2,r3
    3c20:	10800017 	ldw	r2,0(r2)
    3c24:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    3c28:	e13ffb17 	ldw	r4,-20(fp)
    3c2c:	0003dc80 	call	3dc8 <alt_putchar>
    3c30:	00005406 	br	3d84 <alt_printf+0x214>
                }
                else if (c == 'x')
    3c34:	e0bffc07 	ldb	r2,-16(fp)
    3c38:	10801e18 	cmpnei	r2,r2,120
    3c3c:	1000371e 	bne	r2,zero,3d1c <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    3c40:	e0fffe17 	ldw	r3,-8(fp)
    3c44:	18800104 	addi	r2,r3,4
    3c48:	e0bffe15 	stw	r2,-8(fp)
    3c4c:	1805883a 	mov	r2,r3
    3c50:	10800017 	ldw	r2,0(r2)
    3c54:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    3c58:	e0bffa17 	ldw	r2,-24(fp)
    3c5c:	1004c03a 	cmpne	r2,r2,zero
    3c60:	1000031e 	bne	r2,zero,3c70 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    3c64:	01000c04 	movi	r4,48
    3c68:	0003dc80 	call	3dc8 <alt_putchar>
                        continue;
    3c6c:	00004506 	br	3d84 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    3c70:	00800704 	movi	r2,28
    3c74:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    3c78:	00000306 	br	3c88 <alt_printf+0x118>
                        digit_shift -= 4;
    3c7c:	e0bff817 	ldw	r2,-32(fp)
    3c80:	10bfff04 	addi	r2,r2,-4
    3c84:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    3c88:	00c003c4 	movi	r3,15
    3c8c:	e0bff817 	ldw	r2,-32(fp)
    3c90:	1884983a 	sll	r2,r3,r2
    3c94:	1007883a 	mov	r3,r2
    3c98:	e0bffa17 	ldw	r2,-24(fp)
    3c9c:	1884703a 	and	r2,r3,r2
    3ca0:	1005003a 	cmpeq	r2,r2,zero
    3ca4:	103ff51e 	bne	r2,zero,3c7c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3ca8:	00001806 	br	3d0c <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    3cac:	00c003c4 	movi	r3,15
    3cb0:	e0bff817 	ldw	r2,-32(fp)
    3cb4:	1884983a 	sll	r2,r3,r2
    3cb8:	1007883a 	mov	r3,r2
    3cbc:	e0bffa17 	ldw	r2,-24(fp)
    3cc0:	1886703a 	and	r3,r3,r2
    3cc4:	e0bff817 	ldw	r2,-32(fp)
    3cc8:	1884d83a 	srl	r2,r3,r2
    3ccc:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    3cd0:	e0bff917 	ldw	r2,-28(fp)
    3cd4:	108002a8 	cmpgeui	r2,r2,10
    3cd8:	1000041e 	bne	r2,zero,3cec <alt_printf+0x17c>
                            c = '0' + digit;
    3cdc:	e0bff917 	ldw	r2,-28(fp)
    3ce0:	10800c04 	addi	r2,r2,48
    3ce4:	e0bffc05 	stb	r2,-16(fp)
    3ce8:	00000306 	br	3cf8 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    3cec:	e0bff917 	ldw	r2,-28(fp)
    3cf0:	108015c4 	addi	r2,r2,87
    3cf4:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    3cf8:	e13ffc07 	ldb	r4,-16(fp)
    3cfc:	0003dc80 	call	3dc8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3d00:	e0bff817 	ldw	r2,-32(fp)
    3d04:	10bfff04 	addi	r2,r2,-4
    3d08:	e0bff815 	stw	r2,-32(fp)
    3d0c:	e0bff817 	ldw	r2,-32(fp)
    3d10:	1004403a 	cmpge	r2,r2,zero
    3d14:	103fe51e 	bne	r2,zero,3cac <alt_printf+0x13c>
    3d18:	00001a06 	br	3d84 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    3d1c:	e0bffc07 	ldb	r2,-16(fp)
    3d20:	10801cd8 	cmpnei	r2,r2,115
    3d24:	1000171e 	bne	r2,zero,3d84 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    3d28:	e0fffe17 	ldw	r3,-8(fp)
    3d2c:	18800104 	addi	r2,r3,4
    3d30:	e0bffe15 	stw	r2,-8(fp)
    3d34:	1805883a 	mov	r2,r3
    3d38:	10800017 	ldw	r2,0(r2)
    3d3c:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    3d40:	00000906 	br	3d68 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    3d44:	e0bff717 	ldw	r2,-36(fp)
    3d48:	10800003 	ldbu	r2,0(r2)
    3d4c:	11003fcc 	andi	r4,r2,255
    3d50:	2100201c 	xori	r4,r4,128
    3d54:	213fe004 	addi	r4,r4,-128
    3d58:	e0bff717 	ldw	r2,-36(fp)
    3d5c:	10800044 	addi	r2,r2,1
    3d60:	e0bff715 	stw	r2,-36(fp)
    3d64:	0003dc80 	call	3dc8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    3d68:	e0bff717 	ldw	r2,-36(fp)
    3d6c:	10800003 	ldbu	r2,0(r2)
    3d70:	10803fcc 	andi	r2,r2,255
    3d74:	1080201c 	xori	r2,r2,128
    3d78:	10bfe004 	addi	r2,r2,-128
    3d7c:	1004c03a 	cmpne	r2,r2,zero
    3d80:	103ff01e 	bne	r2,zero,3d44 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    3d84:	e0bffd17 	ldw	r2,-12(fp)
    3d88:	10800003 	ldbu	r2,0(r2)
    3d8c:	e0bffc05 	stb	r2,-16(fp)
    3d90:	e0bffc07 	ldb	r2,-16(fp)
    3d94:	1004c03a 	cmpne	r2,r2,zero
    3d98:	1007883a 	mov	r3,r2
    3d9c:	e0bffd17 	ldw	r2,-12(fp)
    3da0:	10800044 	addi	r2,r2,1
    3da4:	e0bffd15 	stw	r2,-12(fp)
    3da8:	18803fcc 	andi	r2,r3,255
    3dac:	1004c03a 	cmpne	r2,r2,zero
    3db0:	103f7c1e 	bne	r2,zero,3ba4 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    3db4:	e037883a 	mov	sp,fp
    3db8:	dfc00117 	ldw	ra,4(sp)
    3dbc:	df000017 	ldw	fp,0(sp)
    3dc0:	dec00504 	addi	sp,sp,20
    3dc4:	f800283a 	ret

00003dc8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3dc8:	defffd04 	addi	sp,sp,-12
    3dcc:	dfc00215 	stw	ra,8(sp)
    3dd0:	df000115 	stw	fp,4(sp)
    3dd4:	df000104 	addi	fp,sp,4
    3dd8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    3ddc:	00800074 	movhi	r2,1
    3de0:	10a9e904 	addi	r2,r2,-22620
    3de4:	10800017 	ldw	r2,0(r2)
    3de8:	11400217 	ldw	r5,8(r2)
    3dec:	e13fff17 	ldw	r4,-4(fp)
    3df0:	00062140 	call	6214 <putc>
#endif
}
    3df4:	e037883a 	mov	sp,fp
    3df8:	dfc00117 	ldw	ra,4(sp)
    3dfc:	df000017 	ldw	fp,0(sp)
    3e00:	dec00204 	addi	sp,sp,8
    3e04:	f800283a 	ret

00003e08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3e08:	defffd04 	addi	sp,sp,-12
    3e0c:	dfc00215 	stw	ra,8(sp)
    3e10:	df000115 	stw	fp,4(sp)
    3e14:	df000104 	addi	fp,sp,4
    3e18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    3e1c:	0005e2c0 	call	5e2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3e20:	00800044 	movi	r2,1
    3e24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3e28:	e037883a 	mov	sp,fp
    3e2c:	dfc00117 	ldw	ra,4(sp)
    3e30:	df000017 	ldw	fp,0(sp)
    3e34:	dec00204 	addi	sp,sp,8
    3e38:	f800283a 	ret

00003e3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3e3c:	defffe04 	addi	sp,sp,-8
    3e40:	dfc00115 	stw	ra,4(sp)
    3e44:	df000015 	stw	fp,0(sp)
    3e48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3e4c:	01040034 	movhi	r4,4096
    3e50:	21080004 	addi	r4,r4,8192
    3e54:	000b883a 	mov	r5,zero
    3e58:	000d883a 	mov	r6,zero
    3e5c:	01c00204 	movi	r7,8
    3e60:	0004a040 	call	4a04 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3e64:	01000074 	movhi	r4,1
    3e68:	21246304 	addi	r4,r4,-28276
    3e6c:	000b883a 	mov	r5,zero
    3e70:	01800204 	movi	r6,8
    3e74:	00040300 	call	4030 <altera_avalon_jtag_uart_init>
    3e78:	01000074 	movhi	r4,1
    3e7c:	21245904 	addi	r4,r4,-28316
    3e80:	0003eb00 	call	3eb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    3e84:	01000074 	movhi	r4,1
    3e88:	21287104 	addi	r4,r4,-24124
    3e8c:	0004b440 	call	4b44 <alt_up_character_lcd_init>
    3e90:	01000074 	movhi	r4,1
    3e94:	21287104 	addi	r4,r4,-24124
    3e98:	0003eb00 	call	3eb0 <alt_dev_reg>
}
    3e9c:	e037883a 	mov	sp,fp
    3ea0:	dfc00117 	ldw	ra,4(sp)
    3ea4:	df000017 	ldw	fp,0(sp)
    3ea8:	dec00204 	addi	sp,sp,8
    3eac:	f800283a 	ret

00003eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3eb0:	defffd04 	addi	sp,sp,-12
    3eb4:	dfc00215 	stw	ra,8(sp)
    3eb8:	df000115 	stw	fp,4(sp)
    3ebc:	df000104 	addi	fp,sp,4
    3ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3ec4:	e13fff17 	ldw	r4,-4(fp)
    3ec8:	01400074 	movhi	r5,1
    3ecc:	2969ed04 	addi	r5,r5,-22604
    3ed0:	00052bc0 	call	52bc <alt_dev_llist_insert>
}
    3ed4:	e037883a 	mov	sp,fp
    3ed8:	dfc00117 	ldw	ra,4(sp)
    3edc:	df000017 	ldw	fp,0(sp)
    3ee0:	dec00204 	addi	sp,sp,8
    3ee4:	f800283a 	ret

00003ee8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3ee8:	defffa04 	addi	sp,sp,-24
    3eec:	dfc00515 	stw	ra,20(sp)
    3ef0:	df000415 	stw	fp,16(sp)
    3ef4:	df000404 	addi	fp,sp,16
    3ef8:	e13ffd15 	stw	r4,-12(fp)
    3efc:	e17ffe15 	stw	r5,-8(fp)
    3f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f04:	e0bffd17 	ldw	r2,-12(fp)
    3f08:	10800017 	ldw	r2,0(r2)
    3f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3f10:	e0bffc17 	ldw	r2,-16(fp)
    3f14:	11000a04 	addi	r4,r2,40
    3f18:	e0bffd17 	ldw	r2,-12(fp)
    3f1c:	11c00217 	ldw	r7,8(r2)
    3f20:	e17ffe17 	ldw	r5,-8(fp)
    3f24:	e1bfff17 	ldw	r6,-4(fp)
    3f28:	00045300 	call	4530 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3f2c:	e037883a 	mov	sp,fp
    3f30:	dfc00117 	ldw	ra,4(sp)
    3f34:	df000017 	ldw	fp,0(sp)
    3f38:	dec00204 	addi	sp,sp,8
    3f3c:	f800283a 	ret

00003f40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3f40:	defffa04 	addi	sp,sp,-24
    3f44:	dfc00515 	stw	ra,20(sp)
    3f48:	df000415 	stw	fp,16(sp)
    3f4c:	df000404 	addi	fp,sp,16
    3f50:	e13ffd15 	stw	r4,-12(fp)
    3f54:	e17ffe15 	stw	r5,-8(fp)
    3f58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f5c:	e0bffd17 	ldw	r2,-12(fp)
    3f60:	10800017 	ldw	r2,0(r2)
    3f64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3f68:	e0bffc17 	ldw	r2,-16(fp)
    3f6c:	11000a04 	addi	r4,r2,40
    3f70:	e0bffd17 	ldw	r2,-12(fp)
    3f74:	11c00217 	ldw	r7,8(r2)
    3f78:	e17ffe17 	ldw	r5,-8(fp)
    3f7c:	e1bfff17 	ldw	r6,-4(fp)
    3f80:	00047540 	call	4754 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3f84:	e037883a 	mov	sp,fp
    3f88:	dfc00117 	ldw	ra,4(sp)
    3f8c:	df000017 	ldw	fp,0(sp)
    3f90:	dec00204 	addi	sp,sp,8
    3f94:	f800283a 	ret

00003f98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3f98:	defffc04 	addi	sp,sp,-16
    3f9c:	dfc00315 	stw	ra,12(sp)
    3fa0:	df000215 	stw	fp,8(sp)
    3fa4:	df000204 	addi	fp,sp,8
    3fa8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800017 	ldw	r2,0(r2)
    3fb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3fb8:	e0bffe17 	ldw	r2,-8(fp)
    3fbc:	11000a04 	addi	r4,r2,40
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	11400217 	ldw	r5,8(r2)
    3fc8:	00043c80 	call	43c8 <altera_avalon_jtag_uart_close>
}
    3fcc:	e037883a 	mov	sp,fp
    3fd0:	dfc00117 	ldw	ra,4(sp)
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00204 	addi	sp,sp,8
    3fdc:	f800283a 	ret

00003fe0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3fe0:	defffa04 	addi	sp,sp,-24
    3fe4:	dfc00515 	stw	ra,20(sp)
    3fe8:	df000415 	stw	fp,16(sp)
    3fec:	df000404 	addi	fp,sp,16
    3ff0:	e13ffd15 	stw	r4,-12(fp)
    3ff4:	e17ffe15 	stw	r5,-8(fp)
    3ff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10800017 	ldw	r2,0(r2)
    4004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4008:	e0bffc17 	ldw	r2,-16(fp)
    400c:	11000a04 	addi	r4,r2,40
    4010:	e17ffe17 	ldw	r5,-8(fp)
    4014:	e1bfff17 	ldw	r6,-4(fp)
    4018:	000443c0 	call	443c <altera_avalon_jtag_uart_ioctl>
}
    401c:	e037883a 	mov	sp,fp
    4020:	dfc00117 	ldw	ra,4(sp)
    4024:	df000017 	ldw	fp,0(sp)
    4028:	dec00204 	addi	sp,sp,8
    402c:	f800283a 	ret

00004030 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4030:	defffa04 	addi	sp,sp,-24
    4034:	dfc00515 	stw	ra,20(sp)
    4038:	df000415 	stw	fp,16(sp)
    403c:	df000404 	addi	fp,sp,16
    4040:	e13ffd15 	stw	r4,-12(fp)
    4044:	e17ffe15 	stw	r5,-8(fp)
    4048:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    404c:	e0fffd17 	ldw	r3,-12(fp)
    4050:	00800044 	movi	r2,1
    4054:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4058:	e0bffd17 	ldw	r2,-12(fp)
    405c:	10800017 	ldw	r2,0(r2)
    4060:	11000104 	addi	r4,r2,4
    4064:	e0bffd17 	ldw	r2,-12(fp)
    4068:	10800817 	ldw	r2,32(r2)
    406c:	1007883a 	mov	r3,r2
    4070:	2005883a 	mov	r2,r4
    4074:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    4078:	e13ffe17 	ldw	r4,-8(fp)
    407c:	e17fff17 	ldw	r5,-4(fp)
    4080:	d8000015 	stw	zero,0(sp)
    4084:	01800034 	movhi	r6,0
    4088:	31903c04 	addi	r6,r6,16624
    408c:	e1fffd17 	ldw	r7,-12(fp)
    4090:	000555c0 	call	555c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4094:	e0bffd17 	ldw	r2,-12(fp)
    4098:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    409c:	e0bffd17 	ldw	r2,-12(fp)
    40a0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    40a4:	00800074 	movhi	r2,1
    40a8:	10b09904 	addi	r2,r2,-15772
    40ac:	10800017 	ldw	r2,0(r2)
    40b0:	100b883a 	mov	r5,r2
    40b4:	01800034 	movhi	r6,0
    40b8:	3190c604 	addi	r6,r6,17176
    40bc:	e1fffd17 	ldw	r7,-12(fp)
    40c0:	0004fc40 	call	4fc4 <alt_alarm_start>
    40c4:	1004403a 	cmpge	r2,r2,zero
    40c8:	1000041e 	bne	r2,zero,40dc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    40cc:	e0fffd17 	ldw	r3,-12(fp)
    40d0:	00a00034 	movhi	r2,32768
    40d4:	10bfffc4 	addi	r2,r2,-1
    40d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    40dc:	e037883a 	mov	sp,fp
    40e0:	dfc00117 	ldw	ra,4(sp)
    40e4:	df000017 	ldw	fp,0(sp)
    40e8:	dec00204 	addi	sp,sp,8
    40ec:	f800283a 	ret

000040f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    40f0:	defff804 	addi	sp,sp,-32
    40f4:	df000715 	stw	fp,28(sp)
    40f8:	df000704 	addi	fp,sp,28
    40fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4100:	e0bfff17 	ldw	r2,-4(fp)
    4104:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    4108:	e0bffe17 	ldw	r2,-8(fp)
    410c:	10800017 	ldw	r2,0(r2)
    4110:	e0bffd15 	stw	r2,-12(fp)
    4114:	00000006 	br	4118 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4118:	e0bffd17 	ldw	r2,-12(fp)
    411c:	10800104 	addi	r2,r2,4
    4120:	10800037 	ldwio	r2,0(r2)
    4124:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4128:	e0bffc17 	ldw	r2,-16(fp)
    412c:	1080c00c 	andi	r2,r2,768
    4130:	1005003a 	cmpeq	r2,r2,zero
    4134:	1000741e 	bne	r2,zero,4308 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4138:	e0bffc17 	ldw	r2,-16(fp)
    413c:	1080400c 	andi	r2,r2,256
    4140:	1005003a 	cmpeq	r2,r2,zero
    4144:	1000351e 	bne	r2,zero,421c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4148:	00800074 	movhi	r2,1
    414c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4150:	e0bffe17 	ldw	r2,-8(fp)
    4154:	10800a17 	ldw	r2,40(r2)
    4158:	10800044 	addi	r2,r2,1
    415c:	1081ffcc 	andi	r2,r2,2047
    4160:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    4164:	e0bffe17 	ldw	r2,-8(fp)
    4168:	10c00b17 	ldw	r3,44(r2)
    416c:	e0bffa17 	ldw	r2,-24(fp)
    4170:	18801626 	beq	r3,r2,41cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4174:	e0bffd17 	ldw	r2,-12(fp)
    4178:	10800037 	ldwio	r2,0(r2)
    417c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4180:	e0bffb17 	ldw	r2,-20(fp)
    4184:	10a0000c 	andi	r2,r2,32768
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	10000f1e 	bne	r2,zero,41cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4190:	e0bffe17 	ldw	r2,-8(fp)
    4194:	10c00a17 	ldw	r3,40(r2)
    4198:	e0bffb17 	ldw	r2,-20(fp)
    419c:	1009883a 	mov	r4,r2
    41a0:	e0bffe17 	ldw	r2,-8(fp)
    41a4:	1885883a 	add	r2,r3,r2
    41a8:	10800e04 	addi	r2,r2,56
    41ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    41b0:	e0bffe17 	ldw	r2,-8(fp)
    41b4:	10800a17 	ldw	r2,40(r2)
    41b8:	10800044 	addi	r2,r2,1
    41bc:	10c1ffcc 	andi	r3,r2,2047
    41c0:	e0bffe17 	ldw	r2,-8(fp)
    41c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    41c8:	003fe106 	br	4150 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    41cc:	e0bffb17 	ldw	r2,-20(fp)
    41d0:	10bfffec 	andhi	r2,r2,65535
    41d4:	1005003a 	cmpeq	r2,r2,zero
    41d8:	1000101e 	bne	r2,zero,421c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	10c00817 	ldw	r3,32(r2)
    41e4:	00bfff84 	movi	r2,-2
    41e8:	1886703a 	and	r3,r3,r2
    41ec:	e0bffe17 	ldw	r2,-8(fp)
    41f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    41f4:	e0bffd17 	ldw	r2,-12(fp)
    41f8:	11000104 	addi	r4,r2,4
    41fc:	e0bffe17 	ldw	r2,-8(fp)
    4200:	10800817 	ldw	r2,32(r2)
    4204:	1007883a 	mov	r3,r2
    4208:	2005883a 	mov	r2,r4
    420c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4210:	e0bffd17 	ldw	r2,-12(fp)
    4214:	10800104 	addi	r2,r2,4
    4218:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    421c:	e0bffc17 	ldw	r2,-16(fp)
    4220:	1080800c 	andi	r2,r2,512
    4224:	1005003a 	cmpeq	r2,r2,zero
    4228:	103fbb1e 	bne	r2,zero,4118 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    422c:	e0bffc17 	ldw	r2,-16(fp)
    4230:	10bfffec 	andhi	r2,r2,65535
    4234:	1004d43a 	srli	r2,r2,16
    4238:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    423c:	00001506 	br	4294 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4240:	e13ffd17 	ldw	r4,-12(fp)
    4244:	e0bffe17 	ldw	r2,-8(fp)
    4248:	10c00d17 	ldw	r3,52(r2)
    424c:	e0bffe17 	ldw	r2,-8(fp)
    4250:	1885883a 	add	r2,r3,r2
    4254:	10820e04 	addi	r2,r2,2104
    4258:	10800003 	ldbu	r2,0(r2)
    425c:	10c03fcc 	andi	r3,r2,255
    4260:	18c0201c 	xori	r3,r3,128
    4264:	18ffe004 	addi	r3,r3,-128
    4268:	2005883a 	mov	r2,r4
    426c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4270:	e0bffe17 	ldw	r2,-8(fp)
    4274:	10800d17 	ldw	r2,52(r2)
    4278:	10800044 	addi	r2,r2,1
    427c:	10c1ffcc 	andi	r3,r2,2047
    4280:	e0bffe17 	ldw	r2,-8(fp)
    4284:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4288:	e0bff917 	ldw	r2,-28(fp)
    428c:	10bfffc4 	addi	r2,r2,-1
    4290:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4294:	e0bff917 	ldw	r2,-28(fp)
    4298:	1005003a 	cmpeq	r2,r2,zero
    429c:	1000051e 	bne	r2,zero,42b4 <altera_avalon_jtag_uart_irq+0x1c4>
    42a0:	e0bffe17 	ldw	r2,-8(fp)
    42a4:	10c00d17 	ldw	r3,52(r2)
    42a8:	e0bffe17 	ldw	r2,-8(fp)
    42ac:	10800c17 	ldw	r2,48(r2)
    42b0:	18bfe31e 	bne	r3,r2,4240 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    42b4:	e0bff917 	ldw	r2,-28(fp)
    42b8:	1005003a 	cmpeq	r2,r2,zero
    42bc:	103f961e 	bne	r2,zero,4118 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    42c0:	e0bffe17 	ldw	r2,-8(fp)
    42c4:	10c00817 	ldw	r3,32(r2)
    42c8:	00bfff44 	movi	r2,-3
    42cc:	1886703a 	and	r3,r3,r2
    42d0:	e0bffe17 	ldw	r2,-8(fp)
    42d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10800017 	ldw	r2,0(r2)
    42e0:	11000104 	addi	r4,r2,4
    42e4:	e0bffe17 	ldw	r2,-8(fp)
    42e8:	10800817 	ldw	r2,32(r2)
    42ec:	1007883a 	mov	r3,r2
    42f0:	2005883a 	mov	r2,r4
    42f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    42f8:	e0bffd17 	ldw	r2,-12(fp)
    42fc:	10800104 	addi	r2,r2,4
    4300:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4304:	003f8406 	br	4118 <altera_avalon_jtag_uart_irq+0x28>
}
    4308:	e037883a 	mov	sp,fp
    430c:	df000017 	ldw	fp,0(sp)
    4310:	dec00104 	addi	sp,sp,4
    4314:	f800283a 	ret

00004318 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4318:	defffc04 	addi	sp,sp,-16
    431c:	df000315 	stw	fp,12(sp)
    4320:	df000304 	addi	fp,sp,12
    4324:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4328:	e0bfff17 	ldw	r2,-4(fp)
    432c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4330:	e0bffe17 	ldw	r2,-8(fp)
    4334:	10800017 	ldw	r2,0(r2)
    4338:	10800104 	addi	r2,r2,4
    433c:	10800037 	ldwio	r2,0(r2)
    4340:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4344:	e0bffd17 	ldw	r2,-12(fp)
    4348:	1081000c 	andi	r2,r2,1024
    434c:	1005003a 	cmpeq	r2,r2,zero
    4350:	10000c1e 	bne	r2,zero,4384 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4354:	e0bffe17 	ldw	r2,-8(fp)
    4358:	10800017 	ldw	r2,0(r2)
    435c:	11000104 	addi	r4,r2,4
    4360:	e0bffe17 	ldw	r2,-8(fp)
    4364:	10800817 	ldw	r2,32(r2)
    4368:	10810014 	ori	r2,r2,1024
    436c:	1007883a 	mov	r3,r2
    4370:	2005883a 	mov	r2,r4
    4374:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    4378:	e0bffe17 	ldw	r2,-8(fp)
    437c:	10000915 	stw	zero,36(r2)
    4380:	00000a06 	br	43ac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4384:	e0bffe17 	ldw	r2,-8(fp)
    4388:	10c00917 	ldw	r3,36(r2)
    438c:	00a00034 	movhi	r2,32768
    4390:	10bfff04 	addi	r2,r2,-4
    4394:	10c00536 	bltu	r2,r3,43ac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    4398:	e0bffe17 	ldw	r2,-8(fp)
    439c:	10800917 	ldw	r2,36(r2)
    43a0:	10c00044 	addi	r3,r2,1
    43a4:	e0bffe17 	ldw	r2,-8(fp)
    43a8:	10c00915 	stw	r3,36(r2)
    43ac:	00800074 	movhi	r2,1
    43b0:	10b09904 	addi	r2,r2,-15772
    43b4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    43b8:	e037883a 	mov	sp,fp
    43bc:	df000017 	ldw	fp,0(sp)
    43c0:	dec00104 	addi	sp,sp,4
    43c4:	f800283a 	ret

000043c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    43c8:	defffc04 	addi	sp,sp,-16
    43cc:	df000315 	stw	fp,12(sp)
    43d0:	df000304 	addi	fp,sp,12
    43d4:	e13ffd15 	stw	r4,-12(fp)
    43d8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    43dc:	00000706 	br	43fc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    43e0:	e0bffe17 	ldw	r2,-8(fp)
    43e4:	1090000c 	andi	r2,r2,16384
    43e8:	1005003a 	cmpeq	r2,r2,zero
    43ec:	1000031e 	bne	r2,zero,43fc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    43f0:	00bffd44 	movi	r2,-11
    43f4:	e0bfff15 	stw	r2,-4(fp)
    43f8:	00000b06 	br	4428 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    43fc:	e0bffd17 	ldw	r2,-12(fp)
    4400:	10c00d17 	ldw	r3,52(r2)
    4404:	e0bffd17 	ldw	r2,-12(fp)
    4408:	10800c17 	ldw	r2,48(r2)
    440c:	18800526 	beq	r3,r2,4424 <altera_avalon_jtag_uart_close+0x5c>
    4410:	e0bffd17 	ldw	r2,-12(fp)
    4414:	10c00917 	ldw	r3,36(r2)
    4418:	e0bffd17 	ldw	r2,-12(fp)
    441c:	10800117 	ldw	r2,4(r2)
    4420:	18bfef36 	bltu	r3,r2,43e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4424:	e03fff15 	stw	zero,-4(fp)
    4428:	e0bfff17 	ldw	r2,-4(fp)
}
    442c:	e037883a 	mov	sp,fp
    4430:	df000017 	ldw	fp,0(sp)
    4434:	dec00104 	addi	sp,sp,4
    4438:	f800283a 	ret

0000443c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    443c:	defff804 	addi	sp,sp,-32
    4440:	df000715 	stw	fp,28(sp)
    4444:	df000704 	addi	fp,sp,28
    4448:	e13ffb15 	stw	r4,-20(fp)
    444c:	e17ffc15 	stw	r5,-16(fp)
    4450:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4454:	00bff9c4 	movi	r2,-25
    4458:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    445c:	e0bffc17 	ldw	r2,-16(fp)
    4460:	e0bfff15 	stw	r2,-4(fp)
    4464:	e0ffff17 	ldw	r3,-4(fp)
    4468:	189a8060 	cmpeqi	r2,r3,27137
    446c:	1000041e 	bne	r2,zero,4480 <altera_avalon_jtag_uart_ioctl+0x44>
    4470:	e0ffff17 	ldw	r3,-4(fp)
    4474:	189a80a0 	cmpeqi	r2,r3,27138
    4478:	10001b1e 	bne	r2,zero,44e8 <altera_avalon_jtag_uart_ioctl+0xac>
    447c:	00002706 	br	451c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4480:	e0bffb17 	ldw	r2,-20(fp)
    4484:	10c00117 	ldw	r3,4(r2)
    4488:	00a00034 	movhi	r2,32768
    448c:	10bfffc4 	addi	r2,r2,-1
    4490:	18802226 	beq	r3,r2,451c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    4494:	e0bffd17 	ldw	r2,-12(fp)
    4498:	10800017 	ldw	r2,0(r2)
    449c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    44a0:	e0bff917 	ldw	r2,-28(fp)
    44a4:	10800090 	cmplti	r2,r2,2
    44a8:	1000071e 	bne	r2,zero,44c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    44ac:	e0fff917 	ldw	r3,-28(fp)
    44b0:	00a00034 	movhi	r2,32768
    44b4:	10bfffc4 	addi	r2,r2,-1
    44b8:	18800326 	beq	r3,r2,44c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    44bc:	e0bff917 	ldw	r2,-28(fp)
    44c0:	e0bffe15 	stw	r2,-8(fp)
    44c4:	00000306 	br	44d4 <altera_avalon_jtag_uart_ioctl+0x98>
    44c8:	00e00034 	movhi	r3,32768
    44cc:	18ffff84 	addi	r3,r3,-2
    44d0:	e0fffe15 	stw	r3,-8(fp)
    44d4:	e0bffb17 	ldw	r2,-20(fp)
    44d8:	e0fffe17 	ldw	r3,-8(fp)
    44dc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    44e0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    44e4:	00000d06 	br	451c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    44e8:	e0bffb17 	ldw	r2,-20(fp)
    44ec:	10c00117 	ldw	r3,4(r2)
    44f0:	00a00034 	movhi	r2,32768
    44f4:	10bfffc4 	addi	r2,r2,-1
    44f8:	18800826 	beq	r3,r2,451c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    44fc:	e13ffd17 	ldw	r4,-12(fp)
    4500:	e0bffb17 	ldw	r2,-20(fp)
    4504:	10c00917 	ldw	r3,36(r2)
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	10800117 	ldw	r2,4(r2)
    4510:	1885803a 	cmpltu	r2,r3,r2
    4514:	20800015 	stw	r2,0(r4)
      rc = 0;
    4518:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    451c:	e0bffa17 	ldw	r2,-24(fp)
}
    4520:	e037883a 	mov	sp,fp
    4524:	df000017 	ldw	fp,0(sp)
    4528:	dec00104 	addi	sp,sp,4
    452c:	f800283a 	ret

00004530 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4530:	defff204 	addi	sp,sp,-56
    4534:	dfc00d15 	stw	ra,52(sp)
    4538:	df000c15 	stw	fp,48(sp)
    453c:	df000c04 	addi	fp,sp,48
    4540:	e13ffb15 	stw	r4,-20(fp)
    4544:	e17ffc15 	stw	r5,-16(fp)
    4548:	e1bffd15 	stw	r6,-12(fp)
    454c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4550:	e0bffc17 	ldw	r2,-16(fp)
    4554:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4558:	00004806 	br	467c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    455c:	e0bffb17 	ldw	r2,-20(fp)
    4560:	10800a17 	ldw	r2,40(r2)
    4564:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4568:	e0bffb17 	ldw	r2,-20(fp)
    456c:	10800b17 	ldw	r2,44(r2)
    4570:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    4574:	e0fff717 	ldw	r3,-36(fp)
    4578:	e0bff617 	ldw	r2,-40(fp)
    457c:	18800536 	bltu	r3,r2,4594 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4580:	e0bff717 	ldw	r2,-36(fp)
    4584:	e0fff617 	ldw	r3,-40(fp)
    4588:	10c5c83a 	sub	r2,r2,r3
    458c:	e0bff815 	stw	r2,-32(fp)
    4590:	00000406 	br	45a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4594:	00820004 	movi	r2,2048
    4598:	e0fff617 	ldw	r3,-40(fp)
    459c:	10c5c83a 	sub	r2,r2,r3
    45a0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    45a4:	e0bff817 	ldw	r2,-32(fp)
    45a8:	1005003a 	cmpeq	r2,r2,zero
    45ac:	10001f1e 	bne	r2,zero,462c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    45b0:	e0fffd17 	ldw	r3,-12(fp)
    45b4:	e0bff817 	ldw	r2,-32(fp)
    45b8:	1880022e 	bgeu	r3,r2,45c4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    45c4:	e0bffb17 	ldw	r2,-20(fp)
    45c8:	10c00e04 	addi	r3,r2,56
    45cc:	e0bff617 	ldw	r2,-40(fp)
    45d0:	1887883a 	add	r3,r3,r2
    45d4:	e0bffa17 	ldw	r2,-24(fp)
    45d8:	1009883a 	mov	r4,r2
    45dc:	180b883a 	mov	r5,r3
    45e0:	e1bff817 	ldw	r6,-32(fp)
    45e4:	00061740 	call	6174 <memcpy>
      ptr   += n;
    45e8:	e0fff817 	ldw	r3,-32(fp)
    45ec:	e0bffa17 	ldw	r2,-24(fp)
    45f0:	10c5883a 	add	r2,r2,r3
    45f4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    45f8:	e0fffd17 	ldw	r3,-12(fp)
    45fc:	e0bff817 	ldw	r2,-32(fp)
    4600:	1885c83a 	sub	r2,r3,r2
    4604:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4608:	e0fff617 	ldw	r3,-40(fp)
    460c:	e0bff817 	ldw	r2,-32(fp)
    4610:	1885883a 	add	r2,r3,r2
    4614:	10c1ffcc 	andi	r3,r2,2047
    4618:	e0bffb17 	ldw	r2,-20(fp)
    461c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4620:	e0bffd17 	ldw	r2,-12(fp)
    4624:	10800048 	cmpgei	r2,r2,1
    4628:	103fcc1e 	bne	r2,zero,455c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    462c:	e0fffa17 	ldw	r3,-24(fp)
    4630:	e0bffc17 	ldw	r2,-16(fp)
    4634:	1880141e 	bne	r3,r2,4688 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4638:	e0bffe17 	ldw	r2,-8(fp)
    463c:	1090000c 	andi	r2,r2,16384
    4640:	1004c03a 	cmpne	r2,r2,zero
    4644:	1000101e 	bne	r2,zero,4688 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4648:	e0bffb17 	ldw	r2,-20(fp)
    464c:	10c00a17 	ldw	r3,40(r2)
    4650:	e0bff717 	ldw	r2,-36(fp)
    4654:	1880051e 	bne	r3,r2,466c <altera_avalon_jtag_uart_read+0x13c>
    4658:	e0bffb17 	ldw	r2,-20(fp)
    465c:	10c00917 	ldw	r3,36(r2)
    4660:	e0bffb17 	ldw	r2,-20(fp)
    4664:	10800117 	ldw	r2,4(r2)
    4668:	18bff736 	bltu	r3,r2,4648 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    466c:	e0bffb17 	ldw	r2,-20(fp)
    4670:	10c00a17 	ldw	r3,40(r2)
    4674:	e0bff717 	ldw	r2,-36(fp)
    4678:	18800326 	beq	r3,r2,4688 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    467c:	e0bffd17 	ldw	r2,-12(fp)
    4680:	10800048 	cmpgei	r2,r2,1
    4684:	103fb51e 	bne	r2,zero,455c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4688:	e0fffa17 	ldw	r3,-24(fp)
    468c:	e0bffc17 	ldw	r2,-16(fp)
    4690:	18801926 	beq	r3,r2,46f8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4694:	0005303a 	rdctl	r2,status
    4698:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    469c:	e0fff517 	ldw	r3,-44(fp)
    46a0:	00bfff84 	movi	r2,-2
    46a4:	1884703a 	and	r2,r3,r2
    46a8:	1001703a 	wrctl	status,r2
  
  return context;
    46ac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    46b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    46b4:	e0bffb17 	ldw	r2,-20(fp)
    46b8:	10800817 	ldw	r2,32(r2)
    46bc:	10c00054 	ori	r3,r2,1
    46c0:	e0bffb17 	ldw	r2,-20(fp)
    46c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    46c8:	e0bffb17 	ldw	r2,-20(fp)
    46cc:	10800017 	ldw	r2,0(r2)
    46d0:	11000104 	addi	r4,r2,4
    46d4:	e0bffb17 	ldw	r2,-20(fp)
    46d8:	10800817 	ldw	r2,32(r2)
    46dc:	1007883a 	mov	r3,r2
    46e0:	2005883a 	mov	r2,r4
    46e4:	10c00035 	stwio	r3,0(r2)
    46e8:	e0bff917 	ldw	r2,-28(fp)
    46ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46f0:	e0bff417 	ldw	r2,-48(fp)
    46f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    46f8:	e0fffa17 	ldw	r3,-24(fp)
    46fc:	e0bffc17 	ldw	r2,-16(fp)
    4700:	18800526 	beq	r3,r2,4718 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    4704:	e0fffa17 	ldw	r3,-24(fp)
    4708:	e0bffc17 	ldw	r2,-16(fp)
    470c:	1887c83a 	sub	r3,r3,r2
    4710:	e0ffff15 	stw	r3,-4(fp)
    4714:	00000906 	br	473c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4718:	e0bffe17 	ldw	r2,-8(fp)
    471c:	1090000c 	andi	r2,r2,16384
    4720:	1005003a 	cmpeq	r2,r2,zero
    4724:	1000031e 	bne	r2,zero,4734 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4728:	00bffd44 	movi	r2,-11
    472c:	e0bfff15 	stw	r2,-4(fp)
    4730:	00000206 	br	473c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4734:	00bffec4 	movi	r2,-5
    4738:	e0bfff15 	stw	r2,-4(fp)
    473c:	e0bfff17 	ldw	r2,-4(fp)
}
    4740:	e037883a 	mov	sp,fp
    4744:	dfc00117 	ldw	ra,4(sp)
    4748:	df000017 	ldw	fp,0(sp)
    474c:	dec00204 	addi	sp,sp,8
    4750:	f800283a 	ret

00004754 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4754:	defff204 	addi	sp,sp,-56
    4758:	dfc00d15 	stw	ra,52(sp)
    475c:	df000c15 	stw	fp,48(sp)
    4760:	df000c04 	addi	fp,sp,48
    4764:	e13ffb15 	stw	r4,-20(fp)
    4768:	e17ffc15 	stw	r5,-16(fp)
    476c:	e1bffd15 	stw	r6,-12(fp)
    4770:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4774:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4778:	e0bffc17 	ldw	r2,-16(fp)
    477c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4780:	00003a06 	br	486c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4784:	e0bffb17 	ldw	r2,-20(fp)
    4788:	10800c17 	ldw	r2,48(r2)
    478c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    4790:	e0bffb17 	ldw	r2,-20(fp)
    4794:	10800d17 	ldw	r2,52(r2)
    4798:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    479c:	e0fffa17 	ldw	r3,-24(fp)
    47a0:	e0bff917 	ldw	r2,-28(fp)
    47a4:	1880062e 	bgeu	r3,r2,47c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    47a8:	e0fff917 	ldw	r3,-28(fp)
    47ac:	e0bffa17 	ldw	r2,-24(fp)
    47b0:	1885c83a 	sub	r2,r3,r2
    47b4:	10bfffc4 	addi	r2,r2,-1
    47b8:	e0bff815 	stw	r2,-32(fp)
    47bc:	00000c06 	br	47f0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    47c0:	e0bff917 	ldw	r2,-28(fp)
    47c4:	1005003a 	cmpeq	r2,r2,zero
    47c8:	1000051e 	bne	r2,zero,47e0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    47cc:	00820004 	movi	r2,2048
    47d0:	e0fffa17 	ldw	r3,-24(fp)
    47d4:	10c5c83a 	sub	r2,r2,r3
    47d8:	e0bff815 	stw	r2,-32(fp)
    47dc:	00000406 	br	47f0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    47e0:	0081ffc4 	movi	r2,2047
    47e4:	e0fffa17 	ldw	r3,-24(fp)
    47e8:	10c5c83a 	sub	r2,r2,r3
    47ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    47f0:	e0bff817 	ldw	r2,-32(fp)
    47f4:	1005003a 	cmpeq	r2,r2,zero
    47f8:	10001f1e 	bne	r2,zero,4878 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    47fc:	e0fffd17 	ldw	r3,-12(fp)
    4800:	e0bff817 	ldw	r2,-32(fp)
    4804:	1880022e 	bgeu	r3,r2,4810 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    4808:	e0bffd17 	ldw	r2,-12(fp)
    480c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4810:	e0bffb17 	ldw	r2,-20(fp)
    4814:	10c20e04 	addi	r3,r2,2104
    4818:	e0bffa17 	ldw	r2,-24(fp)
    481c:	1885883a 	add	r2,r3,r2
    4820:	e0fffc17 	ldw	r3,-16(fp)
    4824:	1009883a 	mov	r4,r2
    4828:	180b883a 	mov	r5,r3
    482c:	e1bff817 	ldw	r6,-32(fp)
    4830:	00061740 	call	6174 <memcpy>
      ptr   += n;
    4834:	e0fff817 	ldw	r3,-32(fp)
    4838:	e0bffc17 	ldw	r2,-16(fp)
    483c:	10c5883a 	add	r2,r2,r3
    4840:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    4844:	e0fffd17 	ldw	r3,-12(fp)
    4848:	e0bff817 	ldw	r2,-32(fp)
    484c:	1885c83a 	sub	r2,r3,r2
    4850:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4854:	e0fffa17 	ldw	r3,-24(fp)
    4858:	e0bff817 	ldw	r2,-32(fp)
    485c:	1885883a 	add	r2,r3,r2
    4860:	10c1ffcc 	andi	r3,r2,2047
    4864:	e0bffb17 	ldw	r2,-20(fp)
    4868:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    486c:	e0bffd17 	ldw	r2,-12(fp)
    4870:	10800048 	cmpgei	r2,r2,1
    4874:	103fc31e 	bne	r2,zero,4784 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4878:	0005303a 	rdctl	r2,status
    487c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4880:	e0fff517 	ldw	r3,-44(fp)
    4884:	00bfff84 	movi	r2,-2
    4888:	1884703a 	and	r2,r3,r2
    488c:	1001703a 	wrctl	status,r2
  
  return context;
    4890:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4894:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4898:	e0bffb17 	ldw	r2,-20(fp)
    489c:	10800817 	ldw	r2,32(r2)
    48a0:	10c00094 	ori	r3,r2,2
    48a4:	e0bffb17 	ldw	r2,-20(fp)
    48a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    48ac:	e0bffb17 	ldw	r2,-20(fp)
    48b0:	10800017 	ldw	r2,0(r2)
    48b4:	11000104 	addi	r4,r2,4
    48b8:	e0bffb17 	ldw	r2,-20(fp)
    48bc:	10800817 	ldw	r2,32(r2)
    48c0:	1007883a 	mov	r3,r2
    48c4:	2005883a 	mov	r2,r4
    48c8:	10c00035 	stwio	r3,0(r2)
    48cc:	e0bff717 	ldw	r2,-36(fp)
    48d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48d4:	e0bff417 	ldw	r2,-48(fp)
    48d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    48dc:	e0bffd17 	ldw	r2,-12(fp)
    48e0:	10800050 	cmplti	r2,r2,1
    48e4:	1000111e 	bne	r2,zero,492c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    48e8:	e0bffe17 	ldw	r2,-8(fp)
    48ec:	1090000c 	andi	r2,r2,16384
    48f0:	1004c03a 	cmpne	r2,r2,zero
    48f4:	1000101e 	bne	r2,zero,4938 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    48f8:	e0bffb17 	ldw	r2,-20(fp)
    48fc:	10c00d17 	ldw	r3,52(r2)
    4900:	e0bff917 	ldw	r2,-28(fp)
    4904:	1880051e 	bne	r3,r2,491c <altera_avalon_jtag_uart_write+0x1c8>
    4908:	e0bffb17 	ldw	r2,-20(fp)
    490c:	10c00917 	ldw	r3,36(r2)
    4910:	e0bffb17 	ldw	r2,-20(fp)
    4914:	10800117 	ldw	r2,4(r2)
    4918:	18bff736 	bltu	r3,r2,48f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    491c:	e0bffb17 	ldw	r2,-20(fp)
    4920:	10c00d17 	ldw	r3,52(r2)
    4924:	e0bff917 	ldw	r2,-28(fp)
    4928:	18800326 	beq	r3,r2,4938 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    492c:	e0bffd17 	ldw	r2,-12(fp)
    4930:	10800048 	cmpgei	r2,r2,1
    4934:	103fcd1e 	bne	r2,zero,486c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4938:	e0fffc17 	ldw	r3,-16(fp)
    493c:	e0bff617 	ldw	r2,-40(fp)
    4940:	18800526 	beq	r3,r2,4958 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    4944:	e0fffc17 	ldw	r3,-16(fp)
    4948:	e0bff617 	ldw	r2,-40(fp)
    494c:	1887c83a 	sub	r3,r3,r2
    4950:	e0ffff15 	stw	r3,-4(fp)
    4954:	00000906 	br	497c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    4958:	e0bffe17 	ldw	r2,-8(fp)
    495c:	1090000c 	andi	r2,r2,16384
    4960:	1005003a 	cmpeq	r2,r2,zero
    4964:	1000031e 	bne	r2,zero,4974 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4968:	00bffd44 	movi	r2,-11
    496c:	e0bfff15 	stw	r2,-4(fp)
    4970:	00000206 	br	497c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4974:	00bffec4 	movi	r2,-5
    4978:	e0bfff15 	stw	r2,-4(fp)
    497c:	e0bfff17 	ldw	r2,-4(fp)
}
    4980:	e037883a 	mov	sp,fp
    4984:	dfc00117 	ldw	ra,4(sp)
    4988:	df000017 	ldw	fp,0(sp)
    498c:	dec00204 	addi	sp,sp,8
    4990:	f800283a 	ret

00004994 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4994:	defffa04 	addi	sp,sp,-24
    4998:	dfc00515 	stw	ra,20(sp)
    499c:	df000415 	stw	fp,16(sp)
    49a0:	df000404 	addi	fp,sp,16
    49a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    49a8:	e0bfff17 	ldw	r2,-4(fp)
    49ac:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    49b0:	e0bfff17 	ldw	r2,-4(fp)
    49b4:	10800104 	addi	r2,r2,4
    49b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49bc:	0005303a 	rdctl	r2,status
    49c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49c4:	e0fffd17 	ldw	r3,-12(fp)
    49c8:	00bfff84 	movi	r2,-2
    49cc:	1884703a 	and	r2,r3,r2
    49d0:	1001703a 	wrctl	status,r2
  
  return context;
    49d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    49d8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    49dc:	0005d200 	call	5d20 <alt_tick>
    49e0:	e0bffe17 	ldw	r2,-8(fp)
    49e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    49f0:	e037883a 	mov	sp,fp
    49f4:	dfc00117 	ldw	ra,4(sp)
    49f8:	df000017 	ldw	fp,0(sp)
    49fc:	dec00204 	addi	sp,sp,8
    4a00:	f800283a 	ret

00004a04 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4a04:	defff804 	addi	sp,sp,-32
    4a08:	dfc00715 	stw	ra,28(sp)
    4a0c:	df000615 	stw	fp,24(sp)
    4a10:	df000604 	addi	fp,sp,24
    4a14:	e13ffc15 	stw	r4,-16(fp)
    4a18:	e17ffd15 	stw	r5,-12(fp)
    4a1c:	e1bffe15 	stw	r6,-8(fp)
    4a20:	e1ffff15 	stw	r7,-4(fp)
    4a24:	e0bfff17 	ldw	r2,-4(fp)
    4a28:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4a2c:	00800074 	movhi	r2,1
    4a30:	10b09904 	addi	r2,r2,-15772
    4a34:	10800017 	ldw	r2,0(r2)
    4a38:	1004c03a 	cmpne	r2,r2,zero
    4a3c:	1000041e 	bne	r2,zero,4a50 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4a40:	00c00074 	movhi	r3,1
    4a44:	18f09904 	addi	r3,r3,-15772
    4a48:	e0bffb17 	ldw	r2,-20(fp)
    4a4c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4a50:	e0bffc17 	ldw	r2,-16(fp)
    4a54:	10800104 	addi	r2,r2,4
    4a58:	1007883a 	mov	r3,r2
    4a5c:	008001c4 	movi	r2,7
    4a60:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4a64:	d8000015 	stw	zero,0(sp)
    4a68:	e13ffd17 	ldw	r4,-12(fp)
    4a6c:	e17ffe17 	ldw	r5,-8(fp)
    4a70:	01800034 	movhi	r6,0
    4a74:	31926504 	addi	r6,r6,18836
    4a78:	e1fffc17 	ldw	r7,-16(fp)
    4a7c:	000555c0 	call	555c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4a80:	e037883a 	mov	sp,fp
    4a84:	dfc00117 	ldw	ra,4(sp)
    4a88:	df000017 	ldw	fp,0(sp)
    4a8c:	dec00204 	addi	sp,sp,8
    4a90:	f800283a 	ret

00004a94 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    4a94:	defffc04 	addi	sp,sp,-16
    4a98:	df000315 	stw	fp,12(sp)
    4a9c:	df000304 	addi	fp,sp,12
    4aa0:	e13ffe15 	stw	r4,-8(fp)
    4aa4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    4aa8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    4aac:	e0bfff17 	ldw	r2,-4(fp)
    4ab0:	1004c03a 	cmpne	r2,r2,zero
    4ab4:	1000061e 	bne	r2,zero,4ad0 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    4ab8:	e0bffe17 	ldw	r2,-8(fp)
    4abc:	1007883a 	mov	r3,r2
    4ac0:	e0bffd03 	ldbu	r2,-12(fp)
    4ac4:	10c4b03a 	or	r2,r2,r3
    4ac8:	e0bffd05 	stb	r2,-12(fp)
    4acc:	00000806 	br	4af0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    4ad0:	e0bffe17 	ldw	r2,-8(fp)
    4ad4:	1007883a 	mov	r3,r2
    4ad8:	e0bffd03 	ldbu	r2,-12(fp)
    4adc:	10c4b03a 	or	r2,r2,r3
    4ae0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    4ae4:	e0bffd03 	ldbu	r2,-12(fp)
    4ae8:	10801014 	ori	r2,r2,64
    4aec:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    4af0:	e0fffd03 	ldbu	r3,-12(fp)
    4af4:	00bfe004 	movi	r2,-128
    4af8:	1884b03a 	or	r2,r3,r2
    4afc:	10803fcc 	andi	r2,r2,255
}
    4b00:	e037883a 	mov	sp,fp
    4b04:	df000017 	ldw	fp,0(sp)
    4b08:	dec00104 	addi	sp,sp,4
    4b0c:	f800283a 	ret

00004b10 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    4b10:	defffd04 	addi	sp,sp,-12
    4b14:	df000215 	stw	fp,8(sp)
    4b18:	df000204 	addi	fp,sp,8
    4b1c:	e13ffe15 	stw	r4,-8(fp)
    4b20:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4b24:	e0bffe17 	ldw	r2,-8(fp)
    4b28:	10800a17 	ldw	r2,40(r2)
    4b2c:	e0ffff03 	ldbu	r3,-4(fp)
    4b30:	10c00025 	stbio	r3,0(r2)
}
    4b34:	e037883a 	mov	sp,fp
    4b38:	df000017 	ldw	fp,0(sp)
    4b3c:	dec00104 	addi	sp,sp,4
    4b40:	f800283a 	ret

00004b44 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    4b44:	defffe04 	addi	sp,sp,-8
    4b48:	df000115 	stw	fp,4(sp)
    4b4c:	df000104 	addi	fp,sp,4
    4b50:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4b54:	e0bfff17 	ldw	r2,-4(fp)
    4b58:	10800a17 	ldw	r2,40(r2)
    4b5c:	1007883a 	mov	r3,r2
    4b60:	00800044 	movi	r2,1
    4b64:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4b68:	e037883a 	mov	sp,fp
    4b6c:	df000017 	ldw	fp,0(sp)
    4b70:	dec00104 	addi	sp,sp,4
    4b74:	f800283a 	ret

00004b78 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    4b78:	defffc04 	addi	sp,sp,-16
    4b7c:	dfc00315 	stw	ra,12(sp)
    4b80:	df000215 	stw	fp,8(sp)
    4b84:	df000204 	addi	fp,sp,8
    4b88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    4b8c:	e13fff17 	ldw	r4,-4(fp)
    4b90:	01400074 	movhi	r5,1
    4b94:	2969ed04 	addi	r5,r5,-22604
    4b98:	00054980 	call	5498 <alt_find_dev>
    4b9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4ba0:	e0bffe17 	ldw	r2,-8(fp)
}
    4ba4:	e037883a 	mov	sp,fp
    4ba8:	dfc00117 	ldw	ra,4(sp)
    4bac:	df000017 	ldw	fp,0(sp)
    4bb0:	dec00204 	addi	sp,sp,8
    4bb4:	f800283a 	ret

00004bb8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    4bb8:	defffb04 	addi	sp,sp,-20
    4bbc:	df000415 	stw	fp,16(sp)
    4bc0:	df000404 	addi	fp,sp,16
    4bc4:	e13ffd15 	stw	r4,-12(fp)
    4bc8:	e17ffe15 	stw	r5,-8(fp)
    4bcc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    4bd0:	e03ffc15 	stw	zero,-16(fp)
    4bd4:	00000f06 	br	4c14 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    4bd8:	e0bffd17 	ldw	r2,-12(fp)
    4bdc:	10800a17 	ldw	r2,40(r2)
    4be0:	11000044 	addi	r4,r2,1
    4be4:	e0fffc17 	ldw	r3,-16(fp)
    4be8:	e0bffe17 	ldw	r2,-8(fp)
    4bec:	1885883a 	add	r2,r3,r2
    4bf0:	10800003 	ldbu	r2,0(r2)
    4bf4:	10c03fcc 	andi	r3,r2,255
    4bf8:	18c0201c 	xori	r3,r3,128
    4bfc:	18ffe004 	addi	r3,r3,-128
    4c00:	2005883a 	mov	r2,r4
    4c04:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4c08:	e0bffc17 	ldw	r2,-16(fp)
    4c0c:	10800044 	addi	r2,r2,1
    4c10:	e0bffc15 	stw	r2,-16(fp)
    4c14:	e0fffc17 	ldw	r3,-16(fp)
    4c18:	e0bfff17 	ldw	r2,-4(fp)
    4c1c:	18bfee36 	bltu	r3,r2,4bd8 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    4c20:	e037883a 	mov	sp,fp
    4c24:	df000017 	ldw	fp,0(sp)
    4c28:	dec00104 	addi	sp,sp,4
    4c2c:	f800283a 	ret

00004c30 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    4c30:	defffd04 	addi	sp,sp,-12
    4c34:	df000215 	stw	fp,8(sp)
    4c38:	df000204 	addi	fp,sp,8
    4c3c:	e13ffe15 	stw	r4,-8(fp)
    4c40:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    4c44:	00000d06 	br	4c7c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    4c48:	e0bffe17 	ldw	r2,-8(fp)
    4c4c:	10800a17 	ldw	r2,40(r2)
    4c50:	11000044 	addi	r4,r2,1
    4c54:	e0bfff17 	ldw	r2,-4(fp)
    4c58:	10800003 	ldbu	r2,0(r2)
    4c5c:	10c03fcc 	andi	r3,r2,255
    4c60:	18c0201c 	xori	r3,r3,128
    4c64:	18ffe004 	addi	r3,r3,-128
    4c68:	2005883a 	mov	r2,r4
    4c6c:	10c00025 	stbio	r3,0(r2)
		++ptr;
    4c70:	e0bfff17 	ldw	r2,-4(fp)
    4c74:	10800044 	addi	r2,r2,1
    4c78:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    4c7c:	e0bfff17 	ldw	r2,-4(fp)
    4c80:	10800003 	ldbu	r2,0(r2)
    4c84:	10803fcc 	andi	r2,r2,255
    4c88:	1080201c 	xori	r2,r2,128
    4c8c:	10bfe004 	addi	r2,r2,-128
    4c90:	1004c03a 	cmpne	r2,r2,zero
    4c94:	103fec1e 	bne	r2,zero,4c48 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    4c98:	e037883a 	mov	sp,fp
    4c9c:	df000017 	ldw	fp,0(sp)
    4ca0:	dec00104 	addi	sp,sp,4
    4ca4:	f800283a 	ret

00004ca8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    4ca8:	defffb04 	addi	sp,sp,-20
    4cac:	dfc00415 	stw	ra,16(sp)
    4cb0:	df000315 	stw	fp,12(sp)
    4cb4:	df000304 	addi	fp,sp,12
    4cb8:	e13ffd15 	stw	r4,-12(fp)
    4cbc:	e17ffe15 	stw	r5,-8(fp)
    4cc0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4cc4:	e0bffd17 	ldw	r2,-12(fp)
    4cc8:	10800017 	ldw	r2,0(r2)
    4ccc:	1009883a 	mov	r4,r2
    4cd0:	e1bfff17 	ldw	r6,-4(fp)
    4cd4:	e17ffe17 	ldw	r5,-8(fp)
    4cd8:	0004bb80 	call	4bb8 <alt_up_character_lcd_write>
	return 0;
    4cdc:	0005883a 	mov	r2,zero
}
    4ce0:	e037883a 	mov	sp,fp
    4ce4:	dfc00117 	ldw	ra,4(sp)
    4ce8:	df000017 	ldw	fp,0(sp)
    4cec:	dec00204 	addi	sp,sp,8
    4cf0:	f800283a 	ret

00004cf4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4cf4:	defff904 	addi	sp,sp,-28
    4cf8:	dfc00615 	stw	ra,24(sp)
    4cfc:	df000515 	stw	fp,20(sp)
    4d00:	df000504 	addi	fp,sp,20
    4d04:	e13ffc15 	stw	r4,-16(fp)
    4d08:	e17ffd15 	stw	r5,-12(fp)
    4d0c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4d10:	e0bffd17 	ldw	r2,-12(fp)
    4d14:	10800a28 	cmpgeui	r2,r2,40
    4d18:	1000031e 	bne	r2,zero,4d28 <alt_up_character_lcd_set_cursor_pos+0x34>
    4d1c:	e0bffe17 	ldw	r2,-8(fp)
    4d20:	108000b0 	cmpltui	r2,r2,2
    4d24:	1000031e 	bne	r2,zero,4d34 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    4d28:	00bfffc4 	movi	r2,-1
    4d2c:	e0bfff15 	stw	r2,-4(fp)
    4d30:	00000806 	br	4d54 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4d34:	e13ffd17 	ldw	r4,-12(fp)
    4d38:	e17ffe17 	ldw	r5,-8(fp)
    4d3c:	0004a940 	call	4a94 <get_DDRAM_addr>
    4d40:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    4d44:	e17ffb03 	ldbu	r5,-20(fp)
    4d48:	e13ffc17 	ldw	r4,-16(fp)
    4d4c:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
	return 0;
    4d50:	e03fff15 	stw	zero,-4(fp)
    4d54:	e0bfff17 	ldw	r2,-4(fp)
}
    4d58:	e037883a 	mov	sp,fp
    4d5c:	dfc00117 	ldw	ra,4(sp)
    4d60:	df000017 	ldw	fp,0(sp)
    4d64:	dec00204 	addi	sp,sp,8
    4d68:	f800283a 	ret

00004d6c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4d6c:	defff904 	addi	sp,sp,-28
    4d70:	dfc00615 	stw	ra,24(sp)
    4d74:	df000515 	stw	fp,20(sp)
    4d78:	df000504 	addi	fp,sp,20
    4d7c:	e13ffc15 	stw	r4,-16(fp)
    4d80:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4d84:	e0bffd17 	ldw	r2,-12(fp)
    4d88:	1005003a 	cmpeq	r2,r2,zero
    4d8c:	10001e1e 	bne	r2,zero,4e08 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    4d90:	e0bffd17 	ldw	r2,-12(fp)
    4d94:	10800050 	cmplti	r2,r2,1
    4d98:	1000031e 	bne	r2,zero,4da8 <alt_up_character_lcd_shift_cursor+0x3c>
    4d9c:	00800504 	movi	r2,20
    4da0:	e0bfff05 	stb	r2,-4(fp)
    4da4:	00000206 	br	4db0 <alt_up_character_lcd_shift_cursor+0x44>
    4da8:	00c00404 	movi	r3,16
    4dac:	e0ffff05 	stb	r3,-4(fp)
    4db0:	e0bfff03 	ldbu	r2,-4(fp)
    4db4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4db8:	e0fffd17 	ldw	r3,-12(fp)
    4dbc:	e0fffe15 	stw	r3,-8(fp)
    4dc0:	e0fffe17 	ldw	r3,-8(fp)
    4dc4:	1804403a 	cmpge	r2,r3,zero
    4dc8:	1000031e 	bne	r2,zero,4dd8 <alt_up_character_lcd_shift_cursor+0x6c>
    4dcc:	e0bffe17 	ldw	r2,-8(fp)
    4dd0:	0085c83a 	sub	r2,zero,r2
    4dd4:	e0bffe15 	stw	r2,-8(fp)
    4dd8:	e0fffe17 	ldw	r3,-8(fp)
    4ddc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4de0:	00000306 	br	4df0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4de4:	e17ffb43 	ldbu	r5,-19(fp)
    4de8:	e13ffc17 	ldw	r4,-16(fp)
    4dec:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4df0:	e0bffb03 	ldbu	r2,-20(fp)
    4df4:	10bfffc4 	addi	r2,r2,-1
    4df8:	e0bffb05 	stb	r2,-20(fp)
    4dfc:	e0bffb03 	ldbu	r2,-20(fp)
    4e00:	10803fd8 	cmpnei	r2,r2,255
    4e04:	103ff71e 	bne	r2,zero,4de4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4e08:	e037883a 	mov	sp,fp
    4e0c:	dfc00117 	ldw	ra,4(sp)
    4e10:	df000017 	ldw	fp,0(sp)
    4e14:	dec00204 	addi	sp,sp,8
    4e18:	f800283a 	ret

00004e1c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4e1c:	defff904 	addi	sp,sp,-28
    4e20:	dfc00615 	stw	ra,24(sp)
    4e24:	df000515 	stw	fp,20(sp)
    4e28:	df000504 	addi	fp,sp,20
    4e2c:	e13ffc15 	stw	r4,-16(fp)
    4e30:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4e34:	e0bffd17 	ldw	r2,-12(fp)
    4e38:	1005003a 	cmpeq	r2,r2,zero
    4e3c:	10001e1e 	bne	r2,zero,4eb8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    4e40:	e0bffd17 	ldw	r2,-12(fp)
    4e44:	10800050 	cmplti	r2,r2,1
    4e48:	1000031e 	bne	r2,zero,4e58 <alt_up_character_lcd_shift_display+0x3c>
    4e4c:	00800704 	movi	r2,28
    4e50:	e0bfff05 	stb	r2,-4(fp)
    4e54:	00000206 	br	4e60 <alt_up_character_lcd_shift_display+0x44>
    4e58:	00c00604 	movi	r3,24
    4e5c:	e0ffff05 	stb	r3,-4(fp)
    4e60:	e0bfff03 	ldbu	r2,-4(fp)
    4e64:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4e68:	e0fffd17 	ldw	r3,-12(fp)
    4e6c:	e0fffe15 	stw	r3,-8(fp)
    4e70:	e0fffe17 	ldw	r3,-8(fp)
    4e74:	1804403a 	cmpge	r2,r3,zero
    4e78:	1000031e 	bne	r2,zero,4e88 <alt_up_character_lcd_shift_display+0x6c>
    4e7c:	e0bffe17 	ldw	r2,-8(fp)
    4e80:	0085c83a 	sub	r2,zero,r2
    4e84:	e0bffe15 	stw	r2,-8(fp)
    4e88:	e0fffe17 	ldw	r3,-8(fp)
    4e8c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4e90:	00000306 	br	4ea0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4e94:	e17ffb43 	ldbu	r5,-19(fp)
    4e98:	e13ffc17 	ldw	r4,-16(fp)
    4e9c:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4ea0:	e0bffb03 	ldbu	r2,-20(fp)
    4ea4:	10bfffc4 	addi	r2,r2,-1
    4ea8:	e0bffb05 	stb	r2,-20(fp)
    4eac:	e0bffb03 	ldbu	r2,-20(fp)
    4eb0:	10803fd8 	cmpnei	r2,r2,255
    4eb4:	103ff71e 	bne	r2,zero,4e94 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4eb8:	e037883a 	mov	sp,fp
    4ebc:	dfc00117 	ldw	ra,4(sp)
    4ec0:	df000017 	ldw	fp,0(sp)
    4ec4:	dec00204 	addi	sp,sp,8
    4ec8:	f800283a 	ret

00004ecc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4ecc:	defff904 	addi	sp,sp,-28
    4ed0:	dfc00615 	stw	ra,24(sp)
    4ed4:	df000515 	stw	fp,20(sp)
    4ed8:	df000504 	addi	fp,sp,20
    4edc:	e13ffc15 	stw	r4,-16(fp)
    4ee0:	e17ffd15 	stw	r5,-12(fp)
    4ee4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4ee8:	e0bffd17 	ldw	r2,-12(fp)
    4eec:	10800a28 	cmpgeui	r2,r2,40
    4ef0:	1000031e 	bne	r2,zero,4f00 <alt_up_character_lcd_erase_pos+0x34>
    4ef4:	e0bffe17 	ldw	r2,-8(fp)
    4ef8:	108000b0 	cmpltui	r2,r2,2
    4efc:	1000031e 	bne	r2,zero,4f0c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    4f00:	00bfffc4 	movi	r2,-1
    4f04:	e0bfff15 	stw	r2,-4(fp)
    4f08:	00000e06 	br	4f44 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4f0c:	e13ffd17 	ldw	r4,-12(fp)
    4f10:	e17ffe17 	ldw	r5,-8(fp)
    4f14:	0004a940 	call	4a94 <get_DDRAM_addr>
    4f18:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    4f1c:	e17ffb03 	ldbu	r5,-20(fp)
    4f20:	e13ffc17 	ldw	r4,-16(fp)
    4f24:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4f28:	e0bffc17 	ldw	r2,-16(fp)
    4f2c:	10800a17 	ldw	r2,40(r2)
    4f30:	10800044 	addi	r2,r2,1
    4f34:	1007883a 	mov	r3,r2
    4f38:	00800084 	movi	r2,2
    4f3c:	18800025 	stbio	r2,0(r3)
	return 0;
    4f40:	e03fff15 	stw	zero,-4(fp)
    4f44:	e0bfff17 	ldw	r2,-4(fp)
}
    4f48:	e037883a 	mov	sp,fp
    4f4c:	dfc00117 	ldw	ra,4(sp)
    4f50:	df000017 	ldw	fp,0(sp)
    4f54:	dec00204 	addi	sp,sp,8
    4f58:	f800283a 	ret

00004f5c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    4f5c:	defffd04 	addi	sp,sp,-12
    4f60:	dfc00215 	stw	ra,8(sp)
    4f64:	df000115 	stw	fp,4(sp)
    4f68:	df000104 	addi	fp,sp,4
    4f6c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4f70:	e13fff17 	ldw	r4,-4(fp)
    4f74:	01400304 	movi	r5,12
    4f78:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
}
    4f7c:	e037883a 	mov	sp,fp
    4f80:	dfc00117 	ldw	ra,4(sp)
    4f84:	df000017 	ldw	fp,0(sp)
    4f88:	dec00204 	addi	sp,sp,8
    4f8c:	f800283a 	ret

00004f90 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    4f90:	defffd04 	addi	sp,sp,-12
    4f94:	dfc00215 	stw	ra,8(sp)
    4f98:	df000115 	stw	fp,4(sp)
    4f9c:	df000104 	addi	fp,sp,4
    4fa0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4fa4:	e13fff17 	ldw	r4,-4(fp)
    4fa8:	014003c4 	movi	r5,15
    4fac:	0004b100 	call	4b10 <alt_up_character_lcd_send_cmd>
}
    4fb0:	e037883a 	mov	sp,fp
    4fb4:	dfc00117 	ldw	ra,4(sp)
    4fb8:	df000017 	ldw	fp,0(sp)
    4fbc:	dec00204 	addi	sp,sp,8
    4fc0:	f800283a 	ret

00004fc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4fc4:	defff404 	addi	sp,sp,-48
    4fc8:	df000b15 	stw	fp,44(sp)
    4fcc:	df000b04 	addi	fp,sp,44
    4fd0:	e13ffb15 	stw	r4,-20(fp)
    4fd4:	e17ffc15 	stw	r5,-16(fp)
    4fd8:	e1bffd15 	stw	r6,-12(fp)
    4fdc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4fe0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4fe4:	00800074 	movhi	r2,1
    4fe8:	10b09904 	addi	r2,r2,-15772
    4fec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    4ff0:	1005003a 	cmpeq	r2,r2,zero
    4ff4:	1000411e 	bne	r2,zero,50fc <alt_alarm_start+0x138>
  {
    if (alarm)
    4ff8:	e0bffb17 	ldw	r2,-20(fp)
    4ffc:	1005003a 	cmpeq	r2,r2,zero
    5000:	10003b1e 	bne	r2,zero,50f0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    5004:	e0fffb17 	ldw	r3,-20(fp)
    5008:	e0bffd17 	ldw	r2,-12(fp)
    500c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    5010:	e0fffb17 	ldw	r3,-20(fp)
    5014:	e0bffe17 	ldw	r2,-8(fp)
    5018:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    501c:	0005303a 	rdctl	r2,status
    5020:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5024:	e0fff817 	ldw	r3,-32(fp)
    5028:	00bfff84 	movi	r2,-2
    502c:	1884703a 	and	r2,r3,r2
    5030:	1001703a 	wrctl	status,r2
  
  return context;
    5034:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    5038:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    503c:	00800074 	movhi	r2,1
    5040:	10b09a04 	addi	r2,r2,-15768
    5044:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    5048:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    504c:	e0fffc17 	ldw	r3,-16(fp)
    5050:	e0bff917 	ldw	r2,-28(fp)
    5054:	1885883a 	add	r2,r3,r2
    5058:	10c00044 	addi	r3,r2,1
    505c:	e0bffb17 	ldw	r2,-20(fp)
    5060:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5064:	e0bffb17 	ldw	r2,-20(fp)
    5068:	10c00217 	ldw	r3,8(r2)
    506c:	e0bff917 	ldw	r2,-28(fp)
    5070:	1880042e 	bgeu	r3,r2,5084 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    5074:	e0fffb17 	ldw	r3,-20(fp)
    5078:	00800044 	movi	r2,1
    507c:	18800405 	stb	r2,16(r3)
    5080:	00000206 	br	508c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    5084:	e0bffb17 	ldw	r2,-20(fp)
    5088:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    508c:	e0fffb17 	ldw	r3,-20(fp)
    5090:	00800074 	movhi	r2,1
    5094:	10a9f204 	addi	r2,r2,-22584
    5098:	e0bff615 	stw	r2,-40(fp)
    509c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    50a0:	e0fff717 	ldw	r3,-36(fp)
    50a4:	e0bff617 	ldw	r2,-40(fp)
    50a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    50ac:	e0bff617 	ldw	r2,-40(fp)
    50b0:	10c00017 	ldw	r3,0(r2)
    50b4:	e0bff717 	ldw	r2,-36(fp)
    50b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    50bc:	e0bff617 	ldw	r2,-40(fp)
    50c0:	10c00017 	ldw	r3,0(r2)
    50c4:	e0bff717 	ldw	r2,-36(fp)
    50c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    50cc:	e0fff617 	ldw	r3,-40(fp)
    50d0:	e0bff717 	ldw	r2,-36(fp)
    50d4:	18800015 	stw	r2,0(r3)
    50d8:	e0bffa17 	ldw	r2,-24(fp)
    50dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50e0:	e0bff517 	ldw	r2,-44(fp)
    50e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    50e8:	e03fff15 	stw	zero,-4(fp)
    50ec:	00000506 	br	5104 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    50f0:	00bffa84 	movi	r2,-22
    50f4:	e0bfff15 	stw	r2,-4(fp)
    50f8:	00000206 	br	5104 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    50fc:	00bfde84 	movi	r2,-134
    5100:	e0bfff15 	stw	r2,-4(fp)
    5104:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    5108:	e037883a 	mov	sp,fp
    510c:	df000017 	ldw	fp,0(sp)
    5110:	dec00104 	addi	sp,sp,4
    5114:	f800283a 	ret

00005118 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5118:	defff804 	addi	sp,sp,-32
    511c:	dfc00715 	stw	ra,28(sp)
    5120:	df000615 	stw	fp,24(sp)
    5124:	df000604 	addi	fp,sp,24
    5128:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	1004803a 	cmplt	r2,r2,zero
    5134:	1000081e 	bne	r2,zero,5158 <close+0x40>
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800324 	muli	r2,r2,12
    5140:	1007883a 	mov	r3,r2
    5144:	00800074 	movhi	r2,1
    5148:	10a88604 	addi	r2,r2,-24040
    514c:	1887883a 	add	r3,r3,r2
    5150:	e0ffff15 	stw	r3,-4(fp)
    5154:	00000106 	br	515c <close+0x44>
    5158:	e03fff15 	stw	zero,-4(fp)
    515c:	e0bfff17 	ldw	r2,-4(fp)
    5160:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    5164:	e0bffb17 	ldw	r2,-20(fp)
    5168:	1005003a 	cmpeq	r2,r2,zero
    516c:	10001d1e 	bne	r2,zero,51e4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5170:	e0bffb17 	ldw	r2,-20(fp)
    5174:	10800017 	ldw	r2,0(r2)
    5178:	10800417 	ldw	r2,16(r2)
    517c:	1005003a 	cmpeq	r2,r2,zero
    5180:	1000071e 	bne	r2,zero,51a0 <close+0x88>
    5184:	e0bffb17 	ldw	r2,-20(fp)
    5188:	10800017 	ldw	r2,0(r2)
    518c:	10800417 	ldw	r2,16(r2)
    5190:	e13ffb17 	ldw	r4,-20(fp)
    5194:	103ee83a 	callr	r2
    5198:	e0bffe15 	stw	r2,-8(fp)
    519c:	00000106 	br	51a4 <close+0x8c>
    51a0:	e03ffe15 	stw	zero,-8(fp)
    51a4:	e0bffe17 	ldw	r2,-8(fp)
    51a8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    51ac:	e13ffc17 	ldw	r4,-16(fp)
    51b0:	0005c280 	call	5c28 <alt_release_fd>
    if (rval < 0)
    51b4:	e0bffa17 	ldw	r2,-24(fp)
    51b8:	1004403a 	cmpge	r2,r2,zero
    51bc:	1000071e 	bne	r2,zero,51dc <close+0xc4>
    {
      ALT_ERRNO = -rval;
    51c0:	00052140 	call	5214 <alt_get_errno>
    51c4:	e0fffa17 	ldw	r3,-24(fp)
    51c8:	00c7c83a 	sub	r3,zero,r3
    51cc:	10c00015 	stw	r3,0(r2)
      return -1;
    51d0:	00bfffc4 	movi	r2,-1
    51d4:	e0bffd15 	stw	r2,-12(fp)
    51d8:	00000806 	br	51fc <close+0xe4>
    }
    return 0;
    51dc:	e03ffd15 	stw	zero,-12(fp)
    51e0:	00000606 	br	51fc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    51e4:	00052140 	call	5214 <alt_get_errno>
    51e8:	1007883a 	mov	r3,r2
    51ec:	00801444 	movi	r2,81
    51f0:	18800015 	stw	r2,0(r3)
    return -1;
    51f4:	00bfffc4 	movi	r2,-1
    51f8:	e0bffd15 	stw	r2,-12(fp)
    51fc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    5200:	e037883a 	mov	sp,fp
    5204:	dfc00117 	ldw	ra,4(sp)
    5208:	df000017 	ldw	fp,0(sp)
    520c:	dec00204 	addi	sp,sp,8
    5210:	f800283a 	ret

00005214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5214:	defffd04 	addi	sp,sp,-12
    5218:	dfc00215 	stw	ra,8(sp)
    521c:	df000115 	stw	fp,4(sp)
    5220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5224:	00800074 	movhi	r2,1
    5228:	10a9f004 	addi	r2,r2,-22592
    522c:	10800017 	ldw	r2,0(r2)
    5230:	1005003a 	cmpeq	r2,r2,zero
    5234:	1000061e 	bne	r2,zero,5250 <alt_get_errno+0x3c>
    5238:	00800074 	movhi	r2,1
    523c:	10a9f004 	addi	r2,r2,-22592
    5240:	10800017 	ldw	r2,0(r2)
    5244:	103ee83a 	callr	r2
    5248:	e0bfff15 	stw	r2,-4(fp)
    524c:	00000306 	br	525c <alt_get_errno+0x48>
    5250:	00800074 	movhi	r2,1
    5254:	10b09b04 	addi	r2,r2,-15764
    5258:	e0bfff15 	stw	r2,-4(fp)
    525c:	e0bfff17 	ldw	r2,-4(fp)
}
    5260:	e037883a 	mov	sp,fp
    5264:	dfc00117 	ldw	ra,4(sp)
    5268:	df000017 	ldw	fp,0(sp)
    526c:	dec00204 	addi	sp,sp,8
    5270:	f800283a 	ret

00005274 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5274:	deffff04 	addi	sp,sp,-4
    5278:	df000015 	stw	fp,0(sp)
    527c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5280:	e037883a 	mov	sp,fp
    5284:	df000017 	ldw	fp,0(sp)
    5288:	dec00104 	addi	sp,sp,4
    528c:	f800283a 	ret

00005290 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5290:	defffc04 	addi	sp,sp,-16
    5294:	df000315 	stw	fp,12(sp)
    5298:	df000304 	addi	fp,sp,12
    529c:	e13ffd15 	stw	r4,-12(fp)
    52a0:	e17ffe15 	stw	r5,-8(fp)
    52a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    52a8:	e0bfff17 	ldw	r2,-4(fp)
}
    52ac:	e037883a 	mov	sp,fp
    52b0:	df000017 	ldw	fp,0(sp)
    52b4:	dec00104 	addi	sp,sp,4
    52b8:	f800283a 	ret

000052bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    52bc:	defff904 	addi	sp,sp,-28
    52c0:	dfc00615 	stw	ra,24(sp)
    52c4:	df000515 	stw	fp,20(sp)
    52c8:	df000504 	addi	fp,sp,20
    52cc:	e13ffd15 	stw	r4,-12(fp)
    52d0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    52d4:	e0bffd17 	ldw	r2,-12(fp)
    52d8:	1005003a 	cmpeq	r2,r2,zero
    52dc:	1000041e 	bne	r2,zero,52f0 <alt_dev_llist_insert+0x34>
    52e0:	e0bffd17 	ldw	r2,-12(fp)
    52e4:	10800217 	ldw	r2,8(r2)
    52e8:	1004c03a 	cmpne	r2,r2,zero
    52ec:	1000071e 	bne	r2,zero,530c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    52f0:	00053700 	call	5370 <alt_get_errno>
    52f4:	1007883a 	mov	r3,r2
    52f8:	00800584 	movi	r2,22
    52fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5300:	00bffa84 	movi	r2,-22
    5304:	e0bfff15 	stw	r2,-4(fp)
    5308:	00001306 	br	5358 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    530c:	e0fffd17 	ldw	r3,-12(fp)
    5310:	e0bffe17 	ldw	r2,-8(fp)
    5314:	e0bffb15 	stw	r2,-20(fp)
    5318:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    531c:	e0fffc17 	ldw	r3,-16(fp)
    5320:	e0bffb17 	ldw	r2,-20(fp)
    5324:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5328:	e0bffb17 	ldw	r2,-20(fp)
    532c:	10c00017 	ldw	r3,0(r2)
    5330:	e0bffc17 	ldw	r2,-16(fp)
    5334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5338:	e0bffb17 	ldw	r2,-20(fp)
    533c:	10c00017 	ldw	r3,0(r2)
    5340:	e0bffc17 	ldw	r2,-16(fp)
    5344:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5348:	e0fffb17 	ldw	r3,-20(fp)
    534c:	e0bffc17 	ldw	r2,-16(fp)
    5350:	18800015 	stw	r2,0(r3)

  return 0;  
    5354:	e03fff15 	stw	zero,-4(fp)
    5358:	e0bfff17 	ldw	r2,-4(fp)
}
    535c:	e037883a 	mov	sp,fp
    5360:	dfc00117 	ldw	ra,4(sp)
    5364:	df000017 	ldw	fp,0(sp)
    5368:	dec00204 	addi	sp,sp,8
    536c:	f800283a 	ret

00005370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5370:	defffd04 	addi	sp,sp,-12
    5374:	dfc00215 	stw	ra,8(sp)
    5378:	df000115 	stw	fp,4(sp)
    537c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5380:	00800074 	movhi	r2,1
    5384:	10a9f004 	addi	r2,r2,-22592
    5388:	10800017 	ldw	r2,0(r2)
    538c:	1005003a 	cmpeq	r2,r2,zero
    5390:	1000061e 	bne	r2,zero,53ac <alt_get_errno+0x3c>
    5394:	00800074 	movhi	r2,1
    5398:	10a9f004 	addi	r2,r2,-22592
    539c:	10800017 	ldw	r2,0(r2)
    53a0:	103ee83a 	callr	r2
    53a4:	e0bfff15 	stw	r2,-4(fp)
    53a8:	00000306 	br	53b8 <alt_get_errno+0x48>
    53ac:	00800074 	movhi	r2,1
    53b0:	10b09b04 	addi	r2,r2,-15764
    53b4:	e0bfff15 	stw	r2,-4(fp)
    53b8:	e0bfff17 	ldw	r2,-4(fp)
}
    53bc:	e037883a 	mov	sp,fp
    53c0:	dfc00117 	ldw	ra,4(sp)
    53c4:	df000017 	ldw	fp,0(sp)
    53c8:	dec00204 	addi	sp,sp,8
    53cc:	f800283a 	ret

000053d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    53d0:	defffd04 	addi	sp,sp,-12
    53d4:	dfc00215 	stw	ra,8(sp)
    53d8:	df000115 	stw	fp,4(sp)
    53dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    53e0:	00bfff04 	movi	r2,-4
    53e4:	00c00074 	movhi	r3,1
    53e8:	18e2c204 	addi	r3,r3,-29944
    53ec:	1885883a 	add	r2,r3,r2
    53f0:	e0bfff15 	stw	r2,-4(fp)
    53f4:	00000606 	br	5410 <_do_ctors+0x40>
        (*ctor) (); 
    53f8:	e0bfff17 	ldw	r2,-4(fp)
    53fc:	10800017 	ldw	r2,0(r2)
    5400:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5404:	e0bfff17 	ldw	r2,-4(fp)
    5408:	10bfff04 	addi	r2,r2,-4
    540c:	e0bfff15 	stw	r2,-4(fp)
    5410:	e0ffff17 	ldw	r3,-4(fp)
    5414:	00800074 	movhi	r2,1
    5418:	10a2c104 	addi	r2,r2,-29948
    541c:	18bff62e 	bgeu	r3,r2,53f8 <_do_ctors+0x28>
        (*ctor) (); 
}
    5420:	e037883a 	mov	sp,fp
    5424:	dfc00117 	ldw	ra,4(sp)
    5428:	df000017 	ldw	fp,0(sp)
    542c:	dec00204 	addi	sp,sp,8
    5430:	f800283a 	ret

00005434 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5434:	defffd04 	addi	sp,sp,-12
    5438:	dfc00215 	stw	ra,8(sp)
    543c:	df000115 	stw	fp,4(sp)
    5440:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5444:	00bfff04 	movi	r2,-4
    5448:	00c00074 	movhi	r3,1
    544c:	18e2c204 	addi	r3,r3,-29944
    5450:	1885883a 	add	r2,r3,r2
    5454:	e0bfff15 	stw	r2,-4(fp)
    5458:	00000606 	br	5474 <_do_dtors+0x40>
        (*dtor) (); 
    545c:	e0bfff17 	ldw	r2,-4(fp)
    5460:	10800017 	ldw	r2,0(r2)
    5464:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5468:	e0bfff17 	ldw	r2,-4(fp)
    546c:	10bfff04 	addi	r2,r2,-4
    5470:	e0bfff15 	stw	r2,-4(fp)
    5474:	e0ffff17 	ldw	r3,-4(fp)
    5478:	00800074 	movhi	r2,1
    547c:	10a2c204 	addi	r2,r2,-29944
    5480:	18bff62e 	bgeu	r3,r2,545c <_do_dtors+0x28>
        (*dtor) (); 
}
    5484:	e037883a 	mov	sp,fp
    5488:	dfc00117 	ldw	ra,4(sp)
    548c:	df000017 	ldw	fp,0(sp)
    5490:	dec00204 	addi	sp,sp,8
    5494:	f800283a 	ret

00005498 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5498:	defff904 	addi	sp,sp,-28
    549c:	dfc00615 	stw	ra,24(sp)
    54a0:	df000515 	stw	fp,20(sp)
    54a4:	df000504 	addi	fp,sp,20
    54a8:	e13ffd15 	stw	r4,-12(fp)
    54ac:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    54b0:	e0bffe17 	ldw	r2,-8(fp)
    54b4:	10800017 	ldw	r2,0(r2)
    54b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    54bc:	e13ffd17 	ldw	r4,-12(fp)
    54c0:	00064000 	call	6400 <strlen>
    54c4:	10800044 	addi	r2,r2,1
    54c8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    54cc:	00000d06 	br	5504 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    54d0:	e0bffc17 	ldw	r2,-16(fp)
    54d4:	11000217 	ldw	r4,8(r2)
    54d8:	e1bffb17 	ldw	r6,-20(fp)
    54dc:	e17ffd17 	ldw	r5,-12(fp)
    54e0:	00061000 	call	6100 <memcmp>
    54e4:	1004c03a 	cmpne	r2,r2,zero
    54e8:	1000031e 	bne	r2,zero,54f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    54ec:	e0bffc17 	ldw	r2,-16(fp)
    54f0:	e0bfff15 	stw	r2,-4(fp)
    54f4:	00000706 	br	5514 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    54f8:	e0bffc17 	ldw	r2,-16(fp)
    54fc:	10800017 	ldw	r2,0(r2)
    5500:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5504:	e0fffe17 	ldw	r3,-8(fp)
    5508:	e0bffc17 	ldw	r2,-16(fp)
    550c:	10fff01e 	bne	r2,r3,54d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5510:	e03fff15 	stw	zero,-4(fp)
    5514:	e0bfff17 	ldw	r2,-4(fp)
}
    5518:	e037883a 	mov	sp,fp
    551c:	dfc00117 	ldw	ra,4(sp)
    5520:	df000017 	ldw	fp,0(sp)
    5524:	dec00204 	addi	sp,sp,8
    5528:	f800283a 	ret

0000552c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    552c:	defffe04 	addi	sp,sp,-8
    5530:	dfc00115 	stw	ra,4(sp)
    5534:	df000015 	stw	fp,0(sp)
    5538:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    553c:	0009883a 	mov	r4,zero
    5540:	01440004 	movi	r5,4096
    5544:	00060240 	call	6024 <alt_icache_flush>
#endif
}
    5548:	e037883a 	mov	sp,fp
    554c:	dfc00117 	ldw	ra,4(sp)
    5550:	df000017 	ldw	fp,0(sp)
    5554:	dec00204 	addi	sp,sp,8
    5558:	f800283a 	ret

0000555c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    555c:	defff904 	addi	sp,sp,-28
    5560:	dfc00615 	stw	ra,24(sp)
    5564:	df000515 	stw	fp,20(sp)
    5568:	df000504 	addi	fp,sp,20
    556c:	e13ffc15 	stw	r4,-16(fp)
    5570:	e17ffd15 	stw	r5,-12(fp)
    5574:	e1bffe15 	stw	r6,-8(fp)
    5578:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    557c:	e0800217 	ldw	r2,8(fp)
    5580:	d8800015 	stw	r2,0(sp)
    5584:	e13ffc17 	ldw	r4,-16(fp)
    5588:	e17ffd17 	ldw	r5,-12(fp)
    558c:	e1bffe17 	ldw	r6,-8(fp)
    5590:	e1ffff17 	ldw	r7,-4(fp)
    5594:	00057300 	call	5730 <alt_iic_isr_register>
}  
    5598:	e037883a 	mov	sp,fp
    559c:	dfc00117 	ldw	ra,4(sp)
    55a0:	df000017 	ldw	fp,0(sp)
    55a4:	dec00204 	addi	sp,sp,8
    55a8:	f800283a 	ret

000055ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    55ac:	defff904 	addi	sp,sp,-28
    55b0:	df000615 	stw	fp,24(sp)
    55b4:	df000604 	addi	fp,sp,24
    55b8:	e13ffe15 	stw	r4,-8(fp)
    55bc:	e17fff15 	stw	r5,-4(fp)
    55c0:	e0bfff17 	ldw	r2,-4(fp)
    55c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55c8:	0005303a 	rdctl	r2,status
    55cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d0:	e0fffb17 	ldw	r3,-20(fp)
    55d4:	00bfff84 	movi	r2,-2
    55d8:	1884703a 	and	r2,r3,r2
    55dc:	1001703a 	wrctl	status,r2
  
  return context;
    55e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    55e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    55e8:	e0fffc17 	ldw	r3,-16(fp)
    55ec:	00800044 	movi	r2,1
    55f0:	10c4983a 	sll	r2,r2,r3
    55f4:	1007883a 	mov	r3,r2
    55f8:	00800074 	movhi	r2,1
    55fc:	10b09804 	addi	r2,r2,-15776
    5600:	10800017 	ldw	r2,0(r2)
    5604:	1886b03a 	or	r3,r3,r2
    5608:	00800074 	movhi	r2,1
    560c:	10b09804 	addi	r2,r2,-15776
    5610:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5614:	00800074 	movhi	r2,1
    5618:	10b09804 	addi	r2,r2,-15776
    561c:	10800017 	ldw	r2,0(r2)
    5620:	100170fa 	wrctl	ienable,r2
    5624:	e0bffd17 	ldw	r2,-12(fp)
    5628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    562c:	e0bffa17 	ldw	r2,-24(fp)
    5630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5634:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    5638:	e037883a 	mov	sp,fp
    563c:	df000017 	ldw	fp,0(sp)
    5640:	dec00104 	addi	sp,sp,4
    5644:	f800283a 	ret

00005648 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5648:	defff904 	addi	sp,sp,-28
    564c:	df000615 	stw	fp,24(sp)
    5650:	df000604 	addi	fp,sp,24
    5654:	e13ffe15 	stw	r4,-8(fp)
    5658:	e17fff15 	stw	r5,-4(fp)
    565c:	e0bfff17 	ldw	r2,-4(fp)
    5660:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5664:	0005303a 	rdctl	r2,status
    5668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    566c:	e0fffb17 	ldw	r3,-20(fp)
    5670:	00bfff84 	movi	r2,-2
    5674:	1884703a 	and	r2,r3,r2
    5678:	1001703a 	wrctl	status,r2
  
  return context;
    567c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5680:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    5684:	e0fffc17 	ldw	r3,-16(fp)
    5688:	00800044 	movi	r2,1
    568c:	10c4983a 	sll	r2,r2,r3
    5690:	0084303a 	nor	r2,zero,r2
    5694:	1007883a 	mov	r3,r2
    5698:	00800074 	movhi	r2,1
    569c:	10b09804 	addi	r2,r2,-15776
    56a0:	10800017 	ldw	r2,0(r2)
    56a4:	1886703a 	and	r3,r3,r2
    56a8:	00800074 	movhi	r2,1
    56ac:	10b09804 	addi	r2,r2,-15776
    56b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    56b4:	00800074 	movhi	r2,1
    56b8:	10b09804 	addi	r2,r2,-15776
    56bc:	10800017 	ldw	r2,0(r2)
    56c0:	100170fa 	wrctl	ienable,r2
    56c4:	e0bffd17 	ldw	r2,-12(fp)
    56c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56cc:	e0bffa17 	ldw	r2,-24(fp)
    56d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    56d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    56d8:	e037883a 	mov	sp,fp
    56dc:	df000017 	ldw	fp,0(sp)
    56e0:	dec00104 	addi	sp,sp,4
    56e4:	f800283a 	ret

000056e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    56e8:	defffc04 	addi	sp,sp,-16
    56ec:	df000315 	stw	fp,12(sp)
    56f0:	df000304 	addi	fp,sp,12
    56f4:	e13ffe15 	stw	r4,-8(fp)
    56f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    56fc:	000530fa 	rdctl	r2,ienable
    5700:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5704:	e0ffff17 	ldw	r3,-4(fp)
    5708:	00800044 	movi	r2,1
    570c:	10c4983a 	sll	r2,r2,r3
    5710:	1007883a 	mov	r3,r2
    5714:	e0bffd17 	ldw	r2,-12(fp)
    5718:	1884703a 	and	r2,r3,r2
    571c:	1004c03a 	cmpne	r2,r2,zero
}
    5720:	e037883a 	mov	sp,fp
    5724:	df000017 	ldw	fp,0(sp)
    5728:	dec00104 	addi	sp,sp,4
    572c:	f800283a 	ret

00005730 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5730:	defff404 	addi	sp,sp,-48
    5734:	dfc00b15 	stw	ra,44(sp)
    5738:	df000a15 	stw	fp,40(sp)
    573c:	df000a04 	addi	fp,sp,40
    5740:	e13ffb15 	stw	r4,-20(fp)
    5744:	e17ffc15 	stw	r5,-16(fp)
    5748:	e1bffd15 	stw	r6,-12(fp)
    574c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    5750:	00bffa84 	movi	r2,-22
    5754:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5758:	e0bffc17 	ldw	r2,-16(fp)
    575c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5760:	e0bff917 	ldw	r2,-28(fp)
    5764:	10800808 	cmpgei	r2,r2,32
    5768:	1000291e 	bne	r2,zero,5810 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    576c:	0005303a 	rdctl	r2,status
    5770:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5774:	e0fff717 	ldw	r3,-36(fp)
    5778:	00bfff84 	movi	r2,-2
    577c:	1884703a 	and	r2,r3,r2
    5780:	1001703a 	wrctl	status,r2
  
  return context;
    5784:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5788:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    578c:	e0bff917 	ldw	r2,-28(fp)
    5790:	00c00074 	movhi	r3,1
    5794:	18f0a904 	addi	r3,r3,-15708
    5798:	100490fa 	slli	r2,r2,3
    579c:	10c7883a 	add	r3,r2,r3
    57a0:	e0bffd17 	ldw	r2,-12(fp)
    57a4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    57a8:	e0bff917 	ldw	r2,-28(fp)
    57ac:	00c00074 	movhi	r3,1
    57b0:	18f0a904 	addi	r3,r3,-15708
    57b4:	100490fa 	slli	r2,r2,3
    57b8:	10c5883a 	add	r2,r2,r3
    57bc:	10c00104 	addi	r3,r2,4
    57c0:	e0bffe17 	ldw	r2,-8(fp)
    57c4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    57c8:	e0bffd17 	ldw	r2,-12(fp)
    57cc:	1005003a 	cmpeq	r2,r2,zero
    57d0:	1000051e 	bne	r2,zero,57e8 <alt_iic_isr_register+0xb8>
    57d4:	e17ff917 	ldw	r5,-28(fp)
    57d8:	e13ffb17 	ldw	r4,-20(fp)
    57dc:	00055ac0 	call	55ac <alt_ic_irq_enable>
    57e0:	e0bfff15 	stw	r2,-4(fp)
    57e4:	00000406 	br	57f8 <alt_iic_isr_register+0xc8>
    57e8:	e17ff917 	ldw	r5,-28(fp)
    57ec:	e13ffb17 	ldw	r4,-20(fp)
    57f0:	00056480 	call	5648 <alt_ic_irq_disable>
    57f4:	e0bfff15 	stw	r2,-4(fp)
    57f8:	e0bfff17 	ldw	r2,-4(fp)
    57fc:	e0bffa15 	stw	r2,-24(fp)
    5800:	e0bff817 	ldw	r2,-32(fp)
    5804:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5808:	e0bff617 	ldw	r2,-40(fp)
    580c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5810:	e0bffa17 	ldw	r2,-24(fp)
}
    5814:	e037883a 	mov	sp,fp
    5818:	dfc00117 	ldw	ra,4(sp)
    581c:	df000017 	ldw	fp,0(sp)
    5820:	dec00204 	addi	sp,sp,8
    5824:	f800283a 	ret

00005828 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5828:	defff904 	addi	sp,sp,-28
    582c:	dfc00615 	stw	ra,24(sp)
    5830:	df000515 	stw	fp,20(sp)
    5834:	df000504 	addi	fp,sp,20
    5838:	e13ffc15 	stw	r4,-16(fp)
    583c:	e17ffd15 	stw	r5,-12(fp)
    5840:	e1bffe15 	stw	r6,-8(fp)
    5844:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    5848:	e13ffd17 	ldw	r4,-12(fp)
    584c:	e17ffe17 	ldw	r5,-8(fp)
    5850:	e1bfff17 	ldw	r6,-4(fp)
    5854:	0005a400 	call	5a40 <open>
    5858:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    585c:	e0bffb17 	ldw	r2,-20(fp)
    5860:	1004803a 	cmplt	r2,r2,zero
    5864:	10001c1e 	bne	r2,zero,58d8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    5868:	e0bffb17 	ldw	r2,-20(fp)
    586c:	00c00074 	movhi	r3,1
    5870:	18e88604 	addi	r3,r3,-24040
    5874:	10800324 	muli	r2,r2,12
    5878:	10c5883a 	add	r2,r2,r3
    587c:	10c00017 	ldw	r3,0(r2)
    5880:	e0bffc17 	ldw	r2,-16(fp)
    5884:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5888:	e0bffb17 	ldw	r2,-20(fp)
    588c:	00c00074 	movhi	r3,1
    5890:	18e88604 	addi	r3,r3,-24040
    5894:	10800324 	muli	r2,r2,12
    5898:	10c5883a 	add	r2,r2,r3
    589c:	10800104 	addi	r2,r2,4
    58a0:	10c00017 	ldw	r3,0(r2)
    58a4:	e0bffc17 	ldw	r2,-16(fp)
    58a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    58ac:	e0bffb17 	ldw	r2,-20(fp)
    58b0:	00c00074 	movhi	r3,1
    58b4:	18e88604 	addi	r3,r3,-24040
    58b8:	10800324 	muli	r2,r2,12
    58bc:	10c5883a 	add	r2,r2,r3
    58c0:	10800204 	addi	r2,r2,8
    58c4:	10c00017 	ldw	r3,0(r2)
    58c8:	e0bffc17 	ldw	r2,-16(fp)
    58cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    58d0:	e13ffb17 	ldw	r4,-20(fp)
    58d4:	0005c280 	call	5c28 <alt_release_fd>
  }
} 
    58d8:	e037883a 	mov	sp,fp
    58dc:	dfc00117 	ldw	ra,4(sp)
    58e0:	df000017 	ldw	fp,0(sp)
    58e4:	dec00204 	addi	sp,sp,8
    58e8:	f800283a 	ret

000058ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    58ec:	defffb04 	addi	sp,sp,-20
    58f0:	dfc00415 	stw	ra,16(sp)
    58f4:	df000315 	stw	fp,12(sp)
    58f8:	df000304 	addi	fp,sp,12
    58fc:	e13ffd15 	stw	r4,-12(fp)
    5900:	e17ffe15 	stw	r5,-8(fp)
    5904:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5908:	01000074 	movhi	r4,1
    590c:	21288904 	addi	r4,r4,-24028
    5910:	e17ffd17 	ldw	r5,-12(fp)
    5914:	01800044 	movi	r6,1
    5918:	01c07fc4 	movi	r7,511
    591c:	00058280 	call	5828 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5920:	01000074 	movhi	r4,1
    5924:	21288604 	addi	r4,r4,-24040
    5928:	e17ffe17 	ldw	r5,-8(fp)
    592c:	000d883a 	mov	r6,zero
    5930:	01c07fc4 	movi	r7,511
    5934:	00058280 	call	5828 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5938:	01000074 	movhi	r4,1
    593c:	21288c04 	addi	r4,r4,-24016
    5940:	e17fff17 	ldw	r5,-4(fp)
    5944:	01800044 	movi	r6,1
    5948:	01c07fc4 	movi	r7,511
    594c:	00058280 	call	5828 <alt_open_fd>
}  
    5950:	e037883a 	mov	sp,fp
    5954:	dfc00117 	ldw	ra,4(sp)
    5958:	df000017 	ldw	fp,0(sp)
    595c:	dec00204 	addi	sp,sp,8
    5960:	f800283a 	ret

00005964 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5964:	defffc04 	addi	sp,sp,-16
    5968:	df000315 	stw	fp,12(sp)
    596c:	df000304 	addi	fp,sp,12
    5970:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5974:	e0bffe17 	ldw	r2,-8(fp)
    5978:	10800217 	ldw	r2,8(r2)
    597c:	10d00034 	orhi	r3,r2,16384
    5980:	e0bffe17 	ldw	r2,-8(fp)
    5984:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5988:	e03ffd15 	stw	zero,-12(fp)
    598c:	00002006 	br	5a10 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5990:	e0bffd17 	ldw	r2,-12(fp)
    5994:	00c00074 	movhi	r3,1
    5998:	18e88604 	addi	r3,r3,-24040
    599c:	10800324 	muli	r2,r2,12
    59a0:	10c5883a 	add	r2,r2,r3
    59a4:	10c00017 	ldw	r3,0(r2)
    59a8:	e0bffe17 	ldw	r2,-8(fp)
    59ac:	10800017 	ldw	r2,0(r2)
    59b0:	1880141e 	bne	r3,r2,5a04 <alt_file_locked+0xa0>
    59b4:	e0bffd17 	ldw	r2,-12(fp)
    59b8:	00c00074 	movhi	r3,1
    59bc:	18e88604 	addi	r3,r3,-24040
    59c0:	10800324 	muli	r2,r2,12
    59c4:	10c5883a 	add	r2,r2,r3
    59c8:	10800204 	addi	r2,r2,8
    59cc:	10800017 	ldw	r2,0(r2)
    59d0:	1004403a 	cmpge	r2,r2,zero
    59d4:	10000b1e 	bne	r2,zero,5a04 <alt_file_locked+0xa0>
    59d8:	e0bffd17 	ldw	r2,-12(fp)
    59dc:	10800324 	muli	r2,r2,12
    59e0:	1007883a 	mov	r3,r2
    59e4:	00800074 	movhi	r2,1
    59e8:	10a88604 	addi	r2,r2,-24040
    59ec:	1887883a 	add	r3,r3,r2
    59f0:	e0bffe17 	ldw	r2,-8(fp)
    59f4:	18800326 	beq	r3,r2,5a04 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    59f8:	00bffcc4 	movi	r2,-13
    59fc:	e0bfff15 	stw	r2,-4(fp)
    5a00:	00000a06 	br	5a2c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5a04:	e0bffd17 	ldw	r2,-12(fp)
    5a08:	10800044 	addi	r2,r2,1
    5a0c:	e0bffd15 	stw	r2,-12(fp)
    5a10:	00800074 	movhi	r2,1
    5a14:	10a9ef04 	addi	r2,r2,-22596
    5a18:	10800017 	ldw	r2,0(r2)
    5a1c:	1007883a 	mov	r3,r2
    5a20:	e0bffd17 	ldw	r2,-12(fp)
    5a24:	18bfda2e 	bgeu	r3,r2,5990 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5a28:	e03fff15 	stw	zero,-4(fp)
    5a2c:	e0bfff17 	ldw	r2,-4(fp)
}
    5a30:	e037883a 	mov	sp,fp
    5a34:	df000017 	ldw	fp,0(sp)
    5a38:	dec00104 	addi	sp,sp,4
    5a3c:	f800283a 	ret

00005a40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5a40:	defff404 	addi	sp,sp,-48
    5a44:	dfc00b15 	stw	ra,44(sp)
    5a48:	df000a15 	stw	fp,40(sp)
    5a4c:	df000a04 	addi	fp,sp,40
    5a50:	e13ffb15 	stw	r4,-20(fp)
    5a54:	e17ffc15 	stw	r5,-16(fp)
    5a58:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5a5c:	00bfffc4 	movi	r2,-1
    5a60:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    5a64:	00bffb44 	movi	r2,-19
    5a68:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    5a6c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5a70:	e13ffb17 	ldw	r4,-20(fp)
    5a74:	01400074 	movhi	r5,1
    5a78:	2969ed04 	addi	r5,r5,-22604
    5a7c:	00054980 	call	5498 <alt_find_dev>
    5a80:	e0bffa15 	stw	r2,-24(fp)
    5a84:	e0bffa17 	ldw	r2,-24(fp)
    5a88:	1004c03a 	cmpne	r2,r2,zero
    5a8c:	1000051e 	bne	r2,zero,5aa4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5a90:	e13ffb17 	ldw	r4,-20(fp)
    5a94:	0005e4c0 	call	5e4c <alt_find_file>
    5a98:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    5a9c:	00800044 	movi	r2,1
    5aa0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5aa4:	e0bffa17 	ldw	r2,-24(fp)
    5aa8:	1005003a 	cmpeq	r2,r2,zero
    5aac:	1000301e 	bne	r2,zero,5b70 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5ab0:	e13ffa17 	ldw	r4,-24(fp)
    5ab4:	0005f6c0 	call	5f6c <alt_get_fd>
    5ab8:	e0bff815 	stw	r2,-32(fp)
    5abc:	e0bff817 	ldw	r2,-32(fp)
    5ac0:	1004403a 	cmpge	r2,r2,zero
    5ac4:	1000031e 	bne	r2,zero,5ad4 <open+0x94>
    {
      status = index;
    5ac8:	e0bff817 	ldw	r2,-32(fp)
    5acc:	e0bff715 	stw	r2,-36(fp)
    5ad0:	00002906 	br	5b78 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    5ad4:	e0bff817 	ldw	r2,-32(fp)
    5ad8:	10800324 	muli	r2,r2,12
    5adc:	1007883a 	mov	r3,r2
    5ae0:	00800074 	movhi	r2,1
    5ae4:	10a88604 	addi	r2,r2,-24040
    5ae8:	1885883a 	add	r2,r3,r2
    5aec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5af0:	e0fffc17 	ldw	r3,-16(fp)
    5af4:	00900034 	movhi	r2,16384
    5af8:	10bfffc4 	addi	r2,r2,-1
    5afc:	1886703a 	and	r3,r3,r2
    5b00:	e0bff917 	ldw	r2,-28(fp)
    5b04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5b08:	e0bff617 	ldw	r2,-40(fp)
    5b0c:	1004c03a 	cmpne	r2,r2,zero
    5b10:	1000061e 	bne	r2,zero,5b2c <open+0xec>
    5b14:	e13ff917 	ldw	r4,-28(fp)
    5b18:	00059640 	call	5964 <alt_file_locked>
    5b1c:	e0bff715 	stw	r2,-36(fp)
    5b20:	e0bff717 	ldw	r2,-36(fp)
    5b24:	1004803a 	cmplt	r2,r2,zero
    5b28:	1000131e 	bne	r2,zero,5b78 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5b2c:	e0bffa17 	ldw	r2,-24(fp)
    5b30:	10800317 	ldw	r2,12(r2)
    5b34:	1005003a 	cmpeq	r2,r2,zero
    5b38:	1000091e 	bne	r2,zero,5b60 <open+0x120>
    5b3c:	e0bffa17 	ldw	r2,-24(fp)
    5b40:	10800317 	ldw	r2,12(r2)
    5b44:	e13ff917 	ldw	r4,-28(fp)
    5b48:	e17ffb17 	ldw	r5,-20(fp)
    5b4c:	e1bffc17 	ldw	r6,-16(fp)
    5b50:	e1fffd17 	ldw	r7,-12(fp)
    5b54:	103ee83a 	callr	r2
    5b58:	e0bfff15 	stw	r2,-4(fp)
    5b5c:	00000106 	br	5b64 <open+0x124>
    5b60:	e03fff15 	stw	zero,-4(fp)
    5b64:	e0bfff17 	ldw	r2,-4(fp)
    5b68:	e0bff715 	stw	r2,-36(fp)
    5b6c:	00000206 	br	5b78 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5b70:	00bffb44 	movi	r2,-19
    5b74:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5b78:	e0bff717 	ldw	r2,-36(fp)
    5b7c:	1004403a 	cmpge	r2,r2,zero
    5b80:	1000091e 	bne	r2,zero,5ba8 <open+0x168>
  {
    alt_release_fd (index);  
    5b84:	e13ff817 	ldw	r4,-32(fp)
    5b88:	0005c280 	call	5c28 <alt_release_fd>
    ALT_ERRNO = -status;
    5b8c:	0005bc80 	call	5bc8 <alt_get_errno>
    5b90:	e0fff717 	ldw	r3,-36(fp)
    5b94:	00c7c83a 	sub	r3,zero,r3
    5b98:	10c00015 	stw	r3,0(r2)
    return -1;
    5b9c:	00bfffc4 	movi	r2,-1
    5ba0:	e0bffe15 	stw	r2,-8(fp)
    5ba4:	00000206 	br	5bb0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    5ba8:	e0bff817 	ldw	r2,-32(fp)
    5bac:	e0bffe15 	stw	r2,-8(fp)
    5bb0:	e0bffe17 	ldw	r2,-8(fp)
}
    5bb4:	e037883a 	mov	sp,fp
    5bb8:	dfc00117 	ldw	ra,4(sp)
    5bbc:	df000017 	ldw	fp,0(sp)
    5bc0:	dec00204 	addi	sp,sp,8
    5bc4:	f800283a 	ret

00005bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5bc8:	defffd04 	addi	sp,sp,-12
    5bcc:	dfc00215 	stw	ra,8(sp)
    5bd0:	df000115 	stw	fp,4(sp)
    5bd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5bd8:	00800074 	movhi	r2,1
    5bdc:	10a9f004 	addi	r2,r2,-22592
    5be0:	10800017 	ldw	r2,0(r2)
    5be4:	1005003a 	cmpeq	r2,r2,zero
    5be8:	1000061e 	bne	r2,zero,5c04 <alt_get_errno+0x3c>
    5bec:	00800074 	movhi	r2,1
    5bf0:	10a9f004 	addi	r2,r2,-22592
    5bf4:	10800017 	ldw	r2,0(r2)
    5bf8:	103ee83a 	callr	r2
    5bfc:	e0bfff15 	stw	r2,-4(fp)
    5c00:	00000306 	br	5c10 <alt_get_errno+0x48>
    5c04:	00800074 	movhi	r2,1
    5c08:	10b09b04 	addi	r2,r2,-15764
    5c0c:	e0bfff15 	stw	r2,-4(fp)
    5c10:	e0bfff17 	ldw	r2,-4(fp)
}
    5c14:	e037883a 	mov	sp,fp
    5c18:	dfc00117 	ldw	ra,4(sp)
    5c1c:	df000017 	ldw	fp,0(sp)
    5c20:	dec00204 	addi	sp,sp,8
    5c24:	f800283a 	ret

00005c28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5c28:	defffe04 	addi	sp,sp,-8
    5c2c:	df000115 	stw	fp,4(sp)
    5c30:	df000104 	addi	fp,sp,4
    5c34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    5c38:	e0bfff17 	ldw	r2,-4(fp)
    5c3c:	108000d0 	cmplti	r2,r2,3
    5c40:	10000d1e 	bne	r2,zero,5c78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    5c44:	e0bfff17 	ldw	r2,-4(fp)
    5c48:	00c00074 	movhi	r3,1
    5c4c:	18e88604 	addi	r3,r3,-24040
    5c50:	10800324 	muli	r2,r2,12
    5c54:	10c5883a 	add	r2,r2,r3
    5c58:	10800204 	addi	r2,r2,8
    5c5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5c60:	e0bfff17 	ldw	r2,-4(fp)
    5c64:	00c00074 	movhi	r3,1
    5c68:	18e88604 	addi	r3,r3,-24040
    5c6c:	10800324 	muli	r2,r2,12
    5c70:	10c5883a 	add	r2,r2,r3
    5c74:	10000015 	stw	zero,0(r2)
  }
}
    5c78:	e037883a 	mov	sp,fp
    5c7c:	df000017 	ldw	fp,0(sp)
    5c80:	dec00104 	addi	sp,sp,4
    5c84:	f800283a 	ret

00005c88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5c88:	defffa04 	addi	sp,sp,-24
    5c8c:	df000515 	stw	fp,20(sp)
    5c90:	df000504 	addi	fp,sp,20
    5c94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c98:	0005303a 	rdctl	r2,status
    5c9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ca0:	e0fffd17 	ldw	r3,-12(fp)
    5ca4:	00bfff84 	movi	r2,-2
    5ca8:	1884703a 	and	r2,r3,r2
    5cac:	1001703a 	wrctl	status,r2
  
  return context;
    5cb0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5cb4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    5cb8:	e0bfff17 	ldw	r2,-4(fp)
    5cbc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5cc0:	e0bffc17 	ldw	r2,-16(fp)
    5cc4:	10c00017 	ldw	r3,0(r2)
    5cc8:	e0bffc17 	ldw	r2,-16(fp)
    5ccc:	10800117 	ldw	r2,4(r2)
    5cd0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    5cd4:	e0bffc17 	ldw	r2,-16(fp)
    5cd8:	10c00117 	ldw	r3,4(r2)
    5cdc:	e0bffc17 	ldw	r2,-16(fp)
    5ce0:	10800017 	ldw	r2,0(r2)
    5ce4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5ce8:	e0fffc17 	ldw	r3,-16(fp)
    5cec:	e0bffc17 	ldw	r2,-16(fp)
    5cf0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    5cf4:	e0fffc17 	ldw	r3,-16(fp)
    5cf8:	e0bffc17 	ldw	r2,-16(fp)
    5cfc:	18800015 	stw	r2,0(r3)
    5d00:	e0bffe17 	ldw	r2,-8(fp)
    5d04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d08:	e0bffb17 	ldw	r2,-20(fp)
    5d0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5d10:	e037883a 	mov	sp,fp
    5d14:	df000017 	ldw	fp,0(sp)
    5d18:	dec00104 	addi	sp,sp,4
    5d1c:	f800283a 	ret

00005d20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5d20:	defffb04 	addi	sp,sp,-20
    5d24:	dfc00415 	stw	ra,16(sp)
    5d28:	df000315 	stw	fp,12(sp)
    5d2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5d30:	d0a00a17 	ldw	r2,-32728(gp)
    5d34:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5d38:	d0a6b217 	ldw	r2,-25912(gp)
    5d3c:	10800044 	addi	r2,r2,1
    5d40:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5d44:	00003106 	br	5e0c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    5d48:	e0bffe17 	ldw	r2,-8(fp)
    5d4c:	10800017 	ldw	r2,0(r2)
    5d50:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5d54:	e0bffe17 	ldw	r2,-8(fp)
    5d58:	10800403 	ldbu	r2,16(r2)
    5d5c:	10803fcc 	andi	r2,r2,255
    5d60:	1005003a 	cmpeq	r2,r2,zero
    5d64:	1000051e 	bne	r2,zero,5d7c <alt_tick+0x5c>
    5d68:	d0a6b217 	ldw	r2,-25912(gp)
    5d6c:	1004c03a 	cmpne	r2,r2,zero
    5d70:	1000021e 	bne	r2,zero,5d7c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    5d74:	e0bffe17 	ldw	r2,-8(fp)
    5d78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5d7c:	e0bffe17 	ldw	r2,-8(fp)
    5d80:	10c00217 	ldw	r3,8(r2)
    5d84:	d0a6b217 	ldw	r2,-25912(gp)
    5d88:	10c01e36 	bltu	r2,r3,5e04 <alt_tick+0xe4>
    5d8c:	e0bffe17 	ldw	r2,-8(fp)
    5d90:	10800403 	ldbu	r2,16(r2)
    5d94:	10803fcc 	andi	r2,r2,255
    5d98:	1004c03a 	cmpne	r2,r2,zero
    5d9c:	1000191e 	bne	r2,zero,5e04 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    5da0:	e0bffe17 	ldw	r2,-8(fp)
    5da4:	10c00317 	ldw	r3,12(r2)
    5da8:	e0bffe17 	ldw	r2,-8(fp)
    5dac:	11000517 	ldw	r4,20(r2)
    5db0:	183ee83a 	callr	r3
    5db4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5db8:	e0bffd17 	ldw	r2,-12(fp)
    5dbc:	1004c03a 	cmpne	r2,r2,zero
    5dc0:	1000031e 	bne	r2,zero,5dd0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    5dc4:	e13ffe17 	ldw	r4,-8(fp)
    5dc8:	0005c880 	call	5c88 <alt_alarm_stop>
    5dcc:	00000d06 	br	5e04 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    5dd0:	e0bffe17 	ldw	r2,-8(fp)
    5dd4:	10c00217 	ldw	r3,8(r2)
    5dd8:	e0bffd17 	ldw	r2,-12(fp)
    5ddc:	1887883a 	add	r3,r3,r2
    5de0:	e0bffe17 	ldw	r2,-8(fp)
    5de4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5de8:	e0bffe17 	ldw	r2,-8(fp)
    5dec:	10c00217 	ldw	r3,8(r2)
    5df0:	d0a6b217 	ldw	r2,-25912(gp)
    5df4:	1880032e 	bgeu	r3,r2,5e04 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    5df8:	e0fffe17 	ldw	r3,-8(fp)
    5dfc:	00800044 	movi	r2,1
    5e00:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    5e04:	e0bfff17 	ldw	r2,-4(fp)
    5e08:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5e0c:	d0e00a04 	addi	r3,gp,-32728
    5e10:	e0bffe17 	ldw	r2,-8(fp)
    5e14:	10ffcc1e 	bne	r2,r3,5d48 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    5e18:	e037883a 	mov	sp,fp
    5e1c:	dfc00117 	ldw	ra,4(sp)
    5e20:	df000017 	ldw	fp,0(sp)
    5e24:	dec00204 	addi	sp,sp,8
    5e28:	f800283a 	ret

00005e2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    5e2c:	deffff04 	addi	sp,sp,-4
    5e30:	df000015 	stw	fp,0(sp)
    5e34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5e38:	000170fa 	wrctl	ienable,zero
}
    5e3c:	e037883a 	mov	sp,fp
    5e40:	df000017 	ldw	fp,0(sp)
    5e44:	dec00104 	addi	sp,sp,4
    5e48:	f800283a 	ret

00005e4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5e4c:	defffa04 	addi	sp,sp,-24
    5e50:	dfc00515 	stw	ra,20(sp)
    5e54:	df000415 	stw	fp,16(sp)
    5e58:	df000404 	addi	fp,sp,16
    5e5c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5e60:	00800074 	movhi	r2,1
    5e64:	10a9eb04 	addi	r2,r2,-22612
    5e68:	10800017 	ldw	r2,0(r2)
    5e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5e70:	00003306 	br	5f40 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    5e74:	e0bffd17 	ldw	r2,-12(fp)
    5e78:	11000217 	ldw	r4,8(r2)
    5e7c:	00064000 	call	6400 <strlen>
    5e80:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    5e84:	e0bffd17 	ldw	r2,-12(fp)
    5e88:	10c00217 	ldw	r3,8(r2)
    5e8c:	e0bffc17 	ldw	r2,-16(fp)
    5e90:	1885883a 	add	r2,r3,r2
    5e94:	10bfffc4 	addi	r2,r2,-1
    5e98:	10800003 	ldbu	r2,0(r2)
    5e9c:	10803fcc 	andi	r2,r2,255
    5ea0:	1080201c 	xori	r2,r2,128
    5ea4:	10bfe004 	addi	r2,r2,-128
    5ea8:	10800bd8 	cmpnei	r2,r2,47
    5eac:	1000031e 	bne	r2,zero,5ebc <alt_find_file+0x70>
    {
      len -= 1;
    5eb0:	e0bffc17 	ldw	r2,-16(fp)
    5eb4:	10bfffc4 	addi	r2,r2,-1
    5eb8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5ebc:	e0bffc17 	ldw	r2,-16(fp)
    5ec0:	1007883a 	mov	r3,r2
    5ec4:	e0bffe17 	ldw	r2,-8(fp)
    5ec8:	1885883a 	add	r2,r3,r2
    5ecc:	10800003 	ldbu	r2,0(r2)
    5ed0:	10803fcc 	andi	r2,r2,255
    5ed4:	1080201c 	xori	r2,r2,128
    5ed8:	10bfe004 	addi	r2,r2,-128
    5edc:	10800be0 	cmpeqi	r2,r2,47
    5ee0:	10000a1e 	bne	r2,zero,5f0c <alt_find_file+0xc0>
    5ee4:	e0bffc17 	ldw	r2,-16(fp)
    5ee8:	1007883a 	mov	r3,r2
    5eec:	e0bffe17 	ldw	r2,-8(fp)
    5ef0:	1885883a 	add	r2,r3,r2
    5ef4:	10800003 	ldbu	r2,0(r2)
    5ef8:	10803fcc 	andi	r2,r2,255
    5efc:	1080201c 	xori	r2,r2,128
    5f00:	10bfe004 	addi	r2,r2,-128
    5f04:	1004c03a 	cmpne	r2,r2,zero
    5f08:	10000a1e 	bne	r2,zero,5f34 <alt_find_file+0xe8>
    5f0c:	e0bffd17 	ldw	r2,-12(fp)
    5f10:	11000217 	ldw	r4,8(r2)
    5f14:	e1bffc17 	ldw	r6,-16(fp)
    5f18:	e17ffe17 	ldw	r5,-8(fp)
    5f1c:	00061000 	call	6100 <memcmp>
    5f20:	1004c03a 	cmpne	r2,r2,zero
    5f24:	1000031e 	bne	r2,zero,5f34 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5f28:	e0bffd17 	ldw	r2,-12(fp)
    5f2c:	e0bfff15 	stw	r2,-4(fp)
    5f30:	00000806 	br	5f54 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    5f34:	e0bffd17 	ldw	r2,-12(fp)
    5f38:	10800017 	ldw	r2,0(r2)
    5f3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5f40:	00c00074 	movhi	r3,1
    5f44:	18e9eb04 	addi	r3,r3,-22612
    5f48:	e0bffd17 	ldw	r2,-12(fp)
    5f4c:	10ffc91e 	bne	r2,r3,5e74 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5f50:	e03fff15 	stw	zero,-4(fp)
    5f54:	e0bfff17 	ldw	r2,-4(fp)
}
    5f58:	e037883a 	mov	sp,fp
    5f5c:	dfc00117 	ldw	ra,4(sp)
    5f60:	df000017 	ldw	fp,0(sp)
    5f64:	dec00204 	addi	sp,sp,8
    5f68:	f800283a 	ret

00005f6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5f6c:	defffc04 	addi	sp,sp,-16
    5f70:	df000315 	stw	fp,12(sp)
    5f74:	df000304 	addi	fp,sp,12
    5f78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5f7c:	00bffa04 	movi	r2,-24
    5f80:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5f84:	e03ffe15 	stw	zero,-8(fp)
    5f88:	00001e06 	br	6004 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    5f8c:	e0bffe17 	ldw	r2,-8(fp)
    5f90:	00c00074 	movhi	r3,1
    5f94:	18e88604 	addi	r3,r3,-24040
    5f98:	10800324 	muli	r2,r2,12
    5f9c:	10c5883a 	add	r2,r2,r3
    5fa0:	10800017 	ldw	r2,0(r2)
    5fa4:	1004c03a 	cmpne	r2,r2,zero
    5fa8:	1000131e 	bne	r2,zero,5ff8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    5fac:	e0bffe17 	ldw	r2,-8(fp)
    5fb0:	00c00074 	movhi	r3,1
    5fb4:	18e88604 	addi	r3,r3,-24040
    5fb8:	10800324 	muli	r2,r2,12
    5fbc:	10c7883a 	add	r3,r2,r3
    5fc0:	e0bfff17 	ldw	r2,-4(fp)
    5fc4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    5fc8:	00800074 	movhi	r2,1
    5fcc:	10a9ef04 	addi	r2,r2,-22596
    5fd0:	10c00017 	ldw	r3,0(r2)
    5fd4:	e0bffe17 	ldw	r2,-8(fp)
    5fd8:	1880040e 	bge	r3,r2,5fec <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    5fdc:	00c00074 	movhi	r3,1
    5fe0:	18e9ef04 	addi	r3,r3,-22596
    5fe4:	e0bffe17 	ldw	r2,-8(fp)
    5fe8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    5fec:	e0bffe17 	ldw	r2,-8(fp)
    5ff0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5ff4:	00000606 	br	6010 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5ff8:	e0bffe17 	ldw	r2,-8(fp)
    5ffc:	10800044 	addi	r2,r2,1
    6000:	e0bffe15 	stw	r2,-8(fp)
    6004:	e0bffe17 	ldw	r2,-8(fp)
    6008:	10800810 	cmplti	r2,r2,32
    600c:	103fdf1e 	bne	r2,zero,5f8c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6010:	e0bffd17 	ldw	r2,-12(fp)
}
    6014:	e037883a 	mov	sp,fp
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00104 	addi	sp,sp,4
    6020:	f800283a 	ret

00006024 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6024:	defffb04 	addi	sp,sp,-20
    6028:	df000415 	stw	fp,16(sp)
    602c:	df000404 	addi	fp,sp,16
    6030:	e13ffe15 	stw	r4,-8(fp)
    6034:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	10840070 	cmpltui	r2,r2,4097
    6040:	1000021e 	bne	r2,zero,604c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6044:	00840004 	movi	r2,4096
    6048:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    604c:	e0fffe17 	ldw	r3,-8(fp)
    6050:	e0bfff17 	ldw	r2,-4(fp)
    6054:	1885883a 	add	r2,r3,r2
    6058:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    605c:	e0bffe17 	ldw	r2,-8(fp)
    6060:	e0bffd15 	stw	r2,-12(fp)
    6064:	00000506 	br	607c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6068:	e0bffd17 	ldw	r2,-12(fp)
    606c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6070:	e0bffd17 	ldw	r2,-12(fp)
    6074:	10800804 	addi	r2,r2,32
    6078:	e0bffd15 	stw	r2,-12(fp)
    607c:	e0fffd17 	ldw	r3,-12(fp)
    6080:	e0bffc17 	ldw	r2,-16(fp)
    6084:	18bff836 	bltu	r3,r2,6068 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6088:	e0bffe17 	ldw	r2,-8(fp)
    608c:	108007cc 	andi	r2,r2,31
    6090:	1005003a 	cmpeq	r2,r2,zero
    6094:	1000021e 	bne	r2,zero,60a0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6098:	e0bffd17 	ldw	r2,-12(fp)
    609c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    60a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    60a4:	e037883a 	mov	sp,fp
    60a8:	df000017 	ldw	fp,0(sp)
    60ac:	dec00104 	addi	sp,sp,4
    60b0:	f800283a 	ret

000060b4 <atexit>:
    60b4:	200b883a 	mov	r5,r4
    60b8:	000d883a 	mov	r6,zero
    60bc:	0009883a 	mov	r4,zero
    60c0:	000f883a 	mov	r7,zero
    60c4:	00066fc1 	jmpi	66fc <__register_exitproc>

000060c8 <exit>:
    60c8:	defffe04 	addi	sp,sp,-8
    60cc:	000b883a 	mov	r5,zero
    60d0:	dc000015 	stw	r16,0(sp)
    60d4:	dfc00115 	stw	ra,4(sp)
    60d8:	2021883a 	mov	r16,r4
    60dc:	00068340 	call	6834 <__call_exitprocs>
    60e0:	00800074 	movhi	r2,1
    60e4:	10a9ea04 	addi	r2,r2,-22616
    60e8:	11000017 	ldw	r4,0(r2)
    60ec:	20800f17 	ldw	r2,60(r4)
    60f0:	10000126 	beq	r2,zero,60f8 <exit+0x30>
    60f4:	103ee83a 	callr	r2
    60f8:	8009883a 	mov	r4,r16
    60fc:	00083440 	call	8344 <_exit>

00006100 <memcmp>:
    6100:	00c000c4 	movi	r3,3
    6104:	1980032e 	bgeu	r3,r6,6114 <memcmp+0x14>
    6108:	2144b03a 	or	r2,r4,r5
    610c:	10c4703a 	and	r2,r2,r3
    6110:	10000f26 	beq	r2,zero,6150 <memcmp+0x50>
    6114:	31ffffc4 	addi	r7,r6,-1
    6118:	3000061e 	bne	r6,zero,6134 <memcmp+0x34>
    611c:	00000a06 	br	6148 <memcmp+0x48>
    6120:	39ffffc4 	addi	r7,r7,-1
    6124:	00bfffc4 	movi	r2,-1
    6128:	21000044 	addi	r4,r4,1
    612c:	29400044 	addi	r5,r5,1
    6130:	38800526 	beq	r7,r2,6148 <memcmp+0x48>
    6134:	20c00003 	ldbu	r3,0(r4)
    6138:	28800003 	ldbu	r2,0(r5)
    613c:	18bff826 	beq	r3,r2,6120 <memcmp+0x20>
    6140:	1885c83a 	sub	r2,r3,r2
    6144:	f800283a 	ret
    6148:	0005883a 	mov	r2,zero
    614c:	f800283a 	ret
    6150:	180f883a 	mov	r7,r3
    6154:	20c00017 	ldw	r3,0(r4)
    6158:	28800017 	ldw	r2,0(r5)
    615c:	18bfed1e 	bne	r3,r2,6114 <memcmp+0x14>
    6160:	31bfff04 	addi	r6,r6,-4
    6164:	21000104 	addi	r4,r4,4
    6168:	29400104 	addi	r5,r5,4
    616c:	39bff936 	bltu	r7,r6,6154 <memcmp+0x54>
    6170:	003fe806 	br	6114 <memcmp+0x14>

00006174 <memcpy>:
    6174:	01c003c4 	movi	r7,15
    6178:	2007883a 	mov	r3,r4
    617c:	3980032e 	bgeu	r7,r6,618c <memcpy+0x18>
    6180:	2904b03a 	or	r2,r5,r4
    6184:	108000cc 	andi	r2,r2,3
    6188:	10000926 	beq	r2,zero,61b0 <memcpy+0x3c>
    618c:	30000626 	beq	r6,zero,61a8 <memcpy+0x34>
    6190:	30cd883a 	add	r6,r6,r3
    6194:	28800003 	ldbu	r2,0(r5)
    6198:	29400044 	addi	r5,r5,1
    619c:	18800005 	stb	r2,0(r3)
    61a0:	18c00044 	addi	r3,r3,1
    61a4:	30fffb1e 	bne	r6,r3,6194 <memcpy+0x20>
    61a8:	2005883a 	mov	r2,r4
    61ac:	f800283a 	ret
    61b0:	3811883a 	mov	r8,r7
    61b4:	200f883a 	mov	r7,r4
    61b8:	28c00017 	ldw	r3,0(r5)
    61bc:	31bffc04 	addi	r6,r6,-16
    61c0:	38c00015 	stw	r3,0(r7)
    61c4:	28800117 	ldw	r2,4(r5)
    61c8:	38800115 	stw	r2,4(r7)
    61cc:	28c00217 	ldw	r3,8(r5)
    61d0:	38c00215 	stw	r3,8(r7)
    61d4:	28800317 	ldw	r2,12(r5)
    61d8:	29400404 	addi	r5,r5,16
    61dc:	38800315 	stw	r2,12(r7)
    61e0:	39c00404 	addi	r7,r7,16
    61e4:	41bff436 	bltu	r8,r6,61b8 <memcpy+0x44>
    61e8:	008000c4 	movi	r2,3
    61ec:	1180072e 	bgeu	r2,r6,620c <memcpy+0x98>
    61f0:	1007883a 	mov	r3,r2
    61f4:	28800017 	ldw	r2,0(r5)
    61f8:	31bfff04 	addi	r6,r6,-4
    61fc:	29400104 	addi	r5,r5,4
    6200:	38800015 	stw	r2,0(r7)
    6204:	39c00104 	addi	r7,r7,4
    6208:	19bffa36 	bltu	r3,r6,61f4 <memcpy+0x80>
    620c:	3807883a 	mov	r3,r7
    6210:	003fde06 	br	618c <memcpy+0x18>

00006214 <putc>:
    6214:	defffc04 	addi	sp,sp,-16
    6218:	dc800215 	stw	r18,8(sp)
    621c:	04800074 	movhi	r18,1
    6220:	94a9e904 	addi	r18,r18,-22620
    6224:	90c00017 	ldw	r3,0(r18)
    6228:	dc400115 	stw	r17,4(sp)
    622c:	dc000015 	stw	r16,0(sp)
    6230:	dfc00315 	stw	ra,12(sp)
    6234:	2023883a 	mov	r17,r4
    6238:	2821883a 	mov	r16,r5
    623c:	18000226 	beq	r3,zero,6248 <putc+0x34>
    6240:	18800e17 	ldw	r2,56(r3)
    6244:	10001126 	beq	r2,zero,628c <putc+0x78>
    6248:	80800217 	ldw	r2,8(r16)
    624c:	10ffffc4 	addi	r3,r2,-1
    6250:	80c00215 	stw	r3,8(r16)
    6254:	18001316 	blt	r3,zero,62a4 <putc+0x90>
    6258:	80800017 	ldw	r2,0(r16)
    625c:	14400005 	stb	r17,0(r2)
    6260:	80c00017 	ldw	r3,0(r16)
    6264:	18800044 	addi	r2,r3,1
    6268:	18c00003 	ldbu	r3,0(r3)
    626c:	80800015 	stw	r2,0(r16)
    6270:	1805883a 	mov	r2,r3
    6274:	dfc00317 	ldw	ra,12(sp)
    6278:	dc800217 	ldw	r18,8(sp)
    627c:	dc400117 	ldw	r17,4(sp)
    6280:	dc000017 	ldw	r16,0(sp)
    6284:	dec00404 	addi	sp,sp,16
    6288:	f800283a 	ret
    628c:	1809883a 	mov	r4,r3
    6290:	0006c7c0 	call	6c7c <__sinit>
    6294:	80800217 	ldw	r2,8(r16)
    6298:	10ffffc4 	addi	r3,r2,-1
    629c:	80c00215 	stw	r3,8(r16)
    62a0:	183fed0e 	bge	r3,zero,6258 <putc+0x44>
    62a4:	80800617 	ldw	r2,24(r16)
    62a8:	18800f16 	blt	r3,r2,62e8 <putc+0xd4>
    62ac:	80800017 	ldw	r2,0(r16)
    62b0:	14400005 	stb	r17,0(r2)
    62b4:	81000017 	ldw	r4,0(r16)
    62b8:	00800284 	movi	r2,10
    62bc:	20c00003 	ldbu	r3,0(r4)
    62c0:	18801226 	beq	r3,r2,630c <putc+0xf8>
    62c4:	20800044 	addi	r2,r4,1
    62c8:	80800015 	stw	r2,0(r16)
    62cc:	1805883a 	mov	r2,r3
    62d0:	dfc00317 	ldw	ra,12(sp)
    62d4:	dc800217 	ldw	r18,8(sp)
    62d8:	dc400117 	ldw	r17,4(sp)
    62dc:	dc000017 	ldw	r16,0(sp)
    62e0:	dec00404 	addi	sp,sp,16
    62e4:	f800283a 	ret
    62e8:	91000017 	ldw	r4,0(r18)
    62ec:	880b883a 	mov	r5,r17
    62f0:	800d883a 	mov	r6,r16
    62f4:	dfc00317 	ldw	ra,12(sp)
    62f8:	dc800217 	ldw	r18,8(sp)
    62fc:	dc400117 	ldw	r17,4(sp)
    6300:	dc000017 	ldw	r16,0(sp)
    6304:	dec00404 	addi	sp,sp,16
    6308:	00064741 	jmpi	6474 <__swbuf_r>
    630c:	91000017 	ldw	r4,0(r18)
    6310:	180b883a 	mov	r5,r3
    6314:	003ff606 	br	62f0 <putc+0xdc>

00006318 <_putc_r>:
    6318:	defffc04 	addi	sp,sp,-16
    631c:	dc400215 	stw	r17,8(sp)
    6320:	dc000115 	stw	r16,4(sp)
    6324:	dfc00315 	stw	ra,12(sp)
    6328:	2021883a 	mov	r16,r4
    632c:	2823883a 	mov	r17,r5
    6330:	20000226 	beq	r4,zero,633c <_putc_r+0x24>
    6334:	20800e17 	ldw	r2,56(r4)
    6338:	10001026 	beq	r2,zero,637c <_putc_r+0x64>
    633c:	30800217 	ldw	r2,8(r6)
    6340:	10ffffc4 	addi	r3,r2,-1
    6344:	30c00215 	stw	r3,8(r6)
    6348:	18001316 	blt	r3,zero,6398 <_putc_r+0x80>
    634c:	30800017 	ldw	r2,0(r6)
    6350:	14400005 	stb	r17,0(r2)
    6354:	30c00017 	ldw	r3,0(r6)
    6358:	18800044 	addi	r2,r3,1
    635c:	18c00003 	ldbu	r3,0(r3)
    6360:	30800015 	stw	r2,0(r6)
    6364:	1805883a 	mov	r2,r3
    6368:	dfc00317 	ldw	ra,12(sp)
    636c:	dc400217 	ldw	r17,8(sp)
    6370:	dc000117 	ldw	r16,4(sp)
    6374:	dec00404 	addi	sp,sp,16
    6378:	f800283a 	ret
    637c:	d9800015 	stw	r6,0(sp)
    6380:	0006c7c0 	call	6c7c <__sinit>
    6384:	d9800017 	ldw	r6,0(sp)
    6388:	30800217 	ldw	r2,8(r6)
    638c:	10ffffc4 	addi	r3,r2,-1
    6390:	30c00215 	stw	r3,8(r6)
    6394:	183fed0e 	bge	r3,zero,634c <_putc_r+0x34>
    6398:	30800617 	ldw	r2,24(r6)
    639c:	18800e16 	blt	r3,r2,63d8 <_putc_r+0xc0>
    63a0:	30800017 	ldw	r2,0(r6)
    63a4:	14400005 	stb	r17,0(r2)
    63a8:	31000017 	ldw	r4,0(r6)
    63ac:	00800284 	movi	r2,10
    63b0:	20c00003 	ldbu	r3,0(r4)
    63b4:	18800f26 	beq	r3,r2,63f4 <_putc_r+0xdc>
    63b8:	20800044 	addi	r2,r4,1
    63bc:	30800015 	stw	r2,0(r6)
    63c0:	1805883a 	mov	r2,r3
    63c4:	dfc00317 	ldw	ra,12(sp)
    63c8:	dc400217 	ldw	r17,8(sp)
    63cc:	dc000117 	ldw	r16,4(sp)
    63d0:	dec00404 	addi	sp,sp,16
    63d4:	f800283a 	ret
    63d8:	8009883a 	mov	r4,r16
    63dc:	880b883a 	mov	r5,r17
    63e0:	dfc00317 	ldw	ra,12(sp)
    63e4:	dc400217 	ldw	r17,8(sp)
    63e8:	dc000117 	ldw	r16,4(sp)
    63ec:	dec00404 	addi	sp,sp,16
    63f0:	00064741 	jmpi	6474 <__swbuf_r>
    63f4:	8009883a 	mov	r4,r16
    63f8:	180b883a 	mov	r5,r3
    63fc:	003ff806 	br	63e0 <_putc_r+0xc8>

00006400 <strlen>:
    6400:	208000cc 	andi	r2,r4,3
    6404:	2011883a 	mov	r8,r4
    6408:	1000161e 	bne	r2,zero,6464 <strlen+0x64>
    640c:	20c00017 	ldw	r3,0(r4)
    6410:	017fbff4 	movhi	r5,65279
    6414:	297fbfc4 	addi	r5,r5,-257
    6418:	01e02074 	movhi	r7,32897
    641c:	39e02004 	addi	r7,r7,-32640
    6420:	1945883a 	add	r2,r3,r5
    6424:	11c4703a 	and	r2,r2,r7
    6428:	00c6303a 	nor	r3,zero,r3
    642c:	1886703a 	and	r3,r3,r2
    6430:	18000c1e 	bne	r3,zero,6464 <strlen+0x64>
    6434:	280d883a 	mov	r6,r5
    6438:	380b883a 	mov	r5,r7
    643c:	21000104 	addi	r4,r4,4
    6440:	20800017 	ldw	r2,0(r4)
    6444:	1187883a 	add	r3,r2,r6
    6448:	1946703a 	and	r3,r3,r5
    644c:	0084303a 	nor	r2,zero,r2
    6450:	10c4703a 	and	r2,r2,r3
    6454:	103ff926 	beq	r2,zero,643c <strlen+0x3c>
    6458:	20800007 	ldb	r2,0(r4)
    645c:	10000326 	beq	r2,zero,646c <strlen+0x6c>
    6460:	21000044 	addi	r4,r4,1
    6464:	20800007 	ldb	r2,0(r4)
    6468:	103ffd1e 	bne	r2,zero,6460 <strlen+0x60>
    646c:	2205c83a 	sub	r2,r4,r8
    6470:	f800283a 	ret

00006474 <__swbuf_r>:
    6474:	defffc04 	addi	sp,sp,-16
    6478:	dc400215 	stw	r17,8(sp)
    647c:	dc000115 	stw	r16,4(sp)
    6480:	dfc00315 	stw	ra,12(sp)
    6484:	2023883a 	mov	r17,r4
    6488:	2821883a 	mov	r16,r5
    648c:	20000226 	beq	r4,zero,6498 <__swbuf_r+0x24>
    6490:	20800e17 	ldw	r2,56(r4)
    6494:	10002f26 	beq	r2,zero,6554 <__swbuf_r+0xe0>
    6498:	3080030b 	ldhu	r2,12(r6)
    649c:	30c00617 	ldw	r3,24(r6)
    64a0:	1080020c 	andi	r2,r2,8
    64a4:	30c00215 	stw	r3,8(r6)
    64a8:	10002226 	beq	r2,zero,6534 <__swbuf_r+0xc0>
    64ac:	30c00417 	ldw	r3,16(r6)
    64b0:	18002026 	beq	r3,zero,6534 <__swbuf_r+0xc0>
    64b4:	31000017 	ldw	r4,0(r6)
    64b8:	30800517 	ldw	r2,20(r6)
    64bc:	20c7c83a 	sub	r3,r4,r3
    64c0:	18802f0e 	bge	r3,r2,6580 <__swbuf_r+0x10c>
    64c4:	19400044 	addi	r5,r3,1
    64c8:	30800217 	ldw	r2,8(r6)
    64cc:	84003fcc 	andi	r16,r16,255
    64d0:	20c00044 	addi	r3,r4,1
    64d4:	10bfffc4 	addi	r2,r2,-1
    64d8:	30800215 	stw	r2,8(r6)
    64dc:	24000005 	stb	r16,0(r4)
    64e0:	30800517 	ldw	r2,20(r6)
    64e4:	30c00015 	stw	r3,0(r6)
    64e8:	11400c26 	beq	r2,r5,651c <__swbuf_r+0xa8>
    64ec:	3080030b 	ldhu	r2,12(r6)
    64f0:	1080004c 	andi	r2,r2,1
    64f4:	1005003a 	cmpeq	r2,r2,zero
    64f8:	10000626 	beq	r2,zero,6514 <__swbuf_r+0xa0>
    64fc:	8005883a 	mov	r2,r16
    6500:	dfc00317 	ldw	ra,12(sp)
    6504:	dc400217 	ldw	r17,8(sp)
    6508:	dc000117 	ldw	r16,4(sp)
    650c:	dec00404 	addi	sp,sp,16
    6510:	f800283a 	ret
    6514:	00800284 	movi	r2,10
    6518:	80bff81e 	bne	r16,r2,64fc <__swbuf_r+0x88>
    651c:	8809883a 	mov	r4,r17
    6520:	300b883a 	mov	r5,r6
    6524:	00069e40 	call	69e4 <_fflush_r>
    6528:	103ff426 	beq	r2,zero,64fc <__swbuf_r+0x88>
    652c:	043fffc4 	movi	r16,-1
    6530:	003ff206 	br	64fc <__swbuf_r+0x88>
    6534:	300b883a 	mov	r5,r6
    6538:	8809883a 	mov	r4,r17
    653c:	d9800015 	stw	r6,0(sp)
    6540:	00065c00 	call	65c0 <__swsetup_r>
    6544:	d9800017 	ldw	r6,0(sp)
    6548:	1000061e 	bne	r2,zero,6564 <__swbuf_r+0xf0>
    654c:	30c00417 	ldw	r3,16(r6)
    6550:	003fd806 	br	64b4 <__swbuf_r+0x40>
    6554:	d9800015 	stw	r6,0(sp)
    6558:	0006c7c0 	call	6c7c <__sinit>
    655c:	d9800017 	ldw	r6,0(sp)
    6560:	003fcd06 	br	6498 <__swbuf_r+0x24>
    6564:	3080030b 	ldhu	r2,12(r6)
    6568:	00c00244 	movi	r3,9
    656c:	043fffc4 	movi	r16,-1
    6570:	10801014 	ori	r2,r2,64
    6574:	3080030d 	sth	r2,12(r6)
    6578:	88c00015 	stw	r3,0(r17)
    657c:	003fdf06 	br	64fc <__swbuf_r+0x88>
    6580:	300b883a 	mov	r5,r6
    6584:	8809883a 	mov	r4,r17
    6588:	d9800015 	stw	r6,0(sp)
    658c:	00069e40 	call	69e4 <_fflush_r>
    6590:	d9800017 	ldw	r6,0(sp)
    6594:	103fe51e 	bne	r2,zero,652c <__swbuf_r+0xb8>
    6598:	31000017 	ldw	r4,0(r6)
    659c:	01400044 	movi	r5,1
    65a0:	003fc906 	br	64c8 <__swbuf_r+0x54>

000065a4 <__swbuf>:
    65a4:	01800074 	movhi	r6,1
    65a8:	31a9e904 	addi	r6,r6,-22620
    65ac:	2007883a 	mov	r3,r4
    65b0:	31000017 	ldw	r4,0(r6)
    65b4:	280d883a 	mov	r6,r5
    65b8:	180b883a 	mov	r5,r3
    65bc:	00064741 	jmpi	6474 <__swbuf_r>

000065c0 <__swsetup_r>:
    65c0:	00800074 	movhi	r2,1
    65c4:	10a9e904 	addi	r2,r2,-22620
    65c8:	10c00017 	ldw	r3,0(r2)
    65cc:	defffd04 	addi	sp,sp,-12
    65d0:	dc400115 	stw	r17,4(sp)
    65d4:	dc000015 	stw	r16,0(sp)
    65d8:	dfc00215 	stw	ra,8(sp)
    65dc:	2023883a 	mov	r17,r4
    65e0:	2821883a 	mov	r16,r5
    65e4:	18000226 	beq	r3,zero,65f0 <__swsetup_r+0x30>
    65e8:	18800e17 	ldw	r2,56(r3)
    65ec:	10001f26 	beq	r2,zero,666c <__swsetup_r+0xac>
    65f0:	8100030b 	ldhu	r4,12(r16)
    65f4:	2080020c 	andi	r2,r4,8
    65f8:	10002826 	beq	r2,zero,669c <__swsetup_r+0xdc>
    65fc:	81400417 	ldw	r5,16(r16)
    6600:	28001d26 	beq	r5,zero,6678 <__swsetup_r+0xb8>
    6604:	2080004c 	andi	r2,r4,1
    6608:	1005003a 	cmpeq	r2,r2,zero
    660c:	10000b26 	beq	r2,zero,663c <__swsetup_r+0x7c>
    6610:	2080008c 	andi	r2,r4,2
    6614:	10001226 	beq	r2,zero,6660 <__swsetup_r+0xa0>
    6618:	0005883a 	mov	r2,zero
    661c:	80800215 	stw	r2,8(r16)
    6620:	28000b26 	beq	r5,zero,6650 <__swsetup_r+0x90>
    6624:	0005883a 	mov	r2,zero
    6628:	dfc00217 	ldw	ra,8(sp)
    662c:	dc400117 	ldw	r17,4(sp)
    6630:	dc000017 	ldw	r16,0(sp)
    6634:	dec00304 	addi	sp,sp,12
    6638:	f800283a 	ret
    663c:	80800517 	ldw	r2,20(r16)
    6640:	80000215 	stw	zero,8(r16)
    6644:	0085c83a 	sub	r2,zero,r2
    6648:	80800615 	stw	r2,24(r16)
    664c:	283ff51e 	bne	r5,zero,6624 <__swsetup_r+0x64>
    6650:	2080200c 	andi	r2,r4,128
    6654:	103ff326 	beq	r2,zero,6624 <__swsetup_r+0x64>
    6658:	00bfffc4 	movi	r2,-1
    665c:	003ff206 	br	6628 <__swsetup_r+0x68>
    6660:	80800517 	ldw	r2,20(r16)
    6664:	80800215 	stw	r2,8(r16)
    6668:	003fed06 	br	6620 <__swsetup_r+0x60>
    666c:	1809883a 	mov	r4,r3
    6670:	0006c7c0 	call	6c7c <__sinit>
    6674:	003fde06 	br	65f0 <__swsetup_r+0x30>
    6678:	20c0a00c 	andi	r3,r4,640
    667c:	00808004 	movi	r2,512
    6680:	18bfe026 	beq	r3,r2,6604 <__swsetup_r+0x44>
    6684:	8809883a 	mov	r4,r17
    6688:	800b883a 	mov	r5,r16
    668c:	00074940 	call	7494 <__smakebuf_r>
    6690:	8100030b 	ldhu	r4,12(r16)
    6694:	81400417 	ldw	r5,16(r16)
    6698:	003fda06 	br	6604 <__swsetup_r+0x44>
    669c:	2080040c 	andi	r2,r4,16
    66a0:	103fed26 	beq	r2,zero,6658 <__swsetup_r+0x98>
    66a4:	2080010c 	andi	r2,r4,4
    66a8:	10001226 	beq	r2,zero,66f4 <__swsetup_r+0x134>
    66ac:	81400c17 	ldw	r5,48(r16)
    66b0:	28000526 	beq	r5,zero,66c8 <__swsetup_r+0x108>
    66b4:	80801004 	addi	r2,r16,64
    66b8:	28800226 	beq	r5,r2,66c4 <__swsetup_r+0x104>
    66bc:	8809883a 	mov	r4,r17
    66c0:	00070000 	call	7000 <_free_r>
    66c4:	80000c15 	stw	zero,48(r16)
    66c8:	8080030b 	ldhu	r2,12(r16)
    66cc:	81400417 	ldw	r5,16(r16)
    66d0:	80000115 	stw	zero,4(r16)
    66d4:	10bff6cc 	andi	r2,r2,65499
    66d8:	8080030d 	sth	r2,12(r16)
    66dc:	81400015 	stw	r5,0(r16)
    66e0:	8080030b 	ldhu	r2,12(r16)
    66e4:	10800214 	ori	r2,r2,8
    66e8:	113fffcc 	andi	r4,r2,65535
    66ec:	8080030d 	sth	r2,12(r16)
    66f0:	003fc306 	br	6600 <__swsetup_r+0x40>
    66f4:	81400417 	ldw	r5,16(r16)
    66f8:	003ff906 	br	66e0 <__swsetup_r+0x120>

000066fc <__register_exitproc>:
    66fc:	defffa04 	addi	sp,sp,-24
    6700:	00800074 	movhi	r2,1
    6704:	10a9ea04 	addi	r2,r2,-22616
    6708:	dc000015 	stw	r16,0(sp)
    670c:	14000017 	ldw	r16,0(r2)
    6710:	dd000415 	stw	r20,16(sp)
    6714:	2829883a 	mov	r20,r5
    6718:	81405217 	ldw	r5,328(r16)
    671c:	dcc00315 	stw	r19,12(sp)
    6720:	dc800215 	stw	r18,8(sp)
    6724:	dc400115 	stw	r17,4(sp)
    6728:	dfc00515 	stw	ra,20(sp)
    672c:	2023883a 	mov	r17,r4
    6730:	3027883a 	mov	r19,r6
    6734:	3825883a 	mov	r18,r7
    6738:	28002526 	beq	r5,zero,67d0 <__register_exitproc+0xd4>
    673c:	29000117 	ldw	r4,4(r5)
    6740:	008007c4 	movi	r2,31
    6744:	11002716 	blt	r2,r4,67e4 <__register_exitproc+0xe8>
    6748:	8800101e 	bne	r17,zero,678c <__register_exitproc+0x90>
    674c:	2105883a 	add	r2,r4,r4
    6750:	1085883a 	add	r2,r2,r2
    6754:	20c00044 	addi	r3,r4,1
    6758:	1145883a 	add	r2,r2,r5
    675c:	0009883a 	mov	r4,zero
    6760:	15000215 	stw	r20,8(r2)
    6764:	28c00115 	stw	r3,4(r5)
    6768:	2005883a 	mov	r2,r4
    676c:	dfc00517 	ldw	ra,20(sp)
    6770:	dd000417 	ldw	r20,16(sp)
    6774:	dcc00317 	ldw	r19,12(sp)
    6778:	dc800217 	ldw	r18,8(sp)
    677c:	dc400117 	ldw	r17,4(sp)
    6780:	dc000017 	ldw	r16,0(sp)
    6784:	dec00604 	addi	sp,sp,24
    6788:	f800283a 	ret
    678c:	29802204 	addi	r6,r5,136
    6790:	00800044 	movi	r2,1
    6794:	110e983a 	sll	r7,r2,r4
    6798:	30c04017 	ldw	r3,256(r6)
    679c:	2105883a 	add	r2,r4,r4
    67a0:	1085883a 	add	r2,r2,r2
    67a4:	1185883a 	add	r2,r2,r6
    67a8:	19c6b03a 	or	r3,r3,r7
    67ac:	14802015 	stw	r18,128(r2)
    67b0:	14c00015 	stw	r19,0(r2)
    67b4:	00800084 	movi	r2,2
    67b8:	30c04015 	stw	r3,256(r6)
    67bc:	88bfe31e 	bne	r17,r2,674c <__register_exitproc+0x50>
    67c0:	30804117 	ldw	r2,260(r6)
    67c4:	11c4b03a 	or	r2,r2,r7
    67c8:	30804115 	stw	r2,260(r6)
    67cc:	003fdf06 	br	674c <__register_exitproc+0x50>
    67d0:	00800074 	movhi	r2,1
    67d4:	10b0e904 	addi	r2,r2,-15452
    67d8:	100b883a 	mov	r5,r2
    67dc:	80805215 	stw	r2,328(r16)
    67e0:	003fd606 	br	673c <__register_exitproc+0x40>
    67e4:	00800034 	movhi	r2,0
    67e8:	10800004 	addi	r2,r2,0
    67ec:	1000021e 	bne	r2,zero,67f8 <__register_exitproc+0xfc>
    67f0:	013fffc4 	movi	r4,-1
    67f4:	003fdc06 	br	6768 <__register_exitproc+0x6c>
    67f8:	01006404 	movi	r4,400
    67fc:	103ee83a 	callr	r2
    6800:	1007883a 	mov	r3,r2
    6804:	103ffa26 	beq	r2,zero,67f0 <__register_exitproc+0xf4>
    6808:	80805217 	ldw	r2,328(r16)
    680c:	180b883a 	mov	r5,r3
    6810:	18000115 	stw	zero,4(r3)
    6814:	18800015 	stw	r2,0(r3)
    6818:	80c05215 	stw	r3,328(r16)
    681c:	18006215 	stw	zero,392(r3)
    6820:	18006315 	stw	zero,396(r3)
    6824:	0009883a 	mov	r4,zero
    6828:	883fc826 	beq	r17,zero,674c <__register_exitproc+0x50>
    682c:	003fd706 	br	678c <__register_exitproc+0x90>

00006830 <register_fini>:
    6830:	f800283a 	ret

00006834 <__call_exitprocs>:
    6834:	00800074 	movhi	r2,1
    6838:	10a9ea04 	addi	r2,r2,-22616
    683c:	10800017 	ldw	r2,0(r2)
    6840:	defff304 	addi	sp,sp,-52
    6844:	df000b15 	stw	fp,44(sp)
    6848:	d8800115 	stw	r2,4(sp)
    684c:	00800034 	movhi	r2,0
    6850:	10800004 	addi	r2,r2,0
    6854:	1005003a 	cmpeq	r2,r2,zero
    6858:	d8800215 	stw	r2,8(sp)
    685c:	d8800117 	ldw	r2,4(sp)
    6860:	dd400815 	stw	r21,32(sp)
    6864:	dd000715 	stw	r20,28(sp)
    6868:	10805204 	addi	r2,r2,328
    686c:	dfc00c15 	stw	ra,48(sp)
    6870:	ddc00a15 	stw	r23,40(sp)
    6874:	dd800915 	stw	r22,36(sp)
    6878:	dcc00615 	stw	r19,24(sp)
    687c:	dc800515 	stw	r18,20(sp)
    6880:	dc400415 	stw	r17,16(sp)
    6884:	dc000315 	stw	r16,12(sp)
    6888:	282b883a 	mov	r21,r5
    688c:	2039883a 	mov	fp,r4
    6890:	d8800015 	stw	r2,0(sp)
    6894:	2829003a 	cmpeq	r20,r5,zero
    6898:	d8800117 	ldw	r2,4(sp)
    689c:	14405217 	ldw	r17,328(r2)
    68a0:	88001026 	beq	r17,zero,68e4 <__call_exitprocs+0xb0>
    68a4:	ddc00017 	ldw	r23,0(sp)
    68a8:	88800117 	ldw	r2,4(r17)
    68ac:	8c802204 	addi	r18,r17,136
    68b0:	143fffc4 	addi	r16,r2,-1
    68b4:	80000916 	blt	r16,zero,68dc <__call_exitprocs+0xa8>
    68b8:	05bfffc4 	movi	r22,-1
    68bc:	a000151e 	bne	r20,zero,6914 <__call_exitprocs+0xe0>
    68c0:	8409883a 	add	r4,r16,r16
    68c4:	2105883a 	add	r2,r4,r4
    68c8:	1485883a 	add	r2,r2,r18
    68cc:	10c02017 	ldw	r3,128(r2)
    68d0:	a8c01126 	beq	r21,r3,6918 <__call_exitprocs+0xe4>
    68d4:	843fffc4 	addi	r16,r16,-1
    68d8:	85bff81e 	bne	r16,r22,68bc <__call_exitprocs+0x88>
    68dc:	d8800217 	ldw	r2,8(sp)
    68e0:	10003126 	beq	r2,zero,69a8 <__call_exitprocs+0x174>
    68e4:	dfc00c17 	ldw	ra,48(sp)
    68e8:	df000b17 	ldw	fp,44(sp)
    68ec:	ddc00a17 	ldw	r23,40(sp)
    68f0:	dd800917 	ldw	r22,36(sp)
    68f4:	dd400817 	ldw	r21,32(sp)
    68f8:	dd000717 	ldw	r20,28(sp)
    68fc:	dcc00617 	ldw	r19,24(sp)
    6900:	dc800517 	ldw	r18,20(sp)
    6904:	dc400417 	ldw	r17,16(sp)
    6908:	dc000317 	ldw	r16,12(sp)
    690c:	dec00d04 	addi	sp,sp,52
    6910:	f800283a 	ret
    6914:	8409883a 	add	r4,r16,r16
    6918:	88c00117 	ldw	r3,4(r17)
    691c:	2105883a 	add	r2,r4,r4
    6920:	1445883a 	add	r2,r2,r17
    6924:	18ffffc4 	addi	r3,r3,-1
    6928:	11800217 	ldw	r6,8(r2)
    692c:	1c001526 	beq	r3,r16,6984 <__call_exitprocs+0x150>
    6930:	10000215 	stw	zero,8(r2)
    6934:	303fe726 	beq	r6,zero,68d4 <__call_exitprocs+0xa0>
    6938:	00c00044 	movi	r3,1
    693c:	1c06983a 	sll	r3,r3,r16
    6940:	90804017 	ldw	r2,256(r18)
    6944:	8cc00117 	ldw	r19,4(r17)
    6948:	1884703a 	and	r2,r3,r2
    694c:	10001426 	beq	r2,zero,69a0 <__call_exitprocs+0x16c>
    6950:	90804117 	ldw	r2,260(r18)
    6954:	1884703a 	and	r2,r3,r2
    6958:	10000c1e 	bne	r2,zero,698c <__call_exitprocs+0x158>
    695c:	2105883a 	add	r2,r4,r4
    6960:	1485883a 	add	r2,r2,r18
    6964:	11400017 	ldw	r5,0(r2)
    6968:	e009883a 	mov	r4,fp
    696c:	303ee83a 	callr	r6
    6970:	88800117 	ldw	r2,4(r17)
    6974:	98bfc81e 	bne	r19,r2,6898 <__call_exitprocs+0x64>
    6978:	b8800017 	ldw	r2,0(r23)
    697c:	147fd526 	beq	r2,r17,68d4 <__call_exitprocs+0xa0>
    6980:	003fc506 	br	6898 <__call_exitprocs+0x64>
    6984:	8c000115 	stw	r16,4(r17)
    6988:	003fea06 	br	6934 <__call_exitprocs+0x100>
    698c:	2105883a 	add	r2,r4,r4
    6990:	1485883a 	add	r2,r2,r18
    6994:	11000017 	ldw	r4,0(r2)
    6998:	303ee83a 	callr	r6
    699c:	003ff406 	br	6970 <__call_exitprocs+0x13c>
    69a0:	303ee83a 	callr	r6
    69a4:	003ff206 	br	6970 <__call_exitprocs+0x13c>
    69a8:	88800117 	ldw	r2,4(r17)
    69ac:	1000081e 	bne	r2,zero,69d0 <__call_exitprocs+0x19c>
    69b0:	89000017 	ldw	r4,0(r17)
    69b4:	20000726 	beq	r4,zero,69d4 <__call_exitprocs+0x1a0>
    69b8:	b9000015 	stw	r4,0(r23)
    69bc:	8809883a 	mov	r4,r17
    69c0:	00000000 	call	0 <__alt_mem_SDRAM>
    69c4:	bc400017 	ldw	r17,0(r23)
    69c8:	883fb71e 	bne	r17,zero,68a8 <__call_exitprocs+0x74>
    69cc:	003fc506 	br	68e4 <__call_exitprocs+0xb0>
    69d0:	89000017 	ldw	r4,0(r17)
    69d4:	882f883a 	mov	r23,r17
    69d8:	2023883a 	mov	r17,r4
    69dc:	883fb21e 	bne	r17,zero,68a8 <__call_exitprocs+0x74>
    69e0:	003fc006 	br	68e4 <__call_exitprocs+0xb0>

000069e4 <_fflush_r>:
    69e4:	defffb04 	addi	sp,sp,-20
    69e8:	dcc00315 	stw	r19,12(sp)
    69ec:	dc800215 	stw	r18,8(sp)
    69f0:	dfc00415 	stw	ra,16(sp)
    69f4:	dc400115 	stw	r17,4(sp)
    69f8:	dc000015 	stw	r16,0(sp)
    69fc:	2027883a 	mov	r19,r4
    6a00:	2825883a 	mov	r18,r5
    6a04:	20000226 	beq	r4,zero,6a10 <_fflush_r+0x2c>
    6a08:	20800e17 	ldw	r2,56(r4)
    6a0c:	10005626 	beq	r2,zero,6b68 <_fflush_r+0x184>
    6a10:	9100030b 	ldhu	r4,12(r18)
    6a14:	20ffffcc 	andi	r3,r4,65535
    6a18:	18e0001c 	xori	r3,r3,32768
    6a1c:	18e00004 	addi	r3,r3,-32768
    6a20:	1880020c 	andi	r2,r3,8
    6a24:	1000261e 	bne	r2,zero,6ac0 <_fflush_r+0xdc>
    6a28:	90c00117 	ldw	r3,4(r18)
    6a2c:	20820014 	ori	r2,r4,2048
    6a30:	9080030d 	sth	r2,12(r18)
    6a34:	1009883a 	mov	r4,r2
    6a38:	00c0400e 	bge	zero,r3,6b3c <_fflush_r+0x158>
    6a3c:	92000a17 	ldw	r8,40(r18)
    6a40:	40004026 	beq	r8,zero,6b44 <_fflush_r+0x160>
    6a44:	2084000c 	andi	r2,r4,4096
    6a48:	10005326 	beq	r2,zero,6b98 <_fflush_r+0x1b4>
    6a4c:	94001417 	ldw	r16,80(r18)
    6a50:	9080030b 	ldhu	r2,12(r18)
    6a54:	1080010c 	andi	r2,r2,4
    6a58:	1000481e 	bne	r2,zero,6b7c <_fflush_r+0x198>
    6a5c:	91400717 	ldw	r5,28(r18)
    6a60:	9809883a 	mov	r4,r19
    6a64:	800d883a 	mov	r6,r16
    6a68:	000f883a 	mov	r7,zero
    6a6c:	403ee83a 	callr	r8
    6a70:	8080261e 	bne	r16,r2,6b0c <_fflush_r+0x128>
    6a74:	9080030b 	ldhu	r2,12(r18)
    6a78:	91000417 	ldw	r4,16(r18)
    6a7c:	90000115 	stw	zero,4(r18)
    6a80:	10bdffcc 	andi	r2,r2,63487
    6a84:	10ffffcc 	andi	r3,r2,65535
    6a88:	18c4000c 	andi	r3,r3,4096
    6a8c:	9080030d 	sth	r2,12(r18)
    6a90:	91000015 	stw	r4,0(r18)
    6a94:	18002b26 	beq	r3,zero,6b44 <_fflush_r+0x160>
    6a98:	0007883a 	mov	r3,zero
    6a9c:	1805883a 	mov	r2,r3
    6aa0:	94001415 	stw	r16,80(r18)
    6aa4:	dfc00417 	ldw	ra,16(sp)
    6aa8:	dcc00317 	ldw	r19,12(sp)
    6aac:	dc800217 	ldw	r18,8(sp)
    6ab0:	dc400117 	ldw	r17,4(sp)
    6ab4:	dc000017 	ldw	r16,0(sp)
    6ab8:	dec00504 	addi	sp,sp,20
    6abc:	f800283a 	ret
    6ac0:	94400417 	ldw	r17,16(r18)
    6ac4:	88001f26 	beq	r17,zero,6b44 <_fflush_r+0x160>
    6ac8:	90800017 	ldw	r2,0(r18)
    6acc:	18c000cc 	andi	r3,r3,3
    6ad0:	94400015 	stw	r17,0(r18)
    6ad4:	1461c83a 	sub	r16,r2,r17
    6ad8:	18002526 	beq	r3,zero,6b70 <_fflush_r+0x18c>
    6adc:	0005883a 	mov	r2,zero
    6ae0:	90800215 	stw	r2,8(r18)
    6ae4:	0400170e 	bge	zero,r16,6b44 <_fflush_r+0x160>
    6ae8:	90c00917 	ldw	r3,36(r18)
    6aec:	91400717 	ldw	r5,28(r18)
    6af0:	880d883a 	mov	r6,r17
    6af4:	800f883a 	mov	r7,r16
    6af8:	9809883a 	mov	r4,r19
    6afc:	183ee83a 	callr	r3
    6b00:	88a3883a 	add	r17,r17,r2
    6b04:	80a1c83a 	sub	r16,r16,r2
    6b08:	00bff616 	blt	zero,r2,6ae4 <_fflush_r+0x100>
    6b0c:	9080030b 	ldhu	r2,12(r18)
    6b10:	00ffffc4 	movi	r3,-1
    6b14:	10801014 	ori	r2,r2,64
    6b18:	9080030d 	sth	r2,12(r18)
    6b1c:	1805883a 	mov	r2,r3
    6b20:	dfc00417 	ldw	ra,16(sp)
    6b24:	dcc00317 	ldw	r19,12(sp)
    6b28:	dc800217 	ldw	r18,8(sp)
    6b2c:	dc400117 	ldw	r17,4(sp)
    6b30:	dc000017 	ldw	r16,0(sp)
    6b34:	dec00504 	addi	sp,sp,20
    6b38:	f800283a 	ret
    6b3c:	90800f17 	ldw	r2,60(r18)
    6b40:	00bfbe16 	blt	zero,r2,6a3c <_fflush_r+0x58>
    6b44:	0007883a 	mov	r3,zero
    6b48:	1805883a 	mov	r2,r3
    6b4c:	dfc00417 	ldw	ra,16(sp)
    6b50:	dcc00317 	ldw	r19,12(sp)
    6b54:	dc800217 	ldw	r18,8(sp)
    6b58:	dc400117 	ldw	r17,4(sp)
    6b5c:	dc000017 	ldw	r16,0(sp)
    6b60:	dec00504 	addi	sp,sp,20
    6b64:	f800283a 	ret
    6b68:	0006c7c0 	call	6c7c <__sinit>
    6b6c:	003fa806 	br	6a10 <_fflush_r+0x2c>
    6b70:	90800517 	ldw	r2,20(r18)
    6b74:	90800215 	stw	r2,8(r18)
    6b78:	003fda06 	br	6ae4 <_fflush_r+0x100>
    6b7c:	90800117 	ldw	r2,4(r18)
    6b80:	90c00c17 	ldw	r3,48(r18)
    6b84:	80a1c83a 	sub	r16,r16,r2
    6b88:	183fb426 	beq	r3,zero,6a5c <_fflush_r+0x78>
    6b8c:	90800f17 	ldw	r2,60(r18)
    6b90:	80a1c83a 	sub	r16,r16,r2
    6b94:	003fb106 	br	6a5c <_fflush_r+0x78>
    6b98:	91400717 	ldw	r5,28(r18)
    6b9c:	9809883a 	mov	r4,r19
    6ba0:	000d883a 	mov	r6,zero
    6ba4:	01c00044 	movi	r7,1
    6ba8:	403ee83a 	callr	r8
    6bac:	1021883a 	mov	r16,r2
    6bb0:	00bfffc4 	movi	r2,-1
    6bb4:	80800226 	beq	r16,r2,6bc0 <_fflush_r+0x1dc>
    6bb8:	92000a17 	ldw	r8,40(r18)
    6bbc:	003fa406 	br	6a50 <_fflush_r+0x6c>
    6bc0:	98c00017 	ldw	r3,0(r19)
    6bc4:	00800744 	movi	r2,29
    6bc8:	18bfde26 	beq	r3,r2,6b44 <_fflush_r+0x160>
    6bcc:	9080030b 	ldhu	r2,12(r18)
    6bd0:	8007883a 	mov	r3,r16
    6bd4:	10801014 	ori	r2,r2,64
    6bd8:	9080030d 	sth	r2,12(r18)
    6bdc:	003fcf06 	br	6b1c <_fflush_r+0x138>

00006be0 <fflush>:
    6be0:	01400034 	movhi	r5,0
    6be4:	295a7904 	addi	r5,r5,27108
    6be8:	2007883a 	mov	r3,r4
    6bec:	20000526 	beq	r4,zero,6c04 <fflush+0x24>
    6bf0:	00800074 	movhi	r2,1
    6bf4:	10a9e904 	addi	r2,r2,-22620
    6bf8:	11000017 	ldw	r4,0(r2)
    6bfc:	180b883a 	mov	r5,r3
    6c00:	00069e41 	jmpi	69e4 <_fflush_r>
    6c04:	00800074 	movhi	r2,1
    6c08:	10a9ea04 	addi	r2,r2,-22616
    6c0c:	11000017 	ldw	r4,0(r2)
    6c10:	00073141 	jmpi	7314 <_fwalk_reent>

00006c14 <std>:
    6c14:	00800034 	movhi	r2,0
    6c18:	109f7604 	addi	r2,r2,32216
    6c1c:	20800b15 	stw	r2,44(r4)
    6c20:	00800034 	movhi	r2,0
    6c24:	109fb104 	addi	r2,r2,32452
    6c28:	20800815 	stw	r2,32(r4)
    6c2c:	00c00034 	movhi	r3,0
    6c30:	18df9204 	addi	r3,r3,32328
    6c34:	00800034 	movhi	r2,0
    6c38:	109f7804 	addi	r2,r2,32224
    6c3c:	2140030d 	sth	r5,12(r4)
    6c40:	2180038d 	sth	r6,14(r4)
    6c44:	20c00915 	stw	r3,36(r4)
    6c48:	20800a15 	stw	r2,40(r4)
    6c4c:	20000015 	stw	zero,0(r4)
    6c50:	20000115 	stw	zero,4(r4)
    6c54:	20000215 	stw	zero,8(r4)
    6c58:	20000415 	stw	zero,16(r4)
    6c5c:	20000515 	stw	zero,20(r4)
    6c60:	20000615 	stw	zero,24(r4)
    6c64:	21000715 	stw	r4,28(r4)
    6c68:	f800283a 	ret

00006c6c <__sfp_lock_acquire>:
    6c6c:	f800283a 	ret

00006c70 <__sfp_lock_release>:
    6c70:	f800283a 	ret

00006c74 <__sinit_lock_acquire>:
    6c74:	f800283a 	ret

00006c78 <__sinit_lock_release>:
    6c78:	f800283a 	ret

00006c7c <__sinit>:
    6c7c:	20800e17 	ldw	r2,56(r4)
    6c80:	defffd04 	addi	sp,sp,-12
    6c84:	dc400115 	stw	r17,4(sp)
    6c88:	dc000015 	stw	r16,0(sp)
    6c8c:	dfc00215 	stw	ra,8(sp)
    6c90:	04400044 	movi	r17,1
    6c94:	01400104 	movi	r5,4
    6c98:	000d883a 	mov	r6,zero
    6c9c:	2021883a 	mov	r16,r4
    6ca0:	2200bb04 	addi	r8,r4,748
    6ca4:	200f883a 	mov	r7,r4
    6ca8:	10000526 	beq	r2,zero,6cc0 <__sinit+0x44>
    6cac:	dfc00217 	ldw	ra,8(sp)
    6cb0:	dc400117 	ldw	r17,4(sp)
    6cb4:	dc000017 	ldw	r16,0(sp)
    6cb8:	dec00304 	addi	sp,sp,12
    6cbc:	f800283a 	ret
    6cc0:	21000117 	ldw	r4,4(r4)
    6cc4:	00800034 	movhi	r2,0
    6cc8:	109b5804 	addi	r2,r2,28000
    6ccc:	00c000c4 	movi	r3,3
    6cd0:	80800f15 	stw	r2,60(r16)
    6cd4:	80c0b915 	stw	r3,740(r16)
    6cd8:	8200ba15 	stw	r8,744(r16)
    6cdc:	84400e15 	stw	r17,56(r16)
    6ce0:	8000b815 	stw	zero,736(r16)
    6ce4:	0006c140 	call	6c14 <std>
    6ce8:	81000217 	ldw	r4,8(r16)
    6cec:	880d883a 	mov	r6,r17
    6cf0:	800f883a 	mov	r7,r16
    6cf4:	01400284 	movi	r5,10
    6cf8:	0006c140 	call	6c14 <std>
    6cfc:	81000317 	ldw	r4,12(r16)
    6d00:	800f883a 	mov	r7,r16
    6d04:	01400484 	movi	r5,18
    6d08:	01800084 	movi	r6,2
    6d0c:	dfc00217 	ldw	ra,8(sp)
    6d10:	dc400117 	ldw	r17,4(sp)
    6d14:	dc000017 	ldw	r16,0(sp)
    6d18:	dec00304 	addi	sp,sp,12
    6d1c:	0006c141 	jmpi	6c14 <std>

00006d20 <__fp_lock>:
    6d20:	0005883a 	mov	r2,zero
    6d24:	f800283a 	ret

00006d28 <__fp_unlock>:
    6d28:	0005883a 	mov	r2,zero
    6d2c:	f800283a 	ret

00006d30 <__fp_unlock_all>:
    6d30:	00800074 	movhi	r2,1
    6d34:	10a9e904 	addi	r2,r2,-22620
    6d38:	11000017 	ldw	r4,0(r2)
    6d3c:	01400034 	movhi	r5,0
    6d40:	295b4a04 	addi	r5,r5,27944
    6d44:	00073dc1 	jmpi	73dc <_fwalk>

00006d48 <__fp_lock_all>:
    6d48:	00800074 	movhi	r2,1
    6d4c:	10a9e904 	addi	r2,r2,-22620
    6d50:	11000017 	ldw	r4,0(r2)
    6d54:	01400034 	movhi	r5,0
    6d58:	295b4804 	addi	r5,r5,27936
    6d5c:	00073dc1 	jmpi	73dc <_fwalk>

00006d60 <_cleanup_r>:
    6d60:	01400074 	movhi	r5,1
    6d64:	29604704 	addi	r5,r5,-32484
    6d68:	00073dc1 	jmpi	73dc <_fwalk>

00006d6c <_cleanup>:
    6d6c:	00800074 	movhi	r2,1
    6d70:	10a9ea04 	addi	r2,r2,-22616
    6d74:	11000017 	ldw	r4,0(r2)
    6d78:	0006d601 	jmpi	6d60 <_cleanup_r>

00006d7c <__sfmoreglue>:
    6d7c:	defffc04 	addi	sp,sp,-16
    6d80:	dc400115 	stw	r17,4(sp)
    6d84:	2c401724 	muli	r17,r5,92
    6d88:	dc800215 	stw	r18,8(sp)
    6d8c:	2825883a 	mov	r18,r5
    6d90:	89400304 	addi	r5,r17,12
    6d94:	dc000015 	stw	r16,0(sp)
    6d98:	dfc00315 	stw	ra,12(sp)
    6d9c:	00076280 	call	7628 <_malloc_r>
    6da0:	0021883a 	mov	r16,zero
    6da4:	880d883a 	mov	r6,r17
    6da8:	000b883a 	mov	r5,zero
    6dac:	10000626 	beq	r2,zero,6dc8 <__sfmoreglue+0x4c>
    6db0:	11000304 	addi	r4,r2,12
    6db4:	14800115 	stw	r18,4(r2)
    6db8:	10000015 	stw	zero,0(r2)
    6dbc:	11000215 	stw	r4,8(r2)
    6dc0:	1021883a 	mov	r16,r2
    6dc4:	00039800 	call	3980 <memset>
    6dc8:	8005883a 	mov	r2,r16
    6dcc:	dfc00317 	ldw	ra,12(sp)
    6dd0:	dc800217 	ldw	r18,8(sp)
    6dd4:	dc400117 	ldw	r17,4(sp)
    6dd8:	dc000017 	ldw	r16,0(sp)
    6ddc:	dec00404 	addi	sp,sp,16
    6de0:	f800283a 	ret

00006de4 <__sfp>:
    6de4:	defffd04 	addi	sp,sp,-12
    6de8:	00800074 	movhi	r2,1
    6dec:	10a9ea04 	addi	r2,r2,-22616
    6df0:	dc000015 	stw	r16,0(sp)
    6df4:	14000017 	ldw	r16,0(r2)
    6df8:	dc400115 	stw	r17,4(sp)
    6dfc:	dfc00215 	stw	ra,8(sp)
    6e00:	80800e17 	ldw	r2,56(r16)
    6e04:	2023883a 	mov	r17,r4
    6e08:	10002626 	beq	r2,zero,6ea4 <__sfp+0xc0>
    6e0c:	8400b804 	addi	r16,r16,736
    6e10:	80800117 	ldw	r2,4(r16)
    6e14:	81000217 	ldw	r4,8(r16)
    6e18:	10ffffc4 	addi	r3,r2,-1
    6e1c:	18000916 	blt	r3,zero,6e44 <__sfp+0x60>
    6e20:	2080030f 	ldh	r2,12(r4)
    6e24:	10000b26 	beq	r2,zero,6e54 <__sfp+0x70>
    6e28:	017fffc4 	movi	r5,-1
    6e2c:	00000206 	br	6e38 <__sfp+0x54>
    6e30:	2080030f 	ldh	r2,12(r4)
    6e34:	10000726 	beq	r2,zero,6e54 <__sfp+0x70>
    6e38:	18ffffc4 	addi	r3,r3,-1
    6e3c:	21001704 	addi	r4,r4,92
    6e40:	197ffb1e 	bne	r3,r5,6e30 <__sfp+0x4c>
    6e44:	80800017 	ldw	r2,0(r16)
    6e48:	10001926 	beq	r2,zero,6eb0 <__sfp+0xcc>
    6e4c:	1021883a 	mov	r16,r2
    6e50:	003fef06 	br	6e10 <__sfp+0x2c>
    6e54:	00bfffc4 	movi	r2,-1
    6e58:	00c00044 	movi	r3,1
    6e5c:	2080038d 	sth	r2,14(r4)
    6e60:	20c0030d 	sth	r3,12(r4)
    6e64:	20000015 	stw	zero,0(r4)
    6e68:	20000215 	stw	zero,8(r4)
    6e6c:	20000115 	stw	zero,4(r4)
    6e70:	20000415 	stw	zero,16(r4)
    6e74:	20000515 	stw	zero,20(r4)
    6e78:	20000615 	stw	zero,24(r4)
    6e7c:	20000c15 	stw	zero,48(r4)
    6e80:	20000d15 	stw	zero,52(r4)
    6e84:	20001115 	stw	zero,68(r4)
    6e88:	20001215 	stw	zero,72(r4)
    6e8c:	2005883a 	mov	r2,r4
    6e90:	dfc00217 	ldw	ra,8(sp)
    6e94:	dc400117 	ldw	r17,4(sp)
    6e98:	dc000017 	ldw	r16,0(sp)
    6e9c:	dec00304 	addi	sp,sp,12
    6ea0:	f800283a 	ret
    6ea4:	8009883a 	mov	r4,r16
    6ea8:	0006c7c0 	call	6c7c <__sinit>
    6eac:	003fd706 	br	6e0c <__sfp+0x28>
    6eb0:	8809883a 	mov	r4,r17
    6eb4:	01400104 	movi	r5,4
    6eb8:	0006d7c0 	call	6d7c <__sfmoreglue>
    6ebc:	80800015 	stw	r2,0(r16)
    6ec0:	103fe21e 	bne	r2,zero,6e4c <__sfp+0x68>
    6ec4:	00800304 	movi	r2,12
    6ec8:	0009883a 	mov	r4,zero
    6ecc:	88800015 	stw	r2,0(r17)
    6ed0:	003fee06 	br	6e8c <__sfp+0xa8>

00006ed4 <_malloc_trim_r>:
    6ed4:	defffb04 	addi	sp,sp,-20
    6ed8:	dcc00315 	stw	r19,12(sp)
    6edc:	04c00074 	movhi	r19,1
    6ee0:	9ce8e604 	addi	r19,r19,-23656
    6ee4:	dc800215 	stw	r18,8(sp)
    6ee8:	dc400115 	stw	r17,4(sp)
    6eec:	dc000015 	stw	r16,0(sp)
    6ef0:	2823883a 	mov	r17,r5
    6ef4:	2025883a 	mov	r18,r4
    6ef8:	dfc00415 	stw	ra,16(sp)
    6efc:	00087080 	call	8708 <__malloc_lock>
    6f00:	98800217 	ldw	r2,8(r19)
    6f04:	9009883a 	mov	r4,r18
    6f08:	000b883a 	mov	r5,zero
    6f0c:	10c00117 	ldw	r3,4(r2)
    6f10:	00bfff04 	movi	r2,-4
    6f14:	18a0703a 	and	r16,r3,r2
    6f18:	8463c83a 	sub	r17,r16,r17
    6f1c:	8c43fbc4 	addi	r17,r17,4079
    6f20:	8822d33a 	srli	r17,r17,12
    6f24:	0083ffc4 	movi	r2,4095
    6f28:	8c7fffc4 	addi	r17,r17,-1
    6f2c:	8822933a 	slli	r17,r17,12
    6f30:	1440060e 	bge	r2,r17,6f4c <_malloc_trim_r+0x78>
    6f34:	0007d680 	call	7d68 <_sbrk_r>
    6f38:	98c00217 	ldw	r3,8(r19)
    6f3c:	9009883a 	mov	r4,r18
    6f40:	044bc83a 	sub	r5,zero,r17
    6f44:	80c7883a 	add	r3,r16,r3
    6f48:	10c00926 	beq	r2,r3,6f70 <_malloc_trim_r+0x9c>
    6f4c:	00087280 	call	8728 <__malloc_unlock>
    6f50:	0005883a 	mov	r2,zero
    6f54:	dfc00417 	ldw	ra,16(sp)
    6f58:	dcc00317 	ldw	r19,12(sp)
    6f5c:	dc800217 	ldw	r18,8(sp)
    6f60:	dc400117 	ldw	r17,4(sp)
    6f64:	dc000017 	ldw	r16,0(sp)
    6f68:	dec00504 	addi	sp,sp,20
    6f6c:	f800283a 	ret
    6f70:	9009883a 	mov	r4,r18
    6f74:	0007d680 	call	7d68 <_sbrk_r>
    6f78:	844dc83a 	sub	r6,r16,r17
    6f7c:	00ffffc4 	movi	r3,-1
    6f80:	9009883a 	mov	r4,r18
    6f84:	000b883a 	mov	r5,zero
    6f88:	01c00074 	movhi	r7,1
    6f8c:	39f09f04 	addi	r7,r7,-15748
    6f90:	31800054 	ori	r6,r6,1
    6f94:	10c00926 	beq	r2,r3,6fbc <_malloc_trim_r+0xe8>
    6f98:	38800017 	ldw	r2,0(r7)
    6f9c:	98c00217 	ldw	r3,8(r19)
    6fa0:	9009883a 	mov	r4,r18
    6fa4:	1445c83a 	sub	r2,r2,r17
    6fa8:	38800015 	stw	r2,0(r7)
    6fac:	19800115 	stw	r6,4(r3)
    6fb0:	00087280 	call	8728 <__malloc_unlock>
    6fb4:	00800044 	movi	r2,1
    6fb8:	003fe606 	br	6f54 <_malloc_trim_r+0x80>
    6fbc:	0007d680 	call	7d68 <_sbrk_r>
    6fc0:	99800217 	ldw	r6,8(r19)
    6fc4:	100f883a 	mov	r7,r2
    6fc8:	9009883a 	mov	r4,r18
    6fcc:	1187c83a 	sub	r3,r2,r6
    6fd0:	008003c4 	movi	r2,15
    6fd4:	19400054 	ori	r5,r3,1
    6fd8:	10ffdc0e 	bge	r2,r3,6f4c <_malloc_trim_r+0x78>
    6fdc:	00800074 	movhi	r2,1
    6fe0:	10a9f504 	addi	r2,r2,-22572
    6fe4:	10c00017 	ldw	r3,0(r2)
    6fe8:	00800074 	movhi	r2,1
    6fec:	10b09f04 	addi	r2,r2,-15748
    6ff0:	31400115 	stw	r5,4(r6)
    6ff4:	38c7c83a 	sub	r3,r7,r3
    6ff8:	10c00015 	stw	r3,0(r2)
    6ffc:	003fd306 	br	6f4c <_malloc_trim_r+0x78>

00007000 <_free_r>:
    7000:	defffd04 	addi	sp,sp,-12
    7004:	dc400115 	stw	r17,4(sp)
    7008:	dc000015 	stw	r16,0(sp)
    700c:	dfc00215 	stw	ra,8(sp)
    7010:	2821883a 	mov	r16,r5
    7014:	2023883a 	mov	r17,r4
    7018:	28005a26 	beq	r5,zero,7184 <_free_r+0x184>
    701c:	00087080 	call	8708 <__malloc_lock>
    7020:	823ffe04 	addi	r8,r16,-8
    7024:	41400117 	ldw	r5,4(r8)
    7028:	00bfff84 	movi	r2,-2
    702c:	02800074 	movhi	r10,1
    7030:	52a8e604 	addi	r10,r10,-23656
    7034:	288e703a 	and	r7,r5,r2
    7038:	41cd883a 	add	r6,r8,r7
    703c:	30c00117 	ldw	r3,4(r6)
    7040:	51000217 	ldw	r4,8(r10)
    7044:	00bfff04 	movi	r2,-4
    7048:	1892703a 	and	r9,r3,r2
    704c:	5017883a 	mov	r11,r10
    7050:	31006726 	beq	r6,r4,71f0 <_free_r+0x1f0>
    7054:	2880004c 	andi	r2,r5,1
    7058:	1005003a 	cmpeq	r2,r2,zero
    705c:	32400115 	stw	r9,4(r6)
    7060:	10001a1e 	bne	r2,zero,70cc <_free_r+0xcc>
    7064:	000b883a 	mov	r5,zero
    7068:	3247883a 	add	r3,r6,r9
    706c:	18800117 	ldw	r2,4(r3)
    7070:	1080004c 	andi	r2,r2,1
    7074:	1000231e 	bne	r2,zero,7104 <_free_r+0x104>
    7078:	280ac03a 	cmpne	r5,r5,zero
    707c:	3a4f883a 	add	r7,r7,r9
    7080:	2800451e 	bne	r5,zero,7198 <_free_r+0x198>
    7084:	31000217 	ldw	r4,8(r6)
    7088:	00800074 	movhi	r2,1
    708c:	10a8e804 	addi	r2,r2,-23648
    7090:	20807b26 	beq	r4,r2,7280 <_free_r+0x280>
    7094:	30800317 	ldw	r2,12(r6)
    7098:	3a07883a 	add	r3,r7,r8
    709c:	19c00015 	stw	r7,0(r3)
    70a0:	11000215 	stw	r4,8(r2)
    70a4:	20800315 	stw	r2,12(r4)
    70a8:	38800054 	ori	r2,r7,1
    70ac:	40800115 	stw	r2,4(r8)
    70b0:	28001a26 	beq	r5,zero,711c <_free_r+0x11c>
    70b4:	8809883a 	mov	r4,r17
    70b8:	dfc00217 	ldw	ra,8(sp)
    70bc:	dc400117 	ldw	r17,4(sp)
    70c0:	dc000017 	ldw	r16,0(sp)
    70c4:	dec00304 	addi	sp,sp,12
    70c8:	00087281 	jmpi	8728 <__malloc_unlock>
    70cc:	80bffe17 	ldw	r2,-8(r16)
    70d0:	50c00204 	addi	r3,r10,8
    70d4:	4091c83a 	sub	r8,r8,r2
    70d8:	41000217 	ldw	r4,8(r8)
    70dc:	388f883a 	add	r7,r7,r2
    70e0:	20c06126 	beq	r4,r3,7268 <_free_r+0x268>
    70e4:	40800317 	ldw	r2,12(r8)
    70e8:	3247883a 	add	r3,r6,r9
    70ec:	000b883a 	mov	r5,zero
    70f0:	11000215 	stw	r4,8(r2)
    70f4:	20800315 	stw	r2,12(r4)
    70f8:	18800117 	ldw	r2,4(r3)
    70fc:	1080004c 	andi	r2,r2,1
    7100:	103fdd26 	beq	r2,zero,7078 <_free_r+0x78>
    7104:	38800054 	ori	r2,r7,1
    7108:	3a07883a 	add	r3,r7,r8
    710c:	280ac03a 	cmpne	r5,r5,zero
    7110:	40800115 	stw	r2,4(r8)
    7114:	19c00015 	stw	r7,0(r3)
    7118:	283fe61e 	bne	r5,zero,70b4 <_free_r+0xb4>
    711c:	00807fc4 	movi	r2,511
    7120:	11c01f2e 	bgeu	r2,r7,71a0 <_free_r+0x1a0>
    7124:	3806d27a 	srli	r3,r7,9
    7128:	1800481e 	bne	r3,zero,724c <_free_r+0x24c>
    712c:	3804d0fa 	srli	r2,r7,3
    7130:	100690fa 	slli	r3,r2,3
    7134:	1acd883a 	add	r6,r3,r11
    7138:	31400217 	ldw	r5,8(r6)
    713c:	31405926 	beq	r6,r5,72a4 <_free_r+0x2a4>
    7140:	28800117 	ldw	r2,4(r5)
    7144:	00ffff04 	movi	r3,-4
    7148:	10c4703a 	and	r2,r2,r3
    714c:	3880022e 	bgeu	r7,r2,7158 <_free_r+0x158>
    7150:	29400217 	ldw	r5,8(r5)
    7154:	317ffa1e 	bne	r6,r5,7140 <_free_r+0x140>
    7158:	29800317 	ldw	r6,12(r5)
    715c:	41800315 	stw	r6,12(r8)
    7160:	41400215 	stw	r5,8(r8)
    7164:	8809883a 	mov	r4,r17
    7168:	2a000315 	stw	r8,12(r5)
    716c:	32000215 	stw	r8,8(r6)
    7170:	dfc00217 	ldw	ra,8(sp)
    7174:	dc400117 	ldw	r17,4(sp)
    7178:	dc000017 	ldw	r16,0(sp)
    717c:	dec00304 	addi	sp,sp,12
    7180:	00087281 	jmpi	8728 <__malloc_unlock>
    7184:	dfc00217 	ldw	ra,8(sp)
    7188:	dc400117 	ldw	r17,4(sp)
    718c:	dc000017 	ldw	r16,0(sp)
    7190:	dec00304 	addi	sp,sp,12
    7194:	f800283a 	ret
    7198:	31000217 	ldw	r4,8(r6)
    719c:	003fbd06 	br	7094 <_free_r+0x94>
    71a0:	3806d0fa 	srli	r3,r7,3
    71a4:	00800044 	movi	r2,1
    71a8:	51400117 	ldw	r5,4(r10)
    71ac:	180890fa 	slli	r4,r3,3
    71b0:	1807d0ba 	srai	r3,r3,2
    71b4:	22c9883a 	add	r4,r4,r11
    71b8:	21800217 	ldw	r6,8(r4)
    71bc:	10c4983a 	sll	r2,r2,r3
    71c0:	41000315 	stw	r4,12(r8)
    71c4:	41800215 	stw	r6,8(r8)
    71c8:	288ab03a 	or	r5,r5,r2
    71cc:	22000215 	stw	r8,8(r4)
    71d0:	8809883a 	mov	r4,r17
    71d4:	51400115 	stw	r5,4(r10)
    71d8:	32000315 	stw	r8,12(r6)
    71dc:	dfc00217 	ldw	ra,8(sp)
    71e0:	dc400117 	ldw	r17,4(sp)
    71e4:	dc000017 	ldw	r16,0(sp)
    71e8:	dec00304 	addi	sp,sp,12
    71ec:	00087281 	jmpi	8728 <__malloc_unlock>
    71f0:	2880004c 	andi	r2,r5,1
    71f4:	3a4d883a 	add	r6,r7,r9
    71f8:	1000071e 	bne	r2,zero,7218 <_free_r+0x218>
    71fc:	80bffe17 	ldw	r2,-8(r16)
    7200:	4091c83a 	sub	r8,r8,r2
    7204:	41000317 	ldw	r4,12(r8)
    7208:	40c00217 	ldw	r3,8(r8)
    720c:	308d883a 	add	r6,r6,r2
    7210:	20c00215 	stw	r3,8(r4)
    7214:	19000315 	stw	r4,12(r3)
    7218:	00800074 	movhi	r2,1
    721c:	10a9f404 	addi	r2,r2,-22576
    7220:	11000017 	ldw	r4,0(r2)
    7224:	30c00054 	ori	r3,r6,1
    7228:	52000215 	stw	r8,8(r10)
    722c:	40c00115 	stw	r3,4(r8)
    7230:	313fa036 	bltu	r6,r4,70b4 <_free_r+0xb4>
    7234:	00800074 	movhi	r2,1
    7238:	10b09c04 	addi	r2,r2,-15760
    723c:	11400017 	ldw	r5,0(r2)
    7240:	8809883a 	mov	r4,r17
    7244:	0006ed40 	call	6ed4 <_malloc_trim_r>
    7248:	003f9a06 	br	70b4 <_free_r+0xb4>
    724c:	00800104 	movi	r2,4
    7250:	10c0072e 	bgeu	r2,r3,7270 <_free_r+0x270>
    7254:	00800504 	movi	r2,20
    7258:	10c01936 	bltu	r2,r3,72c0 <_free_r+0x2c0>
    725c:	188016c4 	addi	r2,r3,91
    7260:	100690fa 	slli	r3,r2,3
    7264:	003fb306 	br	7134 <_free_r+0x134>
    7268:	01400044 	movi	r5,1
    726c:	003f7e06 	br	7068 <_free_r+0x68>
    7270:	3804d1ba 	srli	r2,r7,6
    7274:	10800e04 	addi	r2,r2,56
    7278:	100690fa 	slli	r3,r2,3
    727c:	003fad06 	br	7134 <_free_r+0x134>
    7280:	22000315 	stw	r8,12(r4)
    7284:	22000215 	stw	r8,8(r4)
    7288:	3a05883a 	add	r2,r7,r8
    728c:	38c00054 	ori	r3,r7,1
    7290:	11c00015 	stw	r7,0(r2)
    7294:	41000215 	stw	r4,8(r8)
    7298:	40c00115 	stw	r3,4(r8)
    729c:	41000315 	stw	r4,12(r8)
    72a0:	003f8406 	br	70b4 <_free_r+0xb4>
    72a4:	1005d0ba 	srai	r2,r2,2
    72a8:	00c00044 	movi	r3,1
    72ac:	51000117 	ldw	r4,4(r10)
    72b0:	1886983a 	sll	r3,r3,r2
    72b4:	20c8b03a 	or	r4,r4,r3
    72b8:	51000115 	stw	r4,4(r10)
    72bc:	003fa706 	br	715c <_free_r+0x15c>
    72c0:	00801504 	movi	r2,84
    72c4:	10c00436 	bltu	r2,r3,72d8 <_free_r+0x2d8>
    72c8:	3804d33a 	srli	r2,r7,12
    72cc:	10801b84 	addi	r2,r2,110
    72d0:	100690fa 	slli	r3,r2,3
    72d4:	003f9706 	br	7134 <_free_r+0x134>
    72d8:	00805504 	movi	r2,340
    72dc:	10c00436 	bltu	r2,r3,72f0 <_free_r+0x2f0>
    72e0:	3804d3fa 	srli	r2,r7,15
    72e4:	10801dc4 	addi	r2,r2,119
    72e8:	100690fa 	slli	r3,r2,3
    72ec:	003f9106 	br	7134 <_free_r+0x134>
    72f0:	00815504 	movi	r2,1364
    72f4:	10c0032e 	bgeu	r2,r3,7304 <_free_r+0x304>
    72f8:	00801f84 	movi	r2,126
    72fc:	00c0fc04 	movi	r3,1008
    7300:	003f8c06 	br	7134 <_free_r+0x134>
    7304:	3804d4ba 	srli	r2,r7,18
    7308:	10801f04 	addi	r2,r2,124
    730c:	100690fa 	slli	r3,r2,3
    7310:	003f8806 	br	7134 <_free_r+0x134>

00007314 <_fwalk_reent>:
    7314:	defff704 	addi	sp,sp,-36
    7318:	dcc00315 	stw	r19,12(sp)
    731c:	24c0b804 	addi	r19,r4,736
    7320:	dd800615 	stw	r22,24(sp)
    7324:	dd400515 	stw	r21,20(sp)
    7328:	dfc00815 	stw	ra,32(sp)
    732c:	ddc00715 	stw	r23,28(sp)
    7330:	dd000415 	stw	r20,16(sp)
    7334:	dc800215 	stw	r18,8(sp)
    7338:	dc400115 	stw	r17,4(sp)
    733c:	dc000015 	stw	r16,0(sp)
    7340:	202b883a 	mov	r21,r4
    7344:	282d883a 	mov	r22,r5
    7348:	0006c6c0 	call	6c6c <__sfp_lock_acquire>
    734c:	98002126 	beq	r19,zero,73d4 <_fwalk_reent+0xc0>
    7350:	002f883a 	mov	r23,zero
    7354:	9c800117 	ldw	r18,4(r19)
    7358:	9c000217 	ldw	r16,8(r19)
    735c:	90bfffc4 	addi	r2,r18,-1
    7360:	10000d16 	blt	r2,zero,7398 <_fwalk_reent+0x84>
    7364:	0023883a 	mov	r17,zero
    7368:	053fffc4 	movi	r20,-1
    736c:	8080030f 	ldh	r2,12(r16)
    7370:	8c400044 	addi	r17,r17,1
    7374:	10000626 	beq	r2,zero,7390 <_fwalk_reent+0x7c>
    7378:	8080038f 	ldh	r2,14(r16)
    737c:	800b883a 	mov	r5,r16
    7380:	a809883a 	mov	r4,r21
    7384:	15000226 	beq	r2,r20,7390 <_fwalk_reent+0x7c>
    7388:	b03ee83a 	callr	r22
    738c:	b8aeb03a 	or	r23,r23,r2
    7390:	84001704 	addi	r16,r16,92
    7394:	947ff51e 	bne	r18,r17,736c <_fwalk_reent+0x58>
    7398:	9cc00017 	ldw	r19,0(r19)
    739c:	983fed1e 	bne	r19,zero,7354 <_fwalk_reent+0x40>
    73a0:	0006c700 	call	6c70 <__sfp_lock_release>
    73a4:	b805883a 	mov	r2,r23
    73a8:	dfc00817 	ldw	ra,32(sp)
    73ac:	ddc00717 	ldw	r23,28(sp)
    73b0:	dd800617 	ldw	r22,24(sp)
    73b4:	dd400517 	ldw	r21,20(sp)
    73b8:	dd000417 	ldw	r20,16(sp)
    73bc:	dcc00317 	ldw	r19,12(sp)
    73c0:	dc800217 	ldw	r18,8(sp)
    73c4:	dc400117 	ldw	r17,4(sp)
    73c8:	dc000017 	ldw	r16,0(sp)
    73cc:	dec00904 	addi	sp,sp,36
    73d0:	f800283a 	ret
    73d4:	002f883a 	mov	r23,zero
    73d8:	003ff106 	br	73a0 <_fwalk_reent+0x8c>

000073dc <_fwalk>:
    73dc:	defff804 	addi	sp,sp,-32
    73e0:	dcc00315 	stw	r19,12(sp)
    73e4:	24c0b804 	addi	r19,r4,736
    73e8:	dd400515 	stw	r21,20(sp)
    73ec:	dfc00715 	stw	ra,28(sp)
    73f0:	dd800615 	stw	r22,24(sp)
    73f4:	dd000415 	stw	r20,16(sp)
    73f8:	dc800215 	stw	r18,8(sp)
    73fc:	dc400115 	stw	r17,4(sp)
    7400:	dc000015 	stw	r16,0(sp)
    7404:	282b883a 	mov	r21,r5
    7408:	0006c6c0 	call	6c6c <__sfp_lock_acquire>
    740c:	98001f26 	beq	r19,zero,748c <_fwalk+0xb0>
    7410:	002d883a 	mov	r22,zero
    7414:	9c800117 	ldw	r18,4(r19)
    7418:	9c000217 	ldw	r16,8(r19)
    741c:	90bfffc4 	addi	r2,r18,-1
    7420:	10000c16 	blt	r2,zero,7454 <_fwalk+0x78>
    7424:	0023883a 	mov	r17,zero
    7428:	053fffc4 	movi	r20,-1
    742c:	8080030f 	ldh	r2,12(r16)
    7430:	8c400044 	addi	r17,r17,1
    7434:	10000526 	beq	r2,zero,744c <_fwalk+0x70>
    7438:	8080038f 	ldh	r2,14(r16)
    743c:	8009883a 	mov	r4,r16
    7440:	15000226 	beq	r2,r20,744c <_fwalk+0x70>
    7444:	a83ee83a 	callr	r21
    7448:	b0acb03a 	or	r22,r22,r2
    744c:	84001704 	addi	r16,r16,92
    7450:	947ff61e 	bne	r18,r17,742c <_fwalk+0x50>
    7454:	9cc00017 	ldw	r19,0(r19)
    7458:	983fee1e 	bne	r19,zero,7414 <_fwalk+0x38>
    745c:	0006c700 	call	6c70 <__sfp_lock_release>
    7460:	b005883a 	mov	r2,r22
    7464:	dfc00717 	ldw	ra,28(sp)
    7468:	dd800617 	ldw	r22,24(sp)
    746c:	dd400517 	ldw	r21,20(sp)
    7470:	dd000417 	ldw	r20,16(sp)
    7474:	dcc00317 	ldw	r19,12(sp)
    7478:	dc800217 	ldw	r18,8(sp)
    747c:	dc400117 	ldw	r17,4(sp)
    7480:	dc000017 	ldw	r16,0(sp)
    7484:	dec00804 	addi	sp,sp,32
    7488:	f800283a 	ret
    748c:	002d883a 	mov	r22,zero
    7490:	003ff206 	br	745c <_fwalk+0x80>

00007494 <__smakebuf_r>:
    7494:	2880030b 	ldhu	r2,12(r5)
    7498:	deffed04 	addi	sp,sp,-76
    749c:	dc401015 	stw	r17,64(sp)
    74a0:	1080008c 	andi	r2,r2,2
    74a4:	dc000f15 	stw	r16,60(sp)
    74a8:	dfc01215 	stw	ra,72(sp)
    74ac:	dc801115 	stw	r18,68(sp)
    74b0:	2821883a 	mov	r16,r5
    74b4:	2023883a 	mov	r17,r4
    74b8:	10000b26 	beq	r2,zero,74e8 <__smakebuf_r+0x54>
    74bc:	28c010c4 	addi	r3,r5,67
    74c0:	00800044 	movi	r2,1
    74c4:	28800515 	stw	r2,20(r5)
    74c8:	28c00415 	stw	r3,16(r5)
    74cc:	28c00015 	stw	r3,0(r5)
    74d0:	dfc01217 	ldw	ra,72(sp)
    74d4:	dc801117 	ldw	r18,68(sp)
    74d8:	dc401017 	ldw	r17,64(sp)
    74dc:	dc000f17 	ldw	r16,60(sp)
    74e0:	dec01304 	addi	sp,sp,76
    74e4:	f800283a 	ret
    74e8:	2940038f 	ldh	r5,14(r5)
    74ec:	28002116 	blt	r5,zero,7574 <__smakebuf_r+0xe0>
    74f0:	d80d883a 	mov	r6,sp
    74f4:	00081300 	call	8130 <_fstat_r>
    74f8:	10001e16 	blt	r2,zero,7574 <__smakebuf_r+0xe0>
    74fc:	d8800117 	ldw	r2,4(sp)
    7500:	00e00014 	movui	r3,32768
    7504:	113c000c 	andi	r4,r2,61440
    7508:	20c03126 	beq	r4,r3,75d0 <__smakebuf_r+0x13c>
    750c:	8080030b 	ldhu	r2,12(r16)
    7510:	00c80004 	movi	r3,8192
    7514:	10820014 	ori	r2,r2,2048
    7518:	8080030d 	sth	r2,12(r16)
    751c:	20c01e26 	beq	r4,r3,7598 <__smakebuf_r+0x104>
    7520:	04810004 	movi	r18,1024
    7524:	8809883a 	mov	r4,r17
    7528:	900b883a 	mov	r5,r18
    752c:	00076280 	call	7628 <_malloc_r>
    7530:	1009883a 	mov	r4,r2
    7534:	10003126 	beq	r2,zero,75fc <__smakebuf_r+0x168>
    7538:	80c0030b 	ldhu	r3,12(r16)
    753c:	00800034 	movhi	r2,0
    7540:	109b5804 	addi	r2,r2,28000
    7544:	88800f15 	stw	r2,60(r17)
    7548:	18c02014 	ori	r3,r3,128
    754c:	84800515 	stw	r18,20(r16)
    7550:	80c0030d 	sth	r3,12(r16)
    7554:	81000415 	stw	r4,16(r16)
    7558:	81000015 	stw	r4,0(r16)
    755c:	dfc01217 	ldw	ra,72(sp)
    7560:	dc801117 	ldw	r18,68(sp)
    7564:	dc401017 	ldw	r17,64(sp)
    7568:	dc000f17 	ldw	r16,60(sp)
    756c:	dec01304 	addi	sp,sp,76
    7570:	f800283a 	ret
    7574:	80c0030b 	ldhu	r3,12(r16)
    7578:	1880200c 	andi	r2,r3,128
    757c:	10000426 	beq	r2,zero,7590 <__smakebuf_r+0xfc>
    7580:	04801004 	movi	r18,64
    7584:	18820014 	ori	r2,r3,2048
    7588:	8080030d 	sth	r2,12(r16)
    758c:	003fe506 	br	7524 <__smakebuf_r+0x90>
    7590:	04810004 	movi	r18,1024
    7594:	003ffb06 	br	7584 <__smakebuf_r+0xf0>
    7598:	8140038f 	ldh	r5,14(r16)
    759c:	8809883a 	mov	r4,r17
    75a0:	00081a40 	call	81a4 <_isatty_r>
    75a4:	103fde26 	beq	r2,zero,7520 <__smakebuf_r+0x8c>
    75a8:	8080030b 	ldhu	r2,12(r16)
    75ac:	80c010c4 	addi	r3,r16,67
    75b0:	04810004 	movi	r18,1024
    75b4:	10800054 	ori	r2,r2,1
    75b8:	8080030d 	sth	r2,12(r16)
    75bc:	00800044 	movi	r2,1
    75c0:	80c00415 	stw	r3,16(r16)
    75c4:	80800515 	stw	r2,20(r16)
    75c8:	80c00015 	stw	r3,0(r16)
    75cc:	003fd506 	br	7524 <__smakebuf_r+0x90>
    75d0:	80c00a17 	ldw	r3,40(r16)
    75d4:	00800034 	movhi	r2,0
    75d8:	109f7804 	addi	r2,r2,32224
    75dc:	18bfcb1e 	bne	r3,r2,750c <__smakebuf_r+0x78>
    75e0:	8080030b 	ldhu	r2,12(r16)
    75e4:	00c10004 	movi	r3,1024
    75e8:	1825883a 	mov	r18,r3
    75ec:	10c4b03a 	or	r2,r2,r3
    75f0:	8080030d 	sth	r2,12(r16)
    75f4:	80c01315 	stw	r3,76(r16)
    75f8:	003fca06 	br	7524 <__smakebuf_r+0x90>
    75fc:	8100030b 	ldhu	r4,12(r16)
    7600:	2080800c 	andi	r2,r4,512
    7604:	103fb21e 	bne	r2,zero,74d0 <__smakebuf_r+0x3c>
    7608:	80c010c4 	addi	r3,r16,67
    760c:	21000094 	ori	r4,r4,2
    7610:	00800044 	movi	r2,1
    7614:	80800515 	stw	r2,20(r16)
    7618:	8100030d 	sth	r4,12(r16)
    761c:	80c00415 	stw	r3,16(r16)
    7620:	80c00015 	stw	r3,0(r16)
    7624:	003faa06 	br	74d0 <__smakebuf_r+0x3c>

00007628 <_malloc_r>:
    7628:	defff604 	addi	sp,sp,-40
    762c:	28c002c4 	addi	r3,r5,11
    7630:	00800584 	movi	r2,22
    7634:	dc800215 	stw	r18,8(sp)
    7638:	dfc00915 	stw	ra,36(sp)
    763c:	df000815 	stw	fp,32(sp)
    7640:	ddc00715 	stw	r23,28(sp)
    7644:	dd800615 	stw	r22,24(sp)
    7648:	dd400515 	stw	r21,20(sp)
    764c:	dd000415 	stw	r20,16(sp)
    7650:	dcc00315 	stw	r19,12(sp)
    7654:	dc400115 	stw	r17,4(sp)
    7658:	dc000015 	stw	r16,0(sp)
    765c:	2025883a 	mov	r18,r4
    7660:	10c01236 	bltu	r2,r3,76ac <_malloc_r+0x84>
    7664:	04400404 	movi	r17,16
    7668:	8940142e 	bgeu	r17,r5,76bc <_malloc_r+0x94>
    766c:	00800304 	movi	r2,12
    7670:	0007883a 	mov	r3,zero
    7674:	90800015 	stw	r2,0(r18)
    7678:	1805883a 	mov	r2,r3
    767c:	dfc00917 	ldw	ra,36(sp)
    7680:	df000817 	ldw	fp,32(sp)
    7684:	ddc00717 	ldw	r23,28(sp)
    7688:	dd800617 	ldw	r22,24(sp)
    768c:	dd400517 	ldw	r21,20(sp)
    7690:	dd000417 	ldw	r20,16(sp)
    7694:	dcc00317 	ldw	r19,12(sp)
    7698:	dc800217 	ldw	r18,8(sp)
    769c:	dc400117 	ldw	r17,4(sp)
    76a0:	dc000017 	ldw	r16,0(sp)
    76a4:	dec00a04 	addi	sp,sp,40
    76a8:	f800283a 	ret
    76ac:	00bffe04 	movi	r2,-8
    76b0:	18a2703a 	and	r17,r3,r2
    76b4:	883fed16 	blt	r17,zero,766c <_malloc_r+0x44>
    76b8:	897fec36 	bltu	r17,r5,766c <_malloc_r+0x44>
    76bc:	9009883a 	mov	r4,r18
    76c0:	00087080 	call	8708 <__malloc_lock>
    76c4:	00807dc4 	movi	r2,503
    76c8:	14402b2e 	bgeu	r2,r17,7778 <_malloc_r+0x150>
    76cc:	8806d27a 	srli	r3,r17,9
    76d0:	18003f1e 	bne	r3,zero,77d0 <_malloc_r+0x1a8>
    76d4:	880cd0fa 	srli	r6,r17,3
    76d8:	300490fa 	slli	r2,r6,3
    76dc:	02c00074 	movhi	r11,1
    76e0:	5ae8e604 	addi	r11,r11,-23656
    76e4:	12cb883a 	add	r5,r2,r11
    76e8:	2c000317 	ldw	r16,12(r5)
    76ec:	580f883a 	mov	r7,r11
    76f0:	2c00041e 	bne	r5,r16,7704 <_malloc_r+0xdc>
    76f4:	00000a06 	br	7720 <_malloc_r+0xf8>
    76f8:	1800860e 	bge	r3,zero,7914 <_malloc_r+0x2ec>
    76fc:	84000317 	ldw	r16,12(r16)
    7700:	2c000726 	beq	r5,r16,7720 <_malloc_r+0xf8>
    7704:	80800117 	ldw	r2,4(r16)
    7708:	00ffff04 	movi	r3,-4
    770c:	10c8703a 	and	r4,r2,r3
    7710:	2447c83a 	sub	r3,r4,r17
    7714:	008003c4 	movi	r2,15
    7718:	10fff70e 	bge	r2,r3,76f8 <_malloc_r+0xd0>
    771c:	31bfffc4 	addi	r6,r6,-1
    7720:	32400044 	addi	r9,r6,1
    7724:	02800074 	movhi	r10,1
    7728:	52a8e804 	addi	r10,r10,-23648
    772c:	54000217 	ldw	r16,8(r10)
    7730:	8280a026 	beq	r16,r10,79b4 <_malloc_r+0x38c>
    7734:	80800117 	ldw	r2,4(r16)
    7738:	00ffff04 	movi	r3,-4
    773c:	10ca703a 	and	r5,r2,r3
    7740:	2c4dc83a 	sub	r6,r5,r17
    7744:	008003c4 	movi	r2,15
    7748:	11808316 	blt	r2,r6,7958 <_malloc_r+0x330>
    774c:	52800315 	stw	r10,12(r10)
    7750:	52800215 	stw	r10,8(r10)
    7754:	30002916 	blt	r6,zero,77fc <_malloc_r+0x1d4>
    7758:	8147883a 	add	r3,r16,r5
    775c:	18800117 	ldw	r2,4(r3)
    7760:	9009883a 	mov	r4,r18
    7764:	10800054 	ori	r2,r2,1
    7768:	18800115 	stw	r2,4(r3)
    776c:	00087280 	call	8728 <__malloc_unlock>
    7770:	80c00204 	addi	r3,r16,8
    7774:	003fc006 	br	7678 <_malloc_r+0x50>
    7778:	02c00074 	movhi	r11,1
    777c:	5ae8e604 	addi	r11,r11,-23656
    7780:	8ac5883a 	add	r2,r17,r11
    7784:	14000317 	ldw	r16,12(r2)
    7788:	580f883a 	mov	r7,r11
    778c:	8806d0fa 	srli	r3,r17,3
    7790:	14006c26 	beq	r2,r16,7944 <_malloc_r+0x31c>
    7794:	80c00117 	ldw	r3,4(r16)
    7798:	00bfff04 	movi	r2,-4
    779c:	81800317 	ldw	r6,12(r16)
    77a0:	1886703a 	and	r3,r3,r2
    77a4:	80c7883a 	add	r3,r16,r3
    77a8:	18800117 	ldw	r2,4(r3)
    77ac:	81400217 	ldw	r5,8(r16)
    77b0:	9009883a 	mov	r4,r18
    77b4:	10800054 	ori	r2,r2,1
    77b8:	18800115 	stw	r2,4(r3)
    77bc:	31400215 	stw	r5,8(r6)
    77c0:	29800315 	stw	r6,12(r5)
    77c4:	00087280 	call	8728 <__malloc_unlock>
    77c8:	80c00204 	addi	r3,r16,8
    77cc:	003faa06 	br	7678 <_malloc_r+0x50>
    77d0:	00800104 	movi	r2,4
    77d4:	10c0052e 	bgeu	r2,r3,77ec <_malloc_r+0x1c4>
    77d8:	00800504 	movi	r2,20
    77dc:	10c07836 	bltu	r2,r3,79c0 <_malloc_r+0x398>
    77e0:	198016c4 	addi	r6,r3,91
    77e4:	300490fa 	slli	r2,r6,3
    77e8:	003fbc06 	br	76dc <_malloc_r+0xb4>
    77ec:	8804d1ba 	srli	r2,r17,6
    77f0:	11800e04 	addi	r6,r2,56
    77f4:	300490fa 	slli	r2,r6,3
    77f8:	003fb806 	br	76dc <_malloc_r+0xb4>
    77fc:	00807fc4 	movi	r2,511
    7800:	1140bb36 	bltu	r2,r5,7af0 <_malloc_r+0x4c8>
    7804:	2806d0fa 	srli	r3,r5,3
    7808:	573ffe04 	addi	fp,r10,-8
    780c:	00800044 	movi	r2,1
    7810:	180890fa 	slli	r4,r3,3
    7814:	1807d0ba 	srai	r3,r3,2
    7818:	e1c00117 	ldw	r7,4(fp)
    781c:	5909883a 	add	r4,r11,r4
    7820:	21400217 	ldw	r5,8(r4)
    7824:	10c4983a 	sll	r2,r2,r3
    7828:	81000315 	stw	r4,12(r16)
    782c:	81400215 	stw	r5,8(r16)
    7830:	388eb03a 	or	r7,r7,r2
    7834:	2c000315 	stw	r16,12(r5)
    7838:	24000215 	stw	r16,8(r4)
    783c:	e1c00115 	stw	r7,4(fp)
    7840:	4807883a 	mov	r3,r9
    7844:	4800cd16 	blt	r9,zero,7b7c <_malloc_r+0x554>
    7848:	1807d0ba 	srai	r3,r3,2
    784c:	00800044 	movi	r2,1
    7850:	10c8983a 	sll	r4,r2,r3
    7854:	39004436 	bltu	r7,r4,7968 <_malloc_r+0x340>
    7858:	21c4703a 	and	r2,r4,r7
    785c:	10000a1e 	bne	r2,zero,7888 <_malloc_r+0x260>
    7860:	2109883a 	add	r4,r4,r4
    7864:	00bfff04 	movi	r2,-4
    7868:	4884703a 	and	r2,r9,r2
    786c:	3906703a 	and	r3,r7,r4
    7870:	12400104 	addi	r9,r2,4
    7874:	1800041e 	bne	r3,zero,7888 <_malloc_r+0x260>
    7878:	2109883a 	add	r4,r4,r4
    787c:	3904703a 	and	r2,r7,r4
    7880:	4a400104 	addi	r9,r9,4
    7884:	103ffc26 	beq	r2,zero,7878 <_malloc_r+0x250>
    7888:	480490fa 	slli	r2,r9,3
    788c:	4819883a 	mov	r12,r9
    7890:	023fff04 	movi	r8,-4
    7894:	589b883a 	add	r13,r11,r2
    7898:	6807883a 	mov	r3,r13
    789c:	014003c4 	movi	r5,15
    78a0:	1c000317 	ldw	r16,12(r3)
    78a4:	1c00041e 	bne	r3,r16,78b8 <_malloc_r+0x290>
    78a8:	0000a706 	br	7b48 <_malloc_r+0x520>
    78ac:	3000ab0e 	bge	r6,zero,7b5c <_malloc_r+0x534>
    78b0:	84000317 	ldw	r16,12(r16)
    78b4:	1c00a426 	beq	r3,r16,7b48 <_malloc_r+0x520>
    78b8:	80800117 	ldw	r2,4(r16)
    78bc:	1204703a 	and	r2,r2,r8
    78c0:	144dc83a 	sub	r6,r2,r17
    78c4:	29bff90e 	bge	r5,r6,78ac <_malloc_r+0x284>
    78c8:	81000317 	ldw	r4,12(r16)
    78cc:	80c00217 	ldw	r3,8(r16)
    78d0:	89400054 	ori	r5,r17,1
    78d4:	8445883a 	add	r2,r16,r17
    78d8:	20c00215 	stw	r3,8(r4)
    78dc:	19000315 	stw	r4,12(r3)
    78e0:	81400115 	stw	r5,4(r16)
    78e4:	1187883a 	add	r3,r2,r6
    78e8:	31000054 	ori	r4,r6,1
    78ec:	50800315 	stw	r2,12(r10)
    78f0:	50800215 	stw	r2,8(r10)
    78f4:	19800015 	stw	r6,0(r3)
    78f8:	11000115 	stw	r4,4(r2)
    78fc:	12800215 	stw	r10,8(r2)
    7900:	12800315 	stw	r10,12(r2)
    7904:	9009883a 	mov	r4,r18
    7908:	00087280 	call	8728 <__malloc_unlock>
    790c:	80c00204 	addi	r3,r16,8
    7910:	003f5906 	br	7678 <_malloc_r+0x50>
    7914:	8109883a 	add	r4,r16,r4
    7918:	20800117 	ldw	r2,4(r4)
    791c:	80c00217 	ldw	r3,8(r16)
    7920:	81400317 	ldw	r5,12(r16)
    7924:	10800054 	ori	r2,r2,1
    7928:	20800115 	stw	r2,4(r4)
    792c:	28c00215 	stw	r3,8(r5)
    7930:	19400315 	stw	r5,12(r3)
    7934:	9009883a 	mov	r4,r18
    7938:	00087280 	call	8728 <__malloc_unlock>
    793c:	80c00204 	addi	r3,r16,8
    7940:	003f4d06 	br	7678 <_malloc_r+0x50>
    7944:	80800204 	addi	r2,r16,8
    7948:	14000317 	ldw	r16,12(r2)
    794c:	143f911e 	bne	r2,r16,7794 <_malloc_r+0x16c>
    7950:	1a400084 	addi	r9,r3,2
    7954:	003f7306 	br	7724 <_malloc_r+0xfc>
    7958:	88c00054 	ori	r3,r17,1
    795c:	8445883a 	add	r2,r16,r17
    7960:	80c00115 	stw	r3,4(r16)
    7964:	003fdf06 	br	78e4 <_malloc_r+0x2bc>
    7968:	e4000217 	ldw	r16,8(fp)
    796c:	00bfff04 	movi	r2,-4
    7970:	80c00117 	ldw	r3,4(r16)
    7974:	802d883a 	mov	r22,r16
    7978:	18aa703a 	and	r21,r3,r2
    797c:	ac401636 	bltu	r21,r17,79d8 <_malloc_r+0x3b0>
    7980:	ac49c83a 	sub	r4,r21,r17
    7984:	008003c4 	movi	r2,15
    7988:	1100130e 	bge	r2,r4,79d8 <_malloc_r+0x3b0>
    798c:	88800054 	ori	r2,r17,1
    7990:	8447883a 	add	r3,r16,r17
    7994:	80800115 	stw	r2,4(r16)
    7998:	20800054 	ori	r2,r4,1
    799c:	18800115 	stw	r2,4(r3)
    79a0:	e0c00215 	stw	r3,8(fp)
    79a4:	9009883a 	mov	r4,r18
    79a8:	00087280 	call	8728 <__malloc_unlock>
    79ac:	80c00204 	addi	r3,r16,8
    79b0:	003f3106 	br	7678 <_malloc_r+0x50>
    79b4:	39c00117 	ldw	r7,4(r7)
    79b8:	573ffe04 	addi	fp,r10,-8
    79bc:	003fa006 	br	7840 <_malloc_r+0x218>
    79c0:	00801504 	movi	r2,84
    79c4:	10c06736 	bltu	r2,r3,7b64 <_malloc_r+0x53c>
    79c8:	8804d33a 	srli	r2,r17,12
    79cc:	11801b84 	addi	r6,r2,110
    79d0:	300490fa 	slli	r2,r6,3
    79d4:	003f4106 	br	76dc <_malloc_r+0xb4>
    79d8:	d0a6b417 	ldw	r2,-25904(gp)
    79dc:	d0e00d17 	ldw	r3,-32716(gp)
    79e0:	053fffc4 	movi	r20,-1
    79e4:	10800404 	addi	r2,r2,16
    79e8:	88a7883a 	add	r19,r17,r2
    79ec:	1d000326 	beq	r3,r20,79fc <_malloc_r+0x3d4>
    79f0:	98c3ffc4 	addi	r3,r19,4095
    79f4:	00bc0004 	movi	r2,-4096
    79f8:	18a6703a 	and	r19,r3,r2
    79fc:	9009883a 	mov	r4,r18
    7a00:	980b883a 	mov	r5,r19
    7a04:	0007d680 	call	7d68 <_sbrk_r>
    7a08:	1009883a 	mov	r4,r2
    7a0c:	15000426 	beq	r2,r20,7a20 <_malloc_r+0x3f8>
    7a10:	854b883a 	add	r5,r16,r21
    7a14:	1029883a 	mov	r20,r2
    7a18:	11405a2e 	bgeu	r2,r5,7b84 <_malloc_r+0x55c>
    7a1c:	87000c26 	beq	r16,fp,7a50 <_malloc_r+0x428>
    7a20:	e4000217 	ldw	r16,8(fp)
    7a24:	80c00117 	ldw	r3,4(r16)
    7a28:	00bfff04 	movi	r2,-4
    7a2c:	1884703a 	and	r2,r3,r2
    7a30:	14400336 	bltu	r2,r17,7a40 <_malloc_r+0x418>
    7a34:	1449c83a 	sub	r4,r2,r17
    7a38:	008003c4 	movi	r2,15
    7a3c:	113fd316 	blt	r2,r4,798c <_malloc_r+0x364>
    7a40:	9009883a 	mov	r4,r18
    7a44:	00087280 	call	8728 <__malloc_unlock>
    7a48:	0007883a 	mov	r3,zero
    7a4c:	003f0a06 	br	7678 <_malloc_r+0x50>
    7a50:	05c00074 	movhi	r23,1
    7a54:	bdf09f04 	addi	r23,r23,-15748
    7a58:	b8800017 	ldw	r2,0(r23)
    7a5c:	988d883a 	add	r6,r19,r2
    7a60:	b9800015 	stw	r6,0(r23)
    7a64:	d0e00d17 	ldw	r3,-32716(gp)
    7a68:	00bfffc4 	movi	r2,-1
    7a6c:	18808e26 	beq	r3,r2,7ca8 <_malloc_r+0x680>
    7a70:	2145c83a 	sub	r2,r4,r5
    7a74:	3085883a 	add	r2,r6,r2
    7a78:	b8800015 	stw	r2,0(r23)
    7a7c:	20c001cc 	andi	r3,r4,7
    7a80:	18005f1e 	bne	r3,zero,7c00 <_malloc_r+0x5d8>
    7a84:	000b883a 	mov	r5,zero
    7a88:	a4c5883a 	add	r2,r20,r19
    7a8c:	1083ffcc 	andi	r2,r2,4095
    7a90:	00c40004 	movi	r3,4096
    7a94:	1887c83a 	sub	r3,r3,r2
    7a98:	28e7883a 	add	r19,r5,r3
    7a9c:	9009883a 	mov	r4,r18
    7aa0:	980b883a 	mov	r5,r19
    7aa4:	0007d680 	call	7d68 <_sbrk_r>
    7aa8:	1007883a 	mov	r3,r2
    7aac:	00bfffc4 	movi	r2,-1
    7ab0:	18807a26 	beq	r3,r2,7c9c <_malloc_r+0x674>
    7ab4:	1d05c83a 	sub	r2,r3,r20
    7ab8:	9885883a 	add	r2,r19,r2
    7abc:	10c00054 	ori	r3,r2,1
    7ac0:	b8800017 	ldw	r2,0(r23)
    7ac4:	a021883a 	mov	r16,r20
    7ac8:	a0c00115 	stw	r3,4(r20)
    7acc:	9885883a 	add	r2,r19,r2
    7ad0:	b8800015 	stw	r2,0(r23)
    7ad4:	e5000215 	stw	r20,8(fp)
    7ad8:	b7003626 	beq	r22,fp,7bb4 <_malloc_r+0x58c>
    7adc:	018003c4 	movi	r6,15
    7ae0:	35404b36 	bltu	r6,r21,7c10 <_malloc_r+0x5e8>
    7ae4:	00800044 	movi	r2,1
    7ae8:	a0800115 	stw	r2,4(r20)
    7aec:	003fcd06 	br	7a24 <_malloc_r+0x3fc>
    7af0:	2808d27a 	srli	r4,r5,9
    7af4:	2000371e 	bne	r4,zero,7bd4 <_malloc_r+0x5ac>
    7af8:	2808d0fa 	srli	r4,r5,3
    7afc:	200690fa 	slli	r3,r4,3
    7b00:	1ad1883a 	add	r8,r3,r11
    7b04:	41800217 	ldw	r6,8(r8)
    7b08:	41805b26 	beq	r8,r6,7c78 <_malloc_r+0x650>
    7b0c:	30800117 	ldw	r2,4(r6)
    7b10:	00ffff04 	movi	r3,-4
    7b14:	10c4703a 	and	r2,r2,r3
    7b18:	2880022e 	bgeu	r5,r2,7b24 <_malloc_r+0x4fc>
    7b1c:	31800217 	ldw	r6,8(r6)
    7b20:	41bffa1e 	bne	r8,r6,7b0c <_malloc_r+0x4e4>
    7b24:	32000317 	ldw	r8,12(r6)
    7b28:	39c00117 	ldw	r7,4(r7)
    7b2c:	82000315 	stw	r8,12(r16)
    7b30:	81800215 	stw	r6,8(r16)
    7b34:	07000074 	movhi	fp,1
    7b38:	e728e604 	addi	fp,fp,-23656
    7b3c:	34000315 	stw	r16,12(r6)
    7b40:	44000215 	stw	r16,8(r8)
    7b44:	003f3e06 	br	7840 <_malloc_r+0x218>
    7b48:	63000044 	addi	r12,r12,1
    7b4c:	608000cc 	andi	r2,r12,3
    7b50:	10005d26 	beq	r2,zero,7cc8 <_malloc_r+0x6a0>
    7b54:	18c00204 	addi	r3,r3,8
    7b58:	003f5106 	br	78a0 <_malloc_r+0x278>
    7b5c:	8089883a 	add	r4,r16,r2
    7b60:	003f6d06 	br	7918 <_malloc_r+0x2f0>
    7b64:	00805504 	movi	r2,340
    7b68:	10c02036 	bltu	r2,r3,7bec <_malloc_r+0x5c4>
    7b6c:	8804d3fa 	srli	r2,r17,15
    7b70:	11801dc4 	addi	r6,r2,119
    7b74:	300490fa 	slli	r2,r6,3
    7b78:	003ed806 	br	76dc <_malloc_r+0xb4>
    7b7c:	48c000c4 	addi	r3,r9,3
    7b80:	003f3106 	br	7848 <_malloc_r+0x220>
    7b84:	05c00074 	movhi	r23,1
    7b88:	bdf09f04 	addi	r23,r23,-15748
    7b8c:	b8800017 	ldw	r2,0(r23)
    7b90:	988d883a 	add	r6,r19,r2
    7b94:	b9800015 	stw	r6,0(r23)
    7b98:	293fb21e 	bne	r5,r4,7a64 <_malloc_r+0x43c>
    7b9c:	2083ffcc 	andi	r2,r4,4095
    7ba0:	103fb01e 	bne	r2,zero,7a64 <_malloc_r+0x43c>
    7ba4:	e4000217 	ldw	r16,8(fp)
    7ba8:	9d45883a 	add	r2,r19,r21
    7bac:	10800054 	ori	r2,r2,1
    7bb0:	80800115 	stw	r2,4(r16)
    7bb4:	b8c00017 	ldw	r3,0(r23)
    7bb8:	d0a6b517 	ldw	r2,-25900(gp)
    7bbc:	10c0012e 	bgeu	r2,r3,7bc4 <_malloc_r+0x59c>
    7bc0:	d0e6b515 	stw	r3,-25900(gp)
    7bc4:	d0a6b617 	ldw	r2,-25896(gp)
    7bc8:	10ff962e 	bgeu	r2,r3,7a24 <_malloc_r+0x3fc>
    7bcc:	d0e6b615 	stw	r3,-25896(gp)
    7bd0:	003f9406 	br	7a24 <_malloc_r+0x3fc>
    7bd4:	00800104 	movi	r2,4
    7bd8:	11001e36 	bltu	r2,r4,7c54 <_malloc_r+0x62c>
    7bdc:	2804d1ba 	srli	r2,r5,6
    7be0:	11000e04 	addi	r4,r2,56
    7be4:	200690fa 	slli	r3,r4,3
    7be8:	003fc506 	br	7b00 <_malloc_r+0x4d8>
    7bec:	00815504 	movi	r2,1364
    7bf0:	10c01d2e 	bgeu	r2,r3,7c68 <_malloc_r+0x640>
    7bf4:	01801f84 	movi	r6,126
    7bf8:	0080fc04 	movi	r2,1008
    7bfc:	003eb706 	br	76dc <_malloc_r+0xb4>
    7c00:	00800204 	movi	r2,8
    7c04:	10cbc83a 	sub	r5,r2,r3
    7c08:	2169883a 	add	r20,r4,r5
    7c0c:	003f9e06 	br	7a88 <_malloc_r+0x460>
    7c10:	00bffe04 	movi	r2,-8
    7c14:	a93ffd04 	addi	r4,r21,-12
    7c18:	2088703a 	and	r4,r4,r2
    7c1c:	b10b883a 	add	r5,r22,r4
    7c20:	00c00144 	movi	r3,5
    7c24:	28c00215 	stw	r3,8(r5)
    7c28:	28c00115 	stw	r3,4(r5)
    7c2c:	b0800117 	ldw	r2,4(r22)
    7c30:	1080004c 	andi	r2,r2,1
    7c34:	2084b03a 	or	r2,r4,r2
    7c38:	b0800115 	stw	r2,4(r22)
    7c3c:	313fdd2e 	bgeu	r6,r4,7bb4 <_malloc_r+0x58c>
    7c40:	b1400204 	addi	r5,r22,8
    7c44:	9009883a 	mov	r4,r18
    7c48:	00070000 	call	7000 <_free_r>
    7c4c:	e4000217 	ldw	r16,8(fp)
    7c50:	003fd806 	br	7bb4 <_malloc_r+0x58c>
    7c54:	00800504 	movi	r2,20
    7c58:	11001536 	bltu	r2,r4,7cb0 <_malloc_r+0x688>
    7c5c:	210016c4 	addi	r4,r4,91
    7c60:	200690fa 	slli	r3,r4,3
    7c64:	003fa606 	br	7b00 <_malloc_r+0x4d8>
    7c68:	8804d4ba 	srli	r2,r17,18
    7c6c:	11801f04 	addi	r6,r2,124
    7c70:	300490fa 	slli	r2,r6,3
    7c74:	003e9906 	br	76dc <_malloc_r+0xb4>
    7c78:	2009d0ba 	srai	r4,r4,2
    7c7c:	01400074 	movhi	r5,1
    7c80:	2968e604 	addi	r5,r5,-23656
    7c84:	00c00044 	movi	r3,1
    7c88:	28800117 	ldw	r2,4(r5)
    7c8c:	1906983a 	sll	r3,r3,r4
    7c90:	10c4b03a 	or	r2,r2,r3
    7c94:	28800115 	stw	r2,4(r5)
    7c98:	003fa306 	br	7b28 <_malloc_r+0x500>
    7c9c:	0027883a 	mov	r19,zero
    7ca0:	00c00044 	movi	r3,1
    7ca4:	003f8606 	br	7ac0 <_malloc_r+0x498>
    7ca8:	d1200d15 	stw	r4,-32716(gp)
    7cac:	003f7306 	br	7a7c <_malloc_r+0x454>
    7cb0:	00801504 	movi	r2,84
    7cb4:	11001936 	bltu	r2,r4,7d1c <_malloc_r+0x6f4>
    7cb8:	2804d33a 	srli	r2,r5,12
    7cbc:	11001b84 	addi	r4,r2,110
    7cc0:	200690fa 	slli	r3,r4,3
    7cc4:	003f8e06 	br	7b00 <_malloc_r+0x4d8>
    7cc8:	480b883a 	mov	r5,r9
    7ccc:	6807883a 	mov	r3,r13
    7cd0:	288000cc 	andi	r2,r5,3
    7cd4:	18fffe04 	addi	r3,r3,-8
    7cd8:	297fffc4 	addi	r5,r5,-1
    7cdc:	10001526 	beq	r2,zero,7d34 <_malloc_r+0x70c>
    7ce0:	18800217 	ldw	r2,8(r3)
    7ce4:	10fffa26 	beq	r2,r3,7cd0 <_malloc_r+0x6a8>
    7ce8:	2109883a 	add	r4,r4,r4
    7cec:	393f1e36 	bltu	r7,r4,7968 <_malloc_r+0x340>
    7cf0:	203f1d26 	beq	r4,zero,7968 <_malloc_r+0x340>
    7cf4:	21c4703a 	and	r2,r4,r7
    7cf8:	10000226 	beq	r2,zero,7d04 <_malloc_r+0x6dc>
    7cfc:	6013883a 	mov	r9,r12
    7d00:	003ee106 	br	7888 <_malloc_r+0x260>
    7d04:	2109883a 	add	r4,r4,r4
    7d08:	3904703a 	and	r2,r7,r4
    7d0c:	63000104 	addi	r12,r12,4
    7d10:	103ffc26 	beq	r2,zero,7d04 <_malloc_r+0x6dc>
    7d14:	6013883a 	mov	r9,r12
    7d18:	003edb06 	br	7888 <_malloc_r+0x260>
    7d1c:	00805504 	movi	r2,340
    7d20:	11000836 	bltu	r2,r4,7d44 <_malloc_r+0x71c>
    7d24:	2804d3fa 	srli	r2,r5,15
    7d28:	11001dc4 	addi	r4,r2,119
    7d2c:	200690fa 	slli	r3,r4,3
    7d30:	003f7306 	br	7b00 <_malloc_r+0x4d8>
    7d34:	0104303a 	nor	r2,zero,r4
    7d38:	388e703a 	and	r7,r7,r2
    7d3c:	e1c00115 	stw	r7,4(fp)
    7d40:	003fe906 	br	7ce8 <_malloc_r+0x6c0>
    7d44:	00815504 	movi	r2,1364
    7d48:	1100032e 	bgeu	r2,r4,7d58 <_malloc_r+0x730>
    7d4c:	01001f84 	movi	r4,126
    7d50:	00c0fc04 	movi	r3,1008
    7d54:	003f6a06 	br	7b00 <_malloc_r+0x4d8>
    7d58:	2804d4ba 	srli	r2,r5,18
    7d5c:	11001f04 	addi	r4,r2,124
    7d60:	200690fa 	slli	r3,r4,3
    7d64:	003f6606 	br	7b00 <_malloc_r+0x4d8>

00007d68 <_sbrk_r>:
    7d68:	defffd04 	addi	sp,sp,-12
    7d6c:	dc000015 	stw	r16,0(sp)
    7d70:	04000074 	movhi	r16,1
    7d74:	84309b04 	addi	r16,r16,-15764
    7d78:	dc400115 	stw	r17,4(sp)
    7d7c:	80000015 	stw	zero,0(r16)
    7d80:	2023883a 	mov	r17,r4
    7d84:	2809883a 	mov	r4,r5
    7d88:	dfc00215 	stw	ra,8(sp)
    7d8c:	00088c80 	call	88c8 <sbrk>
    7d90:	1007883a 	mov	r3,r2
    7d94:	00bfffc4 	movi	r2,-1
    7d98:	18800626 	beq	r3,r2,7db4 <_sbrk_r+0x4c>
    7d9c:	1805883a 	mov	r2,r3
    7da0:	dfc00217 	ldw	ra,8(sp)
    7da4:	dc400117 	ldw	r17,4(sp)
    7da8:	dc000017 	ldw	r16,0(sp)
    7dac:	dec00304 	addi	sp,sp,12
    7db0:	f800283a 	ret
    7db4:	80800017 	ldw	r2,0(r16)
    7db8:	103ff826 	beq	r2,zero,7d9c <_sbrk_r+0x34>
    7dbc:	88800015 	stw	r2,0(r17)
    7dc0:	1805883a 	mov	r2,r3
    7dc4:	dfc00217 	ldw	ra,8(sp)
    7dc8:	dc400117 	ldw	r17,4(sp)
    7dcc:	dc000017 	ldw	r16,0(sp)
    7dd0:	dec00304 	addi	sp,sp,12
    7dd4:	f800283a 	ret

00007dd8 <__sclose>:
    7dd8:	2940038f 	ldh	r5,14(r5)
    7ddc:	0007f9c1 	jmpi	7f9c <_close_r>

00007de0 <__sseek>:
    7de0:	defffe04 	addi	sp,sp,-8
    7de4:	dc000015 	stw	r16,0(sp)
    7de8:	2821883a 	mov	r16,r5
    7dec:	2940038f 	ldh	r5,14(r5)
    7df0:	dfc00115 	stw	ra,4(sp)
    7df4:	00082140 	call	8214 <_lseek_r>
    7df8:	1007883a 	mov	r3,r2
    7dfc:	00bfffc4 	movi	r2,-1
    7e00:	18800926 	beq	r3,r2,7e28 <__sseek+0x48>
    7e04:	8080030b 	ldhu	r2,12(r16)
    7e08:	80c01415 	stw	r3,80(r16)
    7e0c:	10840014 	ori	r2,r2,4096
    7e10:	8080030d 	sth	r2,12(r16)
    7e14:	1805883a 	mov	r2,r3
    7e18:	dfc00117 	ldw	ra,4(sp)
    7e1c:	dc000017 	ldw	r16,0(sp)
    7e20:	dec00204 	addi	sp,sp,8
    7e24:	f800283a 	ret
    7e28:	8080030b 	ldhu	r2,12(r16)
    7e2c:	10bbffcc 	andi	r2,r2,61439
    7e30:	8080030d 	sth	r2,12(r16)
    7e34:	1805883a 	mov	r2,r3
    7e38:	dfc00117 	ldw	ra,4(sp)
    7e3c:	dc000017 	ldw	r16,0(sp)
    7e40:	dec00204 	addi	sp,sp,8
    7e44:	f800283a 	ret

00007e48 <__swrite>:
    7e48:	2880030b 	ldhu	r2,12(r5)
    7e4c:	defffb04 	addi	sp,sp,-20
    7e50:	dcc00315 	stw	r19,12(sp)
    7e54:	1080400c 	andi	r2,r2,256
    7e58:	dc800215 	stw	r18,8(sp)
    7e5c:	dc400115 	stw	r17,4(sp)
    7e60:	dc000015 	stw	r16,0(sp)
    7e64:	3027883a 	mov	r19,r6
    7e68:	3825883a 	mov	r18,r7
    7e6c:	dfc00415 	stw	ra,16(sp)
    7e70:	2821883a 	mov	r16,r5
    7e74:	000d883a 	mov	r6,zero
    7e78:	01c00084 	movi	r7,2
    7e7c:	2023883a 	mov	r17,r4
    7e80:	10000226 	beq	r2,zero,7e8c <__swrite+0x44>
    7e84:	2940038f 	ldh	r5,14(r5)
    7e88:	00082140 	call	8214 <_lseek_r>
    7e8c:	8080030b 	ldhu	r2,12(r16)
    7e90:	8140038f 	ldh	r5,14(r16)
    7e94:	8809883a 	mov	r4,r17
    7e98:	10bbffcc 	andi	r2,r2,61439
    7e9c:	980d883a 	mov	r6,r19
    7ea0:	900f883a 	mov	r7,r18
    7ea4:	8080030d 	sth	r2,12(r16)
    7ea8:	dfc00417 	ldw	ra,16(sp)
    7eac:	dcc00317 	ldw	r19,12(sp)
    7eb0:	dc800217 	ldw	r18,8(sp)
    7eb4:	dc400117 	ldw	r17,4(sp)
    7eb8:	dc000017 	ldw	r16,0(sp)
    7ebc:	dec00504 	addi	sp,sp,20
    7ec0:	0007f241 	jmpi	7f24 <_write_r>

00007ec4 <__sread>:
    7ec4:	defffe04 	addi	sp,sp,-8
    7ec8:	dc000015 	stw	r16,0(sp)
    7ecc:	2821883a 	mov	r16,r5
    7ed0:	2940038f 	ldh	r5,14(r5)
    7ed4:	dfc00115 	stw	ra,4(sp)
    7ed8:	000828c0 	call	828c <_read_r>
    7edc:	1007883a 	mov	r3,r2
    7ee0:	10000816 	blt	r2,zero,7f04 <__sread+0x40>
    7ee4:	80801417 	ldw	r2,80(r16)
    7ee8:	10c5883a 	add	r2,r2,r3
    7eec:	80801415 	stw	r2,80(r16)
    7ef0:	1805883a 	mov	r2,r3
    7ef4:	dfc00117 	ldw	ra,4(sp)
    7ef8:	dc000017 	ldw	r16,0(sp)
    7efc:	dec00204 	addi	sp,sp,8
    7f00:	f800283a 	ret
    7f04:	8080030b 	ldhu	r2,12(r16)
    7f08:	10bbffcc 	andi	r2,r2,61439
    7f0c:	8080030d 	sth	r2,12(r16)
    7f10:	1805883a 	mov	r2,r3
    7f14:	dfc00117 	ldw	ra,4(sp)
    7f18:	dc000017 	ldw	r16,0(sp)
    7f1c:	dec00204 	addi	sp,sp,8
    7f20:	f800283a 	ret

00007f24 <_write_r>:
    7f24:	defffd04 	addi	sp,sp,-12
    7f28:	dc000015 	stw	r16,0(sp)
    7f2c:	04000074 	movhi	r16,1
    7f30:	84309b04 	addi	r16,r16,-15764
    7f34:	dc400115 	stw	r17,4(sp)
    7f38:	80000015 	stw	zero,0(r16)
    7f3c:	2023883a 	mov	r17,r4
    7f40:	2809883a 	mov	r4,r5
    7f44:	300b883a 	mov	r5,r6
    7f48:	380d883a 	mov	r6,r7
    7f4c:	dfc00215 	stw	ra,8(sp)
    7f50:	00089840 	call	8984 <write>
    7f54:	1007883a 	mov	r3,r2
    7f58:	00bfffc4 	movi	r2,-1
    7f5c:	18800626 	beq	r3,r2,7f78 <_write_r+0x54>
    7f60:	1805883a 	mov	r2,r3
    7f64:	dfc00217 	ldw	ra,8(sp)
    7f68:	dc400117 	ldw	r17,4(sp)
    7f6c:	dc000017 	ldw	r16,0(sp)
    7f70:	dec00304 	addi	sp,sp,12
    7f74:	f800283a 	ret
    7f78:	80800017 	ldw	r2,0(r16)
    7f7c:	103ff826 	beq	r2,zero,7f60 <_write_r+0x3c>
    7f80:	88800015 	stw	r2,0(r17)
    7f84:	1805883a 	mov	r2,r3
    7f88:	dfc00217 	ldw	ra,8(sp)
    7f8c:	dc400117 	ldw	r17,4(sp)
    7f90:	dc000017 	ldw	r16,0(sp)
    7f94:	dec00304 	addi	sp,sp,12
    7f98:	f800283a 	ret

00007f9c <_close_r>:
    7f9c:	defffd04 	addi	sp,sp,-12
    7fa0:	dc000015 	stw	r16,0(sp)
    7fa4:	04000074 	movhi	r16,1
    7fa8:	84309b04 	addi	r16,r16,-15764
    7fac:	dc400115 	stw	r17,4(sp)
    7fb0:	80000015 	stw	zero,0(r16)
    7fb4:	2023883a 	mov	r17,r4
    7fb8:	2809883a 	mov	r4,r5
    7fbc:	dfc00215 	stw	ra,8(sp)
    7fc0:	00051180 	call	5118 <close>
    7fc4:	1007883a 	mov	r3,r2
    7fc8:	00bfffc4 	movi	r2,-1
    7fcc:	18800626 	beq	r3,r2,7fe8 <_close_r+0x4c>
    7fd0:	1805883a 	mov	r2,r3
    7fd4:	dfc00217 	ldw	ra,8(sp)
    7fd8:	dc400117 	ldw	r17,4(sp)
    7fdc:	dc000017 	ldw	r16,0(sp)
    7fe0:	dec00304 	addi	sp,sp,12
    7fe4:	f800283a 	ret
    7fe8:	80800017 	ldw	r2,0(r16)
    7fec:	103ff826 	beq	r2,zero,7fd0 <_close_r+0x34>
    7ff0:	88800015 	stw	r2,0(r17)
    7ff4:	1805883a 	mov	r2,r3
    7ff8:	dfc00217 	ldw	ra,8(sp)
    7ffc:	dc400117 	ldw	r17,4(sp)
    8000:	dc000017 	ldw	r16,0(sp)
    8004:	dec00304 	addi	sp,sp,12
    8008:	f800283a 	ret

0000800c <_fclose_r>:
    800c:	defffc04 	addi	sp,sp,-16
    8010:	dc400115 	stw	r17,4(sp)
    8014:	dc000015 	stw	r16,0(sp)
    8018:	dfc00315 	stw	ra,12(sp)
    801c:	dc800215 	stw	r18,8(sp)
    8020:	2821883a 	mov	r16,r5
    8024:	2023883a 	mov	r17,r4
    8028:	28002926 	beq	r5,zero,80d0 <_fclose_r+0xc4>
    802c:	0006c6c0 	call	6c6c <__sfp_lock_acquire>
    8030:	88000226 	beq	r17,zero,803c <_fclose_r+0x30>
    8034:	88800e17 	ldw	r2,56(r17)
    8038:	10002d26 	beq	r2,zero,80f0 <_fclose_r+0xe4>
    803c:	8080030f 	ldh	r2,12(r16)
    8040:	10002226 	beq	r2,zero,80cc <_fclose_r+0xc0>
    8044:	8809883a 	mov	r4,r17
    8048:	800b883a 	mov	r5,r16
    804c:	00069e40 	call	69e4 <_fflush_r>
    8050:	1025883a 	mov	r18,r2
    8054:	80800b17 	ldw	r2,44(r16)
    8058:	10000426 	beq	r2,zero,806c <_fclose_r+0x60>
    805c:	81400717 	ldw	r5,28(r16)
    8060:	8809883a 	mov	r4,r17
    8064:	103ee83a 	callr	r2
    8068:	10002a16 	blt	r2,zero,8114 <_fclose_r+0x108>
    806c:	8080030b 	ldhu	r2,12(r16)
    8070:	1080200c 	andi	r2,r2,128
    8074:	1000231e 	bne	r2,zero,8104 <_fclose_r+0xf8>
    8078:	81400c17 	ldw	r5,48(r16)
    807c:	28000526 	beq	r5,zero,8094 <_fclose_r+0x88>
    8080:	80801004 	addi	r2,r16,64
    8084:	28800226 	beq	r5,r2,8090 <_fclose_r+0x84>
    8088:	8809883a 	mov	r4,r17
    808c:	00070000 	call	7000 <_free_r>
    8090:	80000c15 	stw	zero,48(r16)
    8094:	81401117 	ldw	r5,68(r16)
    8098:	28000326 	beq	r5,zero,80a8 <_fclose_r+0x9c>
    809c:	8809883a 	mov	r4,r17
    80a0:	00070000 	call	7000 <_free_r>
    80a4:	80001115 	stw	zero,68(r16)
    80a8:	8000030d 	sth	zero,12(r16)
    80ac:	0006c700 	call	6c70 <__sfp_lock_release>
    80b0:	9005883a 	mov	r2,r18
    80b4:	dfc00317 	ldw	ra,12(sp)
    80b8:	dc800217 	ldw	r18,8(sp)
    80bc:	dc400117 	ldw	r17,4(sp)
    80c0:	dc000017 	ldw	r16,0(sp)
    80c4:	dec00404 	addi	sp,sp,16
    80c8:	f800283a 	ret
    80cc:	0006c700 	call	6c70 <__sfp_lock_release>
    80d0:	0025883a 	mov	r18,zero
    80d4:	9005883a 	mov	r2,r18
    80d8:	dfc00317 	ldw	ra,12(sp)
    80dc:	dc800217 	ldw	r18,8(sp)
    80e0:	dc400117 	ldw	r17,4(sp)
    80e4:	dc000017 	ldw	r16,0(sp)
    80e8:	dec00404 	addi	sp,sp,16
    80ec:	f800283a 	ret
    80f0:	8809883a 	mov	r4,r17
    80f4:	0006c7c0 	call	6c7c <__sinit>
    80f8:	8080030f 	ldh	r2,12(r16)
    80fc:	103fd11e 	bne	r2,zero,8044 <_fclose_r+0x38>
    8100:	003ff206 	br	80cc <_fclose_r+0xc0>
    8104:	81400417 	ldw	r5,16(r16)
    8108:	8809883a 	mov	r4,r17
    810c:	00070000 	call	7000 <_free_r>
    8110:	003fd906 	br	8078 <_fclose_r+0x6c>
    8114:	04bfffc4 	movi	r18,-1
    8118:	003fd406 	br	806c <_fclose_r+0x60>

0000811c <fclose>:
    811c:	00800074 	movhi	r2,1
    8120:	10a9e904 	addi	r2,r2,-22620
    8124:	200b883a 	mov	r5,r4
    8128:	11000017 	ldw	r4,0(r2)
    812c:	000800c1 	jmpi	800c <_fclose_r>

00008130 <_fstat_r>:
    8130:	defffd04 	addi	sp,sp,-12
    8134:	dc000015 	stw	r16,0(sp)
    8138:	04000074 	movhi	r16,1
    813c:	84309b04 	addi	r16,r16,-15764
    8140:	dc400115 	stw	r17,4(sp)
    8144:	80000015 	stw	zero,0(r16)
    8148:	2023883a 	mov	r17,r4
    814c:	2809883a 	mov	r4,r5
    8150:	300b883a 	mov	r5,r6
    8154:	dfc00215 	stw	ra,8(sp)
    8158:	00083640 	call	8364 <fstat>
    815c:	1007883a 	mov	r3,r2
    8160:	00bfffc4 	movi	r2,-1
    8164:	18800626 	beq	r3,r2,8180 <_fstat_r+0x50>
    8168:	1805883a 	mov	r2,r3
    816c:	dfc00217 	ldw	ra,8(sp)
    8170:	dc400117 	ldw	r17,4(sp)
    8174:	dc000017 	ldw	r16,0(sp)
    8178:	dec00304 	addi	sp,sp,12
    817c:	f800283a 	ret
    8180:	80800017 	ldw	r2,0(r16)
    8184:	103ff826 	beq	r2,zero,8168 <_fstat_r+0x38>
    8188:	88800015 	stw	r2,0(r17)
    818c:	1805883a 	mov	r2,r3
    8190:	dfc00217 	ldw	ra,8(sp)
    8194:	dc400117 	ldw	r17,4(sp)
    8198:	dc000017 	ldw	r16,0(sp)
    819c:	dec00304 	addi	sp,sp,12
    81a0:	f800283a 	ret

000081a4 <_isatty_r>:
    81a4:	defffd04 	addi	sp,sp,-12
    81a8:	dc000015 	stw	r16,0(sp)
    81ac:	04000074 	movhi	r16,1
    81b0:	84309b04 	addi	r16,r16,-15764
    81b4:	dc400115 	stw	r17,4(sp)
    81b8:	80000015 	stw	zero,0(r16)
    81bc:	2023883a 	mov	r17,r4
    81c0:	2809883a 	mov	r4,r5
    81c4:	dfc00215 	stw	ra,8(sp)
    81c8:	00084980 	call	8498 <isatty>
    81cc:	1007883a 	mov	r3,r2
    81d0:	00bfffc4 	movi	r2,-1
    81d4:	18800626 	beq	r3,r2,81f0 <_isatty_r+0x4c>
    81d8:	1805883a 	mov	r2,r3
    81dc:	dfc00217 	ldw	ra,8(sp)
    81e0:	dc400117 	ldw	r17,4(sp)
    81e4:	dc000017 	ldw	r16,0(sp)
    81e8:	dec00304 	addi	sp,sp,12
    81ec:	f800283a 	ret
    81f0:	80800017 	ldw	r2,0(r16)
    81f4:	103ff826 	beq	r2,zero,81d8 <_isatty_r+0x34>
    81f8:	88800015 	stw	r2,0(r17)
    81fc:	1805883a 	mov	r2,r3
    8200:	dfc00217 	ldw	ra,8(sp)
    8204:	dc400117 	ldw	r17,4(sp)
    8208:	dc000017 	ldw	r16,0(sp)
    820c:	dec00304 	addi	sp,sp,12
    8210:	f800283a 	ret

00008214 <_lseek_r>:
    8214:	defffd04 	addi	sp,sp,-12
    8218:	dc000015 	stw	r16,0(sp)
    821c:	04000074 	movhi	r16,1
    8220:	84309b04 	addi	r16,r16,-15764
    8224:	dc400115 	stw	r17,4(sp)
    8228:	80000015 	stw	zero,0(r16)
    822c:	2023883a 	mov	r17,r4
    8230:	2809883a 	mov	r4,r5
    8234:	300b883a 	mov	r5,r6
    8238:	380d883a 	mov	r6,r7
    823c:	dfc00215 	stw	ra,8(sp)
    8240:	00085b80 	call	85b8 <lseek>
    8244:	1007883a 	mov	r3,r2
    8248:	00bfffc4 	movi	r2,-1
    824c:	18800626 	beq	r3,r2,8268 <_lseek_r+0x54>
    8250:	1805883a 	mov	r2,r3
    8254:	dfc00217 	ldw	ra,8(sp)
    8258:	dc400117 	ldw	r17,4(sp)
    825c:	dc000017 	ldw	r16,0(sp)
    8260:	dec00304 	addi	sp,sp,12
    8264:	f800283a 	ret
    8268:	80800017 	ldw	r2,0(r16)
    826c:	103ff826 	beq	r2,zero,8250 <_lseek_r+0x3c>
    8270:	88800015 	stw	r2,0(r17)
    8274:	1805883a 	mov	r2,r3
    8278:	dfc00217 	ldw	ra,8(sp)
    827c:	dc400117 	ldw	r17,4(sp)
    8280:	dc000017 	ldw	r16,0(sp)
    8284:	dec00304 	addi	sp,sp,12
    8288:	f800283a 	ret

0000828c <_read_r>:
    828c:	defffd04 	addi	sp,sp,-12
    8290:	dc000015 	stw	r16,0(sp)
    8294:	04000074 	movhi	r16,1
    8298:	84309b04 	addi	r16,r16,-15764
    829c:	dc400115 	stw	r17,4(sp)
    82a0:	80000015 	stw	zero,0(r16)
    82a4:	2023883a 	mov	r17,r4
    82a8:	2809883a 	mov	r4,r5
    82ac:	300b883a 	mov	r5,r6
    82b0:	380d883a 	mov	r6,r7
    82b4:	dfc00215 	stw	ra,8(sp)
    82b8:	00087480 	call	8748 <read>
    82bc:	1007883a 	mov	r3,r2
    82c0:	00bfffc4 	movi	r2,-1
    82c4:	18800626 	beq	r3,r2,82e0 <_read_r+0x54>
    82c8:	1805883a 	mov	r2,r3
    82cc:	dfc00217 	ldw	ra,8(sp)
    82d0:	dc400117 	ldw	r17,4(sp)
    82d4:	dc000017 	ldw	r16,0(sp)
    82d8:	dec00304 	addi	sp,sp,12
    82dc:	f800283a 	ret
    82e0:	80800017 	ldw	r2,0(r16)
    82e4:	103ff826 	beq	r2,zero,82c8 <_read_r+0x3c>
    82e8:	88800015 	stw	r2,0(r17)
    82ec:	1805883a 	mov	r2,r3
    82f0:	dfc00217 	ldw	ra,8(sp)
    82f4:	dc400117 	ldw	r17,4(sp)
    82f8:	dc000017 	ldw	r16,0(sp)
    82fc:	dec00304 	addi	sp,sp,12
    8300:	f800283a 	ret

00008304 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    8304:	defffd04 	addi	sp,sp,-12
    8308:	df000215 	stw	fp,8(sp)
    830c:	df000204 	addi	fp,sp,8
    8310:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    8314:	e0bfff17 	ldw	r2,-4(fp)
    8318:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    831c:	e0bffe17 	ldw	r2,-8(fp)
    8320:	1005003a 	cmpeq	r2,r2,zero
    8324:	1000021e 	bne	r2,zero,8330 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    8328:	002af070 	cmpltui	zero,zero,43969
    832c:	00000106 	br	8334 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    8330:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    8334:	e037883a 	mov	sp,fp
    8338:	df000017 	ldw	fp,0(sp)
    833c:	dec00104 	addi	sp,sp,4
    8340:	f800283a 	ret

00008344 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8344:	defffd04 	addi	sp,sp,-12
    8348:	dfc00215 	stw	ra,8(sp)
    834c:	df000115 	stw	fp,4(sp)
    8350:	df000104 	addi	fp,sp,4
    8354:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    8358:	e13fff17 	ldw	r4,-4(fp)
    835c:	00083040 	call	8304 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8360:	003fff06 	br	8360 <_exit+0x1c>

00008364 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    8364:	defff904 	addi	sp,sp,-28
    8368:	dfc00615 	stw	ra,24(sp)
    836c:	df000515 	stw	fp,20(sp)
    8370:	df000504 	addi	fp,sp,20
    8374:	e13ffc15 	stw	r4,-16(fp)
    8378:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    837c:	e0bffc17 	ldw	r2,-16(fp)
    8380:	1004803a 	cmplt	r2,r2,zero
    8384:	1000081e 	bne	r2,zero,83a8 <fstat+0x44>
    8388:	e0bffc17 	ldw	r2,-16(fp)
    838c:	10800324 	muli	r2,r2,12
    8390:	1007883a 	mov	r3,r2
    8394:	00800074 	movhi	r2,1
    8398:	10a88604 	addi	r2,r2,-24040
    839c:	1887883a 	add	r3,r3,r2
    83a0:	e0ffff15 	stw	r3,-4(fp)
    83a4:	00000106 	br	83ac <fstat+0x48>
    83a8:	e03fff15 	stw	zero,-4(fp)
    83ac:	e0bfff17 	ldw	r2,-4(fp)
    83b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    83b4:	e0bffb17 	ldw	r2,-20(fp)
    83b8:	1005003a 	cmpeq	r2,r2,zero
    83bc:	1000121e 	bne	r2,zero,8408 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    83c0:	e0bffb17 	ldw	r2,-20(fp)
    83c4:	10800017 	ldw	r2,0(r2)
    83c8:	10800817 	ldw	r2,32(r2)
    83cc:	1005003a 	cmpeq	r2,r2,zero
    83d0:	1000081e 	bne	r2,zero,83f4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    83d4:	e0bffb17 	ldw	r2,-20(fp)
    83d8:	10800017 	ldw	r2,0(r2)
    83dc:	10800817 	ldw	r2,32(r2)
    83e0:	e13ffb17 	ldw	r4,-20(fp)
    83e4:	e17ffd17 	ldw	r5,-12(fp)
    83e8:	103ee83a 	callr	r2
    83ec:	e0bffe15 	stw	r2,-8(fp)
    83f0:	00000b06 	br	8420 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    83f4:	e0fffd17 	ldw	r3,-12(fp)
    83f8:	00880004 	movi	r2,8192
    83fc:	18800115 	stw	r2,4(r3)
      return 0;
    8400:	e03ffe15 	stw	zero,-8(fp)
    8404:	00000606 	br	8420 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8408:	00084380 	call	8438 <alt_get_errno>
    840c:	1007883a 	mov	r3,r2
    8410:	00801444 	movi	r2,81
    8414:	18800015 	stw	r2,0(r3)
    return -1;
    8418:	00bfffc4 	movi	r2,-1
    841c:	e0bffe15 	stw	r2,-8(fp)
    8420:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    8424:	e037883a 	mov	sp,fp
    8428:	dfc00117 	ldw	ra,4(sp)
    842c:	df000017 	ldw	fp,0(sp)
    8430:	dec00204 	addi	sp,sp,8
    8434:	f800283a 	ret

00008438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8438:	defffd04 	addi	sp,sp,-12
    843c:	dfc00215 	stw	ra,8(sp)
    8440:	df000115 	stw	fp,4(sp)
    8444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8448:	00800074 	movhi	r2,1
    844c:	10a9f004 	addi	r2,r2,-22592
    8450:	10800017 	ldw	r2,0(r2)
    8454:	1005003a 	cmpeq	r2,r2,zero
    8458:	1000061e 	bne	r2,zero,8474 <alt_get_errno+0x3c>
    845c:	00800074 	movhi	r2,1
    8460:	10a9f004 	addi	r2,r2,-22592
    8464:	10800017 	ldw	r2,0(r2)
    8468:	103ee83a 	callr	r2
    846c:	e0bfff15 	stw	r2,-4(fp)
    8470:	00000306 	br	8480 <alt_get_errno+0x48>
    8474:	00800074 	movhi	r2,1
    8478:	10b09b04 	addi	r2,r2,-15764
    847c:	e0bfff15 	stw	r2,-4(fp)
    8480:	e0bfff17 	ldw	r2,-4(fp)
}
    8484:	e037883a 	mov	sp,fp
    8488:	dfc00117 	ldw	ra,4(sp)
    848c:	df000017 	ldw	fp,0(sp)
    8490:	dec00204 	addi	sp,sp,8
    8494:	f800283a 	ret

00008498 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    8498:	deffeb04 	addi	sp,sp,-84
    849c:	dfc01415 	stw	ra,80(sp)
    84a0:	df001315 	stw	fp,76(sp)
    84a4:	df001304 	addi	fp,sp,76
    84a8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	1004803a 	cmplt	r2,r2,zero
    84b4:	1000081e 	bne	r2,zero,84d8 <isatty+0x40>
    84b8:	e0bffd17 	ldw	r2,-12(fp)
    84bc:	10800324 	muli	r2,r2,12
    84c0:	1007883a 	mov	r3,r2
    84c4:	00800074 	movhi	r2,1
    84c8:	10a88604 	addi	r2,r2,-24040
    84cc:	1887883a 	add	r3,r3,r2
    84d0:	e0ffff15 	stw	r3,-4(fp)
    84d4:	00000106 	br	84dc <isatty+0x44>
    84d8:	e03fff15 	stw	zero,-4(fp)
    84dc:	e0bfff17 	ldw	r2,-4(fp)
    84e0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    84e4:	e0bfed17 	ldw	r2,-76(fp)
    84e8:	1005003a 	cmpeq	r2,r2,zero
    84ec:	10000f1e 	bne	r2,zero,852c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    84f0:	e0bfed17 	ldw	r2,-76(fp)
    84f4:	10800017 	ldw	r2,0(r2)
    84f8:	10800817 	ldw	r2,32(r2)
    84fc:	1004c03a 	cmpne	r2,r2,zero
    8500:	1000031e 	bne	r2,zero,8510 <isatty+0x78>
    {
      return 1;
    8504:	00800044 	movi	r2,1
    8508:	e0bffe15 	stw	r2,-8(fp)
    850c:	00000c06 	br	8540 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    8510:	e17fee04 	addi	r5,fp,-72
    8514:	e13ffd17 	ldw	r4,-12(fp)
    8518:	00083640 	call	8364 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    851c:	e0bfef17 	ldw	r2,-68(fp)
    8520:	10880020 	cmpeqi	r2,r2,8192
    8524:	e0bffe15 	stw	r2,-8(fp)
    8528:	00000506 	br	8540 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    852c:	00085580 	call	8558 <alt_get_errno>
    8530:	1007883a 	mov	r3,r2
    8534:	00801444 	movi	r2,81
    8538:	18800015 	stw	r2,0(r3)
    return 0;
    853c:	e03ffe15 	stw	zero,-8(fp)
    8540:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    8544:	e037883a 	mov	sp,fp
    8548:	dfc00117 	ldw	ra,4(sp)
    854c:	df000017 	ldw	fp,0(sp)
    8550:	dec00204 	addi	sp,sp,8
    8554:	f800283a 	ret

00008558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8558:	defffd04 	addi	sp,sp,-12
    855c:	dfc00215 	stw	ra,8(sp)
    8560:	df000115 	stw	fp,4(sp)
    8564:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8568:	00800074 	movhi	r2,1
    856c:	10a9f004 	addi	r2,r2,-22592
    8570:	10800017 	ldw	r2,0(r2)
    8574:	1005003a 	cmpeq	r2,r2,zero
    8578:	1000061e 	bne	r2,zero,8594 <alt_get_errno+0x3c>
    857c:	00800074 	movhi	r2,1
    8580:	10a9f004 	addi	r2,r2,-22592
    8584:	10800017 	ldw	r2,0(r2)
    8588:	103ee83a 	callr	r2
    858c:	e0bfff15 	stw	r2,-4(fp)
    8590:	00000306 	br	85a0 <alt_get_errno+0x48>
    8594:	00800074 	movhi	r2,1
    8598:	10b09b04 	addi	r2,r2,-15764
    859c:	e0bfff15 	stw	r2,-4(fp)
    85a0:	e0bfff17 	ldw	r2,-4(fp)
}
    85a4:	e037883a 	mov	sp,fp
    85a8:	dfc00117 	ldw	ra,4(sp)
    85ac:	df000017 	ldw	fp,0(sp)
    85b0:	dec00204 	addi	sp,sp,8
    85b4:	f800283a 	ret

000085b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    85b8:	defff804 	addi	sp,sp,-32
    85bc:	dfc00715 	stw	ra,28(sp)
    85c0:	df000615 	stw	fp,24(sp)
    85c4:	df000604 	addi	fp,sp,24
    85c8:	e13ffc15 	stw	r4,-16(fp)
    85cc:	e17ffd15 	stw	r5,-12(fp)
    85d0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    85d4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    85d8:	e0bffc17 	ldw	r2,-16(fp)
    85dc:	1004803a 	cmplt	r2,r2,zero
    85e0:	1000081e 	bne	r2,zero,8604 <lseek+0x4c>
    85e4:	e0bffc17 	ldw	r2,-16(fp)
    85e8:	10800324 	muli	r2,r2,12
    85ec:	1007883a 	mov	r3,r2
    85f0:	00800074 	movhi	r2,1
    85f4:	10a88604 	addi	r2,r2,-24040
    85f8:	1887883a 	add	r3,r3,r2
    85fc:	e0ffff15 	stw	r3,-4(fp)
    8600:	00000106 	br	8608 <lseek+0x50>
    8604:	e03fff15 	stw	zero,-4(fp)
    8608:	e0bfff17 	ldw	r2,-4(fp)
    860c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    8610:	e0bffb17 	ldw	r2,-20(fp)
    8614:	1005003a 	cmpeq	r2,r2,zero
    8618:	1000111e 	bne	r2,zero,8660 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    861c:	e0bffb17 	ldw	r2,-20(fp)
    8620:	10800017 	ldw	r2,0(r2)
    8624:	10800717 	ldw	r2,28(r2)
    8628:	1005003a 	cmpeq	r2,r2,zero
    862c:	1000091e 	bne	r2,zero,8654 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    8630:	e0bffb17 	ldw	r2,-20(fp)
    8634:	10800017 	ldw	r2,0(r2)
    8638:	10800717 	ldw	r2,28(r2)
    863c:	e13ffb17 	ldw	r4,-20(fp)
    8640:	e17ffd17 	ldw	r5,-12(fp)
    8644:	e1bffe17 	ldw	r6,-8(fp)
    8648:	103ee83a 	callr	r2
    864c:	e0bffa15 	stw	r2,-24(fp)
    8650:	00000506 	br	8668 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    8654:	00bfde84 	movi	r2,-134
    8658:	e0bffa15 	stw	r2,-24(fp)
    865c:	00000206 	br	8668 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    8660:	00bfebc4 	movi	r2,-81
    8664:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    8668:	e0bffa17 	ldw	r2,-24(fp)
    866c:	1004403a 	cmpge	r2,r2,zero
    8670:	1000071e 	bne	r2,zero,8690 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    8674:	00086a80 	call	86a8 <alt_get_errno>
    8678:	1007883a 	mov	r3,r2
    867c:	e0bffa17 	ldw	r2,-24(fp)
    8680:	0085c83a 	sub	r2,zero,r2
    8684:	18800015 	stw	r2,0(r3)
    rc = -1;
    8688:	00bfffc4 	movi	r2,-1
    868c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    8690:	e0bffa17 	ldw	r2,-24(fp)
}
    8694:	e037883a 	mov	sp,fp
    8698:	dfc00117 	ldw	ra,4(sp)
    869c:	df000017 	ldw	fp,0(sp)
    86a0:	dec00204 	addi	sp,sp,8
    86a4:	f800283a 	ret

000086a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    86a8:	defffd04 	addi	sp,sp,-12
    86ac:	dfc00215 	stw	ra,8(sp)
    86b0:	df000115 	stw	fp,4(sp)
    86b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    86b8:	00800074 	movhi	r2,1
    86bc:	10a9f004 	addi	r2,r2,-22592
    86c0:	10800017 	ldw	r2,0(r2)
    86c4:	1005003a 	cmpeq	r2,r2,zero
    86c8:	1000061e 	bne	r2,zero,86e4 <alt_get_errno+0x3c>
    86cc:	00800074 	movhi	r2,1
    86d0:	10a9f004 	addi	r2,r2,-22592
    86d4:	10800017 	ldw	r2,0(r2)
    86d8:	103ee83a 	callr	r2
    86dc:	e0bfff15 	stw	r2,-4(fp)
    86e0:	00000306 	br	86f0 <alt_get_errno+0x48>
    86e4:	00800074 	movhi	r2,1
    86e8:	10b09b04 	addi	r2,r2,-15764
    86ec:	e0bfff15 	stw	r2,-4(fp)
    86f0:	e0bfff17 	ldw	r2,-4(fp)
}
    86f4:	e037883a 	mov	sp,fp
    86f8:	dfc00117 	ldw	ra,4(sp)
    86fc:	df000017 	ldw	fp,0(sp)
    8700:	dec00204 	addi	sp,sp,8
    8704:	f800283a 	ret

00008708 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    8708:	defffe04 	addi	sp,sp,-8
    870c:	df000115 	stw	fp,4(sp)
    8710:	df000104 	addi	fp,sp,4
    8714:	e13fff15 	stw	r4,-4(fp)
}
    8718:	e037883a 	mov	sp,fp
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00104 	addi	sp,sp,4
    8724:	f800283a 	ret

00008728 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    8728:	defffe04 	addi	sp,sp,-8
    872c:	df000115 	stw	fp,4(sp)
    8730:	df000104 	addi	fp,sp,4
    8734:	e13fff15 	stw	r4,-4(fp)
}
    8738:	e037883a 	mov	sp,fp
    873c:	df000017 	ldw	fp,0(sp)
    8740:	dec00104 	addi	sp,sp,4
    8744:	f800283a 	ret

00008748 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    8748:	defff704 	addi	sp,sp,-36
    874c:	dfc00815 	stw	ra,32(sp)
    8750:	df000715 	stw	fp,28(sp)
    8754:	df000704 	addi	fp,sp,28
    8758:	e13ffb15 	stw	r4,-20(fp)
    875c:	e17ffc15 	stw	r5,-16(fp)
    8760:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8764:	e0bffb17 	ldw	r2,-20(fp)
    8768:	1004803a 	cmplt	r2,r2,zero
    876c:	1000081e 	bne	r2,zero,8790 <read+0x48>
    8770:	e0bffb17 	ldw	r2,-20(fp)
    8774:	10800324 	muli	r2,r2,12
    8778:	1007883a 	mov	r3,r2
    877c:	00800074 	movhi	r2,1
    8780:	10a88604 	addi	r2,r2,-24040
    8784:	1887883a 	add	r3,r3,r2
    8788:	e0ffff15 	stw	r3,-4(fp)
    878c:	00000106 	br	8794 <read+0x4c>
    8790:	e03fff15 	stw	zero,-4(fp)
    8794:	e0bfff17 	ldw	r2,-4(fp)
    8798:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    879c:	e0bffa17 	ldw	r2,-24(fp)
    87a0:	1005003a 	cmpeq	r2,r2,zero
    87a4:	1000241e 	bne	r2,zero,8838 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    87a8:	e0bffa17 	ldw	r2,-24(fp)
    87ac:	10800217 	ldw	r2,8(r2)
    87b0:	108000cc 	andi	r2,r2,3
    87b4:	10800060 	cmpeqi	r2,r2,1
    87b8:	10001a1e 	bne	r2,zero,8824 <read+0xdc>
    87bc:	e0bffa17 	ldw	r2,-24(fp)
    87c0:	10800017 	ldw	r2,0(r2)
    87c4:	10800517 	ldw	r2,20(r2)
    87c8:	1005003a 	cmpeq	r2,r2,zero
    87cc:	1000151e 	bne	r2,zero,8824 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    87d0:	e0bffa17 	ldw	r2,-24(fp)
    87d4:	10800017 	ldw	r2,0(r2)
    87d8:	10800517 	ldw	r2,20(r2)
    87dc:	e17ffc17 	ldw	r5,-16(fp)
    87e0:	e1bffd17 	ldw	r6,-12(fp)
    87e4:	e13ffa17 	ldw	r4,-24(fp)
    87e8:	103ee83a 	callr	r2
    87ec:	e0bff915 	stw	r2,-28(fp)
    87f0:	e0bff917 	ldw	r2,-28(fp)
    87f4:	1004403a 	cmpge	r2,r2,zero
    87f8:	1000071e 	bne	r2,zero,8818 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    87fc:	00088680 	call	8868 <alt_get_errno>
    8800:	e0fff917 	ldw	r3,-28(fp)
    8804:	00c7c83a 	sub	r3,zero,r3
    8808:	10c00015 	stw	r3,0(r2)
          return -1;
    880c:	00bfffc4 	movi	r2,-1
    8810:	e0bffe15 	stw	r2,-8(fp)
    8814:	00000e06 	br	8850 <read+0x108>
        }
        return rval;
    8818:	e0bff917 	ldw	r2,-28(fp)
    881c:	e0bffe15 	stw	r2,-8(fp)
    8820:	00000b06 	br	8850 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    8824:	00088680 	call	8868 <alt_get_errno>
    8828:	1007883a 	mov	r3,r2
    882c:	00800344 	movi	r2,13
    8830:	18800015 	stw	r2,0(r3)
    8834:	00000406 	br	8848 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    8838:	00088680 	call	8868 <alt_get_errno>
    883c:	1007883a 	mov	r3,r2
    8840:	00801444 	movi	r2,81
    8844:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8848:	00bfffc4 	movi	r2,-1
    884c:	e0bffe15 	stw	r2,-8(fp)
    8850:	e0bffe17 	ldw	r2,-8(fp)
}
    8854:	e037883a 	mov	sp,fp
    8858:	dfc00117 	ldw	ra,4(sp)
    885c:	df000017 	ldw	fp,0(sp)
    8860:	dec00204 	addi	sp,sp,8
    8864:	f800283a 	ret

00008868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8868:	defffd04 	addi	sp,sp,-12
    886c:	dfc00215 	stw	ra,8(sp)
    8870:	df000115 	stw	fp,4(sp)
    8874:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8878:	00800074 	movhi	r2,1
    887c:	10a9f004 	addi	r2,r2,-22592
    8880:	10800017 	ldw	r2,0(r2)
    8884:	1005003a 	cmpeq	r2,r2,zero
    8888:	1000061e 	bne	r2,zero,88a4 <alt_get_errno+0x3c>
    888c:	00800074 	movhi	r2,1
    8890:	10a9f004 	addi	r2,r2,-22592
    8894:	10800017 	ldw	r2,0(r2)
    8898:	103ee83a 	callr	r2
    889c:	e0bfff15 	stw	r2,-4(fp)
    88a0:	00000306 	br	88b0 <alt_get_errno+0x48>
    88a4:	00800074 	movhi	r2,1
    88a8:	10b09b04 	addi	r2,r2,-15764
    88ac:	e0bfff15 	stw	r2,-4(fp)
    88b0:	e0bfff17 	ldw	r2,-4(fp)
}
    88b4:	e037883a 	mov	sp,fp
    88b8:	dfc00117 	ldw	ra,4(sp)
    88bc:	df000017 	ldw	fp,0(sp)
    88c0:	dec00204 	addi	sp,sp,8
    88c4:	f800283a 	ret

000088c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    88c8:	defff804 	addi	sp,sp,-32
    88cc:	df000715 	stw	fp,28(sp)
    88d0:	df000704 	addi	fp,sp,28
    88d4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88d8:	0005303a 	rdctl	r2,status
    88dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88e0:	e0fffb17 	ldw	r3,-20(fp)
    88e4:	00bfff84 	movi	r2,-2
    88e8:	1884703a 	and	r2,r3,r2
    88ec:	1001703a 	wrctl	status,r2
  
  return context;
    88f0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    88f4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    88f8:	d0a00e17 	ldw	r2,-32712(gp)
    88fc:	10c000c4 	addi	r3,r2,3
    8900:	00bfff04 	movi	r2,-4
    8904:	1884703a 	and	r2,r3,r2
    8908:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    890c:	d0e00e17 	ldw	r3,-32712(gp)
    8910:	e0bffe17 	ldw	r2,-8(fp)
    8914:	1887883a 	add	r3,r3,r2
    8918:	00820034 	movhi	r2,2048
    891c:	10800004 	addi	r2,r2,0
    8920:	10c0072e 	bgeu	r2,r3,8940 <sbrk+0x78>
    8924:	e0bffd17 	ldw	r2,-12(fp)
    8928:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    892c:	e0bffa17 	ldw	r2,-24(fp)
    8930:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    8934:	00bfffc4 	movi	r2,-1
    8938:	e0bfff15 	stw	r2,-4(fp)
    893c:	00000c06 	br	8970 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    8940:	d0a00e17 	ldw	r2,-32712(gp)
    8944:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    8948:	d0e00e17 	ldw	r3,-32712(gp)
    894c:	e0bffe17 	ldw	r2,-8(fp)
    8950:	1885883a 	add	r2,r3,r2
    8954:	d0a00e15 	stw	r2,-32712(gp)
    8958:	e0bffd17 	ldw	r2,-12(fp)
    895c:	e0bff915 	stw	r2,-28(fp)
    8960:	e0bff917 	ldw	r2,-28(fp)
    8964:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    8968:	e0bffc17 	ldw	r2,-16(fp)
    896c:	e0bfff15 	stw	r2,-4(fp)
    8970:	e0bfff17 	ldw	r2,-4(fp)
} 
    8974:	e037883a 	mov	sp,fp
    8978:	df000017 	ldw	fp,0(sp)
    897c:	dec00104 	addi	sp,sp,4
    8980:	f800283a 	ret

00008984 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8984:	defff704 	addi	sp,sp,-36
    8988:	dfc00815 	stw	ra,32(sp)
    898c:	df000715 	stw	fp,28(sp)
    8990:	df000704 	addi	fp,sp,28
    8994:	e13ffb15 	stw	r4,-20(fp)
    8998:	e17ffc15 	stw	r5,-16(fp)
    899c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    89a0:	e0bffb17 	ldw	r2,-20(fp)
    89a4:	1004803a 	cmplt	r2,r2,zero
    89a8:	1000081e 	bne	r2,zero,89cc <write+0x48>
    89ac:	e0bffb17 	ldw	r2,-20(fp)
    89b0:	10800324 	muli	r2,r2,12
    89b4:	1007883a 	mov	r3,r2
    89b8:	00800074 	movhi	r2,1
    89bc:	10a88604 	addi	r2,r2,-24040
    89c0:	1887883a 	add	r3,r3,r2
    89c4:	e0ffff15 	stw	r3,-4(fp)
    89c8:	00000106 	br	89d0 <write+0x4c>
    89cc:	e03fff15 	stw	zero,-4(fp)
    89d0:	e0bfff17 	ldw	r2,-4(fp)
    89d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    89d8:	e0bffa17 	ldw	r2,-24(fp)
    89dc:	1005003a 	cmpeq	r2,r2,zero
    89e0:	1000241e 	bne	r2,zero,8a74 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    89e4:	e0bffa17 	ldw	r2,-24(fp)
    89e8:	10800217 	ldw	r2,8(r2)
    89ec:	108000cc 	andi	r2,r2,3
    89f0:	1005003a 	cmpeq	r2,r2,zero
    89f4:	10001a1e 	bne	r2,zero,8a60 <write+0xdc>
    89f8:	e0bffa17 	ldw	r2,-24(fp)
    89fc:	10800017 	ldw	r2,0(r2)
    8a00:	10800617 	ldw	r2,24(r2)
    8a04:	1005003a 	cmpeq	r2,r2,zero
    8a08:	1000151e 	bne	r2,zero,8a60 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8a0c:	e0bffa17 	ldw	r2,-24(fp)
    8a10:	10800017 	ldw	r2,0(r2)
    8a14:	10800617 	ldw	r2,24(r2)
    8a18:	e17ffc17 	ldw	r5,-16(fp)
    8a1c:	e1bffd17 	ldw	r6,-12(fp)
    8a20:	e13ffa17 	ldw	r4,-24(fp)
    8a24:	103ee83a 	callr	r2
    8a28:	e0bff915 	stw	r2,-28(fp)
    8a2c:	e0bff917 	ldw	r2,-28(fp)
    8a30:	1004403a 	cmpge	r2,r2,zero
    8a34:	1000071e 	bne	r2,zero,8a54 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    8a38:	0008aa40 	call	8aa4 <alt_get_errno>
    8a3c:	e0fff917 	ldw	r3,-28(fp)
    8a40:	00c7c83a 	sub	r3,zero,r3
    8a44:	10c00015 	stw	r3,0(r2)
        return -1;
    8a48:	00bfffc4 	movi	r2,-1
    8a4c:	e0bffe15 	stw	r2,-8(fp)
    8a50:	00000e06 	br	8a8c <write+0x108>
      }
      return rval;
    8a54:	e0bff917 	ldw	r2,-28(fp)
    8a58:	e0bffe15 	stw	r2,-8(fp)
    8a5c:	00000b06 	br	8a8c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8a60:	0008aa40 	call	8aa4 <alt_get_errno>
    8a64:	1007883a 	mov	r3,r2
    8a68:	00800344 	movi	r2,13
    8a6c:	18800015 	stw	r2,0(r3)
    8a70:	00000406 	br	8a84 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8a74:	0008aa40 	call	8aa4 <alt_get_errno>
    8a78:	1007883a 	mov	r3,r2
    8a7c:	00801444 	movi	r2,81
    8a80:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8a84:	00bfffc4 	movi	r2,-1
    8a88:	e0bffe15 	stw	r2,-8(fp)
    8a8c:	e0bffe17 	ldw	r2,-8(fp)
}
    8a90:	e037883a 	mov	sp,fp
    8a94:	dfc00117 	ldw	ra,4(sp)
    8a98:	df000017 	ldw	fp,0(sp)
    8a9c:	dec00204 	addi	sp,sp,8
    8aa0:	f800283a 	ret

00008aa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8aa4:	defffd04 	addi	sp,sp,-12
    8aa8:	dfc00215 	stw	ra,8(sp)
    8aac:	df000115 	stw	fp,4(sp)
    8ab0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8ab4:	00800074 	movhi	r2,1
    8ab8:	10a9f004 	addi	r2,r2,-22592
    8abc:	10800017 	ldw	r2,0(r2)
    8ac0:	1005003a 	cmpeq	r2,r2,zero
    8ac4:	1000061e 	bne	r2,zero,8ae0 <alt_get_errno+0x3c>
    8ac8:	00800074 	movhi	r2,1
    8acc:	10a9f004 	addi	r2,r2,-22592
    8ad0:	10800017 	ldw	r2,0(r2)
    8ad4:	103ee83a 	callr	r2
    8ad8:	e0bfff15 	stw	r2,-4(fp)
    8adc:	00000306 	br	8aec <alt_get_errno+0x48>
    8ae0:	00800074 	movhi	r2,1
    8ae4:	10b09b04 	addi	r2,r2,-15764
    8ae8:	e0bfff15 	stw	r2,-4(fp)
    8aec:	e0bfff17 	ldw	r2,-4(fp)
}
    8af0:	e037883a 	mov	sp,fp
    8af4:	dfc00117 	ldw	ra,4(sp)
    8af8:	df000017 	ldw	fp,0(sp)
    8afc:	dec00204 	addi	sp,sp,8
    8b00:	f800283a 	ret
    8b04:	00006830 	cmpltui	zero,zero,416
