
display.elf:     file format elf32-littlenios2
display.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006b1c memsz 0x00006b1c flags r-x
    LOAD off    0x00007b3c vaddr 0x00006b3c paddr 0x00008908 align 2**12
         filesz 0x00001dcc memsz 0x00001dcc flags rw-
    LOAD off    0x0000a6d4 vaddr 0x0000a6d4 paddr 0x0000a6d4 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006730  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000254  000068e8  000068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dcc  00006b3c  00008908  00007b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000a6d4  0000a6d4  0000a6d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009908  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000978  00000000  00000000  00009930  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001407  00000000  00000000  0000a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c7f2  00000000  00000000  0000b6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000548d  00000000  00000000  00027ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d713  00000000  00000000  0002d32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001614  00000000  00000000  0003aa44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001782  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003a82  00000000  00000000  0003d7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0004125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00041280  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004448e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00044491  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00044494  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00044495  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00044496  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004449a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004449e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000444a2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000444ab  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000444b4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000444bd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  000444c8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000f815a  00000000  00000000  000444e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
000068e8 l    d  .rodata	00000000 .rodata
00006b3c l    d  .rwdata	00000000 .rwdata
0000a6d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000420 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006b3c l     O .rwdata	00001060 JTAG_UART
00007b9c l     O .rwdata	00000030 AV_Config
00007bcc l     O .rwdata	00000030 Audio
00007bfc l     O .rwdata	0000002c Char_LCD_16x2
00007c28 l     O .rwdata	0000002c IrDA
00007c54 l     O .rwdata	0000002c Expansion_JP5
00007c80 l     O .rwdata	0000002c Green_LEDs
00007cac l     O .rwdata	0000002c HEX3_HEX0
00007cd8 l     O .rwdata	0000002c HEX7_HEX4
00007d04 l     O .rwdata	0000002c Pushbuttons
00007d30 l     O .rwdata	0000002c Red_LEDs
00007d5c l     O .rwdata	0000002c Slider_Switches
00007d88 l     O .rwdata	00000038 PS2_Port
00007dc0 l     O .rwdata	00000038 PS2_Port_Dual
00007df8 l     O .rwdata	0000002c Serial_Port
00007e24 l     O .rwdata	00000034 USB
00007e58 l     O .rwdata	00000048 VGA_Char_Buffer
00007ea0 l     O .rwdata	00000054 VGA_Pixel_Buffer
00007ef4 l     O .rwdata	0000002c SD_Card
00000bb8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000df0 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000101c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001698 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00003044 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000030c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000031a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000338c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00003688 l     F .text	000000dc alt_file_locked
000038ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000080c8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004610 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000049f4 l     F .text	00000058 std
00004b00 l     F .text	00000008 __fp_lock
00004b08 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
000060e4 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00006218 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00006338 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00006488 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00006648 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008904 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00006884 l     F .text	00000060 alt_get_errno
00005f84 g     F .text	00000070 _isatty_r
0000048c g     F .text	0000006c alt_main
0000a724 g     O .bss	00000100 alt_irq
000022a4 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
00005ff4 g     F .text	00000078 _lseek_r
00008908 g       *ABS*	00000000 __flash_rwdata_start
00001810 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000a9b4 g       *ABS*	00000000 __alt_heap_start
00005bc0 g     F .text	00000068 __sseek
00004a5c g     F .text	000000a4 __sinit
00004254 g     F .text	00000130 __swbuf_r
00002c84 g     F .text	00000114 alt_up_char_buffer_string
000020bc g     F .text	00000034 read_CE_bit
00004b5c g     F .text	00000068 __sfmoreglue
00006508 g     F .text	00000020 __malloc_unlock
00002450 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000298c g     F .text	00000090 alt_up_rs232_read_fd
00002bb4 g     F .text	000000d0 alt_up_char_buffer_draw
00004b4c g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00001794 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005f10 g     F .text	00000074 _fstat_r
0000a6ec g     O .bss	00000004 errno
0000a6d8 g     O .bss	00000004 alt_argv
000108d0 g       *ABS*	00000000 _gp
00007f48 g     O .rwdata	00000180 alt_fd_list
000032c8 g     F .text	00000094 alt_find_dev
00003e98 g     F .text	000000a0 memcpy
000019a8 g     F .text	0000004c alt_up_character_lcd_write_fd
00002d98 g     F .text	0000005c alt_up_char_buffer_clear
00004b40 g     F .text	0000000c _cleanup_r
00003450 g     F .text	00000078 alt_io_redirect
000068e8 g       *ABS*	00000000 __DTOR_END__
00001f88 g     F .text	00000090 alt_up_irda_write_fd
00002918 g     F .text	00000074 alt_up_rs232_read_data
00001d70 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
00001234 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00006278 g     F .text	000000c0 isatty
00001d18 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00003d48 g     F .text	00000090 alt_icache_flush
0000a6f0 g     O .bss	00000004 __malloc_top_pad
00005b48 g     F .text	00000070 _sbrk_r
0000606c g     F .text	00000078 _read_r
000088e0 g     O .rwdata	00000004 alt_max_fd
00002880 g     F .text	00000050 alt_up_rs232_check_parity
00005dec g     F .text	00000110 _fclose_r
000020f0 g     F .text	00000034 read_num_bytes_available
000049c0 g     F .text	00000034 fflush
0000a6f4 g     O .bss	00000004 __malloc_max_sbrked_mem
000034c8 g     F .text	000001c0 alt_irq_register
00002058 g     F .text	00000034 read_RI_bit
00006398 g     F .text	000000f0 lseek
000088f8 g     O .rwdata	00000004 _global_impure_ptr
0000a9b4 g       *ABS*	00000000 __bss_end
00003a44 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00002158 g     F .text	0000002c read_data_byte
00004b28 g     F .text	00000018 __fp_lock_all
000039ac g     F .text	00000098 alt_alarm_stop
0000208c g     F .text	00000030 read_RE_bit
0000a6e0 g     O .bss	00000004 alt_irq_active
00001dac g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00007f20 g     O .rwdata	00000028 alt_dev_null
00001c90 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000022fc g     F .text	00000078 alt_up_ps2_write_data_byte
000030a4 g     F .text	0000001c alt_dcache_flush_all
00008908 g       *ABS*	00000000 __ram_rwdata_end
000088d8 g     O .rwdata	00000008 alt_dev_list
00006764 g     F .text	00000120 write
0000403c g     F .text	000000e8 _putc_r
00006b3c g       *ABS*	00000000 __ram_rodata_end
00006144 g     F .text	000000d4 fstat
00002a1c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000a9b4 g       *ABS*	00000000 end
00002670 g     F .text	000000a8 alt_up_ps2_write_fd
00001dec g     F .text	00000050 alt_up_irda_check_parity
00002af0 g     F .text	00000084 alt_up_char_buffer_init
00000d38 g     F .text	000000b8 altera_avalon_jtag_uart_init
000068e4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000170c g     F .text	00000088 alt_avalon_timer_sc_init
00001458 g     F .text	00000240 altera_avalon_jtag_uart_write
00004a4c g     F .text	00000004 __sfp_lock_acquire
000018b8 g     F .text	00000078 alt_up_character_lcd_write
00004de0 g     F .text	00000314 _free_r
000004f8 g     F .text	00000258 alt_printf
00004614 g     F .text	000001b0 __call_exitprocs
00008900 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
0000a6e4 g     O .bss	00000004 _alt_tick_rate
0000a6e8 g     O .bss	00000004 _alt_nticks
00006528 g     F .text	00000120 read
000007c4 g     F .text	000003f4 alt_sys_init
00001b1c g     F .text	000000b0 alt_up_character_lcd_shift_display
000044dc g     F .text	00000134 __register_exitproc
0000257c g     F .text	00000058 alt_up_ps2_clear_fifo
00002840 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00001bcc g     F .text	00000090 alt_up_character_lcd_erase_pos
000010cc g     F .text	00000074 altera_avalon_jtag_uart_close
00006b3c g       *ABS*	00000000 __ram_rwdata_start
000068e8 g       *ABS*	00000000 __ram_rodata_start
0000a6fc g     O .bss	00000028 __malloc_current_mallinfo
00000bf0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00003c90 g     F .text	000000b8 alt_get_fd
00005d7c g     F .text	00000070 _close_r
00003e24 g     F .text	00000074 memcmp
00000ca0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000a9b4 g       *ABS*	00000000 __alt_stack_base
00000ce8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001cc4 g     F .text	00000054 alt_up_irda_enable_read_interrupt
000043a0 g     F .text	0000013c __swsetup_r
00004bc4 g     F .text	000000f0 __sfp
000084c8 g     O .rwdata	00000408 __malloc_av_
00004a58 g     F .text	00000004 __sinit_lock_release
00005ca4 g     F .text	00000060 __sread
000027ac g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00003b70 g     F .text	00000120 alt_find_file
000030ec g     F .text	000000b4 alt_dev_llist_insert
000064e8 g     F .text	00000020 __malloc_lock
000066a8 g     F .text	000000bc sbrk
000047c4 g     F .text	000001fc _fflush_r
0000a6d4 g       *ABS*	00000000 __bss_start
00000308 g     F .text	00000098 memset
000001f4 g     F .text	00000114 main
0000a6dc g     O .bss	00000004 alt_envp
0000a6f8 g     O .bss	00000004 __malloc_max_total_mem
00002b74 g     F .text	00000040 alt_up_char_buffer_open_dev
00000c48 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00004384 g     F .text	0000001c __swbuf
00001a6c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00005bb8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00005efc g     F .text	00000014 fclose
00002500 g     F .text	0000007c alt_up_ps2_read_data_byte
0000a824 g     O .bss	00000190 _atexit0
00005408 g     F .text	00000740 _malloc_r
000088e4 g     O .rwdata	00000004 alt_errno
000051bc g     F .text	000000b8 _fwalk
00001e3c g     F .text	00000048 alt_up_irda_write_data
00002718 g     F .text	00000040 alt_up_ps2_open_dev
00003f38 g     F .text	00000104 putc
00001878 g     F .text	00000040 alt_up_character_lcd_open_dev
00004cb4 g     F .text	0000012c _malloc_trim_r
00002250 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
000068e8 g       *ABS*	00000000 __CTOR_END__
00001844 g     F .text	00000034 alt_up_character_lcd_init
00004124 g     F .text	000000bc strcmp
000068e8 g       *ABS*	00000000 __flash_rodata_start
000068e8 g       *ABS*	00000000 __DTOR_LIST__
00002ab0 g     F .text	00000040 alt_up_rs232_open_dev
00000790 g     F .text	00000034 alt_irq_init
0000394c g     F .text	00000060 alt_release_fd
00002124 g     F .text	00000034 read_data_valid
00001c5c g     F .text	00000034 alt_up_character_lcd_cursor_off
000023e4 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00003dd8 g     F .text	00000014 atexit
00005d04 g     F .text	00000078 _write_r
000088f4 g     O .rwdata	00000004 _impure_ptr
0000a6d4 g     O .bss	00000004 alt_argc
00003264 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00004b10 g     F .text	00000018 __fp_unlock_all
000088d0 g     O .rwdata	00000008 alt_fs_list
00002758 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
000028d0 g     F .text	00000048 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008908 g       *ABS*	00000000 _edata
0000a9b4 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00001140 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00005c28 g     F .text	0000007c __swrite
000088fc g     O .rwdata	00000004 __malloc_trim_threshold
00003b50 g     F .text	00000020 altera_nios2_qsys_irq_init
00003dec g     F .text	00000038 exit
00001e84 g     F .text	00000074 alt_up_irda_read_data
000050f4 g     F .text	000000c8 _fwalk_reent
00002184 g     F .text	000000cc alt_up_ps2_init
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a50 g     F .text	00000004 __sfp_lock_release
00001930 g     F .text	00000078 alt_up_character_lcd_string
00002018 g     F .text	00000040 alt_up_irda_open_dev
00006124 g     F .text	00000020 _exit
00002df4 g     F .text	00000154 alt_alarm_start
00005274 g     F .text	00000194 __smakebuf_r
00002374 g     F .text	00000070 alt_up_ps2_wait_for_ack
000041e0 g     F .text	00000074 strlen
00003764 g     F .text	00000188 open
00000750 g     F .text	00000040 alt_putchar
0000335c g     F .text	00000030 alt_icache_flush_all
000019f4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
000088e8 g     O .rwdata	00000004 alt_priority_mask
000025d4 g     F .text	0000009c alt_up_ps2_read_fd
00001ef8 g     F .text	00000090 alt_up_irda_read_fd
000088ec g     O .rwdata	00000008 alt_alarm_list
00003200 g     F .text	00000064 _do_ctors
00002804 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00002f48 g     F .text	000000fc close
000003a0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00004a54 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e9c904 	addi	r3,r3,-22748
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e9c904 	addi	r3,r3,-22748
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6823414 	ori	gp,gp,2256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10a9b514 	ori	r2,r2,42708

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18ea6d14 	ori	r3,r3,43444

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00003a00 	call	3a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000048c0 	call	48c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
     1f4:	deffe804 	addi	sp,sp,-96
     1f8:	dfc01715 	stw	ra,92(sp)
     1fc:	df001615 	stw	fp,88(sp)
     200:	df001604 	addi	fp,sp,88
	alt_up_character_lcd_dev *lcd_dev;

	/* create a message to be displayed on the VGA and LCD displays */
	char text_top_row[40] = "Senor Hop\0";
     204:	00c00034 	movhi	r3,0
     208:	18da5204 	addi	r3,r3,26952
     20c:	18800017 	ldw	r2,0(r3)
     210:	e0bfeb15 	stw	r2,-84(fp)
     214:	18800117 	ldw	r2,4(r3)
     218:	e0bfec15 	stw	r2,-80(fp)
     21c:	1880020b 	ldhu	r2,8(r3)
     220:	e0bfed0d 	sth	r2,-76(fp)
     224:	18800283 	ldbu	r2,10(r3)
     228:	e0bfed85 	stb	r2,-74(fp)
     22c:	e13fedc4 	addi	r4,fp,-73
     230:	01800744 	movi	r6,29
     234:	000b883a 	mov	r5,zero
     238:	00003080 	call	308 <memset>
	char text_bottom_row[40] = "Get Some\0";
     23c:	00c00034 	movhi	r3,0
     240:	18da5c04 	addi	r3,r3,26992
     244:	18800017 	ldw	r2,0(r3)
     248:	e0bff515 	stw	r2,-44(fp)
     24c:	18800117 	ldw	r2,4(r3)
     250:	e0bff615 	stw	r2,-40(fp)
     254:	1880020b 	ldhu	r2,8(r3)
     258:	e0bff70d 	sth	r2,-36(fp)
     25c:	e13ff784 	addi	r4,fp,-34
     260:	01800784 	movi	r6,30
     264:	000b883a 	mov	r5,zero
     268:	00003080 	call	308 <memset>

	/* output text message to the LCD */
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     26c:	01000034 	movhi	r4,0
     270:	211a3a04 	addi	r4,r4,26856
     274:	00018780 	call	1878 <alt_up_character_lcd_open_dev>
     278:	e0bfea15 	stw	r2,-88(fp)
	if (lcd_dev == NULL)
     27c:	e0bfea17 	ldw	r2,-88(fp)
     280:	1004c03a 	cmpne	r2,r2,zero
     284:	1000061e 	bne	r2,zero,2a0 <main+0xac>
	{
		alt_printf ("Error: could not open character LCD device\n");
     288:	01000034 	movhi	r4,0
     28c:	211a3f04 	addi	r4,r4,26876
     290:	00004f80 	call	4f8 <alt_printf>
		return -1;
     294:	00bfffc4 	movi	r2,-1
     298:	e0bfff15 	stw	r2,-4(fp)
     29c:	00001406 	br	2f0 <main+0xfc>
	}
	else
		alt_printf ("Opened character LCD device\n");
     2a0:	01000034 	movhi	r4,0
     2a4:	211a4a04 	addi	r4,r4,26920
     2a8:	00004f80 	call	4f8 <alt_printf>
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     2ac:	e13fea17 	ldw	r4,-88(fp)
     2b0:	000b883a 	mov	r5,zero
     2b4:	000d883a 	mov	r6,zero
     2b8:	00019f40 	call	19f4 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_row);
     2bc:	e17feb04 	addi	r5,fp,-84
     2c0:	e13fea17 	ldw	r4,-88(fp)
     2c4:	00019300 	call	1930 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 1);	// set LCD cursor location to bottom row
     2c8:	e13fea17 	ldw	r4,-88(fp)
     2cc:	000b883a 	mov	r5,zero
     2d0:	01800044 	movi	r6,1
     2d4:	00019f40 	call	19f4 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_bottom_row);
     2d8:	e17ff504 	addi	r5,fp,-44
     2dc:	e13fea17 	ldw	r4,-88(fp)
     2e0:	00019300 	call	1930 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor
     2e4:	e13fea17 	ldw	r4,-88(fp)
     2e8:	0001c5c0 	call	1c5c <alt_up_character_lcd_cursor_off>

}
     2ec:	00000106 	br	2f4 <main+0x100>
     2f0:	e0bfff17 	ldw	r2,-4(fp)
     2f4:	e037883a 	mov	sp,fp
     2f8:	dfc00117 	ldw	ra,4(sp)
     2fc:	df000017 	ldw	fp,0(sp)
     300:	dec00204 	addi	sp,sp,8
     304:	f800283a 	ret

00000308 <memset>:
     308:	008000c4 	movi	r2,3
     30c:	29403fcc 	andi	r5,r5,255
     310:	2007883a 	mov	r3,r4
     314:	1180022e 	bgeu	r2,r6,320 <memset+0x18>
     318:	2084703a 	and	r2,r4,r2
     31c:	10000826 	beq	r2,zero,340 <memset+0x38>
     320:	30000526 	beq	r6,zero,338 <memset+0x30>
     324:	2805883a 	mov	r2,r5
     328:	30cd883a 	add	r6,r6,r3
     32c:	18800005 	stb	r2,0(r3)
     330:	18c00044 	addi	r3,r3,1
     334:	19bffd1e 	bne	r3,r6,32c <memset+0x24>
     338:	2005883a 	mov	r2,r4
     33c:	f800283a 	ret
     340:	2804923a 	slli	r2,r5,8
     344:	020003c4 	movi	r8,15
     348:	200f883a 	mov	r7,r4
     34c:	2884b03a 	or	r2,r5,r2
     350:	1006943a 	slli	r3,r2,16
     354:	10c6b03a 	or	r3,r2,r3
     358:	41800a2e 	bgeu	r8,r6,384 <memset+0x7c>
     35c:	4005883a 	mov	r2,r8
     360:	31bffc04 	addi	r6,r6,-16
     364:	38c00015 	stw	r3,0(r7)
     368:	38c00115 	stw	r3,4(r7)
     36c:	38c00215 	stw	r3,8(r7)
     370:	38c00315 	stw	r3,12(r7)
     374:	39c00404 	addi	r7,r7,16
     378:	11bff936 	bltu	r2,r6,360 <memset+0x58>
     37c:	008000c4 	movi	r2,3
     380:	1180052e 	bgeu	r2,r6,398 <memset+0x90>
     384:	31bfff04 	addi	r6,r6,-4
     388:	008000c4 	movi	r2,3
     38c:	38c00015 	stw	r3,0(r7)
     390:	39c00104 	addi	r7,r7,4
     394:	11bffb36 	bltu	r2,r6,384 <memset+0x7c>
     398:	3807883a 	mov	r3,r7
     39c:	003fe006 	br	320 <memset+0x18>

000003a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     3a0:	defffe04 	addi	sp,sp,-8
     3a4:	dfc00115 	stw	ra,4(sp)
     3a8:	df000015 	stw	fp,0(sp)
     3ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     3b0:	01000074 	movhi	r4,1
     3b4:	21224204 	addi	r4,r4,-30456
     3b8:	01400034 	movhi	r5,0
     3bc:	295acf04 	addi	r5,r5,27452
     3c0:	01800074 	movhi	r6,1
     3c4:	31a24204 	addi	r6,r6,-30456
     3c8:	00004200 	call	420 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     3cc:	01000034 	movhi	r4,0
     3d0:	21000804 	addi	r4,r4,32
     3d4:	01400034 	movhi	r5,0
     3d8:	29400804 	addi	r5,r5,32
     3dc:	01800034 	movhi	r6,0
     3e0:	31806e04 	addi	r6,r6,440
     3e4:	00004200 	call	420 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     3e8:	01000034 	movhi	r4,0
     3ec:	211a3a04 	addi	r4,r4,26856
     3f0:	01400034 	movhi	r5,0
     3f4:	295a3a04 	addi	r5,r5,26856
     3f8:	01800034 	movhi	r6,0
     3fc:	319acf04 	addi	r6,r6,27452
     400:	00004200 	call	420 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     404:	00030a40 	call	30a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
     408:	000335c0 	call	335c <alt_icache_flush_all>
}
     40c:	e037883a 	mov	sp,fp
     410:	dfc00117 	ldw	ra,4(sp)
     414:	df000017 	ldw	fp,0(sp)
     418:	dec00204 	addi	sp,sp,8
     41c:	f800283a 	ret

00000420 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     420:	defffc04 	addi	sp,sp,-16
     424:	df000315 	stw	fp,12(sp)
     428:	df000304 	addi	fp,sp,12
     42c:	e13ffd15 	stw	r4,-12(fp)
     430:	e17ffe15 	stw	r5,-8(fp)
     434:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     438:	e0fffe17 	ldw	r3,-8(fp)
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	18800e26 	beq	r3,r2,47c <alt_load_section+0x5c>
  {
    while( to != end )
     444:	00000a06 	br	470 <alt_load_section+0x50>
    {
      *to++ = *from++;
     448:	e0bffd17 	ldw	r2,-12(fp)
     44c:	10c00017 	ldw	r3,0(r2)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	10c00015 	stw	r3,0(r2)
     458:	e0bffe17 	ldw	r2,-8(fp)
     45c:	10800104 	addi	r2,r2,4
     460:	e0bffe15 	stw	r2,-8(fp)
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800104 	addi	r2,r2,4
     46c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     470:	e0fffe17 	ldw	r3,-8(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	18bff31e 	bne	r3,r2,448 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     47c:	e037883a 	mov	sp,fp
     480:	df000017 	ldw	fp,0(sp)
     484:	dec00104 	addi	sp,sp,4
     488:	f800283a 	ret

0000048c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     48c:	defffd04 	addi	sp,sp,-12
     490:	dfc00215 	stw	ra,8(sp)
     494:	df000115 	stw	fp,4(sp)
     498:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     49c:	0009883a 	mov	r4,zero
     4a0:	00007900 	call	790 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     4a4:	00007c40 	call	7c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     4a8:	01000034 	movhi	r4,0
     4ac:	211a6604 	addi	r4,r4,27032
     4b0:	01400034 	movhi	r5,0
     4b4:	295a6604 	addi	r5,r5,27032
     4b8:	01800034 	movhi	r6,0
     4bc:	319a6604 	addi	r6,r6,27032
     4c0:	00034500 	call	3450 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     4c4:	00032000 	call	3200 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     4c8:	01000034 	movhi	r4,0
     4cc:	210c9904 	addi	r4,r4,12900
     4d0:	0003dd80 	call	3dd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     4d4:	d1278117 	ldw	r4,-25084(gp)
     4d8:	d1678217 	ldw	r5,-25080(gp)
     4dc:	d1a78317 	ldw	r6,-25076(gp)
     4e0:	00001f40 	call	1f4 <main>
     4e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     4e8:	01000044 	movi	r4,1
     4ec:	0002f480 	call	2f48 <close>
  exit (result);
     4f0:	e13fff17 	ldw	r4,-4(fp)
     4f4:	0003dec0 	call	3dec <exit>

000004f8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     4f8:	defff204 	addi	sp,sp,-56
     4fc:	dfc00a15 	stw	ra,40(sp)
     500:	df000915 	stw	fp,36(sp)
     504:	df000904 	addi	fp,sp,36
     508:	e1400215 	stw	r5,8(fp)
     50c:	e1800315 	stw	r6,12(fp)
     510:	e1c00415 	stw	r7,16(fp)
     514:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
     518:	e0800204 	addi	r2,fp,8
     51c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
     528:	00007806 	br	70c <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     52c:	e0bffc07 	ldb	r2,-16(fp)
     530:	10800960 	cmpeqi	r2,r2,37
     534:	1000031e 	bne	r2,zero,544 <alt_printf+0x4c>
        {
            alt_putchar(c);
     538:	e13ffc07 	ldb	r4,-16(fp)
     53c:	00007500 	call	750 <alt_putchar>
     540:	00007206 	br	70c <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     544:	e0bffd17 	ldw	r2,-12(fp)
     548:	10800003 	ldbu	r2,0(r2)
     54c:	e0bffc05 	stb	r2,-16(fp)
     550:	e0bffc07 	ldb	r2,-16(fp)
     554:	1004c03a 	cmpne	r2,r2,zero
     558:	1007883a 	mov	r3,r2
     55c:	e0bffd17 	ldw	r2,-12(fp)
     560:	10800044 	addi	r2,r2,1
     564:	e0bffd15 	stw	r2,-12(fp)
     568:	18803fcc 	andi	r2,r3,255
     56c:	1005003a 	cmpeq	r2,r2,zero
     570:	1000721e 	bne	r2,zero,73c <alt_printf+0x244>
            {
                if (c == '%')
     574:	e0bffc07 	ldb	r2,-16(fp)
     578:	10800958 	cmpnei	r2,r2,37
     57c:	1000031e 	bne	r2,zero,58c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     580:	e13ffc07 	ldb	r4,-16(fp)
     584:	00007500 	call	750 <alt_putchar>
     588:	00006006 	br	70c <alt_printf+0x214>
                } 
                else if (c == 'c')
     58c:	e0bffc07 	ldb	r2,-16(fp)
     590:	108018d8 	cmpnei	r2,r2,99
     594:	1000091e 	bne	r2,zero,5bc <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
     598:	e0fffe17 	ldw	r3,-8(fp)
     59c:	18800104 	addi	r2,r3,4
     5a0:	e0bffe15 	stw	r2,-8(fp)
     5a4:	1805883a 	mov	r2,r3
     5a8:	10800017 	ldw	r2,0(r2)
     5ac:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
     5b0:	e13ffb17 	ldw	r4,-20(fp)
     5b4:	00007500 	call	750 <alt_putchar>
     5b8:	00005406 	br	70c <alt_printf+0x214>
                }
                else if (c == 'x')
     5bc:	e0bffc07 	ldb	r2,-16(fp)
     5c0:	10801e18 	cmpnei	r2,r2,120
     5c4:	1000371e 	bne	r2,zero,6a4 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     5c8:	e0fffe17 	ldw	r3,-8(fp)
     5cc:	18800104 	addi	r2,r3,4
     5d0:	e0bffe15 	stw	r2,-8(fp)
     5d4:	1805883a 	mov	r2,r3
     5d8:	10800017 	ldw	r2,0(r2)
     5dc:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     5e0:	e0bffa17 	ldw	r2,-24(fp)
     5e4:	1004c03a 	cmpne	r2,r2,zero
     5e8:	1000031e 	bne	r2,zero,5f8 <alt_printf+0x100>
                    {
                        alt_putchar('0');
     5ec:	01000c04 	movi	r4,48
     5f0:	00007500 	call	750 <alt_putchar>
                        continue;
     5f4:	00004506 	br	70c <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     5f8:	00800704 	movi	r2,28
     5fc:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
     600:	00000306 	br	610 <alt_printf+0x118>
                        digit_shift -= 4;
     604:	e0bff817 	ldw	r2,-32(fp)
     608:	10bfff04 	addi	r2,r2,-4
     60c:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     610:	00c003c4 	movi	r3,15
     614:	e0bff817 	ldw	r2,-32(fp)
     618:	1884983a 	sll	r2,r3,r2
     61c:	1007883a 	mov	r3,r2
     620:	e0bffa17 	ldw	r2,-24(fp)
     624:	1884703a 	and	r2,r3,r2
     628:	1005003a 	cmpeq	r2,r2,zero
     62c:	103ff51e 	bne	r2,zero,604 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     630:	00001806 	br	694 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     634:	00c003c4 	movi	r3,15
     638:	e0bff817 	ldw	r2,-32(fp)
     63c:	1884983a 	sll	r2,r3,r2
     640:	1007883a 	mov	r3,r2
     644:	e0bffa17 	ldw	r2,-24(fp)
     648:	1886703a 	and	r3,r3,r2
     64c:	e0bff817 	ldw	r2,-32(fp)
     650:	1884d83a 	srl	r2,r3,r2
     654:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
     658:	e0bff917 	ldw	r2,-28(fp)
     65c:	108002a8 	cmpgeui	r2,r2,10
     660:	1000041e 	bne	r2,zero,674 <alt_printf+0x17c>
                            c = '0' + digit;
     664:	e0bff917 	ldw	r2,-28(fp)
     668:	10800c04 	addi	r2,r2,48
     66c:	e0bffc05 	stb	r2,-16(fp)
     670:	00000306 	br	680 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
     674:	e0bff917 	ldw	r2,-28(fp)
     678:	108015c4 	addi	r2,r2,87
     67c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
     680:	e13ffc07 	ldb	r4,-16(fp)
     684:	00007500 	call	750 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     688:	e0bff817 	ldw	r2,-32(fp)
     68c:	10bfff04 	addi	r2,r2,-4
     690:	e0bff815 	stw	r2,-32(fp)
     694:	e0bff817 	ldw	r2,-32(fp)
     698:	1004403a 	cmpge	r2,r2,zero
     69c:	103fe51e 	bne	r2,zero,634 <alt_printf+0x13c>
     6a0:	00001a06 	br	70c <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     6a4:	e0bffc07 	ldb	r2,-16(fp)
     6a8:	10801cd8 	cmpnei	r2,r2,115
     6ac:	1000171e 	bne	r2,zero,70c <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     6b0:	e0fffe17 	ldw	r3,-8(fp)
     6b4:	18800104 	addi	r2,r3,4
     6b8:	e0bffe15 	stw	r2,-8(fp)
     6bc:	1805883a 	mov	r2,r3
     6c0:	10800017 	ldw	r2,0(r2)
     6c4:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
     6c8:	00000906 	br	6f0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
     6cc:	e0bff717 	ldw	r2,-36(fp)
     6d0:	10800003 	ldbu	r2,0(r2)
     6d4:	11003fcc 	andi	r4,r2,255
     6d8:	2100201c 	xori	r4,r4,128
     6dc:	213fe004 	addi	r4,r4,-128
     6e0:	e0bff717 	ldw	r2,-36(fp)
     6e4:	10800044 	addi	r2,r2,1
     6e8:	e0bff715 	stw	r2,-36(fp)
     6ec:	00007500 	call	750 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     6f0:	e0bff717 	ldw	r2,-36(fp)
     6f4:	10800003 	ldbu	r2,0(r2)
     6f8:	10803fcc 	andi	r2,r2,255
     6fc:	1080201c 	xori	r2,r2,128
     700:	10bfe004 	addi	r2,r2,-128
     704:	1004c03a 	cmpne	r2,r2,zero
     708:	103ff01e 	bne	r2,zero,6cc <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     70c:	e0bffd17 	ldw	r2,-12(fp)
     710:	10800003 	ldbu	r2,0(r2)
     714:	e0bffc05 	stb	r2,-16(fp)
     718:	e0bffc07 	ldb	r2,-16(fp)
     71c:	1004c03a 	cmpne	r2,r2,zero
     720:	1007883a 	mov	r3,r2
     724:	e0bffd17 	ldw	r2,-12(fp)
     728:	10800044 	addi	r2,r2,1
     72c:	e0bffd15 	stw	r2,-12(fp)
     730:	18803fcc 	andi	r2,r3,255
     734:	1004c03a 	cmpne	r2,r2,zero
     738:	103f7c1e 	bne	r2,zero,52c <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
     73c:	e037883a 	mov	sp,fp
     740:	dfc00117 	ldw	ra,4(sp)
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00504 	addi	sp,sp,20
     74c:	f800283a 	ret

00000750 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     750:	defffd04 	addi	sp,sp,-12
     754:	dfc00215 	stw	ra,8(sp)
     758:	df000115 	stw	fp,4(sp)
     75c:	df000104 	addi	fp,sp,4
     760:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     764:	00800074 	movhi	r2,1
     768:	10a23d04 	addi	r2,r2,-30476
     76c:	10800017 	ldw	r2,0(r2)
     770:	11400217 	ldw	r5,8(r2)
     774:	e13fff17 	ldw	r4,-4(fp)
     778:	0003f380 	call	3f38 <putc>
#endif
}
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     790:	defffd04 	addi	sp,sp,-12
     794:	dfc00215 	stw	ra,8(sp)
     798:	df000115 	stw	fp,4(sp)
     79c:	df000104 	addi	fp,sp,4
     7a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     7a4:	0003b500 	call	3b50 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     7a8:	00800044 	movi	r2,1
     7ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     7b0:	e037883a 	mov	sp,fp
     7b4:	dfc00117 	ldw	ra,4(sp)
     7b8:	df000017 	ldw	fp,0(sp)
     7bc:	dec00204 	addi	sp,sp,8
     7c0:	f800283a 	ret

000007c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     7c4:	defffd04 	addi	sp,sp,-12
     7c8:	dfc00215 	stw	ra,8(sp)
     7cc:	df000115 	stw	fp,4(sp)
     7d0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     7d4:	01040034 	movhi	r4,4096
     7d8:	21080004 	addi	r4,r4,8192
     7dc:	000b883a 	mov	r5,zero
     7e0:	000d883a 	mov	r6,zero
     7e4:	01c00204 	movi	r7,8
     7e8:	000170c0 	call	170c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     7ec:	01000034 	movhi	r4,0
     7f0:	211ad904 	addi	r4,r4,27492
     7f4:	000b883a 	mov	r5,zero
     7f8:	01800204 	movi	r6,8
     7fc:	0000d380 	call	d38 <altera_avalon_jtag_uart_init>
     800:	01000034 	movhi	r4,0
     804:	211acf04 	addi	r4,r4,27452
     808:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
     80c:	01000034 	movhi	r4,0
     810:	211ee704 	addi	r4,r4,31644
     814:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
     818:	01000034 	movhi	r4,0
     81c:	211ef304 	addi	r4,r4,31692
     820:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     824:	01000034 	movhi	r4,0
     828:	211eff04 	addi	r4,r4,31740
     82c:	00018440 	call	1844 <alt_up_character_lcd_init>
     830:	01000034 	movhi	r4,0
     834:	211eff04 	addi	r4,r4,31740
     838:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
     83c:	01000034 	movhi	r4,0
     840:	211f0a04 	addi	r4,r4,31784
     844:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
     848:	01000034 	movhi	r4,0
     84c:	211f1504 	addi	r4,r4,31828
     850:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     854:	01000034 	movhi	r4,0
     858:	211f2004 	addi	r4,r4,31872
     85c:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
     860:	01000034 	movhi	r4,0
     864:	211f2b04 	addi	r4,r4,31916
     868:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
     86c:	01000034 	movhi	r4,0
     870:	211f3604 	addi	r4,r4,31960
     874:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     878:	01000034 	movhi	r4,0
     87c:	211f4104 	addi	r4,r4,32004
     880:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
     884:	01000034 	movhi	r4,0
     888:	211f4c04 	addi	r4,r4,32048
     88c:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
     890:	01000034 	movhi	r4,0
     894:	211f5704 	addi	r4,r4,32092
     898:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     89c:	01000034 	movhi	r4,0
     8a0:	211f6204 	addi	r4,r4,32136
     8a4:	00021840 	call	2184 <alt_up_ps2_init>
     8a8:	01000034 	movhi	r4,0
     8ac:	211f6204 	addi	r4,r4,32136
     8b0:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
     8b4:	01000034 	movhi	r4,0
     8b8:	211f7004 	addi	r4,r4,32192
     8bc:	00021840 	call	2184 <alt_up_ps2_init>
     8c0:	01000034 	movhi	r4,0
     8c4:	211f7004 	addi	r4,r4,32192
     8c8:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
     8cc:	01000034 	movhi	r4,0
     8d0:	211f7e04 	addi	r4,r4,32248
     8d4:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
     8d8:	01000034 	movhi	r4,0
     8dc:	211f8904 	addi	r4,r4,32292
     8e0:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     8e4:	00800034 	movhi	r2,0
     8e8:	109f9604 	addi	r2,r2,32344
     8ec:	10800a17 	ldw	r2,40(r2)
     8f0:	10800104 	addi	r2,r2,4
     8f4:	10800017 	ldw	r2,0(r2)
     8f8:	10ffffcc 	andi	r3,r2,65535
     8fc:	00800034 	movhi	r2,0
     900:	109f9604 	addi	r2,r2,32344
     904:	10c00c15 	stw	r3,48(r2)
     908:	00800034 	movhi	r2,0
     90c:	109f9604 	addi	r2,r2,32344
     910:	10800a17 	ldw	r2,40(r2)
     914:	10800104 	addi	r2,r2,4
     918:	10800017 	ldw	r2,0(r2)
     91c:	1005d43a 	srai	r2,r2,16
     920:	10ffffcc 	andi	r3,r2,65535
     924:	00800034 	movhi	r2,0
     928:	109f9604 	addi	r2,r2,32344
     92c:	10c00d15 	stw	r3,52(r2)
     930:	00800034 	movhi	r2,0
     934:	109f9604 	addi	r2,r2,32344
     938:	10800c17 	ldw	r2,48(r2)
     93c:	10801068 	cmpgeui	r2,r2,65
     940:	1000081e 	bne	r2,zero,964 <alt_sys_init+0x1a0>
     944:	00c00034 	movhi	r3,0
     948:	18df9604 	addi	r3,r3,32344
     94c:	00800fc4 	movi	r2,63
     950:	18800f15 	stw	r2,60(r3)
     954:	00c00034 	movhi	r3,0
     958:	18df9604 	addi	r3,r3,32344
     95c:	00800184 	movi	r2,6
     960:	18801015 	stw	r2,64(r3)
     964:	00800034 	movhi	r2,0
     968:	109f9604 	addi	r2,r2,32344
     96c:	10800d17 	ldw	r2,52(r2)
     970:	10800868 	cmpgeui	r2,r2,33
     974:	1000041e 	bne	r2,zero,988 <alt_sys_init+0x1c4>
     978:	00c00034 	movhi	r3,0
     97c:	18df9604 	addi	r3,r3,32344
     980:	008007c4 	movi	r2,31
     984:	18801115 	stw	r2,68(r3)
     988:	01000034 	movhi	r4,0
     98c:	211f9604 	addi	r4,r4,32344
     990:	0002af00 	call	2af0 <alt_up_char_buffer_init>
     994:	01000034 	movhi	r4,0
     998:	211f9604 	addi	r4,r4,32344
     99c:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     9a0:	00800034 	movhi	r2,0
     9a4:	109fa804 	addi	r2,r2,32416
     9a8:	10800a17 	ldw	r2,40(r2)
     9ac:	10800017 	ldw	r2,0(r2)
     9b0:	1007883a 	mov	r3,r2
     9b4:	00800034 	movhi	r2,0
     9b8:	109fa804 	addi	r2,r2,32416
     9bc:	10c00b15 	stw	r3,44(r2)
     9c0:	00800034 	movhi	r2,0
     9c4:	109fa804 	addi	r2,r2,32416
     9c8:	10800a17 	ldw	r2,40(r2)
     9cc:	10800104 	addi	r2,r2,4
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	1007883a 	mov	r3,r2
     9d8:	00800034 	movhi	r2,0
     9dc:	109fa804 	addi	r2,r2,32416
     9e0:	10c00c15 	stw	r3,48(r2)
     9e4:	00800034 	movhi	r2,0
     9e8:	109fa804 	addi	r2,r2,32416
     9ec:	10800a17 	ldw	r2,40(r2)
     9f0:	10800204 	addi	r2,r2,8
     9f4:	10800017 	ldw	r2,0(r2)
     9f8:	10ffffcc 	andi	r3,r2,65535
     9fc:	00800034 	movhi	r2,0
     a00:	109fa804 	addi	r2,r2,32416
     a04:	10c00f15 	stw	r3,60(r2)
     a08:	00800034 	movhi	r2,0
     a0c:	109fa804 	addi	r2,r2,32416
     a10:	10800a17 	ldw	r2,40(r2)
     a14:	10800204 	addi	r2,r2,8
     a18:	10800017 	ldw	r2,0(r2)
     a1c:	1005d43a 	srai	r2,r2,16
     a20:	10ffffcc 	andi	r3,r2,65535
     a24:	00800034 	movhi	r2,0
     a28:	109fa804 	addi	r2,r2,32416
     a2c:	10c01015 	stw	r3,64(r2)
     a30:	00800034 	movhi	r2,0
     a34:	109fa804 	addi	r2,r2,32416
     a38:	10800a17 	ldw	r2,40(r2)
     a3c:	10800304 	addi	r2,r2,12
     a40:	10800017 	ldw	r2,0(r2)
     a44:	1005d07a 	srai	r2,r2,1
     a48:	10c0004c 	andi	r3,r2,1
     a4c:	00800034 	movhi	r2,0
     a50:	109fa804 	addi	r2,r2,32416
     a54:	10c00d15 	stw	r3,52(r2)
     a58:	00800034 	movhi	r2,0
     a5c:	109fa804 	addi	r2,r2,32416
     a60:	10800a17 	ldw	r2,40(r2)
     a64:	10800304 	addi	r2,r2,12
     a68:	10800017 	ldw	r2,0(r2)
     a6c:	1005d13a 	srai	r2,r2,4
     a70:	10c003cc 	andi	r3,r2,15
     a74:	00800034 	movhi	r2,0
     a78:	109fa804 	addi	r2,r2,32416
     a7c:	10c00e15 	stw	r3,56(r2)
     a80:	00800034 	movhi	r2,0
     a84:	109fa804 	addi	r2,r2,32416
     a88:	10800a17 	ldw	r2,40(r2)
     a8c:	10800304 	addi	r2,r2,12
     a90:	10800017 	ldw	r2,0(r2)
     a94:	1005d43a 	srai	r2,r2,16
     a98:	1007883a 	mov	r3,r2
     a9c:	00bfffc4 	movi	r2,-1
     aa0:	1884703a 	and	r2,r3,r2
     aa4:	e0bfff45 	stb	r2,-3(fp)
     aa8:	00800034 	movhi	r2,0
     aac:	109fa804 	addi	r2,r2,32416
     ab0:	10800a17 	ldw	r2,40(r2)
     ab4:	10800304 	addi	r2,r2,12
     ab8:	10800017 	ldw	r2,0(r2)
     abc:	1005d63a 	srai	r2,r2,24
     ac0:	1007883a 	mov	r3,r2
     ac4:	00bfffc4 	movi	r2,-1
     ac8:	1884703a 	and	r2,r3,r2
     acc:	e0bfff05 	stb	r2,-4(fp)
     ad0:	00800034 	movhi	r2,0
     ad4:	109fa804 	addi	r2,r2,32416
     ad8:	10800e17 	ldw	r2,56(r2)
     adc:	10800058 	cmpnei	r2,r2,1
     ae0:	1000041e 	bne	r2,zero,af4 <alt_sys_init+0x330>
     ae4:	00800034 	movhi	r2,0
     ae8:	109fa804 	addi	r2,r2,32416
     aec:	10001115 	stw	zero,68(r2)
     af0:	00000e06 	br	b2c <alt_sys_init+0x368>
     af4:	00800034 	movhi	r2,0
     af8:	109fa804 	addi	r2,r2,32416
     afc:	10800e17 	ldw	r2,56(r2)
     b00:	10800098 	cmpnei	r2,r2,2
     b04:	1000051e 	bne	r2,zero,b1c <alt_sys_init+0x358>
     b08:	00c00034 	movhi	r3,0
     b0c:	18dfa804 	addi	r3,r3,32416
     b10:	00800044 	movi	r2,1
     b14:	18801115 	stw	r2,68(r3)
     b18:	00000406 	br	b2c <alt_sys_init+0x368>
     b1c:	00c00034 	movhi	r3,0
     b20:	18dfa804 	addi	r3,r3,32416
     b24:	00800084 	movi	r2,2
     b28:	18801115 	stw	r2,68(r3)
     b2c:	e0ffff43 	ldbu	r3,-3(fp)
     b30:	00800804 	movi	r2,32
     b34:	10c7c83a 	sub	r3,r2,r3
     b38:	00bfffc4 	movi	r2,-1
     b3c:	10c6d83a 	srl	r3,r2,r3
     b40:	00800034 	movhi	r2,0
     b44:	109fa804 	addi	r2,r2,32416
     b48:	10c01215 	stw	r3,72(r2)
     b4c:	e0ffff43 	ldbu	r3,-3(fp)
     b50:	00800034 	movhi	r2,0
     b54:	109fa804 	addi	r2,r2,32416
     b58:	10801117 	ldw	r2,68(r2)
     b5c:	1887883a 	add	r3,r3,r2
     b60:	00800034 	movhi	r2,0
     b64:	109fa804 	addi	r2,r2,32416
     b68:	10c01315 	stw	r3,76(r2)
     b6c:	e0ffff03 	ldbu	r3,-4(fp)
     b70:	00800804 	movi	r2,32
     b74:	10c7c83a 	sub	r3,r2,r3
     b78:	00bfffc4 	movi	r2,-1
     b7c:	10c6d83a 	srl	r3,r2,r3
     b80:	00800034 	movhi	r2,0
     b84:	109fa804 	addi	r2,r2,32416
     b88:	10c01415 	stw	r3,80(r2)
     b8c:	01000034 	movhi	r4,0
     b90:	211fa804 	addi	r4,r4,32416
     b94:	0000bb80 	call	bb8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
     b98:	01000034 	movhi	r4,0
     b9c:	211fbd04 	addi	r4,r4,32500
     ba0:	0000bb80 	call	bb8 <alt_dev_reg>
}
     ba4:	e037883a 	mov	sp,fp
     ba8:	dfc00117 	ldw	ra,4(sp)
     bac:	df000017 	ldw	fp,0(sp)
     bb0:	dec00204 	addi	sp,sp,8
     bb4:	f800283a 	ret

00000bb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     bb8:	defffd04 	addi	sp,sp,-12
     bbc:	dfc00215 	stw	ra,8(sp)
     bc0:	df000115 	stw	fp,4(sp)
     bc4:	df000104 	addi	fp,sp,4
     bc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     bcc:	e13fff17 	ldw	r4,-4(fp)
     bd0:	01400074 	movhi	r5,1
     bd4:	29623604 	addi	r5,r5,-30504
     bd8:	00030ec0 	call	30ec <alt_dev_llist_insert>
}
     bdc:	e037883a 	mov	sp,fp
     be0:	dfc00117 	ldw	ra,4(sp)
     be4:	df000017 	ldw	fp,0(sp)
     be8:	dec00204 	addi	sp,sp,8
     bec:	f800283a 	ret

00000bf0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     bf0:	defffa04 	addi	sp,sp,-24
     bf4:	dfc00515 	stw	ra,20(sp)
     bf8:	df000415 	stw	fp,16(sp)
     bfc:	df000404 	addi	fp,sp,16
     c00:	e13ffd15 	stw	r4,-12(fp)
     c04:	e17ffe15 	stw	r5,-8(fp)
     c08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     c0c:	e0bffd17 	ldw	r2,-12(fp)
     c10:	10800017 	ldw	r2,0(r2)
     c14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     c18:	e0bffc17 	ldw	r2,-16(fp)
     c1c:	11000a04 	addi	r4,r2,40
     c20:	e0bffd17 	ldw	r2,-12(fp)
     c24:	11c00217 	ldw	r7,8(r2)
     c28:	e17ffe17 	ldw	r5,-8(fp)
     c2c:	e1bfff17 	ldw	r6,-4(fp)
     c30:	00012340 	call	1234 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     c34:	e037883a 	mov	sp,fp
     c38:	dfc00117 	ldw	ra,4(sp)
     c3c:	df000017 	ldw	fp,0(sp)
     c40:	dec00204 	addi	sp,sp,8
     c44:	f800283a 	ret

00000c48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     c48:	defffa04 	addi	sp,sp,-24
     c4c:	dfc00515 	stw	ra,20(sp)
     c50:	df000415 	stw	fp,16(sp)
     c54:	df000404 	addi	fp,sp,16
     c58:	e13ffd15 	stw	r4,-12(fp)
     c5c:	e17ffe15 	stw	r5,-8(fp)
     c60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10800017 	ldw	r2,0(r2)
     c6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     c70:	e0bffc17 	ldw	r2,-16(fp)
     c74:	11000a04 	addi	r4,r2,40
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	11c00217 	ldw	r7,8(r2)
     c80:	e17ffe17 	ldw	r5,-8(fp)
     c84:	e1bfff17 	ldw	r6,-4(fp)
     c88:	00014580 	call	1458 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     c8c:	e037883a 	mov	sp,fp
     c90:	dfc00117 	ldw	ra,4(sp)
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00204 	addi	sp,sp,8
     c9c:	f800283a 	ret

00000ca0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     ca0:	defffc04 	addi	sp,sp,-16
     ca4:	dfc00315 	stw	ra,12(sp)
     ca8:	df000215 	stw	fp,8(sp)
     cac:	df000204 	addi	fp,sp,8
     cb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     cb4:	e0bfff17 	ldw	r2,-4(fp)
     cb8:	10800017 	ldw	r2,0(r2)
     cbc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     cc0:	e0bffe17 	ldw	r2,-8(fp)
     cc4:	11000a04 	addi	r4,r2,40
     cc8:	e0bfff17 	ldw	r2,-4(fp)
     ccc:	11400217 	ldw	r5,8(r2)
     cd0:	00010cc0 	call	10cc <altera_avalon_jtag_uart_close>
}
     cd4:	e037883a 	mov	sp,fp
     cd8:	dfc00117 	ldw	ra,4(sp)
     cdc:	df000017 	ldw	fp,0(sp)
     ce0:	dec00204 	addi	sp,sp,8
     ce4:	f800283a 	ret

00000ce8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     ce8:	defffa04 	addi	sp,sp,-24
     cec:	dfc00515 	stw	ra,20(sp)
     cf0:	df000415 	stw	fp,16(sp)
     cf4:	df000404 	addi	fp,sp,16
     cf8:	e13ffd15 	stw	r4,-12(fp)
     cfc:	e17ffe15 	stw	r5,-8(fp)
     d00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     d04:	e0bffd17 	ldw	r2,-12(fp)
     d08:	10800017 	ldw	r2,0(r2)
     d0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     d10:	e0bffc17 	ldw	r2,-16(fp)
     d14:	11000a04 	addi	r4,r2,40
     d18:	e17ffe17 	ldw	r5,-8(fp)
     d1c:	e1bfff17 	ldw	r6,-4(fp)
     d20:	00011400 	call	1140 <altera_avalon_jtag_uart_ioctl>
}
     d24:	e037883a 	mov	sp,fp
     d28:	dfc00117 	ldw	ra,4(sp)
     d2c:	df000017 	ldw	fp,0(sp)
     d30:	dec00204 	addi	sp,sp,8
     d34:	f800283a 	ret

00000d38 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     d38:	defffb04 	addi	sp,sp,-20
     d3c:	dfc00415 	stw	ra,16(sp)
     d40:	df000315 	stw	fp,12(sp)
     d44:	df000304 	addi	fp,sp,12
     d48:	e13ffd15 	stw	r4,-12(fp)
     d4c:	e17ffe15 	stw	r5,-8(fp)
     d50:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d54:	e0fffd17 	ldw	r3,-12(fp)
     d58:	00800044 	movi	r2,1
     d5c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     d60:	e0bffd17 	ldw	r2,-12(fp)
     d64:	10800017 	ldw	r2,0(r2)
     d68:	11000104 	addi	r4,r2,4
     d6c:	e0bffd17 	ldw	r2,-12(fp)
     d70:	10800817 	ldw	r2,32(r2)
     d74:	1007883a 	mov	r3,r2
     d78:	2005883a 	mov	r2,r4
     d7c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     d80:	e13fff17 	ldw	r4,-4(fp)
     d84:	e17ffd17 	ldw	r5,-12(fp)
     d88:	01800034 	movhi	r6,0
     d8c:	31837c04 	addi	r6,r6,3568
     d90:	00034c80 	call	34c8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     d94:	e0bffd17 	ldw	r2,-12(fp)
     d98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     da4:	00800074 	movhi	r2,1
     da8:	10a9b904 	addi	r2,r2,-22812
     dac:	10800017 	ldw	r2,0(r2)
     db0:	100b883a 	mov	r5,r2
     db4:	01800034 	movhi	r6,0
     db8:	31840704 	addi	r6,r6,4124
     dbc:	e1fffd17 	ldw	r7,-12(fp)
     dc0:	0002df40 	call	2df4 <alt_alarm_start>
     dc4:	1004403a 	cmpge	r2,r2,zero
     dc8:	1000041e 	bne	r2,zero,ddc <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     dcc:	e0fffd17 	ldw	r3,-12(fp)
     dd0:	00a00034 	movhi	r2,32768
     dd4:	10bfffc4 	addi	r2,r2,-1
     dd8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     ddc:	e037883a 	mov	sp,fp
     de0:	dfc00117 	ldw	ra,4(sp)
     de4:	df000017 	ldw	fp,0(sp)
     de8:	dec00204 	addi	sp,sp,8
     dec:	f800283a 	ret

00000df0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     df0:	defff704 	addi	sp,sp,-36
     df4:	df000815 	stw	fp,32(sp)
     df8:	df000804 	addi	fp,sp,32
     dfc:	e13ffe15 	stw	r4,-8(fp)
     e00:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     e04:	e0bffe17 	ldw	r2,-8(fp)
     e08:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
     e0c:	e0bffd17 	ldw	r2,-12(fp)
     e10:	10800017 	ldw	r2,0(r2)
     e14:	e0bffc15 	stw	r2,-16(fp)
     e18:	00000006 	br	e1c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     e1c:	e0bffc17 	ldw	r2,-16(fp)
     e20:	10800104 	addi	r2,r2,4
     e24:	10800037 	ldwio	r2,0(r2)
     e28:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     e2c:	e0bffb17 	ldw	r2,-20(fp)
     e30:	1080c00c 	andi	r2,r2,768
     e34:	1005003a 	cmpeq	r2,r2,zero
     e38:	1000741e 	bne	r2,zero,100c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     e3c:	e0bffb17 	ldw	r2,-20(fp)
     e40:	1080400c 	andi	r2,r2,256
     e44:	1005003a 	cmpeq	r2,r2,zero
     e48:	1000351e 	bne	r2,zero,f20 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     e4c:	00800074 	movhi	r2,1
     e50:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e54:	e0bffd17 	ldw	r2,-12(fp)
     e58:	10800a17 	ldw	r2,40(r2)
     e5c:	10800044 	addi	r2,r2,1
     e60:	1081ffcc 	andi	r2,r2,2047
     e64:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
     e68:	e0bffd17 	ldw	r2,-12(fp)
     e6c:	10c00b17 	ldw	r3,44(r2)
     e70:	e0bff917 	ldw	r2,-28(fp)
     e74:	18801626 	beq	r3,r2,ed0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     e78:	e0bffc17 	ldw	r2,-16(fp)
     e7c:	10800037 	ldwio	r2,0(r2)
     e80:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     e84:	e0bffa17 	ldw	r2,-24(fp)
     e88:	10a0000c 	andi	r2,r2,32768
     e8c:	1005003a 	cmpeq	r2,r2,zero
     e90:	10000f1e 	bne	r2,zero,ed0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	10c00a17 	ldw	r3,40(r2)
     e9c:	e0bffa17 	ldw	r2,-24(fp)
     ea0:	1009883a 	mov	r4,r2
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	1885883a 	add	r2,r3,r2
     eac:	10800e04 	addi	r2,r2,56
     eb0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     eb4:	e0bffd17 	ldw	r2,-12(fp)
     eb8:	10800a17 	ldw	r2,40(r2)
     ebc:	10800044 	addi	r2,r2,1
     ec0:	10c1ffcc 	andi	r3,r2,2047
     ec4:	e0bffd17 	ldw	r2,-12(fp)
     ec8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     ecc:	003fe106 	br	e54 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     ed0:	e0bffa17 	ldw	r2,-24(fp)
     ed4:	10bfffec 	andhi	r2,r2,65535
     ed8:	1005003a 	cmpeq	r2,r2,zero
     edc:	1000101e 	bne	r2,zero,f20 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	10c00817 	ldw	r3,32(r2)
     ee8:	00bfff84 	movi	r2,-2
     eec:	1886703a 	and	r3,r3,r2
     ef0:	e0bffd17 	ldw	r2,-12(fp)
     ef4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     ef8:	e0bffc17 	ldw	r2,-16(fp)
     efc:	11000104 	addi	r4,r2,4
     f00:	e0bffd17 	ldw	r2,-12(fp)
     f04:	10800817 	ldw	r2,32(r2)
     f08:	1007883a 	mov	r3,r2
     f0c:	2005883a 	mov	r2,r4
     f10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f14:	e0bffc17 	ldw	r2,-16(fp)
     f18:	10800104 	addi	r2,r2,4
     f1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     f20:	e0bffb17 	ldw	r2,-20(fp)
     f24:	1080800c 	andi	r2,r2,512
     f28:	1005003a 	cmpeq	r2,r2,zero
     f2c:	103fbb1e 	bne	r2,zero,e1c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     f30:	e0bffb17 	ldw	r2,-20(fp)
     f34:	10bfffec 	andhi	r2,r2,65535
     f38:	1004d43a 	srli	r2,r2,16
     f3c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     f40:	00001506 	br	f98 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     f44:	e13ffc17 	ldw	r4,-16(fp)
     f48:	e0bffd17 	ldw	r2,-12(fp)
     f4c:	10c00d17 	ldw	r3,52(r2)
     f50:	e0bffd17 	ldw	r2,-12(fp)
     f54:	1885883a 	add	r2,r3,r2
     f58:	10820e04 	addi	r2,r2,2104
     f5c:	10800003 	ldbu	r2,0(r2)
     f60:	10c03fcc 	andi	r3,r2,255
     f64:	18c0201c 	xori	r3,r3,128
     f68:	18ffe004 	addi	r3,r3,-128
     f6c:	2005883a 	mov	r2,r4
     f70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f74:	e0bffd17 	ldw	r2,-12(fp)
     f78:	10800d17 	ldw	r2,52(r2)
     f7c:	10800044 	addi	r2,r2,1
     f80:	10c1ffcc 	andi	r3,r2,2047
     f84:	e0bffd17 	ldw	r2,-12(fp)
     f88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     f8c:	e0bff817 	ldw	r2,-32(fp)
     f90:	10bfffc4 	addi	r2,r2,-1
     f94:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     f98:	e0bff817 	ldw	r2,-32(fp)
     f9c:	1005003a 	cmpeq	r2,r2,zero
     fa0:	1000051e 	bne	r2,zero,fb8 <altera_avalon_jtag_uart_irq+0x1c8>
     fa4:	e0bffd17 	ldw	r2,-12(fp)
     fa8:	10c00d17 	ldw	r3,52(r2)
     fac:	e0bffd17 	ldw	r2,-12(fp)
     fb0:	10800c17 	ldw	r2,48(r2)
     fb4:	18bfe31e 	bne	r3,r2,f44 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     fb8:	e0bff817 	ldw	r2,-32(fp)
     fbc:	1005003a 	cmpeq	r2,r2,zero
     fc0:	103f961e 	bne	r2,zero,e1c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     fc4:	e0bffd17 	ldw	r2,-12(fp)
     fc8:	10c00817 	ldw	r3,32(r2)
     fcc:	00bfff44 	movi	r2,-3
     fd0:	1886703a 	and	r3,r3,r2
     fd4:	e0bffd17 	ldw	r2,-12(fp)
     fd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     fdc:	e0bffd17 	ldw	r2,-12(fp)
     fe0:	10800017 	ldw	r2,0(r2)
     fe4:	11000104 	addi	r4,r2,4
     fe8:	e0bffd17 	ldw	r2,-12(fp)
     fec:	10800817 	ldw	r2,32(r2)
     ff0:	1007883a 	mov	r3,r2
     ff4:	2005883a 	mov	r2,r4
     ff8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ffc:	e0bffc17 	ldw	r2,-16(fp)
    1000:	10800104 	addi	r2,r2,4
    1004:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1008:	003f8406 	br	e1c <altera_avalon_jtag_uart_irq+0x2c>
}
    100c:	e037883a 	mov	sp,fp
    1010:	df000017 	ldw	fp,0(sp)
    1014:	dec00104 	addi	sp,sp,4
    1018:	f800283a 	ret

0000101c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    101c:	defffc04 	addi	sp,sp,-16
    1020:	df000315 	stw	fp,12(sp)
    1024:	df000304 	addi	fp,sp,12
    1028:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    102c:	e0bfff17 	ldw	r2,-4(fp)
    1030:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1034:	e0bffe17 	ldw	r2,-8(fp)
    1038:	10800017 	ldw	r2,0(r2)
    103c:	10800104 	addi	r2,r2,4
    1040:	10800037 	ldwio	r2,0(r2)
    1044:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1048:	e0bffd17 	ldw	r2,-12(fp)
    104c:	1081000c 	andi	r2,r2,1024
    1050:	1005003a 	cmpeq	r2,r2,zero
    1054:	10000c1e 	bne	r2,zero,1088 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	10800017 	ldw	r2,0(r2)
    1060:	11000104 	addi	r4,r2,4
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10800817 	ldw	r2,32(r2)
    106c:	10810014 	ori	r2,r2,1024
    1070:	1007883a 	mov	r3,r2
    1074:	2005883a 	mov	r2,r4
    1078:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    107c:	e0bffe17 	ldw	r2,-8(fp)
    1080:	10000915 	stw	zero,36(r2)
    1084:	00000a06 	br	10b0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1088:	e0bffe17 	ldw	r2,-8(fp)
    108c:	10c00917 	ldw	r3,36(r2)
    1090:	00a00034 	movhi	r2,32768
    1094:	10bfff04 	addi	r2,r2,-4
    1098:	10c00536 	bltu	r2,r3,10b0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    109c:	e0bffe17 	ldw	r2,-8(fp)
    10a0:	10800917 	ldw	r2,36(r2)
    10a4:	10c00044 	addi	r3,r2,1
    10a8:	e0bffe17 	ldw	r2,-8(fp)
    10ac:	10c00915 	stw	r3,36(r2)
    10b0:	00800074 	movhi	r2,1
    10b4:	10a9b904 	addi	r2,r2,-22812
    10b8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    10bc:	e037883a 	mov	sp,fp
    10c0:	df000017 	ldw	fp,0(sp)
    10c4:	dec00104 	addi	sp,sp,4
    10c8:	f800283a 	ret

000010cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    10cc:	defffc04 	addi	sp,sp,-16
    10d0:	df000315 	stw	fp,12(sp)
    10d4:	df000304 	addi	fp,sp,12
    10d8:	e13ffd15 	stw	r4,-12(fp)
    10dc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    10e0:	00000706 	br	1100 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    10e4:	e0bffe17 	ldw	r2,-8(fp)
    10e8:	1090000c 	andi	r2,r2,16384
    10ec:	1005003a 	cmpeq	r2,r2,zero
    10f0:	1000031e 	bne	r2,zero,1100 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    10f4:	00bffd44 	movi	r2,-11
    10f8:	e0bfff15 	stw	r2,-4(fp)
    10fc:	00000b06 	br	112c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1100:	e0bffd17 	ldw	r2,-12(fp)
    1104:	10c00d17 	ldw	r3,52(r2)
    1108:	e0bffd17 	ldw	r2,-12(fp)
    110c:	10800c17 	ldw	r2,48(r2)
    1110:	18800526 	beq	r3,r2,1128 <altera_avalon_jtag_uart_close+0x5c>
    1114:	e0bffd17 	ldw	r2,-12(fp)
    1118:	10c00917 	ldw	r3,36(r2)
    111c:	e0bffd17 	ldw	r2,-12(fp)
    1120:	10800117 	ldw	r2,4(r2)
    1124:	18bfef36 	bltu	r3,r2,10e4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1128:	e03fff15 	stw	zero,-4(fp)
    112c:	e0bfff17 	ldw	r2,-4(fp)
}
    1130:	e037883a 	mov	sp,fp
    1134:	df000017 	ldw	fp,0(sp)
    1138:	dec00104 	addi	sp,sp,4
    113c:	f800283a 	ret

00001140 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1140:	defff804 	addi	sp,sp,-32
    1144:	df000715 	stw	fp,28(sp)
    1148:	df000704 	addi	fp,sp,28
    114c:	e13ffb15 	stw	r4,-20(fp)
    1150:	e17ffc15 	stw	r5,-16(fp)
    1154:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    1158:	00bff9c4 	movi	r2,-25
    115c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1160:	e0bffc17 	ldw	r2,-16(fp)
    1164:	e0bfff15 	stw	r2,-4(fp)
    1168:	e0ffff17 	ldw	r3,-4(fp)
    116c:	189a8060 	cmpeqi	r2,r3,27137
    1170:	1000041e 	bne	r2,zero,1184 <altera_avalon_jtag_uart_ioctl+0x44>
    1174:	e0ffff17 	ldw	r3,-4(fp)
    1178:	189a80a0 	cmpeqi	r2,r3,27138
    117c:	10001b1e 	bne	r2,zero,11ec <altera_avalon_jtag_uart_ioctl+0xac>
    1180:	00002706 	br	1220 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1184:	e0bffb17 	ldw	r2,-20(fp)
    1188:	10c00117 	ldw	r3,4(r2)
    118c:	00a00034 	movhi	r2,32768
    1190:	10bfffc4 	addi	r2,r2,-1
    1194:	18802226 	beq	r3,r2,1220 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    1198:	e0bffd17 	ldw	r2,-12(fp)
    119c:	10800017 	ldw	r2,0(r2)
    11a0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    11a4:	e0bff917 	ldw	r2,-28(fp)
    11a8:	10800090 	cmplti	r2,r2,2
    11ac:	1000071e 	bne	r2,zero,11cc <altera_avalon_jtag_uart_ioctl+0x8c>
    11b0:	e0fff917 	ldw	r3,-28(fp)
    11b4:	00a00034 	movhi	r2,32768
    11b8:	10bfffc4 	addi	r2,r2,-1
    11bc:	18800326 	beq	r3,r2,11cc <altera_avalon_jtag_uart_ioctl+0x8c>
    11c0:	e0bff917 	ldw	r2,-28(fp)
    11c4:	e0bffe15 	stw	r2,-8(fp)
    11c8:	00000306 	br	11d8 <altera_avalon_jtag_uart_ioctl+0x98>
    11cc:	00e00034 	movhi	r3,32768
    11d0:	18ffff84 	addi	r3,r3,-2
    11d4:	e0fffe15 	stw	r3,-8(fp)
    11d8:	e0bffb17 	ldw	r2,-20(fp)
    11dc:	e0fffe17 	ldw	r3,-8(fp)
    11e0:	10c00115 	stw	r3,4(r2)
      rc = 0;
    11e4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    11e8:	00000d06 	br	1220 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    11ec:	e0bffb17 	ldw	r2,-20(fp)
    11f0:	10c00117 	ldw	r3,4(r2)
    11f4:	00a00034 	movhi	r2,32768
    11f8:	10bfffc4 	addi	r2,r2,-1
    11fc:	18800826 	beq	r3,r2,1220 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1200:	e13ffd17 	ldw	r4,-12(fp)
    1204:	e0bffb17 	ldw	r2,-20(fp)
    1208:	10c00917 	ldw	r3,36(r2)
    120c:	e0bffb17 	ldw	r2,-20(fp)
    1210:	10800117 	ldw	r2,4(r2)
    1214:	1885803a 	cmpltu	r2,r3,r2
    1218:	20800015 	stw	r2,0(r4)
      rc = 0;
    121c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    1220:	e0bffa17 	ldw	r2,-24(fp)
}
    1224:	e037883a 	mov	sp,fp
    1228:	df000017 	ldw	fp,0(sp)
    122c:	dec00104 	addi	sp,sp,4
    1230:	f800283a 	ret

00001234 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1234:	defff204 	addi	sp,sp,-56
    1238:	dfc00d15 	stw	ra,52(sp)
    123c:	df000c15 	stw	fp,48(sp)
    1240:	df000c04 	addi	fp,sp,48
    1244:	e13ffb15 	stw	r4,-20(fp)
    1248:	e17ffc15 	stw	r5,-16(fp)
    124c:	e1bffd15 	stw	r6,-12(fp)
    1250:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    1254:	e0bffc17 	ldw	r2,-16(fp)
    1258:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    125c:	00004806 	br	1380 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1260:	e0bffb17 	ldw	r2,-20(fp)
    1264:	10800a17 	ldw	r2,40(r2)
    1268:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10800b17 	ldw	r2,44(r2)
    1274:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    1278:	e0fff717 	ldw	r3,-36(fp)
    127c:	e0bff617 	ldw	r2,-40(fp)
    1280:	18800536 	bltu	r3,r2,1298 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1284:	e0bff717 	ldw	r2,-36(fp)
    1288:	e0fff617 	ldw	r3,-40(fp)
    128c:	10c5c83a 	sub	r2,r2,r3
    1290:	e0bff815 	stw	r2,-32(fp)
    1294:	00000406 	br	12a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1298:	00820004 	movi	r2,2048
    129c:	e0fff617 	ldw	r3,-40(fp)
    12a0:	10c5c83a 	sub	r2,r2,r3
    12a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    12a8:	e0bff817 	ldw	r2,-32(fp)
    12ac:	1005003a 	cmpeq	r2,r2,zero
    12b0:	10001f1e 	bne	r2,zero,1330 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    12b4:	e0fffd17 	ldw	r3,-12(fp)
    12b8:	e0bff817 	ldw	r2,-32(fp)
    12bc:	1880022e 	bgeu	r3,r2,12c8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    12c0:	e0bffd17 	ldw	r2,-12(fp)
    12c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    12c8:	e0bffb17 	ldw	r2,-20(fp)
    12cc:	10c00e04 	addi	r3,r2,56
    12d0:	e0bff617 	ldw	r2,-40(fp)
    12d4:	1887883a 	add	r3,r3,r2
    12d8:	e0bffa17 	ldw	r2,-24(fp)
    12dc:	1009883a 	mov	r4,r2
    12e0:	180b883a 	mov	r5,r3
    12e4:	e1bff817 	ldw	r6,-32(fp)
    12e8:	0003e980 	call	3e98 <memcpy>
      ptr   += n;
    12ec:	e0fff817 	ldw	r3,-32(fp)
    12f0:	e0bffa17 	ldw	r2,-24(fp)
    12f4:	10c5883a 	add	r2,r2,r3
    12f8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    12fc:	e0fffd17 	ldw	r3,-12(fp)
    1300:	e0bff817 	ldw	r2,-32(fp)
    1304:	1885c83a 	sub	r2,r3,r2
    1308:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    130c:	e0fff617 	ldw	r3,-40(fp)
    1310:	e0bff817 	ldw	r2,-32(fp)
    1314:	1885883a 	add	r2,r3,r2
    1318:	10c1ffcc 	andi	r3,r2,2047
    131c:	e0bffb17 	ldw	r2,-20(fp)
    1320:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1324:	e0bffd17 	ldw	r2,-12(fp)
    1328:	10800048 	cmpgei	r2,r2,1
    132c:	103fcc1e 	bne	r2,zero,1260 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1330:	e0fffa17 	ldw	r3,-24(fp)
    1334:	e0bffc17 	ldw	r2,-16(fp)
    1338:	1880141e 	bne	r3,r2,138c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	1090000c 	andi	r2,r2,16384
    1344:	1004c03a 	cmpne	r2,r2,zero
    1348:	1000101e 	bne	r2,zero,138c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	10c00a17 	ldw	r3,40(r2)
    1354:	e0bff717 	ldw	r2,-36(fp)
    1358:	1880051e 	bne	r3,r2,1370 <altera_avalon_jtag_uart_read+0x13c>
    135c:	e0bffb17 	ldw	r2,-20(fp)
    1360:	10c00917 	ldw	r3,36(r2)
    1364:	e0bffb17 	ldw	r2,-20(fp)
    1368:	10800117 	ldw	r2,4(r2)
    136c:	18bff736 	bltu	r3,r2,134c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1370:	e0bffb17 	ldw	r2,-20(fp)
    1374:	10c00a17 	ldw	r3,40(r2)
    1378:	e0bff717 	ldw	r2,-36(fp)
    137c:	18800326 	beq	r3,r2,138c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1380:	e0bffd17 	ldw	r2,-12(fp)
    1384:	10800048 	cmpgei	r2,r2,1
    1388:	103fb51e 	bne	r2,zero,1260 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    138c:	e0fffa17 	ldw	r3,-24(fp)
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	18801926 	beq	r3,r2,13fc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1398:	0005303a 	rdctl	r2,status
    139c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13a0:	e0fff517 	ldw	r3,-44(fp)
    13a4:	00bfff84 	movi	r2,-2
    13a8:	1884703a 	and	r2,r3,r2
    13ac:	1001703a 	wrctl	status,r2
  
  return context;
    13b0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    13b4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    13b8:	e0bffb17 	ldw	r2,-20(fp)
    13bc:	10800817 	ldw	r2,32(r2)
    13c0:	10c00054 	ori	r3,r2,1
    13c4:	e0bffb17 	ldw	r2,-20(fp)
    13c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    13cc:	e0bffb17 	ldw	r2,-20(fp)
    13d0:	10800017 	ldw	r2,0(r2)
    13d4:	11000104 	addi	r4,r2,4
    13d8:	e0bffb17 	ldw	r2,-20(fp)
    13dc:	10800817 	ldw	r2,32(r2)
    13e0:	1007883a 	mov	r3,r2
    13e4:	2005883a 	mov	r2,r4
    13e8:	10c00035 	stwio	r3,0(r2)
    13ec:	e0bff917 	ldw	r2,-28(fp)
    13f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13f4:	e0bff417 	ldw	r2,-48(fp)
    13f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    13fc:	e0fffa17 	ldw	r3,-24(fp)
    1400:	e0bffc17 	ldw	r2,-16(fp)
    1404:	18800526 	beq	r3,r2,141c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    1408:	e0fffa17 	ldw	r3,-24(fp)
    140c:	e0bffc17 	ldw	r2,-16(fp)
    1410:	1887c83a 	sub	r3,r3,r2
    1414:	e0ffff15 	stw	r3,-4(fp)
    1418:	00000906 	br	1440 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    141c:	e0bffe17 	ldw	r2,-8(fp)
    1420:	1090000c 	andi	r2,r2,16384
    1424:	1005003a 	cmpeq	r2,r2,zero
    1428:	1000031e 	bne	r2,zero,1438 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    142c:	00bffd44 	movi	r2,-11
    1430:	e0bfff15 	stw	r2,-4(fp)
    1434:	00000206 	br	1440 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    1438:	00bffec4 	movi	r2,-5
    143c:	e0bfff15 	stw	r2,-4(fp)
    1440:	e0bfff17 	ldw	r2,-4(fp)
}
    1444:	e037883a 	mov	sp,fp
    1448:	dfc00117 	ldw	ra,4(sp)
    144c:	df000017 	ldw	fp,0(sp)
    1450:	dec00204 	addi	sp,sp,8
    1454:	f800283a 	ret

00001458 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1458:	defff204 	addi	sp,sp,-56
    145c:	dfc00d15 	stw	ra,52(sp)
    1460:	df000c15 	stw	fp,48(sp)
    1464:	df000c04 	addi	fp,sp,48
    1468:	e13ffb15 	stw	r4,-20(fp)
    146c:	e17ffc15 	stw	r5,-16(fp)
    1470:	e1bffd15 	stw	r6,-12(fp)
    1474:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1478:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    147c:	e0bffc17 	ldw	r2,-16(fp)
    1480:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1484:	00003a06 	br	1570 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	10800c17 	ldw	r2,48(r2)
    1490:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    1494:	e0bffb17 	ldw	r2,-20(fp)
    1498:	10800d17 	ldw	r2,52(r2)
    149c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    14a0:	e0fffa17 	ldw	r3,-24(fp)
    14a4:	e0bff917 	ldw	r2,-28(fp)
    14a8:	1880062e 	bgeu	r3,r2,14c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    14ac:	e0fff917 	ldw	r3,-28(fp)
    14b0:	e0bffa17 	ldw	r2,-24(fp)
    14b4:	1885c83a 	sub	r2,r3,r2
    14b8:	10bfffc4 	addi	r2,r2,-1
    14bc:	e0bff815 	stw	r2,-32(fp)
    14c0:	00000c06 	br	14f4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    14c4:	e0bff917 	ldw	r2,-28(fp)
    14c8:	1005003a 	cmpeq	r2,r2,zero
    14cc:	1000051e 	bne	r2,zero,14e4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    14d0:	00820004 	movi	r2,2048
    14d4:	e0fffa17 	ldw	r3,-24(fp)
    14d8:	10c5c83a 	sub	r2,r2,r3
    14dc:	e0bff815 	stw	r2,-32(fp)
    14e0:	00000406 	br	14f4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    14e4:	0081ffc4 	movi	r2,2047
    14e8:	e0fffa17 	ldw	r3,-24(fp)
    14ec:	10c5c83a 	sub	r2,r2,r3
    14f0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    14f4:	e0bff817 	ldw	r2,-32(fp)
    14f8:	1005003a 	cmpeq	r2,r2,zero
    14fc:	10001f1e 	bne	r2,zero,157c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1500:	e0fffd17 	ldw	r3,-12(fp)
    1504:	e0bff817 	ldw	r2,-32(fp)
    1508:	1880022e 	bgeu	r3,r2,1514 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    150c:	e0bffd17 	ldw	r2,-12(fp)
    1510:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1514:	e0bffb17 	ldw	r2,-20(fp)
    1518:	10c20e04 	addi	r3,r2,2104
    151c:	e0bffa17 	ldw	r2,-24(fp)
    1520:	1885883a 	add	r2,r3,r2
    1524:	e0fffc17 	ldw	r3,-16(fp)
    1528:	1009883a 	mov	r4,r2
    152c:	180b883a 	mov	r5,r3
    1530:	e1bff817 	ldw	r6,-32(fp)
    1534:	0003e980 	call	3e98 <memcpy>
      ptr   += n;
    1538:	e0fff817 	ldw	r3,-32(fp)
    153c:	e0bffc17 	ldw	r2,-16(fp)
    1540:	10c5883a 	add	r2,r2,r3
    1544:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    1548:	e0fffd17 	ldw	r3,-12(fp)
    154c:	e0bff817 	ldw	r2,-32(fp)
    1550:	1885c83a 	sub	r2,r3,r2
    1554:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1558:	e0fffa17 	ldw	r3,-24(fp)
    155c:	e0bff817 	ldw	r2,-32(fp)
    1560:	1885883a 	add	r2,r3,r2
    1564:	10c1ffcc 	andi	r3,r2,2047
    1568:	e0bffb17 	ldw	r2,-20(fp)
    156c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	10800048 	cmpgei	r2,r2,1
    1578:	103fc31e 	bne	r2,zero,1488 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    157c:	0005303a 	rdctl	r2,status
    1580:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1584:	e0fff517 	ldw	r3,-44(fp)
    1588:	00bfff84 	movi	r2,-2
    158c:	1884703a 	and	r2,r3,r2
    1590:	1001703a 	wrctl	status,r2
  
  return context;
    1594:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1598:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    159c:	e0bffb17 	ldw	r2,-20(fp)
    15a0:	10800817 	ldw	r2,32(r2)
    15a4:	10c00094 	ori	r3,r2,2
    15a8:	e0bffb17 	ldw	r2,-20(fp)
    15ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    15b0:	e0bffb17 	ldw	r2,-20(fp)
    15b4:	10800017 	ldw	r2,0(r2)
    15b8:	11000104 	addi	r4,r2,4
    15bc:	e0bffb17 	ldw	r2,-20(fp)
    15c0:	10800817 	ldw	r2,32(r2)
    15c4:	1007883a 	mov	r3,r2
    15c8:	2005883a 	mov	r2,r4
    15cc:	10c00035 	stwio	r3,0(r2)
    15d0:	e0bff717 	ldw	r2,-36(fp)
    15d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15d8:	e0bff417 	ldw	r2,-48(fp)
    15dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	10800050 	cmplti	r2,r2,1
    15e8:	1000111e 	bne	r2,zero,1630 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    15ec:	e0bffe17 	ldw	r2,-8(fp)
    15f0:	1090000c 	andi	r2,r2,16384
    15f4:	1004c03a 	cmpne	r2,r2,zero
    15f8:	1000101e 	bne	r2,zero,163c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    15fc:	e0bffb17 	ldw	r2,-20(fp)
    1600:	10c00d17 	ldw	r3,52(r2)
    1604:	e0bff917 	ldw	r2,-28(fp)
    1608:	1880051e 	bne	r3,r2,1620 <altera_avalon_jtag_uart_write+0x1c8>
    160c:	e0bffb17 	ldw	r2,-20(fp)
    1610:	10c00917 	ldw	r3,36(r2)
    1614:	e0bffb17 	ldw	r2,-20(fp)
    1618:	10800117 	ldw	r2,4(r2)
    161c:	18bff736 	bltu	r3,r2,15fc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1620:	e0bffb17 	ldw	r2,-20(fp)
    1624:	10c00d17 	ldw	r3,52(r2)
    1628:	e0bff917 	ldw	r2,-28(fp)
    162c:	18800326 	beq	r3,r2,163c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    1630:	e0bffd17 	ldw	r2,-12(fp)
    1634:	10800048 	cmpgei	r2,r2,1
    1638:	103fcd1e 	bne	r2,zero,1570 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    163c:	e0fffc17 	ldw	r3,-16(fp)
    1640:	e0bff617 	ldw	r2,-40(fp)
    1644:	18800526 	beq	r3,r2,165c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    1648:	e0fffc17 	ldw	r3,-16(fp)
    164c:	e0bff617 	ldw	r2,-40(fp)
    1650:	1887c83a 	sub	r3,r3,r2
    1654:	e0ffff15 	stw	r3,-4(fp)
    1658:	00000906 	br	1680 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    165c:	e0bffe17 	ldw	r2,-8(fp)
    1660:	1090000c 	andi	r2,r2,16384
    1664:	1005003a 	cmpeq	r2,r2,zero
    1668:	1000031e 	bne	r2,zero,1678 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    166c:	00bffd44 	movi	r2,-11
    1670:	e0bfff15 	stw	r2,-4(fp)
    1674:	00000206 	br	1680 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1678:	00bffec4 	movi	r2,-5
    167c:	e0bfff15 	stw	r2,-4(fp)
    1680:	e0bfff17 	ldw	r2,-4(fp)
}
    1684:	e037883a 	mov	sp,fp
    1688:	dfc00117 	ldw	ra,4(sp)
    168c:	df000017 	ldw	fp,0(sp)
    1690:	dec00204 	addi	sp,sp,8
    1694:	f800283a 	ret

00001698 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1698:	defff904 	addi	sp,sp,-28
    169c:	dfc00615 	stw	ra,24(sp)
    16a0:	df000515 	stw	fp,20(sp)
    16a4:	df000504 	addi	fp,sp,20
    16a8:	e13ffe15 	stw	r4,-8(fp)
    16ac:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    16b8:	e0bffe17 	ldw	r2,-8(fp)
    16bc:	10800104 	addi	r2,r2,4
    16c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16c4:	0005303a 	rdctl	r2,status
    16c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16cc:	e0fffc17 	ldw	r3,-16(fp)
    16d0:	00bfff84 	movi	r2,-2
    16d4:	1884703a 	and	r2,r3,r2
    16d8:	1001703a 	wrctl	status,r2
  
  return context;
    16dc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    16e0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    16e4:	0003a440 	call	3a44 <alt_tick>
    16e8:	e0bffd17 	ldw	r2,-12(fp)
    16ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16f0:	e0bffb17 	ldw	r2,-20(fp)
    16f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    16f8:	e037883a 	mov	sp,fp
    16fc:	dfc00117 	ldw	ra,4(sp)
    1700:	df000017 	ldw	fp,0(sp)
    1704:	dec00204 	addi	sp,sp,8
    1708:	f800283a 	ret

0000170c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    170c:	defff904 	addi	sp,sp,-28
    1710:	dfc00615 	stw	ra,24(sp)
    1714:	df000515 	stw	fp,20(sp)
    1718:	df000504 	addi	fp,sp,20
    171c:	e13ffc15 	stw	r4,-16(fp)
    1720:	e17ffd15 	stw	r5,-12(fp)
    1724:	e1bffe15 	stw	r6,-8(fp)
    1728:	e1ffff15 	stw	r7,-4(fp)
    172c:	e0bfff17 	ldw	r2,-4(fp)
    1730:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1734:	00800074 	movhi	r2,1
    1738:	10a9b904 	addi	r2,r2,-22812
    173c:	10800017 	ldw	r2,0(r2)
    1740:	1004c03a 	cmpne	r2,r2,zero
    1744:	1000041e 	bne	r2,zero,1758 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    1748:	00c00074 	movhi	r3,1
    174c:	18e9b904 	addi	r3,r3,-22812
    1750:	e0bffb17 	ldw	r2,-20(fp)
    1754:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1758:	e0bffc17 	ldw	r2,-16(fp)
    175c:	10800104 	addi	r2,r2,4
    1760:	1007883a 	mov	r3,r2
    1764:	008001c4 	movi	r2,7
    1768:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    176c:	e13ffe17 	ldw	r4,-8(fp)
    1770:	e17ffc17 	ldw	r5,-16(fp)
    1774:	01800034 	movhi	r6,0
    1778:	3185a604 	addi	r6,r6,5784
    177c:	00034c80 	call	34c8 <alt_irq_register>
#endif  
}
    1780:	e037883a 	mov	sp,fp
    1784:	dfc00117 	ldw	ra,4(sp)
    1788:	df000017 	ldw	fp,0(sp)
    178c:	dec00204 	addi	sp,sp,8
    1790:	f800283a 	ret

00001794 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1794:	defffc04 	addi	sp,sp,-16
    1798:	df000315 	stw	fp,12(sp)
    179c:	df000304 	addi	fp,sp,12
    17a0:	e13ffe15 	stw	r4,-8(fp)
    17a4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    17a8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    17ac:	e0bfff17 	ldw	r2,-4(fp)
    17b0:	1004c03a 	cmpne	r2,r2,zero
    17b4:	1000061e 	bne	r2,zero,17d0 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    17b8:	e0bffe17 	ldw	r2,-8(fp)
    17bc:	1007883a 	mov	r3,r2
    17c0:	e0bffd03 	ldbu	r2,-12(fp)
    17c4:	10c4b03a 	or	r2,r2,r3
    17c8:	e0bffd05 	stb	r2,-12(fp)
    17cc:	00000806 	br	17f0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	1007883a 	mov	r3,r2
    17d8:	e0bffd03 	ldbu	r2,-12(fp)
    17dc:	10c4b03a 	or	r2,r2,r3
    17e0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    17e4:	e0bffd03 	ldbu	r2,-12(fp)
    17e8:	10801014 	ori	r2,r2,64
    17ec:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    17f0:	e0fffd03 	ldbu	r3,-12(fp)
    17f4:	00bfe004 	movi	r2,-128
    17f8:	1884b03a 	or	r2,r3,r2
    17fc:	10803fcc 	andi	r2,r2,255
}
    1800:	e037883a 	mov	sp,fp
    1804:	df000017 	ldw	fp,0(sp)
    1808:	dec00104 	addi	sp,sp,4
    180c:	f800283a 	ret

00001810 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    1810:	defffd04 	addi	sp,sp,-12
    1814:	df000215 	stw	fp,8(sp)
    1818:	df000204 	addi	fp,sp,8
    181c:	e13ffe15 	stw	r4,-8(fp)
    1820:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1824:	e0bffe17 	ldw	r2,-8(fp)
    1828:	10800a17 	ldw	r2,40(r2)
    182c:	e0ffff03 	ldbu	r3,-4(fp)
    1830:	10c00025 	stbio	r3,0(r2)
}
    1834:	e037883a 	mov	sp,fp
    1838:	df000017 	ldw	fp,0(sp)
    183c:	dec00104 	addi	sp,sp,4
    1840:	f800283a 	ret

00001844 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    1844:	defffe04 	addi	sp,sp,-8
    1848:	df000115 	stw	fp,4(sp)
    184c:	df000104 	addi	fp,sp,4
    1850:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1854:	e0bfff17 	ldw	r2,-4(fp)
    1858:	10800a17 	ldw	r2,40(r2)
    185c:	1007883a 	mov	r3,r2
    1860:	00800044 	movi	r2,1
    1864:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    1868:	e037883a 	mov	sp,fp
    186c:	df000017 	ldw	fp,0(sp)
    1870:	dec00104 	addi	sp,sp,4
    1874:	f800283a 	ret

00001878 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    1878:	defffc04 	addi	sp,sp,-16
    187c:	dfc00315 	stw	ra,12(sp)
    1880:	df000215 	stw	fp,8(sp)
    1884:	df000204 	addi	fp,sp,8
    1888:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    188c:	e13fff17 	ldw	r4,-4(fp)
    1890:	01400074 	movhi	r5,1
    1894:	29623604 	addi	r5,r5,-30504
    1898:	00032c80 	call	32c8 <alt_find_dev>
    189c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    18a0:	e0bffe17 	ldw	r2,-8(fp)
}
    18a4:	e037883a 	mov	sp,fp
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    18b8:	defffb04 	addi	sp,sp,-20
    18bc:	df000415 	stw	fp,16(sp)
    18c0:	df000404 	addi	fp,sp,16
    18c4:	e13ffd15 	stw	r4,-12(fp)
    18c8:	e17ffe15 	stw	r5,-8(fp)
    18cc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    18d0:	e03ffc15 	stw	zero,-16(fp)
    18d4:	00000f06 	br	1914 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    18d8:	e0bffd17 	ldw	r2,-12(fp)
    18dc:	10800a17 	ldw	r2,40(r2)
    18e0:	11000044 	addi	r4,r2,1
    18e4:	e0fffc17 	ldw	r3,-16(fp)
    18e8:	e0bffe17 	ldw	r2,-8(fp)
    18ec:	1885883a 	add	r2,r3,r2
    18f0:	10800003 	ldbu	r2,0(r2)
    18f4:	10c03fcc 	andi	r3,r2,255
    18f8:	18c0201c 	xori	r3,r3,128
    18fc:	18ffe004 	addi	r3,r3,-128
    1900:	2005883a 	mov	r2,r4
    1904:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1908:	e0bffc17 	ldw	r2,-16(fp)
    190c:	10800044 	addi	r2,r2,1
    1910:	e0bffc15 	stw	r2,-16(fp)
    1914:	e0fffc17 	ldw	r3,-16(fp)
    1918:	e0bfff17 	ldw	r2,-4(fp)
    191c:	18bfee36 	bltu	r3,r2,18d8 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    1920:	e037883a 	mov	sp,fp
    1924:	df000017 	ldw	fp,0(sp)
    1928:	dec00104 	addi	sp,sp,4
    192c:	f800283a 	ret

00001930 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    1930:	defffd04 	addi	sp,sp,-12
    1934:	df000215 	stw	fp,8(sp)
    1938:	df000204 	addi	fp,sp,8
    193c:	e13ffe15 	stw	r4,-8(fp)
    1940:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    1944:	00000d06 	br	197c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1948:	e0bffe17 	ldw	r2,-8(fp)
    194c:	10800a17 	ldw	r2,40(r2)
    1950:	11000044 	addi	r4,r2,1
    1954:	e0bfff17 	ldw	r2,-4(fp)
    1958:	10800003 	ldbu	r2,0(r2)
    195c:	10c03fcc 	andi	r3,r2,255
    1960:	18c0201c 	xori	r3,r3,128
    1964:	18ffe004 	addi	r3,r3,-128
    1968:	2005883a 	mov	r2,r4
    196c:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1970:	e0bfff17 	ldw	r2,-4(fp)
    1974:	10800044 	addi	r2,r2,1
    1978:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    197c:	e0bfff17 	ldw	r2,-4(fp)
    1980:	10800003 	ldbu	r2,0(r2)
    1984:	10803fcc 	andi	r2,r2,255
    1988:	1080201c 	xori	r2,r2,128
    198c:	10bfe004 	addi	r2,r2,-128
    1990:	1004c03a 	cmpne	r2,r2,zero
    1994:	103fec1e 	bne	r2,zero,1948 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    1998:	e037883a 	mov	sp,fp
    199c:	df000017 	ldw	fp,0(sp)
    19a0:	dec00104 	addi	sp,sp,4
    19a4:	f800283a 	ret

000019a8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    19a8:	defffb04 	addi	sp,sp,-20
    19ac:	dfc00415 	stw	ra,16(sp)
    19b0:	df000315 	stw	fp,12(sp)
    19b4:	df000304 	addi	fp,sp,12
    19b8:	e13ffd15 	stw	r4,-12(fp)
    19bc:	e17ffe15 	stw	r5,-8(fp)
    19c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	10800017 	ldw	r2,0(r2)
    19cc:	1009883a 	mov	r4,r2
    19d0:	e1bfff17 	ldw	r6,-4(fp)
    19d4:	e17ffe17 	ldw	r5,-8(fp)
    19d8:	00018b80 	call	18b8 <alt_up_character_lcd_write>
	return 0;
    19dc:	0005883a 	mov	r2,zero
}
    19e0:	e037883a 	mov	sp,fp
    19e4:	dfc00117 	ldw	ra,4(sp)
    19e8:	df000017 	ldw	fp,0(sp)
    19ec:	dec00204 	addi	sp,sp,8
    19f0:	f800283a 	ret

000019f4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    19f4:	defff904 	addi	sp,sp,-28
    19f8:	dfc00615 	stw	ra,24(sp)
    19fc:	df000515 	stw	fp,20(sp)
    1a00:	df000504 	addi	fp,sp,20
    1a04:	e13ffc15 	stw	r4,-16(fp)
    1a08:	e17ffd15 	stw	r5,-12(fp)
    1a0c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    1a10:	e0bffd17 	ldw	r2,-12(fp)
    1a14:	10800a28 	cmpgeui	r2,r2,40
    1a18:	1000031e 	bne	r2,zero,1a28 <alt_up_character_lcd_set_cursor_pos+0x34>
    1a1c:	e0bffe17 	ldw	r2,-8(fp)
    1a20:	108000b0 	cmpltui	r2,r2,2
    1a24:	1000031e 	bne	r2,zero,1a34 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    1a28:	00bfffc4 	movi	r2,-1
    1a2c:	e0bfff15 	stw	r2,-4(fp)
    1a30:	00000806 	br	1a54 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1a34:	e13ffd17 	ldw	r4,-12(fp)
    1a38:	e17ffe17 	ldw	r5,-8(fp)
    1a3c:	00017940 	call	1794 <get_DDRAM_addr>
    1a40:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    1a44:	e17ffb03 	ldbu	r5,-20(fp)
    1a48:	e13ffc17 	ldw	r4,-16(fp)
    1a4c:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
	return 0;
    1a50:	e03fff15 	stw	zero,-4(fp)
    1a54:	e0bfff17 	ldw	r2,-4(fp)
}
    1a58:	e037883a 	mov	sp,fp
    1a5c:	dfc00117 	ldw	ra,4(sp)
    1a60:	df000017 	ldw	fp,0(sp)
    1a64:	dec00204 	addi	sp,sp,8
    1a68:	f800283a 	ret

00001a6c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1a6c:	defff904 	addi	sp,sp,-28
    1a70:	dfc00615 	stw	ra,24(sp)
    1a74:	df000515 	stw	fp,20(sp)
    1a78:	df000504 	addi	fp,sp,20
    1a7c:	e13ffc15 	stw	r4,-16(fp)
    1a80:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1a84:	e0bffd17 	ldw	r2,-12(fp)
    1a88:	1005003a 	cmpeq	r2,r2,zero
    1a8c:	10001e1e 	bne	r2,zero,1b08 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1a90:	e0bffd17 	ldw	r2,-12(fp)
    1a94:	10800050 	cmplti	r2,r2,1
    1a98:	1000031e 	bne	r2,zero,1aa8 <alt_up_character_lcd_shift_cursor+0x3c>
    1a9c:	00800504 	movi	r2,20
    1aa0:	e0bfff05 	stb	r2,-4(fp)
    1aa4:	00000206 	br	1ab0 <alt_up_character_lcd_shift_cursor+0x44>
    1aa8:	00c00404 	movi	r3,16
    1aac:	e0ffff05 	stb	r3,-4(fp)
    1ab0:	e0bfff03 	ldbu	r2,-4(fp)
    1ab4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1ab8:	e0fffd17 	ldw	r3,-12(fp)
    1abc:	e0fffe15 	stw	r3,-8(fp)
    1ac0:	e0fffe17 	ldw	r3,-8(fp)
    1ac4:	1804403a 	cmpge	r2,r3,zero
    1ac8:	1000031e 	bne	r2,zero,1ad8 <alt_up_character_lcd_shift_cursor+0x6c>
    1acc:	e0bffe17 	ldw	r2,-8(fp)
    1ad0:	0085c83a 	sub	r2,zero,r2
    1ad4:	e0bffe15 	stw	r2,-8(fp)
    1ad8:	e0fffe17 	ldw	r3,-8(fp)
    1adc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1ae0:	00000306 	br	1af0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1ae4:	e17ffb43 	ldbu	r5,-19(fp)
    1ae8:	e13ffc17 	ldw	r4,-16(fp)
    1aec:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1af0:	e0bffb03 	ldbu	r2,-20(fp)
    1af4:	10bfffc4 	addi	r2,r2,-1
    1af8:	e0bffb05 	stb	r2,-20(fp)
    1afc:	e0bffb03 	ldbu	r2,-20(fp)
    1b00:	10803fd8 	cmpnei	r2,r2,255
    1b04:	103ff71e 	bne	r2,zero,1ae4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1b08:	e037883a 	mov	sp,fp
    1b0c:	dfc00117 	ldw	ra,4(sp)
    1b10:	df000017 	ldw	fp,0(sp)
    1b14:	dec00204 	addi	sp,sp,8
    1b18:	f800283a 	ret

00001b1c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1b1c:	defff904 	addi	sp,sp,-28
    1b20:	dfc00615 	stw	ra,24(sp)
    1b24:	df000515 	stw	fp,20(sp)
    1b28:	df000504 	addi	fp,sp,20
    1b2c:	e13ffc15 	stw	r4,-16(fp)
    1b30:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1b34:	e0bffd17 	ldw	r2,-12(fp)
    1b38:	1005003a 	cmpeq	r2,r2,zero
    1b3c:	10001e1e 	bne	r2,zero,1bb8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10800050 	cmplti	r2,r2,1
    1b48:	1000031e 	bne	r2,zero,1b58 <alt_up_character_lcd_shift_display+0x3c>
    1b4c:	00800704 	movi	r2,28
    1b50:	e0bfff05 	stb	r2,-4(fp)
    1b54:	00000206 	br	1b60 <alt_up_character_lcd_shift_display+0x44>
    1b58:	00c00604 	movi	r3,24
    1b5c:	e0ffff05 	stb	r3,-4(fp)
    1b60:	e0bfff03 	ldbu	r2,-4(fp)
    1b64:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1b68:	e0fffd17 	ldw	r3,-12(fp)
    1b6c:	e0fffe15 	stw	r3,-8(fp)
    1b70:	e0fffe17 	ldw	r3,-8(fp)
    1b74:	1804403a 	cmpge	r2,r3,zero
    1b78:	1000031e 	bne	r2,zero,1b88 <alt_up_character_lcd_shift_display+0x6c>
    1b7c:	e0bffe17 	ldw	r2,-8(fp)
    1b80:	0085c83a 	sub	r2,zero,r2
    1b84:	e0bffe15 	stw	r2,-8(fp)
    1b88:	e0fffe17 	ldw	r3,-8(fp)
    1b8c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1b90:	00000306 	br	1ba0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1b94:	e17ffb43 	ldbu	r5,-19(fp)
    1b98:	e13ffc17 	ldw	r4,-16(fp)
    1b9c:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1ba0:	e0bffb03 	ldbu	r2,-20(fp)
    1ba4:	10bfffc4 	addi	r2,r2,-1
    1ba8:	e0bffb05 	stb	r2,-20(fp)
    1bac:	e0bffb03 	ldbu	r2,-20(fp)
    1bb0:	10803fd8 	cmpnei	r2,r2,255
    1bb4:	103ff71e 	bne	r2,zero,1b94 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1bb8:	e037883a 	mov	sp,fp
    1bbc:	dfc00117 	ldw	ra,4(sp)
    1bc0:	df000017 	ldw	fp,0(sp)
    1bc4:	dec00204 	addi	sp,sp,8
    1bc8:	f800283a 	ret

00001bcc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1bcc:	defff904 	addi	sp,sp,-28
    1bd0:	dfc00615 	stw	ra,24(sp)
    1bd4:	df000515 	stw	fp,20(sp)
    1bd8:	df000504 	addi	fp,sp,20
    1bdc:	e13ffc15 	stw	r4,-16(fp)
    1be0:	e17ffd15 	stw	r5,-12(fp)
    1be4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1be8:	e0bffd17 	ldw	r2,-12(fp)
    1bec:	10800a28 	cmpgeui	r2,r2,40
    1bf0:	1000031e 	bne	r2,zero,1c00 <alt_up_character_lcd_erase_pos+0x34>
    1bf4:	e0bffe17 	ldw	r2,-8(fp)
    1bf8:	108000b0 	cmpltui	r2,r2,2
    1bfc:	1000031e 	bne	r2,zero,1c0c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    1c00:	00bfffc4 	movi	r2,-1
    1c04:	e0bfff15 	stw	r2,-4(fp)
    1c08:	00000e06 	br	1c44 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1c0c:	e13ffd17 	ldw	r4,-12(fp)
    1c10:	e17ffe17 	ldw	r5,-8(fp)
    1c14:	00017940 	call	1794 <get_DDRAM_addr>
    1c18:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    1c1c:	e17ffb03 	ldbu	r5,-20(fp)
    1c20:	e13ffc17 	ldw	r4,-16(fp)
    1c24:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1c28:	e0bffc17 	ldw	r2,-16(fp)
    1c2c:	10800a17 	ldw	r2,40(r2)
    1c30:	10800044 	addi	r2,r2,1
    1c34:	1007883a 	mov	r3,r2
    1c38:	00800084 	movi	r2,2
    1c3c:	18800025 	stbio	r2,0(r3)
	return 0;
    1c40:	e03fff15 	stw	zero,-4(fp)
    1c44:	e0bfff17 	ldw	r2,-4(fp)
}
    1c48:	e037883a 	mov	sp,fp
    1c4c:	dfc00117 	ldw	ra,4(sp)
    1c50:	df000017 	ldw	fp,0(sp)
    1c54:	dec00204 	addi	sp,sp,8
    1c58:	f800283a 	ret

00001c5c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    1c5c:	defffd04 	addi	sp,sp,-12
    1c60:	dfc00215 	stw	ra,8(sp)
    1c64:	df000115 	stw	fp,4(sp)
    1c68:	df000104 	addi	fp,sp,4
    1c6c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1c70:	e13fff17 	ldw	r4,-4(fp)
    1c74:	01400304 	movi	r5,12
    1c78:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
}
    1c7c:	e037883a 	mov	sp,fp
    1c80:	dfc00117 	ldw	ra,4(sp)
    1c84:	df000017 	ldw	fp,0(sp)
    1c88:	dec00204 	addi	sp,sp,8
    1c8c:	f800283a 	ret

00001c90 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1c90:	defffd04 	addi	sp,sp,-12
    1c94:	dfc00215 	stw	ra,8(sp)
    1c98:	df000115 	stw	fp,4(sp)
    1c9c:	df000104 	addi	fp,sp,4
    1ca0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    1ca4:	e13fff17 	ldw	r4,-4(fp)
    1ca8:	014003c4 	movi	r5,15
    1cac:	00018100 	call	1810 <alt_up_character_lcd_send_cmd>
}
    1cb0:	e037883a 	mov	sp,fp
    1cb4:	dfc00117 	ldw	ra,4(sp)
    1cb8:	df000017 	ldw	fp,0(sp)
    1cbc:	dec00204 	addi	sp,sp,8
    1cc0:	f800283a 	ret

00001cc4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    1cc4:	defffd04 	addi	sp,sp,-12
    1cc8:	df000215 	stw	fp,8(sp)
    1ccc:	df000204 	addi	fp,sp,8
    1cd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1cd4:	e0bfff17 	ldw	r2,-4(fp)
    1cd8:	10800a17 	ldw	r2,40(r2)
    1cdc:	10800104 	addi	r2,r2,4
    1ce0:	10800037 	ldwio	r2,0(r2)
    1ce4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10800054 	ori	r2,r2,1
    1cf0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1cf4:	e0bfff17 	ldw	r2,-4(fp)
    1cf8:	10800a17 	ldw	r2,40(r2)
    1cfc:	10800104 	addi	r2,r2,4
    1d00:	e0fffe17 	ldw	r3,-8(fp)
    1d04:	10c00035 	stwio	r3,0(r2)
}
    1d08:	e037883a 	mov	sp,fp
    1d0c:	df000017 	ldw	fp,0(sp)
    1d10:	dec00104 	addi	sp,sp,4
    1d14:	f800283a 	ret

00001d18 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    1d18:	defffd04 	addi	sp,sp,-12
    1d1c:	df000215 	stw	fp,8(sp)
    1d20:	df000204 	addi	fp,sp,8
    1d24:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1d28:	e0bfff17 	ldw	r2,-4(fp)
    1d2c:	10800a17 	ldw	r2,40(r2)
    1d30:	10800104 	addi	r2,r2,4
    1d34:	10800037 	ldwio	r2,0(r2)
    1d38:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    1d3c:	e0fffe17 	ldw	r3,-8(fp)
    1d40:	00bfff84 	movi	r2,-2
    1d44:	1884703a 	and	r2,r3,r2
    1d48:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	10800a17 	ldw	r2,40(r2)
    1d54:	10800104 	addi	r2,r2,4
    1d58:	e0fffe17 	ldw	r3,-8(fp)
    1d5c:	10c00035 	stwio	r3,0(r2)
}
    1d60:	e037883a 	mov	sp,fp
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00104 	addi	sp,sp,4
    1d6c:	f800283a 	ret

00001d70 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    1d70:	defffd04 	addi	sp,sp,-12
    1d74:	df000215 	stw	fp,8(sp)
    1d78:	df000204 	addi	fp,sp,8
    1d7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    1d80:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    1d84:	e0bfff17 	ldw	r2,-4(fp)
    1d88:	10800a17 	ldw	r2,40(r2)
    1d8c:	10800084 	addi	r2,r2,2
    1d90:	1080002b 	ldhuio	r2,0(r2)
    1d94:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    1d98:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1d9c:	e037883a 	mov	sp,fp
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00104 	addi	sp,sp,4
    1da8:	f800283a 	ret

00001dac <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    1dac:	defffd04 	addi	sp,sp,-12
    1db0:	df000215 	stw	fp,8(sp)
    1db4:	df000204 	addi	fp,sp,8
    1db8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1dbc:	e0bfff17 	ldw	r2,-4(fp)
    1dc0:	10800a17 	ldw	r2,40(r2)
    1dc4:	10800104 	addi	r2,r2,4
    1dc8:	10800037 	ldwio	r2,0(r2)
    1dcc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	10bfffec 	andhi	r2,r2,65535
    1dd8:	1004d43a 	srli	r2,r2,16
}
    1ddc:	e037883a 	mov	sp,fp
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00104 	addi	sp,sp,4
    1de8:	f800283a 	ret

00001dec <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    1dec:	defffc04 	addi	sp,sp,-16
    1df0:	df000315 	stw	fp,12(sp)
    1df4:	df000304 	addi	fp,sp,12
    1df8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    1dfc:	e0bffe17 	ldw	r2,-8(fp)
    1e00:	1080800c 	andi	r2,r2,512
    1e04:	1004d27a 	srli	r2,r2,9
    1e08:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    1e0c:	e0bffd17 	ldw	r2,-12(fp)
    1e10:	1005003a 	cmpeq	r2,r2,zero
    1e14:	1000031e 	bne	r2,zero,1e24 <alt_up_irda_check_parity+0x38>
    1e18:	00bfffc4 	movi	r2,-1
    1e1c:	e0bfff15 	stw	r2,-4(fp)
    1e20:	00000106 	br	1e28 <alt_up_irda_check_parity+0x3c>
    1e24:	e03fff15 	stw	zero,-4(fp)
    1e28:	e0bfff17 	ldw	r2,-4(fp)
}
    1e2c:	e037883a 	mov	sp,fp
    1e30:	df000017 	ldw	fp,0(sp)
    1e34:	dec00104 	addi	sp,sp,4
    1e38:	f800283a 	ret

00001e3c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    1e3c:	defffc04 	addi	sp,sp,-16
    1e40:	df000315 	stw	fp,12(sp)
    1e44:	df000304 	addi	fp,sp,12
    1e48:	e13ffe15 	stw	r4,-8(fp)
    1e4c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    1e50:	e0bffe17 	ldw	r2,-8(fp)
    1e54:	10800a17 	ldw	r2,40(r2)
    1e58:	10800037 	ldwio	r2,0(r2)
    1e5c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    1e60:	e0bffe17 	ldw	r2,-8(fp)
    1e64:	10800a17 	ldw	r2,40(r2)
    1e68:	e0ffff03 	ldbu	r3,-4(fp)
    1e6c:	10c00035 	stwio	r3,0(r2)
	return 0;
    1e70:	0005883a 	mov	r2,zero
}
    1e74:	e037883a 	mov	sp,fp
    1e78:	df000017 	ldw	fp,0(sp)
    1e7c:	dec00104 	addi	sp,sp,4
    1e80:	f800283a 	ret

00001e84 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    1e84:	defffa04 	addi	sp,sp,-24
    1e88:	dfc00515 	stw	ra,20(sp)
    1e8c:	df000415 	stw	fp,16(sp)
    1e90:	df000404 	addi	fp,sp,16
    1e94:	e13ffd15 	stw	r4,-12(fp)
    1e98:	e17ffe15 	stw	r5,-8(fp)
    1e9c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    1ea0:	e0bffd17 	ldw	r2,-12(fp)
    1ea4:	10800a17 	ldw	r2,40(r2)
    1ea8:	10800037 	ldwio	r2,0(r2)
    1eac:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    1eb0:	e0bffc17 	ldw	r2,-16(fp)
    1eb4:	1007883a 	mov	r3,r2
    1eb8:	e0bffe17 	ldw	r2,-8(fp)
    1ebc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    1ec0:	e13ffc17 	ldw	r4,-16(fp)
    1ec4:	0001dec0 	call	1dec <alt_up_irda_check_parity>
    1ec8:	1007883a 	mov	r3,r2
    1ecc:	e0bfff17 	ldw	r2,-4(fp)
    1ed0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    1ed4:	e0bffc17 	ldw	r2,-16(fp)
    1ed8:	10a0000c 	andi	r2,r2,32768
    1edc:	1004d3fa 	srli	r2,r2,15
    1ee0:	10bfffc4 	addi	r2,r2,-1
}
    1ee4:	e037883a 	mov	sp,fp
    1ee8:	dfc00117 	ldw	ra,4(sp)
    1eec:	df000017 	ldw	fp,0(sp)
    1ef0:	dec00204 	addi	sp,sp,8
    1ef4:	f800283a 	ret

00001ef8 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    1ef8:	defff804 	addi	sp,sp,-32
    1efc:	dfc00715 	stw	ra,28(sp)
    1f00:	df000615 	stw	fp,24(sp)
    1f04:	df000604 	addi	fp,sp,24
    1f08:	e13ffd15 	stw	r4,-12(fp)
    1f0c:	e17ffe15 	stw	r5,-8(fp)
    1f10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    1f14:	e0bffd17 	ldw	r2,-12(fp)
    1f18:	10800017 	ldw	r2,0(r2)
    1f1c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    1f20:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    1f24:	00000c06 	br	1f58 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    1f28:	e17ffe17 	ldw	r5,-8(fp)
    1f2c:	e0bffe17 	ldw	r2,-8(fp)
    1f30:	10800044 	addi	r2,r2,1
    1f34:	e0bffe15 	stw	r2,-8(fp)
    1f38:	e1bffc04 	addi	r6,fp,-16
    1f3c:	e13ffb17 	ldw	r4,-20(fp)
    1f40:	0001e840 	call	1e84 <alt_up_irda_read_data>
    1f44:	1004c03a 	cmpne	r2,r2,zero
    1f48:	1000091e 	bne	r2,zero,1f70 <alt_up_irda_read_fd+0x78>
			count++;
    1f4c:	e0bffa17 	ldw	r2,-24(fp)
    1f50:	10800044 	addi	r2,r2,1
    1f54:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1f58:	e0bfff17 	ldw	r2,-4(fp)
    1f5c:	10bfffc4 	addi	r2,r2,-1
    1f60:	e0bfff15 	stw	r2,-4(fp)
    1f64:	e0bfff17 	ldw	r2,-4(fp)
    1f68:	10bfffd8 	cmpnei	r2,r2,-1
    1f6c:	103fee1e 	bne	r2,zero,1f28 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    1f70:	e0bffa17 	ldw	r2,-24(fp)
}
    1f74:	e037883a 	mov	sp,fp
    1f78:	dfc00117 	ldw	ra,4(sp)
    1f7c:	df000017 	ldw	fp,0(sp)
    1f80:	dec00204 	addi	sp,sp,8
    1f84:	f800283a 	ret

00001f88 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1f88:	defff904 	addi	sp,sp,-28
    1f8c:	dfc00615 	stw	ra,24(sp)
    1f90:	df000515 	stw	fp,20(sp)
    1f94:	df000504 	addi	fp,sp,20
    1f98:	e13ffd15 	stw	r4,-12(fp)
    1f9c:	e17ffe15 	stw	r5,-8(fp)
    1fa0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    1fa4:	e0bffd17 	ldw	r2,-12(fp)
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    1fb0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    1fb4:	00000c06 	br	1fe8 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    1fb8:	e0bffe17 	ldw	r2,-8(fp)
    1fbc:	11403fcc 	andi	r5,r2,255
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	10800044 	addi	r2,r2,1
    1fc8:	e0bffe15 	stw	r2,-8(fp)
    1fcc:	e13ffc17 	ldw	r4,-16(fp)
    1fd0:	0001e3c0 	call	1e3c <alt_up_irda_write_data>
    1fd4:	1004c03a 	cmpne	r2,r2,zero
    1fd8:	1000091e 	bne	r2,zero,2000 <alt_up_irda_write_fd+0x78>
			count++;
    1fdc:	e0bffb17 	ldw	r2,-20(fp)
    1fe0:	10800044 	addi	r2,r2,1
    1fe4:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    1fe8:	e0bfff17 	ldw	r2,-4(fp)
    1fec:	10bfffc4 	addi	r2,r2,-1
    1ff0:	e0bfff15 	stw	r2,-4(fp)
    1ff4:	e0bfff17 	ldw	r2,-4(fp)
    1ff8:	10bfffd8 	cmpnei	r2,r2,-1
    1ffc:	103fee1e 	bne	r2,zero,1fb8 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    2000:	e0bffb17 	ldw	r2,-20(fp)
}
    2004:	e037883a 	mov	sp,fp
    2008:	dfc00117 	ldw	ra,4(sp)
    200c:	df000017 	ldw	fp,0(sp)
    2010:	dec00204 	addi	sp,sp,8
    2014:	f800283a 	ret

00002018 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    2018:	defffc04 	addi	sp,sp,-16
    201c:	dfc00315 	stw	ra,12(sp)
    2020:	df000215 	stw	fp,8(sp)
    2024:	df000204 	addi	fp,sp,8
    2028:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    202c:	e13fff17 	ldw	r4,-4(fp)
    2030:	01400074 	movhi	r5,1
    2034:	29623604 	addi	r5,r5,-30504
    2038:	00032c80 	call	32c8 <alt_find_dev>
    203c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2040:	e0bffe17 	ldw	r2,-8(fp)
}
    2044:	e037883a 	mov	sp,fp
    2048:	dfc00117 	ldw	ra,4(sp)
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00204 	addi	sp,sp,8
    2054:	f800283a 	ret

00002058 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    2058:	defffd04 	addi	sp,sp,-12
    205c:	df000215 	stw	fp,8(sp)
    2060:	df000204 	addi	fp,sp,8
    2064:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	1080400c 	andi	r2,r2,256
    2070:	1004d23a 	srli	r2,r2,8
    2074:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    2078:	e0bffe03 	ldbu	r2,-8(fp)
}
    207c:	e037883a 	mov	sp,fp
    2080:	df000017 	ldw	fp,0(sp)
    2084:	dec00104 	addi	sp,sp,4
    2088:	f800283a 	ret

0000208c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    208c:	defffd04 	addi	sp,sp,-12
    2090:	df000215 	stw	fp,8(sp)
    2094:	df000204 	addi	fp,sp,8
    2098:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    209c:	e0bfff17 	ldw	r2,-4(fp)
    20a0:	1080004c 	andi	r2,r2,1
    20a4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    20a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	df000017 	ldw	fp,0(sp)
    20b4:	dec00104 	addi	sp,sp,4
    20b8:	f800283a 	ret

000020bc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    20bc:	defffd04 	addi	sp,sp,-12
    20c0:	df000215 	stw	fp,8(sp)
    20c4:	df000204 	addi	fp,sp,8
    20c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    20cc:	e0bfff17 	ldw	r2,-4(fp)
    20d0:	1081000c 	andi	r2,r2,1024
    20d4:	1004d2ba 	srli	r2,r2,10
    20d8:	e0bffe05 	stb	r2,-8(fp)
	return re;
    20dc:	e0bffe03 	ldbu	r2,-8(fp)
}
    20e0:	e037883a 	mov	sp,fp
    20e4:	df000017 	ldw	fp,0(sp)
    20e8:	dec00104 	addi	sp,sp,4
    20ec:	f800283a 	ret

000020f0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    20f0:	defffd04 	addi	sp,sp,-12
    20f4:	df000215 	stw	fp,8(sp)
    20f8:	df000204 	addi	fp,sp,8
    20fc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10bfffec 	andhi	r2,r2,65535
    2108:	1004d43a 	srli	r2,r2,16
    210c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    2110:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2114:	e037883a 	mov	sp,fp
    2118:	df000017 	ldw	fp,0(sp)
    211c:	dec00104 	addi	sp,sp,4
    2120:	f800283a 	ret

00002124 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    2124:	defffd04 	addi	sp,sp,-12
    2128:	df000215 	stw	fp,8(sp)
    212c:	df000204 	addi	fp,sp,8
    2130:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    2134:	e0bfff17 	ldw	r2,-4(fp)
    2138:	10a0000c 	andi	r2,r2,32768
    213c:	1004d3fa 	srli	r2,r2,15
    2140:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    2144:	e0bffe03 	ldbu	r2,-8(fp)
}
    2148:	e037883a 	mov	sp,fp
    214c:	df000017 	ldw	fp,0(sp)
    2150:	dec00104 	addi	sp,sp,4
    2154:	f800283a 	ret

00002158 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    2158:	defffd04 	addi	sp,sp,-12
    215c:	df000215 	stw	fp,8(sp)
    2160:	df000204 	addi	fp,sp,8
    2164:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    2168:	e0bfff17 	ldw	r2,-4(fp)
    216c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    2170:	e0bffe03 	ldbu	r2,-8(fp)
}
    2174:	e037883a 	mov	sp,fp
    2178:	df000017 	ldw	fp,0(sp)
    217c:	dec00104 	addi	sp,sp,4
    2180:	f800283a 	ret

00002184 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    2184:	defffb04 	addi	sp,sp,-20
    2188:	dfc00415 	stw	ra,16(sp)
    218c:	df000315 	stw	fp,12(sp)
    2190:	df000304 	addi	fp,sp,12
    2194:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    2198:	e13fff17 	ldw	r4,-4(fp)
    219c:	01403fc4 	movi	r5,255
    21a0:	00023e40 	call	23e4 <alt_up_ps2_write_data_byte_with_ack>
    21a4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    21a8:	e0bffd17 	ldw	r2,-12(fp)
    21ac:	1004c03a 	cmpne	r2,r2,zero
    21b0:	1000221e 	bne	r2,zero,223c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    21b4:	e17ffe04 	addi	r5,fp,-8
    21b8:	e13fff17 	ldw	r4,-4(fp)
    21bc:	00024500 	call	2450 <alt_up_ps2_read_data_byte_timeout>
    21c0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    21c4:	e0bffd17 	ldw	r2,-12(fp)
    21c8:	1004c03a 	cmpne	r2,r2,zero
    21cc:	10001b1e 	bne	r2,zero,223c <alt_up_ps2_init+0xb8>
    21d0:	e0bffe03 	ldbu	r2,-8(fp)
    21d4:	10803fcc 	andi	r2,r2,255
    21d8:	10802a98 	cmpnei	r2,r2,170
    21dc:	1000171e 	bne	r2,zero,223c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    21e0:	e17ffe04 	addi	r5,fp,-8
    21e4:	e13fff17 	ldw	r4,-4(fp)
    21e8:	00024500 	call	2450 <alt_up_ps2_read_data_byte_timeout>
    21ec:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    21f0:	e0bffd17 	ldw	r2,-12(fp)
    21f4:	10bfe318 	cmpnei	r2,r2,-116
    21f8:	1000041e 	bne	r2,zero,220c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    21fc:	e0ffff17 	ldw	r3,-4(fp)
    2200:	00800044 	movi	r2,1
    2204:	18800d15 	stw	r2,52(r3)
    2208:	00000c06 	br	223c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	1004c03a 	cmpne	r2,r2,zero
    2214:	1000091e 	bne	r2,zero,223c <alt_up_ps2_init+0xb8>
    2218:	e0bffe03 	ldbu	r2,-8(fp)
    221c:	10803fcc 	andi	r2,r2,255
    2220:	1004c03a 	cmpne	r2,r2,zero
    2224:	1000051e 	bne	r2,zero,223c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    2228:	e0bfff17 	ldw	r2,-4(fp)
    222c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    2230:	e13fff17 	ldw	r4,-4(fp)
    2234:	01403d04 	movi	r5,244
    2238:	00022fc0 	call	22fc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    223c:	e037883a 	mov	sp,fp
    2240:	dfc00117 	ldw	ra,4(sp)
    2244:	df000017 	ldw	fp,0(sp)
    2248:	dec00204 	addi	sp,sp,8
    224c:	f800283a 	ret

00002250 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    2250:	defffd04 	addi	sp,sp,-12
    2254:	df000215 	stw	fp,8(sp)
    2258:	df000204 	addi	fp,sp,8
    225c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    2260:	e0bfff17 	ldw	r2,-4(fp)
    2264:	10800a17 	ldw	r2,40(r2)
    2268:	10800104 	addi	r2,r2,4
    226c:	10800037 	ldwio	r2,0(r2)
    2270:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2274:	e0bffe17 	ldw	r2,-8(fp)
    2278:	10800054 	ori	r2,r2,1
    227c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    2280:	e0bfff17 	ldw	r2,-4(fp)
    2284:	10800a17 	ldw	r2,40(r2)
    2288:	10800104 	addi	r2,r2,4
    228c:	e0fffe17 	ldw	r3,-8(fp)
    2290:	10c00035 	stwio	r3,0(r2)
}
    2294:	e037883a 	mov	sp,fp
    2298:	df000017 	ldw	fp,0(sp)
    229c:	dec00104 	addi	sp,sp,4
    22a0:	f800283a 	ret

000022a4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    22a4:	defffd04 	addi	sp,sp,-12
    22a8:	df000215 	stw	fp,8(sp)
    22ac:	df000204 	addi	fp,sp,8
    22b0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    22b4:	e0bfff17 	ldw	r2,-4(fp)
    22b8:	10800a17 	ldw	r2,40(r2)
    22bc:	10800104 	addi	r2,r2,4
    22c0:	10800037 	ldwio	r2,0(r2)
    22c4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    22c8:	e0fffe17 	ldw	r3,-8(fp)
    22cc:	00bfff84 	movi	r2,-2
    22d0:	1884703a 	and	r2,r3,r2
    22d4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    22d8:	e0bfff17 	ldw	r2,-4(fp)
    22dc:	10800a17 	ldw	r2,40(r2)
    22e0:	10800104 	addi	r2,r2,4
    22e4:	e0fffe17 	ldw	r3,-8(fp)
    22e8:	10c00035 	stwio	r3,0(r2)
}
    22ec:	e037883a 	mov	sp,fp
    22f0:	df000017 	ldw	fp,0(sp)
    22f4:	dec00104 	addi	sp,sp,4
    22f8:	f800283a 	ret

000022fc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    22fc:	defffa04 	addi	sp,sp,-24
    2300:	dfc00515 	stw	ra,20(sp)
    2304:	df000415 	stw	fp,16(sp)
    2308:	df000404 	addi	fp,sp,16
    230c:	e13ffd15 	stw	r4,-12(fp)
    2310:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    2314:	e0bffd17 	ldw	r2,-12(fp)
    2318:	10800a17 	ldw	r2,40(r2)
    231c:	e0fffe03 	ldbu	r3,-8(fp)
    2320:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    2324:	e0bffd17 	ldw	r2,-12(fp)
    2328:	10800a17 	ldw	r2,40(r2)
    232c:	10800104 	addi	r2,r2,4
    2330:	10800037 	ldwio	r2,0(r2)
    2334:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    2338:	e13ffc17 	ldw	r4,-16(fp)
    233c:	00020bc0 	call	20bc <read_CE_bit>
    2340:	10803fcc 	andi	r2,r2,255
    2344:	1005003a 	cmpeq	r2,r2,zero
    2348:	1000031e 	bne	r2,zero,2358 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    234c:	00bffec4 	movi	r2,-5
    2350:	e0bfff15 	stw	r2,-4(fp)
    2354:	00000106 	br	235c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    2358:	e03fff15 	stw	zero,-4(fp)
    235c:	e0bfff17 	ldw	r2,-4(fp)
}
    2360:	e037883a 	mov	sp,fp
    2364:	dfc00117 	ldw	ra,4(sp)
    2368:	df000017 	ldw	fp,0(sp)
    236c:	dec00204 	addi	sp,sp,8
    2370:	f800283a 	ret

00002374 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    2374:	defffb04 	addi	sp,sp,-20
    2378:	dfc00415 	stw	ra,16(sp)
    237c:	df000315 	stw	fp,12(sp)
    2380:	df000304 	addi	fp,sp,12
    2384:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    2388:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    238c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    2390:	e17ffd44 	addi	r5,fp,-11
    2394:	e13ffe17 	ldw	r4,-8(fp)
    2398:	00024500 	call	2450 <alt_up_ps2_read_data_byte_timeout>
    239c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    23a0:	e0bffd03 	ldbu	r2,-12(fp)
    23a4:	1004c03a 	cmpne	r2,r2,zero
    23a8:	1000061e 	bne	r2,zero,23c4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    23ac:	e0bffd43 	ldbu	r2,-11(fp)
    23b0:	10803fcc 	andi	r2,r2,255
    23b4:	10803e98 	cmpnei	r2,r2,250
    23b8:	103ff51e 	bne	r2,zero,2390 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    23bc:	e03fff15 	stw	zero,-4(fp)
    23c0:	00000206 	br	23cc <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    23c4:	e0bffd03 	ldbu	r2,-12(fp)
    23c8:	e0bfff15 	stw	r2,-4(fp)
    23cc:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    23d0:	e037883a 	mov	sp,fp
    23d4:	dfc00117 	ldw	ra,4(sp)
    23d8:	df000017 	ldw	fp,0(sp)
    23dc:	dec00204 	addi	sp,sp,8
    23e0:	f800283a 	ret

000023e4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    23e4:	defff904 	addi	sp,sp,-28
    23e8:	dfc00615 	stw	ra,24(sp)
    23ec:	df000515 	stw	fp,20(sp)
    23f0:	df000504 	addi	fp,sp,20
    23f4:	e13ffd15 	stw	r4,-12(fp)
    23f8:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    23fc:	e17ffe03 	ldbu	r5,-8(fp)
    2400:	e13ffd17 	ldw	r4,-12(fp)
    2404:	00022fc0 	call	22fc <alt_up_ps2_write_data_byte>
    2408:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    240c:	e0bffc17 	ldw	r2,-16(fp)
    2410:	1005003a 	cmpeq	r2,r2,zero
    2414:	1000031e 	bne	r2,zero,2424 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    2418:	e0bffc17 	ldw	r2,-16(fp)
    241c:	e0bfff15 	stw	r2,-4(fp)
    2420:	00000506 	br	2438 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    2424:	e13ffd17 	ldw	r4,-12(fp)
    2428:	00023740 	call	2374 <alt_up_ps2_wait_for_ack>
    242c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    2430:	e0bffb17 	ldw	r2,-20(fp)
    2434:	e0bfff15 	stw	r2,-4(fp)
    2438:	e0bfff17 	ldw	r2,-4(fp)
}
    243c:	e037883a 	mov	sp,fp
    2440:	dfc00117 	ldw	ra,4(sp)
    2444:	df000017 	ldw	fp,0(sp)
    2448:	dec00204 	addi	sp,sp,8
    244c:	f800283a 	ret

00002450 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2450:	defff904 	addi	sp,sp,-28
    2454:	dfc00615 	stw	ra,24(sp)
    2458:	df000515 	stw	fp,20(sp)
    245c:	df000504 	addi	fp,sp,20
    2460:	e13ffd15 	stw	r4,-12(fp)
    2464:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    2468:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    246c:	e03ffb15 	stw	zero,-20(fp)
    2470:	00000006 	br	2474 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    2474:	e0bffb17 	ldw	r2,-20(fp)
    2478:	10800044 	addi	r2,r2,1
    247c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2480:	e0bffd17 	ldw	r2,-12(fp)
    2484:	10800a17 	ldw	r2,40(r2)
    2488:	10800037 	ldwio	r2,0(r2)
    248c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    2490:	e13ffc17 	ldw	r4,-16(fp)
    2494:	00021240 	call	2124 <read_data_valid>
    2498:	10803fcc 	andi	r2,r2,255
    249c:	1005003a 	cmpeq	r2,r2,zero
    24a0:	1000071e 	bne	r2,zero,24c0 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    24a4:	e13ffc17 	ldw	r4,-16(fp)
    24a8:	00021580 	call	2158 <read_data_byte>
    24ac:	1007883a 	mov	r3,r2
    24b0:	e0bffe17 	ldw	r2,-8(fp)
    24b4:	10c00005 	stb	r3,0(r2)
			return 0;
    24b8:	e03fff15 	stw	zero,-4(fp)
    24bc:	00000a06 	br	24e8 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    24c0:	e0bffd17 	ldw	r2,-12(fp)
    24c4:	10800c17 	ldw	r2,48(r2)
    24c8:	1005003a 	cmpeq	r2,r2,zero
    24cc:	103fe91e 	bne	r2,zero,2474 <alt_up_ps2_read_data_byte_timeout+0x24>
    24d0:	e0bffd17 	ldw	r2,-12(fp)
    24d4:	10c00c17 	ldw	r3,48(r2)
    24d8:	e0bffb17 	ldw	r2,-20(fp)
    24dc:	18bfe52e 	bgeu	r3,r2,2474 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    24e0:	00bfe304 	movi	r2,-116
    24e4:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    24e8:	e0bfff17 	ldw	r2,-4(fp)
}
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2500:	defffa04 	addi	sp,sp,-24
    2504:	dfc00515 	stw	ra,20(sp)
    2508:	df000415 	stw	fp,16(sp)
    250c:	df000404 	addi	fp,sp,16
    2510:	e13ffd15 	stw	r4,-12(fp)
    2514:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    2518:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    251c:	e0bffd17 	ldw	r2,-12(fp)
    2520:	10800a17 	ldw	r2,40(r2)
    2524:	10800037 	ldwio	r2,0(r2)
    2528:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    252c:	e13ffc17 	ldw	r4,-16(fp)
    2530:	00021240 	call	2124 <read_data_valid>
    2534:	10803fcc 	andi	r2,r2,255
    2538:	1005003a 	cmpeq	r2,r2,zero
    253c:	1000071e 	bne	r2,zero,255c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    2540:	e13ffc17 	ldw	r4,-16(fp)
    2544:	00021580 	call	2158 <read_data_byte>
    2548:	1007883a 	mov	r3,r2
    254c:	e0bffe17 	ldw	r2,-8(fp)
    2550:	10c00005 	stb	r3,0(r2)
		return 0;
    2554:	e03fff15 	stw	zero,-4(fp)
    2558:	00000206 	br	2564 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    255c:	00bfffc4 	movi	r2,-1
    2560:	e0bfff15 	stw	r2,-4(fp)
    2564:	e0bfff17 	ldw	r2,-4(fp)
}
    2568:	e037883a 	mov	sp,fp
    256c:	dfc00117 	ldw	ra,4(sp)
    2570:	df000017 	ldw	fp,0(sp)
    2574:	dec00204 	addi	sp,sp,8
    2578:	f800283a 	ret

0000257c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    257c:	defffb04 	addi	sp,sp,-20
    2580:	dfc00415 	stw	ra,16(sp)
    2584:	df000315 	stw	fp,12(sp)
    2588:	df000304 	addi	fp,sp,12
    258c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    2590:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    2594:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2598:	e0bfff17 	ldw	r2,-4(fp)
    259c:	10800a17 	ldw	r2,40(r2)
    25a0:	10800037 	ldwio	r2,0(r2)
    25a4:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    25a8:	e13ffd17 	ldw	r4,-12(fp)
    25ac:	00020f00 	call	20f0 <read_num_bytes_available>
    25b0:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    25b4:	e0bffe0b 	ldhu	r2,-8(fp)
    25b8:	1004c03a 	cmpne	r2,r2,zero
    25bc:	103ff61e 	bne	r2,zero,2598 <alt_up_ps2_clear_fifo+0x1c>
}
    25c0:	e037883a 	mov	sp,fp
    25c4:	dfc00117 	ldw	ra,4(sp)
    25c8:	df000017 	ldw	fp,0(sp)
    25cc:	dec00204 	addi	sp,sp,8
    25d0:	f800283a 	ret

000025d4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    25d4:	defff704 	addi	sp,sp,-36
    25d8:	dfc00815 	stw	ra,32(sp)
    25dc:	df000715 	stw	fp,28(sp)
    25e0:	df000704 	addi	fp,sp,28
    25e4:	e13ffc15 	stw	r4,-16(fp)
    25e8:	e17ffd15 	stw	r5,-12(fp)
    25ec:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    25f0:	e0bffc17 	ldw	r2,-16(fp)
    25f4:	10800017 	ldw	r2,0(r2)
    25f8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    25fc:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    2600:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    2604:	e0fff917 	ldw	r3,-28(fp)
    2608:	e0bffe17 	ldw	r2,-8(fp)
    260c:	18bffd16 	blt	r3,r2,2604 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    2610:	e17ffd17 	ldw	r5,-12(fp)
    2614:	e0bffd17 	ldw	r2,-12(fp)
    2618:	10800044 	addi	r2,r2,1
    261c:	e0bffd15 	stw	r2,-12(fp)
    2620:	e13ffb17 	ldw	r4,-20(fp)
    2624:	00024500 	call	2450 <alt_up_ps2_read_data_byte_timeout>
    2628:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    262c:	e0bffa17 	ldw	r2,-24(fp)
    2630:	1005003a 	cmpeq	r2,r2,zero
    2634:	1000031e 	bne	r2,zero,2644 <alt_up_ps2_read_fd+0x70>
			return count;
    2638:	e0bff917 	ldw	r2,-28(fp)
    263c:	e0bfff15 	stw	r2,-4(fp)
    2640:	00000506 	br	2658 <alt_up_ps2_read_fd+0x84>
		count++;
    2644:	e0bff917 	ldw	r2,-28(fp)
    2648:	10800044 	addi	r2,r2,1
    264c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    2650:	e0bff917 	ldw	r2,-28(fp)
    2654:	e0bfff15 	stw	r2,-4(fp)
    2658:	e0bfff17 	ldw	r2,-4(fp)
}
    265c:	e037883a 	mov	sp,fp
    2660:	dfc00117 	ldw	ra,4(sp)
    2664:	df000017 	ldw	fp,0(sp)
    2668:	dec00204 	addi	sp,sp,8
    266c:	f800283a 	ret

00002670 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2670:	defff704 	addi	sp,sp,-36
    2674:	dfc00815 	stw	ra,32(sp)
    2678:	df000715 	stw	fp,28(sp)
    267c:	df000704 	addi	fp,sp,28
    2680:	e13ffc15 	stw	r4,-16(fp)
    2684:	e17ffd15 	stw	r5,-12(fp)
    2688:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    268c:	e0bffc17 	ldw	r2,-16(fp)
    2690:	10800017 	ldw	r2,0(r2)
    2694:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    2698:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    269c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    26a0:	00001206 	br	26ec <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    26a4:	e0bffd17 	ldw	r2,-12(fp)
    26a8:	10800003 	ldbu	r2,0(r2)
    26ac:	11403fcc 	andi	r5,r2,255
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	10800044 	addi	r2,r2,1
    26b8:	e0bffd15 	stw	r2,-12(fp)
    26bc:	e13ffb17 	ldw	r4,-20(fp)
    26c0:	00022fc0 	call	22fc <alt_up_ps2_write_data_byte>
    26c4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    26c8:	e0bffa17 	ldw	r2,-24(fp)
    26cc:	1005003a 	cmpeq	r2,r2,zero
    26d0:	1000031e 	bne	r2,zero,26e0 <alt_up_ps2_write_fd+0x70>
			return count;
    26d4:	e0bff917 	ldw	r2,-28(fp)
    26d8:	e0bfff15 	stw	r2,-4(fp)
    26dc:	00000806 	br	2700 <alt_up_ps2_write_fd+0x90>
		count++;
    26e0:	e0bff917 	ldw	r2,-28(fp)
    26e4:	10800044 	addi	r2,r2,1
    26e8:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    26ec:	e0fff917 	ldw	r3,-28(fp)
    26f0:	e0bffe17 	ldw	r2,-8(fp)
    26f4:	18bfeb16 	blt	r3,r2,26a4 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    26f8:	e0bff917 	ldw	r2,-28(fp)
    26fc:	e0bfff15 	stw	r2,-4(fp)
    2700:	e0bfff17 	ldw	r2,-4(fp)
}
    2704:	e037883a 	mov	sp,fp
    2708:	dfc00117 	ldw	ra,4(sp)
    270c:	df000017 	ldw	fp,0(sp)
    2710:	dec00204 	addi	sp,sp,8
    2714:	f800283a 	ret

00002718 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    2718:	defffc04 	addi	sp,sp,-16
    271c:	dfc00315 	stw	ra,12(sp)
    2720:	df000215 	stw	fp,8(sp)
    2724:	df000204 	addi	fp,sp,8
    2728:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    272c:	e13fff17 	ldw	r4,-4(fp)
    2730:	01400074 	movhi	r5,1
    2734:	29623604 	addi	r5,r5,-30504
    2738:	00032c80 	call	32c8 <alt_find_dev>
    273c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2740:	e0bffe17 	ldw	r2,-8(fp)
}
    2744:	e037883a 	mov	sp,fp
    2748:	dfc00117 	ldw	ra,4(sp)
    274c:	df000017 	ldw	fp,0(sp)
    2750:	dec00204 	addi	sp,sp,8
    2754:	f800283a 	ret

00002758 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2758:	defffd04 	addi	sp,sp,-12
    275c:	df000215 	stw	fp,8(sp)
    2760:	df000204 	addi	fp,sp,8
    2764:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	10800a17 	ldw	r2,40(r2)
    2770:	10800104 	addi	r2,r2,4
    2774:	10800037 	ldwio	r2,0(r2)
    2778:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    277c:	e0bffe17 	ldw	r2,-8(fp)
    2780:	10800054 	ori	r2,r2,1
    2784:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2788:	e0bfff17 	ldw	r2,-4(fp)
    278c:	10800a17 	ldw	r2,40(r2)
    2790:	10800104 	addi	r2,r2,4
    2794:	e0fffe17 	ldw	r3,-8(fp)
    2798:	10c00035 	stwio	r3,0(r2)
}
    279c:	e037883a 	mov	sp,fp
    27a0:	df000017 	ldw	fp,0(sp)
    27a4:	dec00104 	addi	sp,sp,4
    27a8:	f800283a 	ret

000027ac <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    27ac:	defffd04 	addi	sp,sp,-12
    27b0:	df000215 	stw	fp,8(sp)
    27b4:	df000204 	addi	fp,sp,8
    27b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    27bc:	e0bfff17 	ldw	r2,-4(fp)
    27c0:	10800a17 	ldw	r2,40(r2)
    27c4:	10800104 	addi	r2,r2,4
    27c8:	10800037 	ldwio	r2,0(r2)
    27cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    27d0:	e0fffe17 	ldw	r3,-8(fp)
    27d4:	00bfff84 	movi	r2,-2
    27d8:	1884703a 	and	r2,r3,r2
    27dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    27e0:	e0bfff17 	ldw	r2,-4(fp)
    27e4:	10800a17 	ldw	r2,40(r2)
    27e8:	10800104 	addi	r2,r2,4
    27ec:	e0fffe17 	ldw	r3,-8(fp)
    27f0:	10c00035 	stwio	r3,0(r2)
}
    27f4:	e037883a 	mov	sp,fp
    27f8:	df000017 	ldw	fp,0(sp)
    27fc:	dec00104 	addi	sp,sp,4
    2800:	f800283a 	ret

00002804 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    2804:	defffd04 	addi	sp,sp,-12
    2808:	df000215 	stw	fp,8(sp)
    280c:	df000204 	addi	fp,sp,8
    2810:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    2814:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    2818:	e0bfff17 	ldw	r2,-4(fp)
    281c:	10800a17 	ldw	r2,40(r2)
    2820:	10800084 	addi	r2,r2,2
    2824:	1080002b 	ldhuio	r2,0(r2)
    2828:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    282c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2830:	e037883a 	mov	sp,fp
    2834:	df000017 	ldw	fp,0(sp)
    2838:	dec00104 	addi	sp,sp,4
    283c:	f800283a 	ret

00002840 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    2840:	defffd04 	addi	sp,sp,-12
    2844:	df000215 	stw	fp,8(sp)
    2848:	df000204 	addi	fp,sp,8
    284c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2850:	e0bfff17 	ldw	r2,-4(fp)
    2854:	10800a17 	ldw	r2,40(r2)
    2858:	10800104 	addi	r2,r2,4
    285c:	10800037 	ldwio	r2,0(r2)
    2860:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    2864:	e0bffe17 	ldw	r2,-8(fp)
    2868:	10bfffec 	andhi	r2,r2,65535
    286c:	1004d43a 	srli	r2,r2,16
}
    2870:	e037883a 	mov	sp,fp
    2874:	df000017 	ldw	fp,0(sp)
    2878:	dec00104 	addi	sp,sp,4
    287c:	f800283a 	ret

00002880 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    2880:	defffc04 	addi	sp,sp,-16
    2884:	df000315 	stw	fp,12(sp)
    2888:	df000304 	addi	fp,sp,12
    288c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    2890:	e0bffe17 	ldw	r2,-8(fp)
    2894:	1080800c 	andi	r2,r2,512
    2898:	1004d27a 	srli	r2,r2,9
    289c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    28a0:	e0bffd17 	ldw	r2,-12(fp)
    28a4:	1005003a 	cmpeq	r2,r2,zero
    28a8:	1000031e 	bne	r2,zero,28b8 <alt_up_rs232_check_parity+0x38>
    28ac:	00bfffc4 	movi	r2,-1
    28b0:	e0bfff15 	stw	r2,-4(fp)
    28b4:	00000106 	br	28bc <alt_up_rs232_check_parity+0x3c>
    28b8:	e03fff15 	stw	zero,-4(fp)
    28bc:	e0bfff17 	ldw	r2,-4(fp)
}
    28c0:	e037883a 	mov	sp,fp
    28c4:	df000017 	ldw	fp,0(sp)
    28c8:	dec00104 	addi	sp,sp,4
    28cc:	f800283a 	ret

000028d0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    28d0:	defffc04 	addi	sp,sp,-16
    28d4:	df000315 	stw	fp,12(sp)
    28d8:	df000304 	addi	fp,sp,12
    28dc:	e13ffe15 	stw	r4,-8(fp)
    28e0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	10800a17 	ldw	r2,40(r2)
    28ec:	10800037 	ldwio	r2,0(r2)
    28f0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    28f4:	e0bffe17 	ldw	r2,-8(fp)
    28f8:	10800a17 	ldw	r2,40(r2)
    28fc:	e0ffff03 	ldbu	r3,-4(fp)
    2900:	10c00035 	stwio	r3,0(r2)
	return 0;
    2904:	0005883a 	mov	r2,zero
}
    2908:	e037883a 	mov	sp,fp
    290c:	df000017 	ldw	fp,0(sp)
    2910:	dec00104 	addi	sp,sp,4
    2914:	f800283a 	ret

00002918 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    2918:	defffa04 	addi	sp,sp,-24
    291c:	dfc00515 	stw	ra,20(sp)
    2920:	df000415 	stw	fp,16(sp)
    2924:	df000404 	addi	fp,sp,16
    2928:	e13ffd15 	stw	r4,-12(fp)
    292c:	e17ffe15 	stw	r5,-8(fp)
    2930:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    2934:	e0bffd17 	ldw	r2,-12(fp)
    2938:	10800a17 	ldw	r2,40(r2)
    293c:	10800037 	ldwio	r2,0(r2)
    2940:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    2944:	e0bffc17 	ldw	r2,-16(fp)
    2948:	1007883a 	mov	r3,r2
    294c:	e0bffe17 	ldw	r2,-8(fp)
    2950:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    2954:	e13ffc17 	ldw	r4,-16(fp)
    2958:	00028800 	call	2880 <alt_up_rs232_check_parity>
    295c:	1007883a 	mov	r3,r2
    2960:	e0bfff17 	ldw	r2,-4(fp)
    2964:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    2968:	e0bffc17 	ldw	r2,-16(fp)
    296c:	10a0000c 	andi	r2,r2,32768
    2970:	1004d3fa 	srli	r2,r2,15
    2974:	10bfffc4 	addi	r2,r2,-1
}
    2978:	e037883a 	mov	sp,fp
    297c:	dfc00117 	ldw	ra,4(sp)
    2980:	df000017 	ldw	fp,0(sp)
    2984:	dec00204 	addi	sp,sp,8
    2988:	f800283a 	ret

0000298c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    298c:	defff804 	addi	sp,sp,-32
    2990:	dfc00715 	stw	ra,28(sp)
    2994:	df000615 	stw	fp,24(sp)
    2998:	df000604 	addi	fp,sp,24
    299c:	e13ffd15 	stw	r4,-12(fp)
    29a0:	e17ffe15 	stw	r5,-8(fp)
    29a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    29a8:	e0bffd17 	ldw	r2,-12(fp)
    29ac:	10800017 	ldw	r2,0(r2)
    29b0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    29b4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    29b8:	00000c06 	br	29ec <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    29bc:	e17ffe17 	ldw	r5,-8(fp)
    29c0:	e0bffe17 	ldw	r2,-8(fp)
    29c4:	10800044 	addi	r2,r2,1
    29c8:	e0bffe15 	stw	r2,-8(fp)
    29cc:	e1bffc04 	addi	r6,fp,-16
    29d0:	e13ffb17 	ldw	r4,-20(fp)
    29d4:	00029180 	call	2918 <alt_up_rs232_read_data>
    29d8:	1004c03a 	cmpne	r2,r2,zero
    29dc:	1000091e 	bne	r2,zero,2a04 <alt_up_rs232_read_fd+0x78>
			count++;
    29e0:	e0bffa17 	ldw	r2,-24(fp)
    29e4:	10800044 	addi	r2,r2,1
    29e8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    29ec:	e0bfff17 	ldw	r2,-4(fp)
    29f0:	10bfffc4 	addi	r2,r2,-1
    29f4:	e0bfff15 	stw	r2,-4(fp)
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10bfffd8 	cmpnei	r2,r2,-1
    2a00:	103fee1e 	bne	r2,zero,29bc <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    2a04:	e0bffa17 	ldw	r2,-24(fp)
}
    2a08:	e037883a 	mov	sp,fp
    2a0c:	dfc00117 	ldw	ra,4(sp)
    2a10:	df000017 	ldw	fp,0(sp)
    2a14:	dec00204 	addi	sp,sp,8
    2a18:	f800283a 	ret

00002a1c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2a1c:	defff904 	addi	sp,sp,-28
    2a20:	dfc00615 	stw	ra,24(sp)
    2a24:	df000515 	stw	fp,20(sp)
    2a28:	df000504 	addi	fp,sp,20
    2a2c:	e13ffd15 	stw	r4,-12(fp)
    2a30:	e17ffe15 	stw	r5,-8(fp)
    2a34:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2a38:	e0bffd17 	ldw	r2,-12(fp)
    2a3c:	10800017 	ldw	r2,0(r2)
    2a40:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2a44:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    2a48:	00000d06 	br	2a80 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    2a4c:	e0bffe17 	ldw	r2,-8(fp)
    2a50:	10800003 	ldbu	r2,0(r2)
    2a54:	11403fcc 	andi	r5,r2,255
    2a58:	e13ffc17 	ldw	r4,-16(fp)
    2a5c:	00028d00 	call	28d0 <alt_up_rs232_write_data>
    2a60:	1004c03a 	cmpne	r2,r2,zero
    2a64:	10000c1e 	bne	r2,zero,2a98 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    2a68:	e0bffb17 	ldw	r2,-20(fp)
    2a6c:	10800044 	addi	r2,r2,1
    2a70:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    2a74:	e0bffe17 	ldw	r2,-8(fp)
    2a78:	10800044 	addi	r2,r2,1
    2a7c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    2a80:	e0bfff17 	ldw	r2,-4(fp)
    2a84:	10bfffc4 	addi	r2,r2,-1
    2a88:	e0bfff15 	stw	r2,-4(fp)
    2a8c:	e0bfff17 	ldw	r2,-4(fp)
    2a90:	10bfffd8 	cmpnei	r2,r2,-1
    2a94:	103fed1e 	bne	r2,zero,2a4c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    2a98:	e0bffb17 	ldw	r2,-20(fp)
}
    2a9c:	e037883a 	mov	sp,fp
    2aa0:	dfc00117 	ldw	ra,4(sp)
    2aa4:	df000017 	ldw	fp,0(sp)
    2aa8:	dec00204 	addi	sp,sp,8
    2aac:	f800283a 	ret

00002ab0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    2ab0:	defffc04 	addi	sp,sp,-16
    2ab4:	dfc00315 	stw	ra,12(sp)
    2ab8:	df000215 	stw	fp,8(sp)
    2abc:	df000204 	addi	fp,sp,8
    2ac0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    2ac4:	e13fff17 	ldw	r4,-4(fp)
    2ac8:	01400074 	movhi	r5,1
    2acc:	29623604 	addi	r5,r5,-30504
    2ad0:	00032c80 	call	32c8 <alt_find_dev>
    2ad4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2ad8:	e0bffe17 	ldw	r2,-8(fp)
}
    2adc:	e037883a 	mov	sp,fp
    2ae0:	dfc00117 	ldw	ra,4(sp)
    2ae4:	df000017 	ldw	fp,0(sp)
    2ae8:	dec00204 	addi	sp,sp,8
    2aec:	f800283a 	ret

00002af0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    2af0:	defffc04 	addi	sp,sp,-16
    2af4:	dfc00315 	stw	ra,12(sp)
    2af8:	df000215 	stw	fp,8(sp)
    2afc:	df000204 	addi	fp,sp,8
    2b00:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    2b04:	e0bfff17 	ldw	r2,-4(fp)
    2b08:	10800217 	ldw	r2,8(r2)
    2b0c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    2b10:	00000c06 	br	2b44 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    2b14:	e13ffe17 	ldw	r4,-8(fp)
    2b18:	01400034 	movhi	r5,0
    2b1c:	295ac404 	addi	r5,r5,27408
    2b20:	00041240 	call	4124 <strcmp>
    2b24:	1004c03a 	cmpne	r2,r2,zero
    2b28:	1000031e 	bne	r2,zero,2b38 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    2b2c:	e0bffe17 	ldw	r2,-8(fp)
    2b30:	10000005 	stb	zero,0(r2)
			break;
    2b34:	00000a06 	br	2b60 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    2b38:	e0bffe17 	ldw	r2,-8(fp)
    2b3c:	10800044 	addi	r2,r2,1
    2b40:	e0bffe15 	stw	r2,-8(fp)
    2b44:	e0bffe17 	ldw	r2,-8(fp)
    2b48:	10800003 	ldbu	r2,0(r2)
    2b4c:	10803fcc 	andi	r2,r2,255
    2b50:	1080201c 	xori	r2,r2,128
    2b54:	10bfe004 	addi	r2,r2,-128
    2b58:	1004c03a 	cmpne	r2,r2,zero
    2b5c:	103fed1e 	bne	r2,zero,2b14 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    2b60:	e037883a 	mov	sp,fp
    2b64:	dfc00117 	ldw	ra,4(sp)
    2b68:	df000017 	ldw	fp,0(sp)
    2b6c:	dec00204 	addi	sp,sp,8
    2b70:	f800283a 	ret

00002b74 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    2b74:	defffc04 	addi	sp,sp,-16
    2b78:	dfc00315 	stw	ra,12(sp)
    2b7c:	df000215 	stw	fp,8(sp)
    2b80:	df000204 	addi	fp,sp,8
    2b84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    2b88:	e13fff17 	ldw	r4,-4(fp)
    2b8c:	01400074 	movhi	r5,1
    2b90:	29623604 	addi	r5,r5,-30504
    2b94:	00032c80 	call	32c8 <alt_find_dev>
    2b98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2b9c:	e0bffe17 	ldw	r2,-8(fp)
}
    2ba0:	e037883a 	mov	sp,fp
    2ba4:	dfc00117 	ldw	ra,4(sp)
    2ba8:	df000017 	ldw	fp,0(sp)
    2bac:	dec00204 	addi	sp,sp,8
    2bb0:	f800283a 	ret

00002bb4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    2bb4:	defff904 	addi	sp,sp,-28
    2bb8:	df000615 	stw	fp,24(sp)
    2bbc:	df000604 	addi	fp,sp,24
    2bc0:	e13ffb15 	stw	r4,-20(fp)
    2bc4:	e1bffd15 	stw	r6,-12(fp)
    2bc8:	e1fffe15 	stw	r7,-8(fp)
    2bcc:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    2bd0:	e0bffb17 	ldw	r2,-20(fp)
    2bd4:	10c00c17 	ldw	r3,48(r2)
    2bd8:	e0bffd17 	ldw	r2,-12(fp)
    2bdc:	10c0042e 	bgeu	r2,r3,2bf0 <alt_up_char_buffer_draw+0x3c>
    2be0:	e0bffb17 	ldw	r2,-20(fp)
    2be4:	10c00d17 	ldw	r3,52(r2)
    2be8:	e0bffe17 	ldw	r2,-8(fp)
    2bec:	10c00336 	bltu	r2,r3,2bfc <alt_up_char_buffer_draw+0x48>
		return -1;
    2bf0:	00bfffc4 	movi	r2,-1
    2bf4:	e0bfff15 	stw	r2,-4(fp)
    2bf8:	00001d06 	br	2c70 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    2bfc:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    2c00:	e0bffb17 	ldw	r2,-20(fp)
    2c04:	10c00f17 	ldw	r3,60(r2)
    2c08:	e0bffd17 	ldw	r2,-12(fp)
    2c0c:	1886703a 	and	r3,r3,r2
    2c10:	e0bffb17 	ldw	r2,-20(fp)
    2c14:	10800e17 	ldw	r2,56(r2)
    2c18:	1886983a 	sll	r3,r3,r2
    2c1c:	e0bffa17 	ldw	r2,-24(fp)
    2c20:	10c4b03a 	or	r2,r2,r3
    2c24:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    2c28:	e0bffb17 	ldw	r2,-20(fp)
    2c2c:	10c01117 	ldw	r3,68(r2)
    2c30:	e0bffe17 	ldw	r2,-8(fp)
    2c34:	1886703a 	and	r3,r3,r2
    2c38:	e0bffb17 	ldw	r2,-20(fp)
    2c3c:	10801017 	ldw	r2,64(r2)
    2c40:	1886983a 	sll	r3,r3,r2
    2c44:	e0bffa17 	ldw	r2,-24(fp)
    2c48:	10c4b03a 	or	r2,r2,r3
    2c4c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    2c50:	e0bffb17 	ldw	r2,-20(fp)
    2c54:	10800b17 	ldw	r2,44(r2)
    2c58:	1007883a 	mov	r3,r2
    2c5c:	e0bffa17 	ldw	r2,-24(fp)
    2c60:	1885883a 	add	r2,r3,r2
    2c64:	e0fffc03 	ldbu	r3,-16(fp)
    2c68:	10c00025 	stbio	r3,0(r2)

	return 0;
    2c6c:	e03fff15 	stw	zero,-4(fp)
    2c70:	e0bfff17 	ldw	r2,-4(fp)
}
    2c74:	e037883a 	mov	sp,fp
    2c78:	df000017 	ldw	fp,0(sp)
    2c7c:	dec00104 	addi	sp,sp,4
    2c80:	f800283a 	ret

00002c84 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    2c84:	defff904 	addi	sp,sp,-28
    2c88:	df000615 	stw	fp,24(sp)
    2c8c:	df000604 	addi	fp,sp,24
    2c90:	e13ffb15 	stw	r4,-20(fp)
    2c94:	e17ffc15 	stw	r5,-16(fp)
    2c98:	e1bffd15 	stw	r6,-12(fp)
    2c9c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    2ca0:	e0bffb17 	ldw	r2,-20(fp)
    2ca4:	10c00c17 	ldw	r3,48(r2)
    2ca8:	e0bffd17 	ldw	r2,-12(fp)
    2cac:	10c0042e 	bgeu	r2,r3,2cc0 <alt_up_char_buffer_string+0x3c>
    2cb0:	e0bffb17 	ldw	r2,-20(fp)
    2cb4:	10c00d17 	ldw	r3,52(r2)
    2cb8:	e0bffe17 	ldw	r2,-8(fp)
    2cbc:	10c00336 	bltu	r2,r3,2ccc <alt_up_char_buffer_string+0x48>
		return -1;
    2cc0:	00bfffc4 	movi	r2,-1
    2cc4:	e0bfff15 	stw	r2,-4(fp)
    2cc8:	00002e06 	br	2d84 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    2ccc:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    2cd0:	e0bffb17 	ldw	r2,-20(fp)
    2cd4:	10801017 	ldw	r2,64(r2)
    2cd8:	1007883a 	mov	r3,r2
    2cdc:	e0bffe17 	ldw	r2,-8(fp)
    2ce0:	10c6983a 	sll	r3,r2,r3
    2ce4:	e0bffd17 	ldw	r2,-12(fp)
    2ce8:	1885883a 	add	r2,r3,r2
    2cec:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    2cf0:	00001c06 	br	2d64 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    2cf4:	e0bffb17 	ldw	r2,-20(fp)
    2cf8:	10800b17 	ldw	r2,44(r2)
    2cfc:	1007883a 	mov	r3,r2
    2d00:	e0bffa17 	ldw	r2,-24(fp)
    2d04:	1889883a 	add	r4,r3,r2
    2d08:	e0bffc17 	ldw	r2,-16(fp)
    2d0c:	10800003 	ldbu	r2,0(r2)
    2d10:	10c03fcc 	andi	r3,r2,255
    2d14:	18c0201c 	xori	r3,r3,128
    2d18:	18ffe004 	addi	r3,r3,-128
    2d1c:	2005883a 	mov	r2,r4
    2d20:	10c00025 	stbio	r3,0(r2)
		++ptr;
    2d24:	e0bffc17 	ldw	r2,-16(fp)
    2d28:	10800044 	addi	r2,r2,1
    2d2c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    2d30:	e0bffd17 	ldw	r2,-12(fp)
    2d34:	10800044 	addi	r2,r2,1
    2d38:	e0bffd15 	stw	r2,-12(fp)
    2d3c:	e0bffb17 	ldw	r2,-20(fp)
    2d40:	10c00c17 	ldw	r3,48(r2)
    2d44:	e0bffd17 	ldw	r2,-12(fp)
    2d48:	10c00336 	bltu	r2,r3,2d58 <alt_up_char_buffer_string+0xd4>
			return -1;
    2d4c:	00bfffc4 	movi	r2,-1
    2d50:	e0bfff15 	stw	r2,-4(fp)
    2d54:	00000b06 	br	2d84 <alt_up_char_buffer_string+0x100>
		++offset;
    2d58:	e0bffa17 	ldw	r2,-24(fp)
    2d5c:	10800044 	addi	r2,r2,1
    2d60:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    2d64:	e0bffc17 	ldw	r2,-16(fp)
    2d68:	10800003 	ldbu	r2,0(r2)
    2d6c:	10803fcc 	andi	r2,r2,255
    2d70:	1080201c 	xori	r2,r2,128
    2d74:	10bfe004 	addi	r2,r2,-128
    2d78:	1004c03a 	cmpne	r2,r2,zero
    2d7c:	103fdd1e 	bne	r2,zero,2cf4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    2d80:	e03fff15 	stw	zero,-4(fp)
    2d84:	e0bfff17 	ldw	r2,-4(fp)
}
    2d88:	e037883a 	mov	sp,fp
    2d8c:	df000017 	ldw	fp,0(sp)
    2d90:	dec00104 	addi	sp,sp,4
    2d94:	f800283a 	ret

00002d98 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    2d98:	defffe04 	addi	sp,sp,-8
    2d9c:	df000115 	stw	fp,4(sp)
    2da0:	df000104 	addi	fp,sp,4
    2da4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    2da8:	e0bfff17 	ldw	r2,-4(fp)
    2dac:	10800a17 	ldw	r2,40(r2)
    2db0:	10800084 	addi	r2,r2,2
    2db4:	1007883a 	mov	r3,r2
    2db8:	00800044 	movi	r2,1
    2dbc:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    2dc0:	e0bfff17 	ldw	r2,-4(fp)
    2dc4:	10800a17 	ldw	r2,40(r2)
    2dc8:	10800084 	addi	r2,r2,2
    2dcc:	10800023 	ldbuio	r2,0(r2)
    2dd0:	1080004c 	andi	r2,r2,1
    2dd4:	10803fcc 	andi	r2,r2,255
    2dd8:	1004c03a 	cmpne	r2,r2,zero
    2ddc:	103ff81e 	bne	r2,zero,2dc0 <alt_up_char_buffer_clear+0x28>
	return 0;
    2de0:	0005883a 	mov	r2,zero
}
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2df4:	defff404 	addi	sp,sp,-48
    2df8:	df000b15 	stw	fp,44(sp)
    2dfc:	df000b04 	addi	fp,sp,44
    2e00:	e13ffb15 	stw	r4,-20(fp)
    2e04:	e17ffc15 	stw	r5,-16(fp)
    2e08:	e1bffd15 	stw	r6,-12(fp)
    2e0c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2e10:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2e14:	00800074 	movhi	r2,1
    2e18:	10a9b904 	addi	r2,r2,-22812
    2e1c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    2e20:	1005003a 	cmpeq	r2,r2,zero
    2e24:	1000411e 	bne	r2,zero,2f2c <alt_alarm_start+0x138>
  {
    if (alarm)
    2e28:	e0bffb17 	ldw	r2,-20(fp)
    2e2c:	1005003a 	cmpeq	r2,r2,zero
    2e30:	10003b1e 	bne	r2,zero,2f20 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    2e34:	e0fffb17 	ldw	r3,-20(fp)
    2e38:	e0bffd17 	ldw	r2,-12(fp)
    2e3c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    2e40:	e0fffb17 	ldw	r3,-20(fp)
    2e44:	e0bffe17 	ldw	r2,-8(fp)
    2e48:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e4c:	0005303a 	rdctl	r2,status
    2e50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e54:	e0fff817 	ldw	r3,-32(fp)
    2e58:	00bfff84 	movi	r2,-2
    2e5c:	1884703a 	and	r2,r3,r2
    2e60:	1001703a 	wrctl	status,r2
  
  return context;
    2e64:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    2e68:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2e6c:	00800074 	movhi	r2,1
    2e70:	10a9ba04 	addi	r2,r2,-22808
    2e74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2e78:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2e7c:	e0fffc17 	ldw	r3,-16(fp)
    2e80:	e0bff917 	ldw	r2,-28(fp)
    2e84:	1885883a 	add	r2,r3,r2
    2e88:	10c00044 	addi	r3,r2,1
    2e8c:	e0bffb17 	ldw	r2,-20(fp)
    2e90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2e94:	e0bffb17 	ldw	r2,-20(fp)
    2e98:	10c00217 	ldw	r3,8(r2)
    2e9c:	e0bff917 	ldw	r2,-28(fp)
    2ea0:	1880042e 	bgeu	r3,r2,2eb4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    2ea4:	e0fffb17 	ldw	r3,-20(fp)
    2ea8:	00800044 	movi	r2,1
    2eac:	18800405 	stb	r2,16(r3)
    2eb0:	00000206 	br	2ebc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    2eb4:	e0bffb17 	ldw	r2,-20(fp)
    2eb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2ebc:	e0fffb17 	ldw	r3,-20(fp)
    2ec0:	00800074 	movhi	r2,1
    2ec4:	10a23b04 	addi	r2,r2,-30484
    2ec8:	e0bff615 	stw	r2,-40(fp)
    2ecc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2ed0:	e0fff717 	ldw	r3,-36(fp)
    2ed4:	e0bff617 	ldw	r2,-40(fp)
    2ed8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2edc:	e0bff617 	ldw	r2,-40(fp)
    2ee0:	10c00017 	ldw	r3,0(r2)
    2ee4:	e0bff717 	ldw	r2,-36(fp)
    2ee8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2eec:	e0bff617 	ldw	r2,-40(fp)
    2ef0:	10c00017 	ldw	r3,0(r2)
    2ef4:	e0bff717 	ldw	r2,-36(fp)
    2ef8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2efc:	e0fff617 	ldw	r3,-40(fp)
    2f00:	e0bff717 	ldw	r2,-36(fp)
    2f04:	18800015 	stw	r2,0(r3)
    2f08:	e0bffa17 	ldw	r2,-24(fp)
    2f0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2f10:	e0bff517 	ldw	r2,-44(fp)
    2f14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2f18:	e03fff15 	stw	zero,-4(fp)
    2f1c:	00000506 	br	2f34 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    2f20:	00bffa84 	movi	r2,-22
    2f24:	e0bfff15 	stw	r2,-4(fp)
    2f28:	00000206 	br	2f34 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    2f2c:	00bfde84 	movi	r2,-134
    2f30:	e0bfff15 	stw	r2,-4(fp)
    2f34:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2f38:	e037883a 	mov	sp,fp
    2f3c:	df000017 	ldw	fp,0(sp)
    2f40:	dec00104 	addi	sp,sp,4
    2f44:	f800283a 	ret

00002f48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2f48:	defff804 	addi	sp,sp,-32
    2f4c:	dfc00715 	stw	ra,28(sp)
    2f50:	df000615 	stw	fp,24(sp)
    2f54:	df000604 	addi	fp,sp,24
    2f58:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2f5c:	e0bffc17 	ldw	r2,-16(fp)
    2f60:	1004803a 	cmplt	r2,r2,zero
    2f64:	1000081e 	bne	r2,zero,2f88 <close+0x40>
    2f68:	e0bffc17 	ldw	r2,-16(fp)
    2f6c:	10800324 	muli	r2,r2,12
    2f70:	1007883a 	mov	r3,r2
    2f74:	00800034 	movhi	r2,0
    2f78:	109fd204 	addi	r2,r2,32584
    2f7c:	1887883a 	add	r3,r3,r2
    2f80:	e0ffff15 	stw	r3,-4(fp)
    2f84:	00000106 	br	2f8c <close+0x44>
    2f88:	e03fff15 	stw	zero,-4(fp)
    2f8c:	e0bfff17 	ldw	r2,-4(fp)
    2f90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2f94:	e0bffb17 	ldw	r2,-20(fp)
    2f98:	1005003a 	cmpeq	r2,r2,zero
    2f9c:	10001d1e 	bne	r2,zero,3014 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2fa0:	e0bffb17 	ldw	r2,-20(fp)
    2fa4:	10800017 	ldw	r2,0(r2)
    2fa8:	10800417 	ldw	r2,16(r2)
    2fac:	1005003a 	cmpeq	r2,r2,zero
    2fb0:	1000071e 	bne	r2,zero,2fd0 <close+0x88>
    2fb4:	e0bffb17 	ldw	r2,-20(fp)
    2fb8:	10800017 	ldw	r2,0(r2)
    2fbc:	10800417 	ldw	r2,16(r2)
    2fc0:	e13ffb17 	ldw	r4,-20(fp)
    2fc4:	103ee83a 	callr	r2
    2fc8:	e0bffe15 	stw	r2,-8(fp)
    2fcc:	00000106 	br	2fd4 <close+0x8c>
    2fd0:	e03ffe15 	stw	zero,-8(fp)
    2fd4:	e0bffe17 	ldw	r2,-8(fp)
    2fd8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2fdc:	e13ffc17 	ldw	r4,-16(fp)
    2fe0:	000394c0 	call	394c <alt_release_fd>
    if (rval < 0)
    2fe4:	e0bffa17 	ldw	r2,-24(fp)
    2fe8:	1004403a 	cmpge	r2,r2,zero
    2fec:	1000071e 	bne	r2,zero,300c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    2ff0:	00030440 	call	3044 <alt_get_errno>
    2ff4:	e0fffa17 	ldw	r3,-24(fp)
    2ff8:	00c7c83a 	sub	r3,zero,r3
    2ffc:	10c00015 	stw	r3,0(r2)
      return -1;
    3000:	00bfffc4 	movi	r2,-1
    3004:	e0bffd15 	stw	r2,-12(fp)
    3008:	00000806 	br	302c <close+0xe4>
    }
    return 0;
    300c:	e03ffd15 	stw	zero,-12(fp)
    3010:	00000606 	br	302c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3014:	00030440 	call	3044 <alt_get_errno>
    3018:	1007883a 	mov	r3,r2
    301c:	00801444 	movi	r2,81
    3020:	18800015 	stw	r2,0(r3)
    return -1;
    3024:	00bfffc4 	movi	r2,-1
    3028:	e0bffd15 	stw	r2,-12(fp)
    302c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    3030:	e037883a 	mov	sp,fp
    3034:	dfc00117 	ldw	ra,4(sp)
    3038:	df000017 	ldw	fp,0(sp)
    303c:	dec00204 	addi	sp,sp,8
    3040:	f800283a 	ret

00003044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3044:	defffd04 	addi	sp,sp,-12
    3048:	dfc00215 	stw	ra,8(sp)
    304c:	df000115 	stw	fp,4(sp)
    3050:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3054:	00800074 	movhi	r2,1
    3058:	10a23904 	addi	r2,r2,-30492
    305c:	10800017 	ldw	r2,0(r2)
    3060:	1005003a 	cmpeq	r2,r2,zero
    3064:	1000061e 	bne	r2,zero,3080 <alt_get_errno+0x3c>
    3068:	00800074 	movhi	r2,1
    306c:	10a23904 	addi	r2,r2,-30492
    3070:	10800017 	ldw	r2,0(r2)
    3074:	103ee83a 	callr	r2
    3078:	e0bfff15 	stw	r2,-4(fp)
    307c:	00000306 	br	308c <alt_get_errno+0x48>
    3080:	00800074 	movhi	r2,1
    3084:	10a9bb04 	addi	r2,r2,-22804
    3088:	e0bfff15 	stw	r2,-4(fp)
    308c:	e0bfff17 	ldw	r2,-4(fp)
}
    3090:	e037883a 	mov	sp,fp
    3094:	dfc00117 	ldw	ra,4(sp)
    3098:	df000017 	ldw	fp,0(sp)
    309c:	dec00204 	addi	sp,sp,8
    30a0:	f800283a 	ret

000030a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    30a4:	deffff04 	addi	sp,sp,-4
    30a8:	df000015 	stw	fp,0(sp)
    30ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    30b0:	e037883a 	mov	sp,fp
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00104 	addi	sp,sp,4
    30bc:	f800283a 	ret

000030c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    30c0:	defffc04 	addi	sp,sp,-16
    30c4:	df000315 	stw	fp,12(sp)
    30c8:	df000304 	addi	fp,sp,12
    30cc:	e13ffd15 	stw	r4,-12(fp)
    30d0:	e17ffe15 	stw	r5,-8(fp)
    30d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    30d8:	e0bfff17 	ldw	r2,-4(fp)
}
    30dc:	e037883a 	mov	sp,fp
    30e0:	df000017 	ldw	fp,0(sp)
    30e4:	dec00104 	addi	sp,sp,4
    30e8:	f800283a 	ret

000030ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    30ec:	defff904 	addi	sp,sp,-28
    30f0:	dfc00615 	stw	ra,24(sp)
    30f4:	df000515 	stw	fp,20(sp)
    30f8:	df000504 	addi	fp,sp,20
    30fc:	e13ffd15 	stw	r4,-12(fp)
    3100:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3104:	e0bffd17 	ldw	r2,-12(fp)
    3108:	1005003a 	cmpeq	r2,r2,zero
    310c:	1000041e 	bne	r2,zero,3120 <alt_dev_llist_insert+0x34>
    3110:	e0bffd17 	ldw	r2,-12(fp)
    3114:	10800217 	ldw	r2,8(r2)
    3118:	1004c03a 	cmpne	r2,r2,zero
    311c:	1000071e 	bne	r2,zero,313c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    3120:	00031a00 	call	31a0 <alt_get_errno>
    3124:	1007883a 	mov	r3,r2
    3128:	00800584 	movi	r2,22
    312c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3130:	00bffa84 	movi	r2,-22
    3134:	e0bfff15 	stw	r2,-4(fp)
    3138:	00001306 	br	3188 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    313c:	e0fffd17 	ldw	r3,-12(fp)
    3140:	e0bffe17 	ldw	r2,-8(fp)
    3144:	e0bffb15 	stw	r2,-20(fp)
    3148:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    314c:	e0fffc17 	ldw	r3,-16(fp)
    3150:	e0bffb17 	ldw	r2,-20(fp)
    3154:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    3158:	e0bffb17 	ldw	r2,-20(fp)
    315c:	10c00017 	ldw	r3,0(r2)
    3160:	e0bffc17 	ldw	r2,-16(fp)
    3164:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3168:	e0bffb17 	ldw	r2,-20(fp)
    316c:	10c00017 	ldw	r3,0(r2)
    3170:	e0bffc17 	ldw	r2,-16(fp)
    3174:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    3178:	e0fffb17 	ldw	r3,-20(fp)
    317c:	e0bffc17 	ldw	r2,-16(fp)
    3180:	18800015 	stw	r2,0(r3)

  return 0;  
    3184:	e03fff15 	stw	zero,-4(fp)
    3188:	e0bfff17 	ldw	r2,-4(fp)
}
    318c:	e037883a 	mov	sp,fp
    3190:	dfc00117 	ldw	ra,4(sp)
    3194:	df000017 	ldw	fp,0(sp)
    3198:	dec00204 	addi	sp,sp,8
    319c:	f800283a 	ret

000031a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31a0:	defffd04 	addi	sp,sp,-12
    31a4:	dfc00215 	stw	ra,8(sp)
    31a8:	df000115 	stw	fp,4(sp)
    31ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    31b0:	00800074 	movhi	r2,1
    31b4:	10a23904 	addi	r2,r2,-30492
    31b8:	10800017 	ldw	r2,0(r2)
    31bc:	1005003a 	cmpeq	r2,r2,zero
    31c0:	1000061e 	bne	r2,zero,31dc <alt_get_errno+0x3c>
    31c4:	00800074 	movhi	r2,1
    31c8:	10a23904 	addi	r2,r2,-30492
    31cc:	10800017 	ldw	r2,0(r2)
    31d0:	103ee83a 	callr	r2
    31d4:	e0bfff15 	stw	r2,-4(fp)
    31d8:	00000306 	br	31e8 <alt_get_errno+0x48>
    31dc:	00800074 	movhi	r2,1
    31e0:	10a9bb04 	addi	r2,r2,-22804
    31e4:	e0bfff15 	stw	r2,-4(fp)
    31e8:	e0bfff17 	ldw	r2,-4(fp)
}
    31ec:	e037883a 	mov	sp,fp
    31f0:	dfc00117 	ldw	ra,4(sp)
    31f4:	df000017 	ldw	fp,0(sp)
    31f8:	dec00204 	addi	sp,sp,8
    31fc:	f800283a 	ret

00003200 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3200:	defffd04 	addi	sp,sp,-12
    3204:	dfc00215 	stw	ra,8(sp)
    3208:	df000115 	stw	fp,4(sp)
    320c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3210:	00bfff04 	movi	r2,-4
    3214:	00c00034 	movhi	r3,0
    3218:	18da3a04 	addi	r3,r3,26856
    321c:	1885883a 	add	r2,r3,r2
    3220:	e0bfff15 	stw	r2,-4(fp)
    3224:	00000606 	br	3240 <_do_ctors+0x40>
        (*ctor) (); 
    3228:	e0bfff17 	ldw	r2,-4(fp)
    322c:	10800017 	ldw	r2,0(r2)
    3230:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3234:	e0bfff17 	ldw	r2,-4(fp)
    3238:	10bfff04 	addi	r2,r2,-4
    323c:	e0bfff15 	stw	r2,-4(fp)
    3240:	e0ffff17 	ldw	r3,-4(fp)
    3244:	00800034 	movhi	r2,0
    3248:	109a3904 	addi	r2,r2,26852
    324c:	18bff62e 	bgeu	r3,r2,3228 <_do_ctors+0x28>
        (*ctor) (); 
}
    3250:	e037883a 	mov	sp,fp
    3254:	dfc00117 	ldw	ra,4(sp)
    3258:	df000017 	ldw	fp,0(sp)
    325c:	dec00204 	addi	sp,sp,8
    3260:	f800283a 	ret

00003264 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3264:	defffd04 	addi	sp,sp,-12
    3268:	dfc00215 	stw	ra,8(sp)
    326c:	df000115 	stw	fp,4(sp)
    3270:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3274:	00bfff04 	movi	r2,-4
    3278:	00c00034 	movhi	r3,0
    327c:	18da3a04 	addi	r3,r3,26856
    3280:	1885883a 	add	r2,r3,r2
    3284:	e0bfff15 	stw	r2,-4(fp)
    3288:	00000606 	br	32a4 <_do_dtors+0x40>
        (*dtor) (); 
    328c:	e0bfff17 	ldw	r2,-4(fp)
    3290:	10800017 	ldw	r2,0(r2)
    3294:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3298:	e0bfff17 	ldw	r2,-4(fp)
    329c:	10bfff04 	addi	r2,r2,-4
    32a0:	e0bfff15 	stw	r2,-4(fp)
    32a4:	e0ffff17 	ldw	r3,-4(fp)
    32a8:	00800034 	movhi	r2,0
    32ac:	109a3a04 	addi	r2,r2,26856
    32b0:	18bff62e 	bgeu	r3,r2,328c <_do_dtors+0x28>
        (*dtor) (); 
}
    32b4:	e037883a 	mov	sp,fp
    32b8:	dfc00117 	ldw	ra,4(sp)
    32bc:	df000017 	ldw	fp,0(sp)
    32c0:	dec00204 	addi	sp,sp,8
    32c4:	f800283a 	ret

000032c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    32c8:	defff904 	addi	sp,sp,-28
    32cc:	dfc00615 	stw	ra,24(sp)
    32d0:	df000515 	stw	fp,20(sp)
    32d4:	df000504 	addi	fp,sp,20
    32d8:	e13ffd15 	stw	r4,-12(fp)
    32dc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    32e0:	e0bffe17 	ldw	r2,-8(fp)
    32e4:	10800017 	ldw	r2,0(r2)
    32e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    32ec:	e13ffd17 	ldw	r4,-12(fp)
    32f0:	00041e00 	call	41e0 <strlen>
    32f4:	10800044 	addi	r2,r2,1
    32f8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    32fc:	00000d06 	br	3334 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3300:	e0bffc17 	ldw	r2,-16(fp)
    3304:	11000217 	ldw	r4,8(r2)
    3308:	e1bffb17 	ldw	r6,-20(fp)
    330c:	e17ffd17 	ldw	r5,-12(fp)
    3310:	0003e240 	call	3e24 <memcmp>
    3314:	1004c03a 	cmpne	r2,r2,zero
    3318:	1000031e 	bne	r2,zero,3328 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    331c:	e0bffc17 	ldw	r2,-16(fp)
    3320:	e0bfff15 	stw	r2,-4(fp)
    3324:	00000706 	br	3344 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3328:	e0bffc17 	ldw	r2,-16(fp)
    332c:	10800017 	ldw	r2,0(r2)
    3330:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3334:	e0fffe17 	ldw	r3,-8(fp)
    3338:	e0bffc17 	ldw	r2,-16(fp)
    333c:	10fff01e 	bne	r2,r3,3300 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    3340:	e03fff15 	stw	zero,-4(fp)
    3344:	e0bfff17 	ldw	r2,-4(fp)
}
    3348:	e037883a 	mov	sp,fp
    334c:	dfc00117 	ldw	ra,4(sp)
    3350:	df000017 	ldw	fp,0(sp)
    3354:	dec00204 	addi	sp,sp,8
    3358:	f800283a 	ret

0000335c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    335c:	defffe04 	addi	sp,sp,-8
    3360:	dfc00115 	stw	ra,4(sp)
    3364:	df000015 	stw	fp,0(sp)
    3368:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    336c:	0009883a 	mov	r4,zero
    3370:	01440004 	movi	r5,4096
    3374:	0003d480 	call	3d48 <alt_icache_flush>
#endif
}
    3378:	e037883a 	mov	sp,fp
    337c:	dfc00117 	ldw	ra,4(sp)
    3380:	df000017 	ldw	fp,0(sp)
    3384:	dec00204 	addi	sp,sp,8
    3388:	f800283a 	ret

0000338c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    338c:	defff904 	addi	sp,sp,-28
    3390:	dfc00615 	stw	ra,24(sp)
    3394:	df000515 	stw	fp,20(sp)
    3398:	df000504 	addi	fp,sp,20
    339c:	e13ffc15 	stw	r4,-16(fp)
    33a0:	e17ffd15 	stw	r5,-12(fp)
    33a4:	e1bffe15 	stw	r6,-8(fp)
    33a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    33ac:	e13ffd17 	ldw	r4,-12(fp)
    33b0:	e17ffe17 	ldw	r5,-8(fp)
    33b4:	e1bfff17 	ldw	r6,-4(fp)
    33b8:	00037640 	call	3764 <open>
    33bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    33c0:	e0bffb17 	ldw	r2,-20(fp)
    33c4:	1004803a 	cmplt	r2,r2,zero
    33c8:	10001c1e 	bne	r2,zero,343c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    33cc:	e0bffb17 	ldw	r2,-20(fp)
    33d0:	00c00034 	movhi	r3,0
    33d4:	18dfd204 	addi	r3,r3,32584
    33d8:	10800324 	muli	r2,r2,12
    33dc:	10c5883a 	add	r2,r2,r3
    33e0:	10c00017 	ldw	r3,0(r2)
    33e4:	e0bffc17 	ldw	r2,-16(fp)
    33e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    33ec:	e0bffb17 	ldw	r2,-20(fp)
    33f0:	00c00034 	movhi	r3,0
    33f4:	18dfd204 	addi	r3,r3,32584
    33f8:	10800324 	muli	r2,r2,12
    33fc:	10c5883a 	add	r2,r2,r3
    3400:	10800104 	addi	r2,r2,4
    3404:	10c00017 	ldw	r3,0(r2)
    3408:	e0bffc17 	ldw	r2,-16(fp)
    340c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    3410:	e0bffb17 	ldw	r2,-20(fp)
    3414:	00c00034 	movhi	r3,0
    3418:	18dfd204 	addi	r3,r3,32584
    341c:	10800324 	muli	r2,r2,12
    3420:	10c5883a 	add	r2,r2,r3
    3424:	10800204 	addi	r2,r2,8
    3428:	10c00017 	ldw	r3,0(r2)
    342c:	e0bffc17 	ldw	r2,-16(fp)
    3430:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3434:	e13ffb17 	ldw	r4,-20(fp)
    3438:	000394c0 	call	394c <alt_release_fd>
  }
} 
    343c:	e037883a 	mov	sp,fp
    3440:	dfc00117 	ldw	ra,4(sp)
    3444:	df000017 	ldw	fp,0(sp)
    3448:	dec00204 	addi	sp,sp,8
    344c:	f800283a 	ret

00003450 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3450:	defffb04 	addi	sp,sp,-20
    3454:	dfc00415 	stw	ra,16(sp)
    3458:	df000315 	stw	fp,12(sp)
    345c:	df000304 	addi	fp,sp,12
    3460:	e13ffd15 	stw	r4,-12(fp)
    3464:	e17ffe15 	stw	r5,-8(fp)
    3468:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    346c:	01000034 	movhi	r4,0
    3470:	211fd504 	addi	r4,r4,32596
    3474:	e17ffd17 	ldw	r5,-12(fp)
    3478:	01800044 	movi	r6,1
    347c:	01c07fc4 	movi	r7,511
    3480:	000338c0 	call	338c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3484:	01000034 	movhi	r4,0
    3488:	211fd204 	addi	r4,r4,32584
    348c:	e17ffe17 	ldw	r5,-8(fp)
    3490:	000d883a 	mov	r6,zero
    3494:	01c07fc4 	movi	r7,511
    3498:	000338c0 	call	338c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    349c:	01000034 	movhi	r4,0
    34a0:	211fd804 	addi	r4,r4,32608
    34a4:	e17fff17 	ldw	r5,-4(fp)
    34a8:	01800044 	movi	r6,1
    34ac:	01c07fc4 	movi	r7,511
    34b0:	000338c0 	call	338c <alt_open_fd>
}  
    34b4:	e037883a 	mov	sp,fp
    34b8:	dfc00117 	ldw	ra,4(sp)
    34bc:	df000017 	ldw	fp,0(sp)
    34c0:	dec00204 	addi	sp,sp,8
    34c4:	f800283a 	ret

000034c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    34c8:	deffef04 	addi	sp,sp,-68
    34cc:	df001015 	stw	fp,64(sp)
    34d0:	df001004 	addi	fp,sp,64
    34d4:	e13ffc15 	stw	r4,-16(fp)
    34d8:	e17ffd15 	stw	r5,-12(fp)
    34dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    34e0:	00bffa84 	movi	r2,-22
    34e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    34e8:	e0bffc17 	ldw	r2,-16(fp)
    34ec:	10800828 	cmpgeui	r2,r2,32
    34f0:	1000601e 	bne	r2,zero,3674 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    34f4:	0005303a 	rdctl	r2,status
    34f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34fc:	e0fff917 	ldw	r3,-28(fp)
    3500:	00bfff84 	movi	r2,-2
    3504:	1884703a 	and	r2,r3,r2
    3508:	1001703a 	wrctl	status,r2
  
  return context;
    350c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    3510:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    3514:	e0bffc17 	ldw	r2,-16(fp)
    3518:	00c00074 	movhi	r3,1
    351c:	18e9c904 	addi	r3,r3,-22748
    3520:	100490fa 	slli	r2,r2,3
    3524:	10c7883a 	add	r3,r2,r3
    3528:	e0bffe17 	ldw	r2,-8(fp)
    352c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    3530:	e0bffc17 	ldw	r2,-16(fp)
    3534:	00c00074 	movhi	r3,1
    3538:	18e9c904 	addi	r3,r3,-22748
    353c:	100490fa 	slli	r2,r2,3
    3540:	10c5883a 	add	r2,r2,r3
    3544:	10c00104 	addi	r3,r2,4
    3548:	e0bffd17 	ldw	r2,-12(fp)
    354c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	1005003a 	cmpeq	r2,r2,zero
    3558:	1000201e 	bne	r2,zero,35dc <alt_irq_register+0x114>
    355c:	e0bffc17 	ldw	r2,-16(fp)
    3560:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3564:	0005303a 	rdctl	r2,status
    3568:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    356c:	e0fff617 	ldw	r3,-40(fp)
    3570:	00bfff84 	movi	r2,-2
    3574:	1884703a 	and	r2,r3,r2
    3578:	1001703a 	wrctl	status,r2
  
  return context;
    357c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3580:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    3584:	e0fff717 	ldw	r3,-36(fp)
    3588:	00800044 	movi	r2,1
    358c:	10c4983a 	sll	r2,r2,r3
    3590:	1007883a 	mov	r3,r2
    3594:	00800074 	movhi	r2,1
    3598:	10a9b804 	addi	r2,r2,-22816
    359c:	10800017 	ldw	r2,0(r2)
    35a0:	1886b03a 	or	r3,r3,r2
    35a4:	00800074 	movhi	r2,1
    35a8:	10a9b804 	addi	r2,r2,-22816
    35ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    35b0:	00800074 	movhi	r2,1
    35b4:	10a9b804 	addi	r2,r2,-22816
    35b8:	10800017 	ldw	r2,0(r2)
    35bc:	100170fa 	wrctl	ienable,r2
    35c0:	e0bff817 	ldw	r2,-32(fp)
    35c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    35c8:	e0bff517 	ldw	r2,-44(fp)
    35cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    35d0:	0005883a 	mov	r2,zero
    35d4:	e0bfff15 	stw	r2,-4(fp)
    35d8:	00002006 	br	365c <alt_irq_register+0x194>
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    35e4:	0005303a 	rdctl	r2,status
    35e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    35ec:	e0fff217 	ldw	r3,-56(fp)
    35f0:	00bfff84 	movi	r2,-2
    35f4:	1884703a 	and	r2,r3,r2
    35f8:	1001703a 	wrctl	status,r2
  
  return context;
    35fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3600:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    3604:	e0fff317 	ldw	r3,-52(fp)
    3608:	00800044 	movi	r2,1
    360c:	10c4983a 	sll	r2,r2,r3
    3610:	0084303a 	nor	r2,zero,r2
    3614:	1007883a 	mov	r3,r2
    3618:	00800074 	movhi	r2,1
    361c:	10a9b804 	addi	r2,r2,-22816
    3620:	10800017 	ldw	r2,0(r2)
    3624:	1886703a 	and	r3,r3,r2
    3628:	00800074 	movhi	r2,1
    362c:	10a9b804 	addi	r2,r2,-22816
    3630:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3634:	00800074 	movhi	r2,1
    3638:	10a9b804 	addi	r2,r2,-22816
    363c:	10800017 	ldw	r2,0(r2)
    3640:	100170fa 	wrctl	ienable,r2
    3644:	e0bff417 	ldw	r2,-48(fp)
    3648:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    364c:	e0bff117 	ldw	r2,-60(fp)
    3650:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3654:	0005883a 	mov	r2,zero
    3658:	e0bfff15 	stw	r2,-4(fp)
    365c:	e0bfff17 	ldw	r2,-4(fp)
    3660:	e0bffb15 	stw	r2,-20(fp)
    3664:	e0bffa17 	ldw	r2,-24(fp)
    3668:	e0bff015 	stw	r2,-64(fp)
    366c:	e0bff017 	ldw	r2,-64(fp)
    3670:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    3674:	e0bffb17 	ldw	r2,-20(fp)
}
    3678:	e037883a 	mov	sp,fp
    367c:	df000017 	ldw	fp,0(sp)
    3680:	dec00104 	addi	sp,sp,4
    3684:	f800283a 	ret

00003688 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    3688:	defffc04 	addi	sp,sp,-16
    368c:	df000315 	stw	fp,12(sp)
    3690:	df000304 	addi	fp,sp,12
    3694:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    3698:	e0bffe17 	ldw	r2,-8(fp)
    369c:	10800217 	ldw	r2,8(r2)
    36a0:	10d00034 	orhi	r3,r2,16384
    36a4:	e0bffe17 	ldw	r2,-8(fp)
    36a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    36ac:	e03ffd15 	stw	zero,-12(fp)
    36b0:	00002006 	br	3734 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    36b4:	e0bffd17 	ldw	r2,-12(fp)
    36b8:	00c00034 	movhi	r3,0
    36bc:	18dfd204 	addi	r3,r3,32584
    36c0:	10800324 	muli	r2,r2,12
    36c4:	10c5883a 	add	r2,r2,r3
    36c8:	10c00017 	ldw	r3,0(r2)
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	10800017 	ldw	r2,0(r2)
    36d4:	1880141e 	bne	r3,r2,3728 <alt_file_locked+0xa0>
    36d8:	e0bffd17 	ldw	r2,-12(fp)
    36dc:	00c00034 	movhi	r3,0
    36e0:	18dfd204 	addi	r3,r3,32584
    36e4:	10800324 	muli	r2,r2,12
    36e8:	10c5883a 	add	r2,r2,r3
    36ec:	10800204 	addi	r2,r2,8
    36f0:	10800017 	ldw	r2,0(r2)
    36f4:	1004403a 	cmpge	r2,r2,zero
    36f8:	10000b1e 	bne	r2,zero,3728 <alt_file_locked+0xa0>
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	10800324 	muli	r2,r2,12
    3704:	1007883a 	mov	r3,r2
    3708:	00800034 	movhi	r2,0
    370c:	109fd204 	addi	r2,r2,32584
    3710:	1887883a 	add	r3,r3,r2
    3714:	e0bffe17 	ldw	r2,-8(fp)
    3718:	18800326 	beq	r3,r2,3728 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    371c:	00bffcc4 	movi	r2,-13
    3720:	e0bfff15 	stw	r2,-4(fp)
    3724:	00000a06 	br	3750 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3728:	e0bffd17 	ldw	r2,-12(fp)
    372c:	10800044 	addi	r2,r2,1
    3730:	e0bffd15 	stw	r2,-12(fp)
    3734:	00800074 	movhi	r2,1
    3738:	10a23804 	addi	r2,r2,-30496
    373c:	10800017 	ldw	r2,0(r2)
    3740:	1007883a 	mov	r3,r2
    3744:	e0bffd17 	ldw	r2,-12(fp)
    3748:	18bfda2e 	bgeu	r3,r2,36b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    374c:	e03fff15 	stw	zero,-4(fp)
    3750:	e0bfff17 	ldw	r2,-4(fp)
}
    3754:	e037883a 	mov	sp,fp
    3758:	df000017 	ldw	fp,0(sp)
    375c:	dec00104 	addi	sp,sp,4
    3760:	f800283a 	ret

00003764 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3764:	defff404 	addi	sp,sp,-48
    3768:	dfc00b15 	stw	ra,44(sp)
    376c:	df000a15 	stw	fp,40(sp)
    3770:	df000a04 	addi	fp,sp,40
    3774:	e13ffb15 	stw	r4,-20(fp)
    3778:	e17ffc15 	stw	r5,-16(fp)
    377c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    3780:	00bfffc4 	movi	r2,-1
    3784:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    3788:	00bffb44 	movi	r2,-19
    378c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    3790:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    3794:	e13ffb17 	ldw	r4,-20(fp)
    3798:	01400074 	movhi	r5,1
    379c:	29623604 	addi	r5,r5,-30504
    37a0:	00032c80 	call	32c8 <alt_find_dev>
    37a4:	e0bffa15 	stw	r2,-24(fp)
    37a8:	e0bffa17 	ldw	r2,-24(fp)
    37ac:	1004c03a 	cmpne	r2,r2,zero
    37b0:	1000051e 	bne	r2,zero,37c8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    37b4:	e13ffb17 	ldw	r4,-20(fp)
    37b8:	0003b700 	call	3b70 <alt_find_file>
    37bc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    37c0:	00800044 	movi	r2,1
    37c4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    37c8:	e0bffa17 	ldw	r2,-24(fp)
    37cc:	1005003a 	cmpeq	r2,r2,zero
    37d0:	1000301e 	bne	r2,zero,3894 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    37d4:	e13ffa17 	ldw	r4,-24(fp)
    37d8:	0003c900 	call	3c90 <alt_get_fd>
    37dc:	e0bff815 	stw	r2,-32(fp)
    37e0:	e0bff817 	ldw	r2,-32(fp)
    37e4:	1004403a 	cmpge	r2,r2,zero
    37e8:	1000031e 	bne	r2,zero,37f8 <open+0x94>
    {
      status = index;
    37ec:	e0bff817 	ldw	r2,-32(fp)
    37f0:	e0bff715 	stw	r2,-36(fp)
    37f4:	00002906 	br	389c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    37f8:	e0bff817 	ldw	r2,-32(fp)
    37fc:	10800324 	muli	r2,r2,12
    3800:	1007883a 	mov	r3,r2
    3804:	00800034 	movhi	r2,0
    3808:	109fd204 	addi	r2,r2,32584
    380c:	1885883a 	add	r2,r3,r2
    3810:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3814:	e0fffc17 	ldw	r3,-16(fp)
    3818:	00900034 	movhi	r2,16384
    381c:	10bfffc4 	addi	r2,r2,-1
    3820:	1886703a 	and	r3,r3,r2
    3824:	e0bff917 	ldw	r2,-28(fp)
    3828:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    382c:	e0bff617 	ldw	r2,-40(fp)
    3830:	1004c03a 	cmpne	r2,r2,zero
    3834:	1000061e 	bne	r2,zero,3850 <open+0xec>
    3838:	e13ff917 	ldw	r4,-28(fp)
    383c:	00036880 	call	3688 <alt_file_locked>
    3840:	e0bff715 	stw	r2,-36(fp)
    3844:	e0bff717 	ldw	r2,-36(fp)
    3848:	1004803a 	cmplt	r2,r2,zero
    384c:	1000131e 	bne	r2,zero,389c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3850:	e0bffa17 	ldw	r2,-24(fp)
    3854:	10800317 	ldw	r2,12(r2)
    3858:	1005003a 	cmpeq	r2,r2,zero
    385c:	1000091e 	bne	r2,zero,3884 <open+0x120>
    3860:	e0bffa17 	ldw	r2,-24(fp)
    3864:	10800317 	ldw	r2,12(r2)
    3868:	e13ff917 	ldw	r4,-28(fp)
    386c:	e17ffb17 	ldw	r5,-20(fp)
    3870:	e1bffc17 	ldw	r6,-16(fp)
    3874:	e1fffd17 	ldw	r7,-12(fp)
    3878:	103ee83a 	callr	r2
    387c:	e0bfff15 	stw	r2,-4(fp)
    3880:	00000106 	br	3888 <open+0x124>
    3884:	e03fff15 	stw	zero,-4(fp)
    3888:	e0bfff17 	ldw	r2,-4(fp)
    388c:	e0bff715 	stw	r2,-36(fp)
    3890:	00000206 	br	389c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3894:	00bffb44 	movi	r2,-19
    3898:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    389c:	e0bff717 	ldw	r2,-36(fp)
    38a0:	1004403a 	cmpge	r2,r2,zero
    38a4:	1000091e 	bne	r2,zero,38cc <open+0x168>
  {
    alt_release_fd (index);  
    38a8:	e13ff817 	ldw	r4,-32(fp)
    38ac:	000394c0 	call	394c <alt_release_fd>
    ALT_ERRNO = -status;
    38b0:	00038ec0 	call	38ec <alt_get_errno>
    38b4:	e0fff717 	ldw	r3,-36(fp)
    38b8:	00c7c83a 	sub	r3,zero,r3
    38bc:	10c00015 	stw	r3,0(r2)
    return -1;
    38c0:	00bfffc4 	movi	r2,-1
    38c4:	e0bffe15 	stw	r2,-8(fp)
    38c8:	00000206 	br	38d4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    38cc:	e0bff817 	ldw	r2,-32(fp)
    38d0:	e0bffe15 	stw	r2,-8(fp)
    38d4:	e0bffe17 	ldw	r2,-8(fp)
}
    38d8:	e037883a 	mov	sp,fp
    38dc:	dfc00117 	ldw	ra,4(sp)
    38e0:	df000017 	ldw	fp,0(sp)
    38e4:	dec00204 	addi	sp,sp,8
    38e8:	f800283a 	ret

000038ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    38ec:	defffd04 	addi	sp,sp,-12
    38f0:	dfc00215 	stw	ra,8(sp)
    38f4:	df000115 	stw	fp,4(sp)
    38f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    38fc:	00800074 	movhi	r2,1
    3900:	10a23904 	addi	r2,r2,-30492
    3904:	10800017 	ldw	r2,0(r2)
    3908:	1005003a 	cmpeq	r2,r2,zero
    390c:	1000061e 	bne	r2,zero,3928 <alt_get_errno+0x3c>
    3910:	00800074 	movhi	r2,1
    3914:	10a23904 	addi	r2,r2,-30492
    3918:	10800017 	ldw	r2,0(r2)
    391c:	103ee83a 	callr	r2
    3920:	e0bfff15 	stw	r2,-4(fp)
    3924:	00000306 	br	3934 <alt_get_errno+0x48>
    3928:	00800074 	movhi	r2,1
    392c:	10a9bb04 	addi	r2,r2,-22804
    3930:	e0bfff15 	stw	r2,-4(fp)
    3934:	e0bfff17 	ldw	r2,-4(fp)
}
    3938:	e037883a 	mov	sp,fp
    393c:	dfc00117 	ldw	ra,4(sp)
    3940:	df000017 	ldw	fp,0(sp)
    3944:	dec00204 	addi	sp,sp,8
    3948:	f800283a 	ret

0000394c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    394c:	defffe04 	addi	sp,sp,-8
    3950:	df000115 	stw	fp,4(sp)
    3954:	df000104 	addi	fp,sp,4
    3958:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    395c:	e0bfff17 	ldw	r2,-4(fp)
    3960:	108000d0 	cmplti	r2,r2,3
    3964:	10000d1e 	bne	r2,zero,399c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3968:	e0bfff17 	ldw	r2,-4(fp)
    396c:	00c00034 	movhi	r3,0
    3970:	18dfd204 	addi	r3,r3,32584
    3974:	10800324 	muli	r2,r2,12
    3978:	10c5883a 	add	r2,r2,r3
    397c:	10800204 	addi	r2,r2,8
    3980:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3984:	e0bfff17 	ldw	r2,-4(fp)
    3988:	00c00034 	movhi	r3,0
    398c:	18dfd204 	addi	r3,r3,32584
    3990:	10800324 	muli	r2,r2,12
    3994:	10c5883a 	add	r2,r2,r3
    3998:	10000015 	stw	zero,0(r2)
  }
}
    399c:	e037883a 	mov	sp,fp
    39a0:	df000017 	ldw	fp,0(sp)
    39a4:	dec00104 	addi	sp,sp,4
    39a8:	f800283a 	ret

000039ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    39ac:	defffa04 	addi	sp,sp,-24
    39b0:	df000515 	stw	fp,20(sp)
    39b4:	df000504 	addi	fp,sp,20
    39b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    39bc:	0005303a 	rdctl	r2,status
    39c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    39c4:	e0fffd17 	ldw	r3,-12(fp)
    39c8:	00bfff84 	movi	r2,-2
    39cc:	1884703a 	and	r2,r3,r2
    39d0:	1001703a 	wrctl	status,r2
  
  return context;
    39d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    39d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    39dc:	e0bfff17 	ldw	r2,-4(fp)
    39e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    39e4:	e0bffc17 	ldw	r2,-16(fp)
    39e8:	10c00017 	ldw	r3,0(r2)
    39ec:	e0bffc17 	ldw	r2,-16(fp)
    39f0:	10800117 	ldw	r2,4(r2)
    39f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    39f8:	e0bffc17 	ldw	r2,-16(fp)
    39fc:	10c00117 	ldw	r3,4(r2)
    3a00:	e0bffc17 	ldw	r2,-16(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3a0c:	e0fffc17 	ldw	r3,-16(fp)
    3a10:	e0bffc17 	ldw	r2,-16(fp)
    3a14:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    3a18:	e0fffc17 	ldw	r3,-16(fp)
    3a1c:	e0bffc17 	ldw	r2,-16(fp)
    3a20:	18800015 	stw	r2,0(r3)
    3a24:	e0bffe17 	ldw	r2,-8(fp)
    3a28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3a2c:	e0bffb17 	ldw	r2,-20(fp)
    3a30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3a34:	e037883a 	mov	sp,fp
    3a38:	df000017 	ldw	fp,0(sp)
    3a3c:	dec00104 	addi	sp,sp,4
    3a40:	f800283a 	ret

00003a44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3a44:	defffb04 	addi	sp,sp,-20
    3a48:	dfc00415 	stw	ra,16(sp)
    3a4c:	df000315 	stw	fp,12(sp)
    3a50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3a54:	d0a00717 	ldw	r2,-32740(gp)
    3a58:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3a5c:	d0a78617 	ldw	r2,-25064(gp)
    3a60:	10800044 	addi	r2,r2,1
    3a64:	d0a78615 	stw	r2,-25064(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3a68:	00003106 	br	3b30 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    3a6c:	e0bffe17 	ldw	r2,-8(fp)
    3a70:	10800017 	ldw	r2,0(r2)
    3a74:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3a78:	e0bffe17 	ldw	r2,-8(fp)
    3a7c:	10800403 	ldbu	r2,16(r2)
    3a80:	10803fcc 	andi	r2,r2,255
    3a84:	1005003a 	cmpeq	r2,r2,zero
    3a88:	1000051e 	bne	r2,zero,3aa0 <alt_tick+0x5c>
    3a8c:	d0a78617 	ldw	r2,-25064(gp)
    3a90:	1004c03a 	cmpne	r2,r2,zero
    3a94:	1000021e 	bne	r2,zero,3aa0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    3a98:	e0bffe17 	ldw	r2,-8(fp)
    3a9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3aa0:	e0bffe17 	ldw	r2,-8(fp)
    3aa4:	10c00217 	ldw	r3,8(r2)
    3aa8:	d0a78617 	ldw	r2,-25064(gp)
    3aac:	10c01e36 	bltu	r2,r3,3b28 <alt_tick+0xe4>
    3ab0:	e0bffe17 	ldw	r2,-8(fp)
    3ab4:	10800403 	ldbu	r2,16(r2)
    3ab8:	10803fcc 	andi	r2,r2,255
    3abc:	1004c03a 	cmpne	r2,r2,zero
    3ac0:	1000191e 	bne	r2,zero,3b28 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    3ac4:	e0bffe17 	ldw	r2,-8(fp)
    3ac8:	10c00317 	ldw	r3,12(r2)
    3acc:	e0bffe17 	ldw	r2,-8(fp)
    3ad0:	11000517 	ldw	r4,20(r2)
    3ad4:	183ee83a 	callr	r3
    3ad8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3adc:	e0bffd17 	ldw	r2,-12(fp)
    3ae0:	1004c03a 	cmpne	r2,r2,zero
    3ae4:	1000031e 	bne	r2,zero,3af4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    3ae8:	e13ffe17 	ldw	r4,-8(fp)
    3aec:	00039ac0 	call	39ac <alt_alarm_stop>
    3af0:	00000d06 	br	3b28 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    3af4:	e0bffe17 	ldw	r2,-8(fp)
    3af8:	10c00217 	ldw	r3,8(r2)
    3afc:	e0bffd17 	ldw	r2,-12(fp)
    3b00:	1887883a 	add	r3,r3,r2
    3b04:	e0bffe17 	ldw	r2,-8(fp)
    3b08:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3b0c:	e0bffe17 	ldw	r2,-8(fp)
    3b10:	10c00217 	ldw	r3,8(r2)
    3b14:	d0a78617 	ldw	r2,-25064(gp)
    3b18:	1880032e 	bgeu	r3,r2,3b28 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    3b1c:	e0fffe17 	ldw	r3,-8(fp)
    3b20:	00800044 	movi	r2,1
    3b24:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    3b28:	e0bfff17 	ldw	r2,-4(fp)
    3b2c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3b30:	d0e00704 	addi	r3,gp,-32740
    3b34:	e0bffe17 	ldw	r2,-8(fp)
    3b38:	10ffcc1e 	bne	r2,r3,3a6c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3b3c:	e037883a 	mov	sp,fp
    3b40:	dfc00117 	ldw	ra,4(sp)
    3b44:	df000017 	ldw	fp,0(sp)
    3b48:	dec00204 	addi	sp,sp,8
    3b4c:	f800283a 	ret

00003b50 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    3b50:	deffff04 	addi	sp,sp,-4
    3b54:	df000015 	stw	fp,0(sp)
    3b58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3b5c:	000170fa 	wrctl	ienable,zero
}
    3b60:	e037883a 	mov	sp,fp
    3b64:	df000017 	ldw	fp,0(sp)
    3b68:	dec00104 	addi	sp,sp,4
    3b6c:	f800283a 	ret

00003b70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3b70:	defffa04 	addi	sp,sp,-24
    3b74:	dfc00515 	stw	ra,20(sp)
    3b78:	df000415 	stw	fp,16(sp)
    3b7c:	df000404 	addi	fp,sp,16
    3b80:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3b84:	00800074 	movhi	r2,1
    3b88:	10a23404 	addi	r2,r2,-30512
    3b8c:	10800017 	ldw	r2,0(r2)
    3b90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3b94:	00003306 	br	3c64 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	11000217 	ldw	r4,8(r2)
    3ba0:	00041e00 	call	41e0 <strlen>
    3ba4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    3ba8:	e0bffd17 	ldw	r2,-12(fp)
    3bac:	10c00217 	ldw	r3,8(r2)
    3bb0:	e0bffc17 	ldw	r2,-16(fp)
    3bb4:	1885883a 	add	r2,r3,r2
    3bb8:	10bfffc4 	addi	r2,r2,-1
    3bbc:	10800003 	ldbu	r2,0(r2)
    3bc0:	10803fcc 	andi	r2,r2,255
    3bc4:	1080201c 	xori	r2,r2,128
    3bc8:	10bfe004 	addi	r2,r2,-128
    3bcc:	10800bd8 	cmpnei	r2,r2,47
    3bd0:	1000031e 	bne	r2,zero,3be0 <alt_find_file+0x70>
    {
      len -= 1;
    3bd4:	e0bffc17 	ldw	r2,-16(fp)
    3bd8:	10bfffc4 	addi	r2,r2,-1
    3bdc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	1007883a 	mov	r3,r2
    3be8:	e0bffe17 	ldw	r2,-8(fp)
    3bec:	1885883a 	add	r2,r3,r2
    3bf0:	10800003 	ldbu	r2,0(r2)
    3bf4:	10803fcc 	andi	r2,r2,255
    3bf8:	1080201c 	xori	r2,r2,128
    3bfc:	10bfe004 	addi	r2,r2,-128
    3c00:	10800be0 	cmpeqi	r2,r2,47
    3c04:	10000a1e 	bne	r2,zero,3c30 <alt_find_file+0xc0>
    3c08:	e0bffc17 	ldw	r2,-16(fp)
    3c0c:	1007883a 	mov	r3,r2
    3c10:	e0bffe17 	ldw	r2,-8(fp)
    3c14:	1885883a 	add	r2,r3,r2
    3c18:	10800003 	ldbu	r2,0(r2)
    3c1c:	10803fcc 	andi	r2,r2,255
    3c20:	1080201c 	xori	r2,r2,128
    3c24:	10bfe004 	addi	r2,r2,-128
    3c28:	1004c03a 	cmpne	r2,r2,zero
    3c2c:	10000a1e 	bne	r2,zero,3c58 <alt_find_file+0xe8>
    3c30:	e0bffd17 	ldw	r2,-12(fp)
    3c34:	11000217 	ldw	r4,8(r2)
    3c38:	e1bffc17 	ldw	r6,-16(fp)
    3c3c:	e17ffe17 	ldw	r5,-8(fp)
    3c40:	0003e240 	call	3e24 <memcmp>
    3c44:	1004c03a 	cmpne	r2,r2,zero
    3c48:	1000031e 	bne	r2,zero,3c58 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3c4c:	e0bffd17 	ldw	r2,-12(fp)
    3c50:	e0bfff15 	stw	r2,-4(fp)
    3c54:	00000806 	br	3c78 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3c58:	e0bffd17 	ldw	r2,-12(fp)
    3c5c:	10800017 	ldw	r2,0(r2)
    3c60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3c64:	00c00074 	movhi	r3,1
    3c68:	18e23404 	addi	r3,r3,-30512
    3c6c:	e0bffd17 	ldw	r2,-12(fp)
    3c70:	10ffc91e 	bne	r2,r3,3b98 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3c74:	e03fff15 	stw	zero,-4(fp)
    3c78:	e0bfff17 	ldw	r2,-4(fp)
}
    3c7c:	e037883a 	mov	sp,fp
    3c80:	dfc00117 	ldw	ra,4(sp)
    3c84:	df000017 	ldw	fp,0(sp)
    3c88:	dec00204 	addi	sp,sp,8
    3c8c:	f800283a 	ret

00003c90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3c90:	defffc04 	addi	sp,sp,-16
    3c94:	df000315 	stw	fp,12(sp)
    3c98:	df000304 	addi	fp,sp,12
    3c9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3ca0:	00bffa04 	movi	r2,-24
    3ca4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3ca8:	e03ffe15 	stw	zero,-8(fp)
    3cac:	00001e06 	br	3d28 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    3cb0:	e0bffe17 	ldw	r2,-8(fp)
    3cb4:	00c00034 	movhi	r3,0
    3cb8:	18dfd204 	addi	r3,r3,32584
    3cbc:	10800324 	muli	r2,r2,12
    3cc0:	10c5883a 	add	r2,r2,r3
    3cc4:	10800017 	ldw	r2,0(r2)
    3cc8:	1004c03a 	cmpne	r2,r2,zero
    3ccc:	1000131e 	bne	r2,zero,3d1c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    3cd0:	e0bffe17 	ldw	r2,-8(fp)
    3cd4:	00c00034 	movhi	r3,0
    3cd8:	18dfd204 	addi	r3,r3,32584
    3cdc:	10800324 	muli	r2,r2,12
    3ce0:	10c7883a 	add	r3,r2,r3
    3ce4:	e0bfff17 	ldw	r2,-4(fp)
    3ce8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    3cec:	00800074 	movhi	r2,1
    3cf0:	10a23804 	addi	r2,r2,-30496
    3cf4:	10c00017 	ldw	r3,0(r2)
    3cf8:	e0bffe17 	ldw	r2,-8(fp)
    3cfc:	1880040e 	bge	r3,r2,3d10 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    3d00:	00c00074 	movhi	r3,1
    3d04:	18e23804 	addi	r3,r3,-30496
    3d08:	e0bffe17 	ldw	r2,-8(fp)
    3d0c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    3d10:	e0bffe17 	ldw	r2,-8(fp)
    3d14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3d18:	00000606 	br	3d34 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3d1c:	e0bffe17 	ldw	r2,-8(fp)
    3d20:	10800044 	addi	r2,r2,1
    3d24:	e0bffe15 	stw	r2,-8(fp)
    3d28:	e0bffe17 	ldw	r2,-8(fp)
    3d2c:	10800810 	cmplti	r2,r2,32
    3d30:	103fdf1e 	bne	r2,zero,3cb0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3d34:	e0bffd17 	ldw	r2,-12(fp)
}
    3d38:	e037883a 	mov	sp,fp
    3d3c:	df000017 	ldw	fp,0(sp)
    3d40:	dec00104 	addi	sp,sp,4
    3d44:	f800283a 	ret

00003d48 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3d48:	defffb04 	addi	sp,sp,-20
    3d4c:	df000415 	stw	fp,16(sp)
    3d50:	df000404 	addi	fp,sp,16
    3d54:	e13ffe15 	stw	r4,-8(fp)
    3d58:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3d5c:	e0bfff17 	ldw	r2,-4(fp)
    3d60:	10840070 	cmpltui	r2,r2,4097
    3d64:	1000021e 	bne	r2,zero,3d70 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3d68:	00840004 	movi	r2,4096
    3d6c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3d70:	e0fffe17 	ldw	r3,-8(fp)
    3d74:	e0bfff17 	ldw	r2,-4(fp)
    3d78:	1885883a 	add	r2,r3,r2
    3d7c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3d80:	e0bffe17 	ldw	r2,-8(fp)
    3d84:	e0bffd15 	stw	r2,-12(fp)
    3d88:	00000506 	br	3da0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3d8c:	e0bffd17 	ldw	r2,-12(fp)
    3d90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3d94:	e0bffd17 	ldw	r2,-12(fp)
    3d98:	10800804 	addi	r2,r2,32
    3d9c:	e0bffd15 	stw	r2,-12(fp)
    3da0:	e0fffd17 	ldw	r3,-12(fp)
    3da4:	e0bffc17 	ldw	r2,-16(fp)
    3da8:	18bff836 	bltu	r3,r2,3d8c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3dac:	e0bffe17 	ldw	r2,-8(fp)
    3db0:	108007cc 	andi	r2,r2,31
    3db4:	1005003a 	cmpeq	r2,r2,zero
    3db8:	1000021e 	bne	r2,zero,3dc4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3dbc:	e0bffd17 	ldw	r2,-12(fp)
    3dc0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3dc4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3dc8:	e037883a 	mov	sp,fp
    3dcc:	df000017 	ldw	fp,0(sp)
    3dd0:	dec00104 	addi	sp,sp,4
    3dd4:	f800283a 	ret

00003dd8 <atexit>:
    3dd8:	200b883a 	mov	r5,r4
    3ddc:	000d883a 	mov	r6,zero
    3de0:	0009883a 	mov	r4,zero
    3de4:	000f883a 	mov	r7,zero
    3de8:	00044dc1 	jmpi	44dc <__register_exitproc>

00003dec <exit>:
    3dec:	defffe04 	addi	sp,sp,-8
    3df0:	000b883a 	mov	r5,zero
    3df4:	dc000015 	stw	r16,0(sp)
    3df8:	dfc00115 	stw	ra,4(sp)
    3dfc:	2021883a 	mov	r16,r4
    3e00:	00046140 	call	4614 <__call_exitprocs>
    3e04:	00800074 	movhi	r2,1
    3e08:	10a23e04 	addi	r2,r2,-30472
    3e0c:	11000017 	ldw	r4,0(r2)
    3e10:	20800f17 	ldw	r2,60(r4)
    3e14:	10000126 	beq	r2,zero,3e1c <exit+0x30>
    3e18:	103ee83a 	callr	r2
    3e1c:	8009883a 	mov	r4,r16
    3e20:	00061240 	call	6124 <_exit>

00003e24 <memcmp>:
    3e24:	00c000c4 	movi	r3,3
    3e28:	1980032e 	bgeu	r3,r6,3e38 <memcmp+0x14>
    3e2c:	2144b03a 	or	r2,r4,r5
    3e30:	10c4703a 	and	r2,r2,r3
    3e34:	10000f26 	beq	r2,zero,3e74 <memcmp+0x50>
    3e38:	31ffffc4 	addi	r7,r6,-1
    3e3c:	3000061e 	bne	r6,zero,3e58 <memcmp+0x34>
    3e40:	00000a06 	br	3e6c <memcmp+0x48>
    3e44:	39ffffc4 	addi	r7,r7,-1
    3e48:	00bfffc4 	movi	r2,-1
    3e4c:	21000044 	addi	r4,r4,1
    3e50:	29400044 	addi	r5,r5,1
    3e54:	38800526 	beq	r7,r2,3e6c <memcmp+0x48>
    3e58:	20c00003 	ldbu	r3,0(r4)
    3e5c:	28800003 	ldbu	r2,0(r5)
    3e60:	18bff826 	beq	r3,r2,3e44 <memcmp+0x20>
    3e64:	1885c83a 	sub	r2,r3,r2
    3e68:	f800283a 	ret
    3e6c:	0005883a 	mov	r2,zero
    3e70:	f800283a 	ret
    3e74:	180f883a 	mov	r7,r3
    3e78:	20c00017 	ldw	r3,0(r4)
    3e7c:	28800017 	ldw	r2,0(r5)
    3e80:	18bfed1e 	bne	r3,r2,3e38 <memcmp+0x14>
    3e84:	31bfff04 	addi	r6,r6,-4
    3e88:	21000104 	addi	r4,r4,4
    3e8c:	29400104 	addi	r5,r5,4
    3e90:	39bff936 	bltu	r7,r6,3e78 <memcmp+0x54>
    3e94:	003fe806 	br	3e38 <memcmp+0x14>

00003e98 <memcpy>:
    3e98:	01c003c4 	movi	r7,15
    3e9c:	2007883a 	mov	r3,r4
    3ea0:	3980032e 	bgeu	r7,r6,3eb0 <memcpy+0x18>
    3ea4:	2904b03a 	or	r2,r5,r4
    3ea8:	108000cc 	andi	r2,r2,3
    3eac:	10000926 	beq	r2,zero,3ed4 <memcpy+0x3c>
    3eb0:	30000626 	beq	r6,zero,3ecc <memcpy+0x34>
    3eb4:	30cd883a 	add	r6,r6,r3
    3eb8:	28800003 	ldbu	r2,0(r5)
    3ebc:	29400044 	addi	r5,r5,1
    3ec0:	18800005 	stb	r2,0(r3)
    3ec4:	18c00044 	addi	r3,r3,1
    3ec8:	30fffb1e 	bne	r6,r3,3eb8 <memcpy+0x20>
    3ecc:	2005883a 	mov	r2,r4
    3ed0:	f800283a 	ret
    3ed4:	3811883a 	mov	r8,r7
    3ed8:	200f883a 	mov	r7,r4
    3edc:	28c00017 	ldw	r3,0(r5)
    3ee0:	31bffc04 	addi	r6,r6,-16
    3ee4:	38c00015 	stw	r3,0(r7)
    3ee8:	28800117 	ldw	r2,4(r5)
    3eec:	38800115 	stw	r2,4(r7)
    3ef0:	28c00217 	ldw	r3,8(r5)
    3ef4:	38c00215 	stw	r3,8(r7)
    3ef8:	28800317 	ldw	r2,12(r5)
    3efc:	29400404 	addi	r5,r5,16
    3f00:	38800315 	stw	r2,12(r7)
    3f04:	39c00404 	addi	r7,r7,16
    3f08:	41bff436 	bltu	r8,r6,3edc <memcpy+0x44>
    3f0c:	008000c4 	movi	r2,3
    3f10:	1180072e 	bgeu	r2,r6,3f30 <memcpy+0x98>
    3f14:	1007883a 	mov	r3,r2
    3f18:	28800017 	ldw	r2,0(r5)
    3f1c:	31bfff04 	addi	r6,r6,-4
    3f20:	29400104 	addi	r5,r5,4
    3f24:	38800015 	stw	r2,0(r7)
    3f28:	39c00104 	addi	r7,r7,4
    3f2c:	19bffa36 	bltu	r3,r6,3f18 <memcpy+0x80>
    3f30:	3807883a 	mov	r3,r7
    3f34:	003fde06 	br	3eb0 <memcpy+0x18>

00003f38 <putc>:
    3f38:	defffc04 	addi	sp,sp,-16
    3f3c:	dc800215 	stw	r18,8(sp)
    3f40:	04800074 	movhi	r18,1
    3f44:	94a23d04 	addi	r18,r18,-30476
    3f48:	90c00017 	ldw	r3,0(r18)
    3f4c:	dc400115 	stw	r17,4(sp)
    3f50:	dc000015 	stw	r16,0(sp)
    3f54:	dfc00315 	stw	ra,12(sp)
    3f58:	2023883a 	mov	r17,r4
    3f5c:	2821883a 	mov	r16,r5
    3f60:	18000226 	beq	r3,zero,3f6c <putc+0x34>
    3f64:	18800e17 	ldw	r2,56(r3)
    3f68:	10001126 	beq	r2,zero,3fb0 <putc+0x78>
    3f6c:	80800217 	ldw	r2,8(r16)
    3f70:	10ffffc4 	addi	r3,r2,-1
    3f74:	80c00215 	stw	r3,8(r16)
    3f78:	18001316 	blt	r3,zero,3fc8 <putc+0x90>
    3f7c:	80800017 	ldw	r2,0(r16)
    3f80:	14400005 	stb	r17,0(r2)
    3f84:	80c00017 	ldw	r3,0(r16)
    3f88:	18800044 	addi	r2,r3,1
    3f8c:	18c00003 	ldbu	r3,0(r3)
    3f90:	80800015 	stw	r2,0(r16)
    3f94:	1805883a 	mov	r2,r3
    3f98:	dfc00317 	ldw	ra,12(sp)
    3f9c:	dc800217 	ldw	r18,8(sp)
    3fa0:	dc400117 	ldw	r17,4(sp)
    3fa4:	dc000017 	ldw	r16,0(sp)
    3fa8:	dec00404 	addi	sp,sp,16
    3fac:	f800283a 	ret
    3fb0:	1809883a 	mov	r4,r3
    3fb4:	0004a5c0 	call	4a5c <__sinit>
    3fb8:	80800217 	ldw	r2,8(r16)
    3fbc:	10ffffc4 	addi	r3,r2,-1
    3fc0:	80c00215 	stw	r3,8(r16)
    3fc4:	183fed0e 	bge	r3,zero,3f7c <putc+0x44>
    3fc8:	80800617 	ldw	r2,24(r16)
    3fcc:	18800f16 	blt	r3,r2,400c <putc+0xd4>
    3fd0:	80800017 	ldw	r2,0(r16)
    3fd4:	14400005 	stb	r17,0(r2)
    3fd8:	81000017 	ldw	r4,0(r16)
    3fdc:	00800284 	movi	r2,10
    3fe0:	20c00003 	ldbu	r3,0(r4)
    3fe4:	18801226 	beq	r3,r2,4030 <putc+0xf8>
    3fe8:	20800044 	addi	r2,r4,1
    3fec:	80800015 	stw	r2,0(r16)
    3ff0:	1805883a 	mov	r2,r3
    3ff4:	dfc00317 	ldw	ra,12(sp)
    3ff8:	dc800217 	ldw	r18,8(sp)
    3ffc:	dc400117 	ldw	r17,4(sp)
    4000:	dc000017 	ldw	r16,0(sp)
    4004:	dec00404 	addi	sp,sp,16
    4008:	f800283a 	ret
    400c:	91000017 	ldw	r4,0(r18)
    4010:	880b883a 	mov	r5,r17
    4014:	800d883a 	mov	r6,r16
    4018:	dfc00317 	ldw	ra,12(sp)
    401c:	dc800217 	ldw	r18,8(sp)
    4020:	dc400117 	ldw	r17,4(sp)
    4024:	dc000017 	ldw	r16,0(sp)
    4028:	dec00404 	addi	sp,sp,16
    402c:	00042541 	jmpi	4254 <__swbuf_r>
    4030:	91000017 	ldw	r4,0(r18)
    4034:	180b883a 	mov	r5,r3
    4038:	003ff606 	br	4014 <putc+0xdc>

0000403c <_putc_r>:
    403c:	defffc04 	addi	sp,sp,-16
    4040:	dc400215 	stw	r17,8(sp)
    4044:	dc000115 	stw	r16,4(sp)
    4048:	dfc00315 	stw	ra,12(sp)
    404c:	2021883a 	mov	r16,r4
    4050:	2823883a 	mov	r17,r5
    4054:	20000226 	beq	r4,zero,4060 <_putc_r+0x24>
    4058:	20800e17 	ldw	r2,56(r4)
    405c:	10001026 	beq	r2,zero,40a0 <_putc_r+0x64>
    4060:	30800217 	ldw	r2,8(r6)
    4064:	10ffffc4 	addi	r3,r2,-1
    4068:	30c00215 	stw	r3,8(r6)
    406c:	18001316 	blt	r3,zero,40bc <_putc_r+0x80>
    4070:	30800017 	ldw	r2,0(r6)
    4074:	14400005 	stb	r17,0(r2)
    4078:	30c00017 	ldw	r3,0(r6)
    407c:	18800044 	addi	r2,r3,1
    4080:	18c00003 	ldbu	r3,0(r3)
    4084:	30800015 	stw	r2,0(r6)
    4088:	1805883a 	mov	r2,r3
    408c:	dfc00317 	ldw	ra,12(sp)
    4090:	dc400217 	ldw	r17,8(sp)
    4094:	dc000117 	ldw	r16,4(sp)
    4098:	dec00404 	addi	sp,sp,16
    409c:	f800283a 	ret
    40a0:	d9800015 	stw	r6,0(sp)
    40a4:	0004a5c0 	call	4a5c <__sinit>
    40a8:	d9800017 	ldw	r6,0(sp)
    40ac:	30800217 	ldw	r2,8(r6)
    40b0:	10ffffc4 	addi	r3,r2,-1
    40b4:	30c00215 	stw	r3,8(r6)
    40b8:	183fed0e 	bge	r3,zero,4070 <_putc_r+0x34>
    40bc:	30800617 	ldw	r2,24(r6)
    40c0:	18800e16 	blt	r3,r2,40fc <_putc_r+0xc0>
    40c4:	30800017 	ldw	r2,0(r6)
    40c8:	14400005 	stb	r17,0(r2)
    40cc:	31000017 	ldw	r4,0(r6)
    40d0:	00800284 	movi	r2,10
    40d4:	20c00003 	ldbu	r3,0(r4)
    40d8:	18800f26 	beq	r3,r2,4118 <_putc_r+0xdc>
    40dc:	20800044 	addi	r2,r4,1
    40e0:	30800015 	stw	r2,0(r6)
    40e4:	1805883a 	mov	r2,r3
    40e8:	dfc00317 	ldw	ra,12(sp)
    40ec:	dc400217 	ldw	r17,8(sp)
    40f0:	dc000117 	ldw	r16,4(sp)
    40f4:	dec00404 	addi	sp,sp,16
    40f8:	f800283a 	ret
    40fc:	8009883a 	mov	r4,r16
    4100:	880b883a 	mov	r5,r17
    4104:	dfc00317 	ldw	ra,12(sp)
    4108:	dc400217 	ldw	r17,8(sp)
    410c:	dc000117 	ldw	r16,4(sp)
    4110:	dec00404 	addi	sp,sp,16
    4114:	00042541 	jmpi	4254 <__swbuf_r>
    4118:	8009883a 	mov	r4,r16
    411c:	180b883a 	mov	r5,r3
    4120:	003ff806 	br	4104 <_putc_r+0xc8>

00004124 <strcmp>:
    4124:	2144b03a 	or	r2,r4,r5
    4128:	108000cc 	andi	r2,r2,3
    412c:	10001d1e 	bne	r2,zero,41a4 <strcmp+0x80>
    4130:	200f883a 	mov	r7,r4
    4134:	28800017 	ldw	r2,0(r5)
    4138:	21000017 	ldw	r4,0(r4)
    413c:	280d883a 	mov	r6,r5
    4140:	2080161e 	bne	r4,r2,419c <strcmp+0x78>
    4144:	023fbff4 	movhi	r8,65279
    4148:	423fbfc4 	addi	r8,r8,-257
    414c:	2207883a 	add	r3,r4,r8
    4150:	01602074 	movhi	r5,32897
    4154:	29602004 	addi	r5,r5,-32640
    4158:	1946703a 	and	r3,r3,r5
    415c:	0104303a 	nor	r2,zero,r4
    4160:	10c4703a 	and	r2,r2,r3
    4164:	10001c1e 	bne	r2,zero,41d8 <strcmp+0xb4>
    4168:	4013883a 	mov	r9,r8
    416c:	2811883a 	mov	r8,r5
    4170:	00000106 	br	4178 <strcmp+0x54>
    4174:	1800181e 	bne	r3,zero,41d8 <strcmp+0xb4>
    4178:	39c00104 	addi	r7,r7,4
    417c:	39000017 	ldw	r4,0(r7)
    4180:	31800104 	addi	r6,r6,4
    4184:	31400017 	ldw	r5,0(r6)
    4188:	2245883a 	add	r2,r4,r9
    418c:	1204703a 	and	r2,r2,r8
    4190:	0106303a 	nor	r3,zero,r4
    4194:	1886703a 	and	r3,r3,r2
    4198:	217ff626 	beq	r4,r5,4174 <strcmp+0x50>
    419c:	3809883a 	mov	r4,r7
    41a0:	300b883a 	mov	r5,r6
    41a4:	20c00007 	ldb	r3,0(r4)
    41a8:	1800051e 	bne	r3,zero,41c0 <strcmp+0x9c>
    41ac:	00000606 	br	41c8 <strcmp+0xa4>
    41b0:	21000044 	addi	r4,r4,1
    41b4:	20c00007 	ldb	r3,0(r4)
    41b8:	29400044 	addi	r5,r5,1
    41bc:	18000226 	beq	r3,zero,41c8 <strcmp+0xa4>
    41c0:	28800007 	ldb	r2,0(r5)
    41c4:	18bffa26 	beq	r3,r2,41b0 <strcmp+0x8c>
    41c8:	20c00003 	ldbu	r3,0(r4)
    41cc:	28800003 	ldbu	r2,0(r5)
    41d0:	1885c83a 	sub	r2,r3,r2
    41d4:	f800283a 	ret
    41d8:	0005883a 	mov	r2,zero
    41dc:	f800283a 	ret

000041e0 <strlen>:
    41e0:	208000cc 	andi	r2,r4,3
    41e4:	2011883a 	mov	r8,r4
    41e8:	1000161e 	bne	r2,zero,4244 <strlen+0x64>
    41ec:	20c00017 	ldw	r3,0(r4)
    41f0:	017fbff4 	movhi	r5,65279
    41f4:	297fbfc4 	addi	r5,r5,-257
    41f8:	01e02074 	movhi	r7,32897
    41fc:	39e02004 	addi	r7,r7,-32640
    4200:	1945883a 	add	r2,r3,r5
    4204:	11c4703a 	and	r2,r2,r7
    4208:	00c6303a 	nor	r3,zero,r3
    420c:	1886703a 	and	r3,r3,r2
    4210:	18000c1e 	bne	r3,zero,4244 <strlen+0x64>
    4214:	280d883a 	mov	r6,r5
    4218:	380b883a 	mov	r5,r7
    421c:	21000104 	addi	r4,r4,4
    4220:	20800017 	ldw	r2,0(r4)
    4224:	1187883a 	add	r3,r2,r6
    4228:	1946703a 	and	r3,r3,r5
    422c:	0084303a 	nor	r2,zero,r2
    4230:	10c4703a 	and	r2,r2,r3
    4234:	103ff926 	beq	r2,zero,421c <strlen+0x3c>
    4238:	20800007 	ldb	r2,0(r4)
    423c:	10000326 	beq	r2,zero,424c <strlen+0x6c>
    4240:	21000044 	addi	r4,r4,1
    4244:	20800007 	ldb	r2,0(r4)
    4248:	103ffd1e 	bne	r2,zero,4240 <strlen+0x60>
    424c:	2205c83a 	sub	r2,r4,r8
    4250:	f800283a 	ret

00004254 <__swbuf_r>:
    4254:	defffc04 	addi	sp,sp,-16
    4258:	dc400215 	stw	r17,8(sp)
    425c:	dc000115 	stw	r16,4(sp)
    4260:	dfc00315 	stw	ra,12(sp)
    4264:	2023883a 	mov	r17,r4
    4268:	2821883a 	mov	r16,r5
    426c:	20000226 	beq	r4,zero,4278 <__swbuf_r+0x24>
    4270:	20800e17 	ldw	r2,56(r4)
    4274:	10002f26 	beq	r2,zero,4334 <__swbuf_r+0xe0>
    4278:	3080030b 	ldhu	r2,12(r6)
    427c:	30c00617 	ldw	r3,24(r6)
    4280:	1080020c 	andi	r2,r2,8
    4284:	30c00215 	stw	r3,8(r6)
    4288:	10002226 	beq	r2,zero,4314 <__swbuf_r+0xc0>
    428c:	30c00417 	ldw	r3,16(r6)
    4290:	18002026 	beq	r3,zero,4314 <__swbuf_r+0xc0>
    4294:	31000017 	ldw	r4,0(r6)
    4298:	30800517 	ldw	r2,20(r6)
    429c:	20c7c83a 	sub	r3,r4,r3
    42a0:	18802f0e 	bge	r3,r2,4360 <__swbuf_r+0x10c>
    42a4:	19400044 	addi	r5,r3,1
    42a8:	30800217 	ldw	r2,8(r6)
    42ac:	84003fcc 	andi	r16,r16,255
    42b0:	20c00044 	addi	r3,r4,1
    42b4:	10bfffc4 	addi	r2,r2,-1
    42b8:	30800215 	stw	r2,8(r6)
    42bc:	24000005 	stb	r16,0(r4)
    42c0:	30800517 	ldw	r2,20(r6)
    42c4:	30c00015 	stw	r3,0(r6)
    42c8:	11400c26 	beq	r2,r5,42fc <__swbuf_r+0xa8>
    42cc:	3080030b 	ldhu	r2,12(r6)
    42d0:	1080004c 	andi	r2,r2,1
    42d4:	1005003a 	cmpeq	r2,r2,zero
    42d8:	10000626 	beq	r2,zero,42f4 <__swbuf_r+0xa0>
    42dc:	8005883a 	mov	r2,r16
    42e0:	dfc00317 	ldw	ra,12(sp)
    42e4:	dc400217 	ldw	r17,8(sp)
    42e8:	dc000117 	ldw	r16,4(sp)
    42ec:	dec00404 	addi	sp,sp,16
    42f0:	f800283a 	ret
    42f4:	00800284 	movi	r2,10
    42f8:	80bff81e 	bne	r16,r2,42dc <__swbuf_r+0x88>
    42fc:	8809883a 	mov	r4,r17
    4300:	300b883a 	mov	r5,r6
    4304:	00047c40 	call	47c4 <_fflush_r>
    4308:	103ff426 	beq	r2,zero,42dc <__swbuf_r+0x88>
    430c:	043fffc4 	movi	r16,-1
    4310:	003ff206 	br	42dc <__swbuf_r+0x88>
    4314:	300b883a 	mov	r5,r6
    4318:	8809883a 	mov	r4,r17
    431c:	d9800015 	stw	r6,0(sp)
    4320:	00043a00 	call	43a0 <__swsetup_r>
    4324:	d9800017 	ldw	r6,0(sp)
    4328:	1000061e 	bne	r2,zero,4344 <__swbuf_r+0xf0>
    432c:	30c00417 	ldw	r3,16(r6)
    4330:	003fd806 	br	4294 <__swbuf_r+0x40>
    4334:	d9800015 	stw	r6,0(sp)
    4338:	0004a5c0 	call	4a5c <__sinit>
    433c:	d9800017 	ldw	r6,0(sp)
    4340:	003fcd06 	br	4278 <__swbuf_r+0x24>
    4344:	3080030b 	ldhu	r2,12(r6)
    4348:	00c00244 	movi	r3,9
    434c:	043fffc4 	movi	r16,-1
    4350:	10801014 	ori	r2,r2,64
    4354:	3080030d 	sth	r2,12(r6)
    4358:	88c00015 	stw	r3,0(r17)
    435c:	003fdf06 	br	42dc <__swbuf_r+0x88>
    4360:	300b883a 	mov	r5,r6
    4364:	8809883a 	mov	r4,r17
    4368:	d9800015 	stw	r6,0(sp)
    436c:	00047c40 	call	47c4 <_fflush_r>
    4370:	d9800017 	ldw	r6,0(sp)
    4374:	103fe51e 	bne	r2,zero,430c <__swbuf_r+0xb8>
    4378:	31000017 	ldw	r4,0(r6)
    437c:	01400044 	movi	r5,1
    4380:	003fc906 	br	42a8 <__swbuf_r+0x54>

00004384 <__swbuf>:
    4384:	01800074 	movhi	r6,1
    4388:	31a23d04 	addi	r6,r6,-30476
    438c:	2007883a 	mov	r3,r4
    4390:	31000017 	ldw	r4,0(r6)
    4394:	280d883a 	mov	r6,r5
    4398:	180b883a 	mov	r5,r3
    439c:	00042541 	jmpi	4254 <__swbuf_r>

000043a0 <__swsetup_r>:
    43a0:	00800074 	movhi	r2,1
    43a4:	10a23d04 	addi	r2,r2,-30476
    43a8:	10c00017 	ldw	r3,0(r2)
    43ac:	defffd04 	addi	sp,sp,-12
    43b0:	dc400115 	stw	r17,4(sp)
    43b4:	dc000015 	stw	r16,0(sp)
    43b8:	dfc00215 	stw	ra,8(sp)
    43bc:	2023883a 	mov	r17,r4
    43c0:	2821883a 	mov	r16,r5
    43c4:	18000226 	beq	r3,zero,43d0 <__swsetup_r+0x30>
    43c8:	18800e17 	ldw	r2,56(r3)
    43cc:	10001f26 	beq	r2,zero,444c <__swsetup_r+0xac>
    43d0:	8100030b 	ldhu	r4,12(r16)
    43d4:	2080020c 	andi	r2,r4,8
    43d8:	10002826 	beq	r2,zero,447c <__swsetup_r+0xdc>
    43dc:	81400417 	ldw	r5,16(r16)
    43e0:	28001d26 	beq	r5,zero,4458 <__swsetup_r+0xb8>
    43e4:	2080004c 	andi	r2,r4,1
    43e8:	1005003a 	cmpeq	r2,r2,zero
    43ec:	10000b26 	beq	r2,zero,441c <__swsetup_r+0x7c>
    43f0:	2080008c 	andi	r2,r4,2
    43f4:	10001226 	beq	r2,zero,4440 <__swsetup_r+0xa0>
    43f8:	0005883a 	mov	r2,zero
    43fc:	80800215 	stw	r2,8(r16)
    4400:	28000b26 	beq	r5,zero,4430 <__swsetup_r+0x90>
    4404:	0005883a 	mov	r2,zero
    4408:	dfc00217 	ldw	ra,8(sp)
    440c:	dc400117 	ldw	r17,4(sp)
    4410:	dc000017 	ldw	r16,0(sp)
    4414:	dec00304 	addi	sp,sp,12
    4418:	f800283a 	ret
    441c:	80800517 	ldw	r2,20(r16)
    4420:	80000215 	stw	zero,8(r16)
    4424:	0085c83a 	sub	r2,zero,r2
    4428:	80800615 	stw	r2,24(r16)
    442c:	283ff51e 	bne	r5,zero,4404 <__swsetup_r+0x64>
    4430:	2080200c 	andi	r2,r4,128
    4434:	103ff326 	beq	r2,zero,4404 <__swsetup_r+0x64>
    4438:	00bfffc4 	movi	r2,-1
    443c:	003ff206 	br	4408 <__swsetup_r+0x68>
    4440:	80800517 	ldw	r2,20(r16)
    4444:	80800215 	stw	r2,8(r16)
    4448:	003fed06 	br	4400 <__swsetup_r+0x60>
    444c:	1809883a 	mov	r4,r3
    4450:	0004a5c0 	call	4a5c <__sinit>
    4454:	003fde06 	br	43d0 <__swsetup_r+0x30>
    4458:	20c0a00c 	andi	r3,r4,640
    445c:	00808004 	movi	r2,512
    4460:	18bfe026 	beq	r3,r2,43e4 <__swsetup_r+0x44>
    4464:	8809883a 	mov	r4,r17
    4468:	800b883a 	mov	r5,r16
    446c:	00052740 	call	5274 <__smakebuf_r>
    4470:	8100030b 	ldhu	r4,12(r16)
    4474:	81400417 	ldw	r5,16(r16)
    4478:	003fda06 	br	43e4 <__swsetup_r+0x44>
    447c:	2080040c 	andi	r2,r4,16
    4480:	103fed26 	beq	r2,zero,4438 <__swsetup_r+0x98>
    4484:	2080010c 	andi	r2,r4,4
    4488:	10001226 	beq	r2,zero,44d4 <__swsetup_r+0x134>
    448c:	81400c17 	ldw	r5,48(r16)
    4490:	28000526 	beq	r5,zero,44a8 <__swsetup_r+0x108>
    4494:	80801004 	addi	r2,r16,64
    4498:	28800226 	beq	r5,r2,44a4 <__swsetup_r+0x104>
    449c:	8809883a 	mov	r4,r17
    44a0:	0004de00 	call	4de0 <_free_r>
    44a4:	80000c15 	stw	zero,48(r16)
    44a8:	8080030b 	ldhu	r2,12(r16)
    44ac:	81400417 	ldw	r5,16(r16)
    44b0:	80000115 	stw	zero,4(r16)
    44b4:	10bff6cc 	andi	r2,r2,65499
    44b8:	8080030d 	sth	r2,12(r16)
    44bc:	81400015 	stw	r5,0(r16)
    44c0:	8080030b 	ldhu	r2,12(r16)
    44c4:	10800214 	ori	r2,r2,8
    44c8:	113fffcc 	andi	r4,r2,65535
    44cc:	8080030d 	sth	r2,12(r16)
    44d0:	003fc306 	br	43e0 <__swsetup_r+0x40>
    44d4:	81400417 	ldw	r5,16(r16)
    44d8:	003ff906 	br	44c0 <__swsetup_r+0x120>

000044dc <__register_exitproc>:
    44dc:	defffa04 	addi	sp,sp,-24
    44e0:	00800074 	movhi	r2,1
    44e4:	10a23e04 	addi	r2,r2,-30472
    44e8:	dc000015 	stw	r16,0(sp)
    44ec:	14000017 	ldw	r16,0(r2)
    44f0:	dd000415 	stw	r20,16(sp)
    44f4:	2829883a 	mov	r20,r5
    44f8:	81405217 	ldw	r5,328(r16)
    44fc:	dcc00315 	stw	r19,12(sp)
    4500:	dc800215 	stw	r18,8(sp)
    4504:	dc400115 	stw	r17,4(sp)
    4508:	dfc00515 	stw	ra,20(sp)
    450c:	2023883a 	mov	r17,r4
    4510:	3027883a 	mov	r19,r6
    4514:	3825883a 	mov	r18,r7
    4518:	28002526 	beq	r5,zero,45b0 <__register_exitproc+0xd4>
    451c:	29000117 	ldw	r4,4(r5)
    4520:	008007c4 	movi	r2,31
    4524:	11002716 	blt	r2,r4,45c4 <__register_exitproc+0xe8>
    4528:	8800101e 	bne	r17,zero,456c <__register_exitproc+0x90>
    452c:	2105883a 	add	r2,r4,r4
    4530:	1085883a 	add	r2,r2,r2
    4534:	20c00044 	addi	r3,r4,1
    4538:	1145883a 	add	r2,r2,r5
    453c:	0009883a 	mov	r4,zero
    4540:	15000215 	stw	r20,8(r2)
    4544:	28c00115 	stw	r3,4(r5)
    4548:	2005883a 	mov	r2,r4
    454c:	dfc00517 	ldw	ra,20(sp)
    4550:	dd000417 	ldw	r20,16(sp)
    4554:	dcc00317 	ldw	r19,12(sp)
    4558:	dc800217 	ldw	r18,8(sp)
    455c:	dc400117 	ldw	r17,4(sp)
    4560:	dc000017 	ldw	r16,0(sp)
    4564:	dec00604 	addi	sp,sp,24
    4568:	f800283a 	ret
    456c:	29802204 	addi	r6,r5,136
    4570:	00800044 	movi	r2,1
    4574:	110e983a 	sll	r7,r2,r4
    4578:	30c04017 	ldw	r3,256(r6)
    457c:	2105883a 	add	r2,r4,r4
    4580:	1085883a 	add	r2,r2,r2
    4584:	1185883a 	add	r2,r2,r6
    4588:	19c6b03a 	or	r3,r3,r7
    458c:	14802015 	stw	r18,128(r2)
    4590:	14c00015 	stw	r19,0(r2)
    4594:	00800084 	movi	r2,2
    4598:	30c04015 	stw	r3,256(r6)
    459c:	88bfe31e 	bne	r17,r2,452c <__register_exitproc+0x50>
    45a0:	30804117 	ldw	r2,260(r6)
    45a4:	11c4b03a 	or	r2,r2,r7
    45a8:	30804115 	stw	r2,260(r6)
    45ac:	003fdf06 	br	452c <__register_exitproc+0x50>
    45b0:	00800074 	movhi	r2,1
    45b4:	10aa0904 	addi	r2,r2,-22492
    45b8:	100b883a 	mov	r5,r2
    45bc:	80805215 	stw	r2,328(r16)
    45c0:	003fd606 	br	451c <__register_exitproc+0x40>
    45c4:	00800034 	movhi	r2,0
    45c8:	10800004 	addi	r2,r2,0
    45cc:	1000021e 	bne	r2,zero,45d8 <__register_exitproc+0xfc>
    45d0:	013fffc4 	movi	r4,-1
    45d4:	003fdc06 	br	4548 <__register_exitproc+0x6c>
    45d8:	01006404 	movi	r4,400
    45dc:	103ee83a 	callr	r2
    45e0:	1007883a 	mov	r3,r2
    45e4:	103ffa26 	beq	r2,zero,45d0 <__register_exitproc+0xf4>
    45e8:	80805217 	ldw	r2,328(r16)
    45ec:	180b883a 	mov	r5,r3
    45f0:	18000115 	stw	zero,4(r3)
    45f4:	18800015 	stw	r2,0(r3)
    45f8:	80c05215 	stw	r3,328(r16)
    45fc:	18006215 	stw	zero,392(r3)
    4600:	18006315 	stw	zero,396(r3)
    4604:	0009883a 	mov	r4,zero
    4608:	883fc826 	beq	r17,zero,452c <__register_exitproc+0x50>
    460c:	003fd706 	br	456c <__register_exitproc+0x90>

00004610 <register_fini>:
    4610:	f800283a 	ret

00004614 <__call_exitprocs>:
    4614:	00800074 	movhi	r2,1
    4618:	10a23e04 	addi	r2,r2,-30472
    461c:	10800017 	ldw	r2,0(r2)
    4620:	defff304 	addi	sp,sp,-52
    4624:	df000b15 	stw	fp,44(sp)
    4628:	d8800115 	stw	r2,4(sp)
    462c:	00800034 	movhi	r2,0
    4630:	10800004 	addi	r2,r2,0
    4634:	1005003a 	cmpeq	r2,r2,zero
    4638:	d8800215 	stw	r2,8(sp)
    463c:	d8800117 	ldw	r2,4(sp)
    4640:	dd400815 	stw	r21,32(sp)
    4644:	dd000715 	stw	r20,28(sp)
    4648:	10805204 	addi	r2,r2,328
    464c:	dfc00c15 	stw	ra,48(sp)
    4650:	ddc00a15 	stw	r23,40(sp)
    4654:	dd800915 	stw	r22,36(sp)
    4658:	dcc00615 	stw	r19,24(sp)
    465c:	dc800515 	stw	r18,20(sp)
    4660:	dc400415 	stw	r17,16(sp)
    4664:	dc000315 	stw	r16,12(sp)
    4668:	282b883a 	mov	r21,r5
    466c:	2039883a 	mov	fp,r4
    4670:	d8800015 	stw	r2,0(sp)
    4674:	2829003a 	cmpeq	r20,r5,zero
    4678:	d8800117 	ldw	r2,4(sp)
    467c:	14405217 	ldw	r17,328(r2)
    4680:	88001026 	beq	r17,zero,46c4 <__call_exitprocs+0xb0>
    4684:	ddc00017 	ldw	r23,0(sp)
    4688:	88800117 	ldw	r2,4(r17)
    468c:	8c802204 	addi	r18,r17,136
    4690:	143fffc4 	addi	r16,r2,-1
    4694:	80000916 	blt	r16,zero,46bc <__call_exitprocs+0xa8>
    4698:	05bfffc4 	movi	r22,-1
    469c:	a000151e 	bne	r20,zero,46f4 <__call_exitprocs+0xe0>
    46a0:	8409883a 	add	r4,r16,r16
    46a4:	2105883a 	add	r2,r4,r4
    46a8:	1485883a 	add	r2,r2,r18
    46ac:	10c02017 	ldw	r3,128(r2)
    46b0:	a8c01126 	beq	r21,r3,46f8 <__call_exitprocs+0xe4>
    46b4:	843fffc4 	addi	r16,r16,-1
    46b8:	85bff81e 	bne	r16,r22,469c <__call_exitprocs+0x88>
    46bc:	d8800217 	ldw	r2,8(sp)
    46c0:	10003126 	beq	r2,zero,4788 <__call_exitprocs+0x174>
    46c4:	dfc00c17 	ldw	ra,48(sp)
    46c8:	df000b17 	ldw	fp,44(sp)
    46cc:	ddc00a17 	ldw	r23,40(sp)
    46d0:	dd800917 	ldw	r22,36(sp)
    46d4:	dd400817 	ldw	r21,32(sp)
    46d8:	dd000717 	ldw	r20,28(sp)
    46dc:	dcc00617 	ldw	r19,24(sp)
    46e0:	dc800517 	ldw	r18,20(sp)
    46e4:	dc400417 	ldw	r17,16(sp)
    46e8:	dc000317 	ldw	r16,12(sp)
    46ec:	dec00d04 	addi	sp,sp,52
    46f0:	f800283a 	ret
    46f4:	8409883a 	add	r4,r16,r16
    46f8:	88c00117 	ldw	r3,4(r17)
    46fc:	2105883a 	add	r2,r4,r4
    4700:	1445883a 	add	r2,r2,r17
    4704:	18ffffc4 	addi	r3,r3,-1
    4708:	11800217 	ldw	r6,8(r2)
    470c:	1c001526 	beq	r3,r16,4764 <__call_exitprocs+0x150>
    4710:	10000215 	stw	zero,8(r2)
    4714:	303fe726 	beq	r6,zero,46b4 <__call_exitprocs+0xa0>
    4718:	00c00044 	movi	r3,1
    471c:	1c06983a 	sll	r3,r3,r16
    4720:	90804017 	ldw	r2,256(r18)
    4724:	8cc00117 	ldw	r19,4(r17)
    4728:	1884703a 	and	r2,r3,r2
    472c:	10001426 	beq	r2,zero,4780 <__call_exitprocs+0x16c>
    4730:	90804117 	ldw	r2,260(r18)
    4734:	1884703a 	and	r2,r3,r2
    4738:	10000c1e 	bne	r2,zero,476c <__call_exitprocs+0x158>
    473c:	2105883a 	add	r2,r4,r4
    4740:	1485883a 	add	r2,r2,r18
    4744:	11400017 	ldw	r5,0(r2)
    4748:	e009883a 	mov	r4,fp
    474c:	303ee83a 	callr	r6
    4750:	88800117 	ldw	r2,4(r17)
    4754:	98bfc81e 	bne	r19,r2,4678 <__call_exitprocs+0x64>
    4758:	b8800017 	ldw	r2,0(r23)
    475c:	147fd526 	beq	r2,r17,46b4 <__call_exitprocs+0xa0>
    4760:	003fc506 	br	4678 <__call_exitprocs+0x64>
    4764:	8c000115 	stw	r16,4(r17)
    4768:	003fea06 	br	4714 <__call_exitprocs+0x100>
    476c:	2105883a 	add	r2,r4,r4
    4770:	1485883a 	add	r2,r2,r18
    4774:	11000017 	ldw	r4,0(r2)
    4778:	303ee83a 	callr	r6
    477c:	003ff406 	br	4750 <__call_exitprocs+0x13c>
    4780:	303ee83a 	callr	r6
    4784:	003ff206 	br	4750 <__call_exitprocs+0x13c>
    4788:	88800117 	ldw	r2,4(r17)
    478c:	1000081e 	bne	r2,zero,47b0 <__call_exitprocs+0x19c>
    4790:	89000017 	ldw	r4,0(r17)
    4794:	20000726 	beq	r4,zero,47b4 <__call_exitprocs+0x1a0>
    4798:	b9000015 	stw	r4,0(r23)
    479c:	8809883a 	mov	r4,r17
    47a0:	00000000 	call	0 <__reset>
    47a4:	bc400017 	ldw	r17,0(r23)
    47a8:	883fb71e 	bne	r17,zero,4688 <__call_exitprocs+0x74>
    47ac:	003fc506 	br	46c4 <__call_exitprocs+0xb0>
    47b0:	89000017 	ldw	r4,0(r17)
    47b4:	882f883a 	mov	r23,r17
    47b8:	2023883a 	mov	r17,r4
    47bc:	883fb21e 	bne	r17,zero,4688 <__call_exitprocs+0x74>
    47c0:	003fc006 	br	46c4 <__call_exitprocs+0xb0>

000047c4 <_fflush_r>:
    47c4:	defffb04 	addi	sp,sp,-20
    47c8:	dcc00315 	stw	r19,12(sp)
    47cc:	dc800215 	stw	r18,8(sp)
    47d0:	dfc00415 	stw	ra,16(sp)
    47d4:	dc400115 	stw	r17,4(sp)
    47d8:	dc000015 	stw	r16,0(sp)
    47dc:	2027883a 	mov	r19,r4
    47e0:	2825883a 	mov	r18,r5
    47e4:	20000226 	beq	r4,zero,47f0 <_fflush_r+0x2c>
    47e8:	20800e17 	ldw	r2,56(r4)
    47ec:	10005626 	beq	r2,zero,4948 <_fflush_r+0x184>
    47f0:	9100030b 	ldhu	r4,12(r18)
    47f4:	20ffffcc 	andi	r3,r4,65535
    47f8:	18e0001c 	xori	r3,r3,32768
    47fc:	18e00004 	addi	r3,r3,-32768
    4800:	1880020c 	andi	r2,r3,8
    4804:	1000261e 	bne	r2,zero,48a0 <_fflush_r+0xdc>
    4808:	90c00117 	ldw	r3,4(r18)
    480c:	20820014 	ori	r2,r4,2048
    4810:	9080030d 	sth	r2,12(r18)
    4814:	1009883a 	mov	r4,r2
    4818:	00c0400e 	bge	zero,r3,491c <_fflush_r+0x158>
    481c:	92000a17 	ldw	r8,40(r18)
    4820:	40004026 	beq	r8,zero,4924 <_fflush_r+0x160>
    4824:	2084000c 	andi	r2,r4,4096
    4828:	10005326 	beq	r2,zero,4978 <_fflush_r+0x1b4>
    482c:	94001417 	ldw	r16,80(r18)
    4830:	9080030b 	ldhu	r2,12(r18)
    4834:	1080010c 	andi	r2,r2,4
    4838:	1000481e 	bne	r2,zero,495c <_fflush_r+0x198>
    483c:	91400717 	ldw	r5,28(r18)
    4840:	9809883a 	mov	r4,r19
    4844:	800d883a 	mov	r6,r16
    4848:	000f883a 	mov	r7,zero
    484c:	403ee83a 	callr	r8
    4850:	8080261e 	bne	r16,r2,48ec <_fflush_r+0x128>
    4854:	9080030b 	ldhu	r2,12(r18)
    4858:	91000417 	ldw	r4,16(r18)
    485c:	90000115 	stw	zero,4(r18)
    4860:	10bdffcc 	andi	r2,r2,63487
    4864:	10ffffcc 	andi	r3,r2,65535
    4868:	18c4000c 	andi	r3,r3,4096
    486c:	9080030d 	sth	r2,12(r18)
    4870:	91000015 	stw	r4,0(r18)
    4874:	18002b26 	beq	r3,zero,4924 <_fflush_r+0x160>
    4878:	0007883a 	mov	r3,zero
    487c:	1805883a 	mov	r2,r3
    4880:	94001415 	stw	r16,80(r18)
    4884:	dfc00417 	ldw	ra,16(sp)
    4888:	dcc00317 	ldw	r19,12(sp)
    488c:	dc800217 	ldw	r18,8(sp)
    4890:	dc400117 	ldw	r17,4(sp)
    4894:	dc000017 	ldw	r16,0(sp)
    4898:	dec00504 	addi	sp,sp,20
    489c:	f800283a 	ret
    48a0:	94400417 	ldw	r17,16(r18)
    48a4:	88001f26 	beq	r17,zero,4924 <_fflush_r+0x160>
    48a8:	90800017 	ldw	r2,0(r18)
    48ac:	18c000cc 	andi	r3,r3,3
    48b0:	94400015 	stw	r17,0(r18)
    48b4:	1461c83a 	sub	r16,r2,r17
    48b8:	18002526 	beq	r3,zero,4950 <_fflush_r+0x18c>
    48bc:	0005883a 	mov	r2,zero
    48c0:	90800215 	stw	r2,8(r18)
    48c4:	0400170e 	bge	zero,r16,4924 <_fflush_r+0x160>
    48c8:	90c00917 	ldw	r3,36(r18)
    48cc:	91400717 	ldw	r5,28(r18)
    48d0:	880d883a 	mov	r6,r17
    48d4:	800f883a 	mov	r7,r16
    48d8:	9809883a 	mov	r4,r19
    48dc:	183ee83a 	callr	r3
    48e0:	88a3883a 	add	r17,r17,r2
    48e4:	80a1c83a 	sub	r16,r16,r2
    48e8:	00bff616 	blt	zero,r2,48c4 <_fflush_r+0x100>
    48ec:	9080030b 	ldhu	r2,12(r18)
    48f0:	00ffffc4 	movi	r3,-1
    48f4:	10801014 	ori	r2,r2,64
    48f8:	9080030d 	sth	r2,12(r18)
    48fc:	1805883a 	mov	r2,r3
    4900:	dfc00417 	ldw	ra,16(sp)
    4904:	dcc00317 	ldw	r19,12(sp)
    4908:	dc800217 	ldw	r18,8(sp)
    490c:	dc400117 	ldw	r17,4(sp)
    4910:	dc000017 	ldw	r16,0(sp)
    4914:	dec00504 	addi	sp,sp,20
    4918:	f800283a 	ret
    491c:	90800f17 	ldw	r2,60(r18)
    4920:	00bfbe16 	blt	zero,r2,481c <_fflush_r+0x58>
    4924:	0007883a 	mov	r3,zero
    4928:	1805883a 	mov	r2,r3
    492c:	dfc00417 	ldw	ra,16(sp)
    4930:	dcc00317 	ldw	r19,12(sp)
    4934:	dc800217 	ldw	r18,8(sp)
    4938:	dc400117 	ldw	r17,4(sp)
    493c:	dc000017 	ldw	r16,0(sp)
    4940:	dec00504 	addi	sp,sp,20
    4944:	f800283a 	ret
    4948:	0004a5c0 	call	4a5c <__sinit>
    494c:	003fa806 	br	47f0 <_fflush_r+0x2c>
    4950:	90800517 	ldw	r2,20(r18)
    4954:	90800215 	stw	r2,8(r18)
    4958:	003fda06 	br	48c4 <_fflush_r+0x100>
    495c:	90800117 	ldw	r2,4(r18)
    4960:	90c00c17 	ldw	r3,48(r18)
    4964:	80a1c83a 	sub	r16,r16,r2
    4968:	183fb426 	beq	r3,zero,483c <_fflush_r+0x78>
    496c:	90800f17 	ldw	r2,60(r18)
    4970:	80a1c83a 	sub	r16,r16,r2
    4974:	003fb106 	br	483c <_fflush_r+0x78>
    4978:	91400717 	ldw	r5,28(r18)
    497c:	9809883a 	mov	r4,r19
    4980:	000d883a 	mov	r6,zero
    4984:	01c00044 	movi	r7,1
    4988:	403ee83a 	callr	r8
    498c:	1021883a 	mov	r16,r2
    4990:	00bfffc4 	movi	r2,-1
    4994:	80800226 	beq	r16,r2,49a0 <_fflush_r+0x1dc>
    4998:	92000a17 	ldw	r8,40(r18)
    499c:	003fa406 	br	4830 <_fflush_r+0x6c>
    49a0:	98c00017 	ldw	r3,0(r19)
    49a4:	00800744 	movi	r2,29
    49a8:	18bfde26 	beq	r3,r2,4924 <_fflush_r+0x160>
    49ac:	9080030b 	ldhu	r2,12(r18)
    49b0:	8007883a 	mov	r3,r16
    49b4:	10801014 	ori	r2,r2,64
    49b8:	9080030d 	sth	r2,12(r18)
    49bc:	003fcf06 	br	48fc <_fflush_r+0x138>

000049c0 <fflush>:
    49c0:	01400034 	movhi	r5,0
    49c4:	2951f104 	addi	r5,r5,18372
    49c8:	2007883a 	mov	r3,r4
    49cc:	20000526 	beq	r4,zero,49e4 <fflush+0x24>
    49d0:	00800074 	movhi	r2,1
    49d4:	10a23d04 	addi	r2,r2,-30476
    49d8:	11000017 	ldw	r4,0(r2)
    49dc:	180b883a 	mov	r5,r3
    49e0:	00047c41 	jmpi	47c4 <_fflush_r>
    49e4:	00800074 	movhi	r2,1
    49e8:	10a23e04 	addi	r2,r2,-30472
    49ec:	11000017 	ldw	r4,0(r2)
    49f0:	00050f41 	jmpi	50f4 <_fwalk_reent>

000049f4 <std>:
    49f4:	00800034 	movhi	r2,0
    49f8:	1096ee04 	addi	r2,r2,23480
    49fc:	20800b15 	stw	r2,44(r4)
    4a00:	00800034 	movhi	r2,0
    4a04:	10972904 	addi	r2,r2,23716
    4a08:	20800815 	stw	r2,32(r4)
    4a0c:	00c00034 	movhi	r3,0
    4a10:	18d70a04 	addi	r3,r3,23592
    4a14:	00800034 	movhi	r2,0
    4a18:	1096f004 	addi	r2,r2,23488
    4a1c:	2140030d 	sth	r5,12(r4)
    4a20:	2180038d 	sth	r6,14(r4)
    4a24:	20c00915 	stw	r3,36(r4)
    4a28:	20800a15 	stw	r2,40(r4)
    4a2c:	20000015 	stw	zero,0(r4)
    4a30:	20000115 	stw	zero,4(r4)
    4a34:	20000215 	stw	zero,8(r4)
    4a38:	20000415 	stw	zero,16(r4)
    4a3c:	20000515 	stw	zero,20(r4)
    4a40:	20000615 	stw	zero,24(r4)
    4a44:	21000715 	stw	r4,28(r4)
    4a48:	f800283a 	ret

00004a4c <__sfp_lock_acquire>:
    4a4c:	f800283a 	ret

00004a50 <__sfp_lock_release>:
    4a50:	f800283a 	ret

00004a54 <__sinit_lock_acquire>:
    4a54:	f800283a 	ret

00004a58 <__sinit_lock_release>:
    4a58:	f800283a 	ret

00004a5c <__sinit>:
    4a5c:	20800e17 	ldw	r2,56(r4)
    4a60:	defffd04 	addi	sp,sp,-12
    4a64:	dc400115 	stw	r17,4(sp)
    4a68:	dc000015 	stw	r16,0(sp)
    4a6c:	dfc00215 	stw	ra,8(sp)
    4a70:	04400044 	movi	r17,1
    4a74:	01400104 	movi	r5,4
    4a78:	000d883a 	mov	r6,zero
    4a7c:	2021883a 	mov	r16,r4
    4a80:	2200bb04 	addi	r8,r4,748
    4a84:	200f883a 	mov	r7,r4
    4a88:	10000526 	beq	r2,zero,4aa0 <__sinit+0x44>
    4a8c:	dfc00217 	ldw	ra,8(sp)
    4a90:	dc400117 	ldw	r17,4(sp)
    4a94:	dc000017 	ldw	r16,0(sp)
    4a98:	dec00304 	addi	sp,sp,12
    4a9c:	f800283a 	ret
    4aa0:	21000117 	ldw	r4,4(r4)
    4aa4:	00800034 	movhi	r2,0
    4aa8:	1092d004 	addi	r2,r2,19264
    4aac:	00c000c4 	movi	r3,3
    4ab0:	80800f15 	stw	r2,60(r16)
    4ab4:	80c0b915 	stw	r3,740(r16)
    4ab8:	8200ba15 	stw	r8,744(r16)
    4abc:	84400e15 	stw	r17,56(r16)
    4ac0:	8000b815 	stw	zero,736(r16)
    4ac4:	00049f40 	call	49f4 <std>
    4ac8:	81000217 	ldw	r4,8(r16)
    4acc:	880d883a 	mov	r6,r17
    4ad0:	800f883a 	mov	r7,r16
    4ad4:	01400284 	movi	r5,10
    4ad8:	00049f40 	call	49f4 <std>
    4adc:	81000317 	ldw	r4,12(r16)
    4ae0:	800f883a 	mov	r7,r16
    4ae4:	01400484 	movi	r5,18
    4ae8:	01800084 	movi	r6,2
    4aec:	dfc00217 	ldw	ra,8(sp)
    4af0:	dc400117 	ldw	r17,4(sp)
    4af4:	dc000017 	ldw	r16,0(sp)
    4af8:	dec00304 	addi	sp,sp,12
    4afc:	00049f41 	jmpi	49f4 <std>

00004b00 <__fp_lock>:
    4b00:	0005883a 	mov	r2,zero
    4b04:	f800283a 	ret

00004b08 <__fp_unlock>:
    4b08:	0005883a 	mov	r2,zero
    4b0c:	f800283a 	ret

00004b10 <__fp_unlock_all>:
    4b10:	00800074 	movhi	r2,1
    4b14:	10a23d04 	addi	r2,r2,-30476
    4b18:	11000017 	ldw	r4,0(r2)
    4b1c:	01400034 	movhi	r5,0
    4b20:	2952c204 	addi	r5,r5,19208
    4b24:	00051bc1 	jmpi	51bc <_fwalk>

00004b28 <__fp_lock_all>:
    4b28:	00800074 	movhi	r2,1
    4b2c:	10a23d04 	addi	r2,r2,-30476
    4b30:	11000017 	ldw	r4,0(r2)
    4b34:	01400034 	movhi	r5,0
    4b38:	2952c004 	addi	r5,r5,19200
    4b3c:	00051bc1 	jmpi	51bc <_fwalk>

00004b40 <_cleanup_r>:
    4b40:	01400034 	movhi	r5,0
    4b44:	2957bf04 	addi	r5,r5,24316
    4b48:	00051bc1 	jmpi	51bc <_fwalk>

00004b4c <_cleanup>:
    4b4c:	00800074 	movhi	r2,1
    4b50:	10a23e04 	addi	r2,r2,-30472
    4b54:	11000017 	ldw	r4,0(r2)
    4b58:	0004b401 	jmpi	4b40 <_cleanup_r>

00004b5c <__sfmoreglue>:
    4b5c:	defffc04 	addi	sp,sp,-16
    4b60:	dc400115 	stw	r17,4(sp)
    4b64:	2c401724 	muli	r17,r5,92
    4b68:	dc800215 	stw	r18,8(sp)
    4b6c:	2825883a 	mov	r18,r5
    4b70:	89400304 	addi	r5,r17,12
    4b74:	dc000015 	stw	r16,0(sp)
    4b78:	dfc00315 	stw	ra,12(sp)
    4b7c:	00054080 	call	5408 <_malloc_r>
    4b80:	0021883a 	mov	r16,zero
    4b84:	880d883a 	mov	r6,r17
    4b88:	000b883a 	mov	r5,zero
    4b8c:	10000626 	beq	r2,zero,4ba8 <__sfmoreglue+0x4c>
    4b90:	11000304 	addi	r4,r2,12
    4b94:	14800115 	stw	r18,4(r2)
    4b98:	10000015 	stw	zero,0(r2)
    4b9c:	11000215 	stw	r4,8(r2)
    4ba0:	1021883a 	mov	r16,r2
    4ba4:	00003080 	call	308 <memset>
    4ba8:	8005883a 	mov	r2,r16
    4bac:	dfc00317 	ldw	ra,12(sp)
    4bb0:	dc800217 	ldw	r18,8(sp)
    4bb4:	dc400117 	ldw	r17,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00404 	addi	sp,sp,16
    4bc0:	f800283a 	ret

00004bc4 <__sfp>:
    4bc4:	defffd04 	addi	sp,sp,-12
    4bc8:	00800074 	movhi	r2,1
    4bcc:	10a23e04 	addi	r2,r2,-30472
    4bd0:	dc000015 	stw	r16,0(sp)
    4bd4:	14000017 	ldw	r16,0(r2)
    4bd8:	dc400115 	stw	r17,4(sp)
    4bdc:	dfc00215 	stw	ra,8(sp)
    4be0:	80800e17 	ldw	r2,56(r16)
    4be4:	2023883a 	mov	r17,r4
    4be8:	10002626 	beq	r2,zero,4c84 <__sfp+0xc0>
    4bec:	8400b804 	addi	r16,r16,736
    4bf0:	80800117 	ldw	r2,4(r16)
    4bf4:	81000217 	ldw	r4,8(r16)
    4bf8:	10ffffc4 	addi	r3,r2,-1
    4bfc:	18000916 	blt	r3,zero,4c24 <__sfp+0x60>
    4c00:	2080030f 	ldh	r2,12(r4)
    4c04:	10000b26 	beq	r2,zero,4c34 <__sfp+0x70>
    4c08:	017fffc4 	movi	r5,-1
    4c0c:	00000206 	br	4c18 <__sfp+0x54>
    4c10:	2080030f 	ldh	r2,12(r4)
    4c14:	10000726 	beq	r2,zero,4c34 <__sfp+0x70>
    4c18:	18ffffc4 	addi	r3,r3,-1
    4c1c:	21001704 	addi	r4,r4,92
    4c20:	197ffb1e 	bne	r3,r5,4c10 <__sfp+0x4c>
    4c24:	80800017 	ldw	r2,0(r16)
    4c28:	10001926 	beq	r2,zero,4c90 <__sfp+0xcc>
    4c2c:	1021883a 	mov	r16,r2
    4c30:	003fef06 	br	4bf0 <__sfp+0x2c>
    4c34:	00bfffc4 	movi	r2,-1
    4c38:	00c00044 	movi	r3,1
    4c3c:	2080038d 	sth	r2,14(r4)
    4c40:	20c0030d 	sth	r3,12(r4)
    4c44:	20000015 	stw	zero,0(r4)
    4c48:	20000215 	stw	zero,8(r4)
    4c4c:	20000115 	stw	zero,4(r4)
    4c50:	20000415 	stw	zero,16(r4)
    4c54:	20000515 	stw	zero,20(r4)
    4c58:	20000615 	stw	zero,24(r4)
    4c5c:	20000c15 	stw	zero,48(r4)
    4c60:	20000d15 	stw	zero,52(r4)
    4c64:	20001115 	stw	zero,68(r4)
    4c68:	20001215 	stw	zero,72(r4)
    4c6c:	2005883a 	mov	r2,r4
    4c70:	dfc00217 	ldw	ra,8(sp)
    4c74:	dc400117 	ldw	r17,4(sp)
    4c78:	dc000017 	ldw	r16,0(sp)
    4c7c:	dec00304 	addi	sp,sp,12
    4c80:	f800283a 	ret
    4c84:	8009883a 	mov	r4,r16
    4c88:	0004a5c0 	call	4a5c <__sinit>
    4c8c:	003fd706 	br	4bec <__sfp+0x28>
    4c90:	8809883a 	mov	r4,r17
    4c94:	01400104 	movi	r5,4
    4c98:	0004b5c0 	call	4b5c <__sfmoreglue>
    4c9c:	80800015 	stw	r2,0(r16)
    4ca0:	103fe21e 	bne	r2,zero,4c2c <__sfp+0x68>
    4ca4:	00800304 	movi	r2,12
    4ca8:	0009883a 	mov	r4,zero
    4cac:	88800015 	stw	r2,0(r17)
    4cb0:	003fee06 	br	4c6c <__sfp+0xa8>

00004cb4 <_malloc_trim_r>:
    4cb4:	defffb04 	addi	sp,sp,-20
    4cb8:	dcc00315 	stw	r19,12(sp)
    4cbc:	04c00074 	movhi	r19,1
    4cc0:	9ce13204 	addi	r19,r19,-31544
    4cc4:	dc800215 	stw	r18,8(sp)
    4cc8:	dc400115 	stw	r17,4(sp)
    4ccc:	dc000015 	stw	r16,0(sp)
    4cd0:	2823883a 	mov	r17,r5
    4cd4:	2025883a 	mov	r18,r4
    4cd8:	dfc00415 	stw	ra,16(sp)
    4cdc:	00064e80 	call	64e8 <__malloc_lock>
    4ce0:	98800217 	ldw	r2,8(r19)
    4ce4:	9009883a 	mov	r4,r18
    4ce8:	000b883a 	mov	r5,zero
    4cec:	10c00117 	ldw	r3,4(r2)
    4cf0:	00bfff04 	movi	r2,-4
    4cf4:	18a0703a 	and	r16,r3,r2
    4cf8:	8463c83a 	sub	r17,r16,r17
    4cfc:	8c43fbc4 	addi	r17,r17,4079
    4d00:	8822d33a 	srli	r17,r17,12
    4d04:	0083ffc4 	movi	r2,4095
    4d08:	8c7fffc4 	addi	r17,r17,-1
    4d0c:	8822933a 	slli	r17,r17,12
    4d10:	1440060e 	bge	r2,r17,4d2c <_malloc_trim_r+0x78>
    4d14:	0005b480 	call	5b48 <_sbrk_r>
    4d18:	98c00217 	ldw	r3,8(r19)
    4d1c:	9009883a 	mov	r4,r18
    4d20:	044bc83a 	sub	r5,zero,r17
    4d24:	80c7883a 	add	r3,r16,r3
    4d28:	10c00926 	beq	r2,r3,4d50 <_malloc_trim_r+0x9c>
    4d2c:	00065080 	call	6508 <__malloc_unlock>
    4d30:	0005883a 	mov	r2,zero
    4d34:	dfc00417 	ldw	ra,16(sp)
    4d38:	dcc00317 	ldw	r19,12(sp)
    4d3c:	dc800217 	ldw	r18,8(sp)
    4d40:	dc400117 	ldw	r17,4(sp)
    4d44:	dc000017 	ldw	r16,0(sp)
    4d48:	dec00504 	addi	sp,sp,20
    4d4c:	f800283a 	ret
    4d50:	9009883a 	mov	r4,r18
    4d54:	0005b480 	call	5b48 <_sbrk_r>
    4d58:	844dc83a 	sub	r6,r16,r17
    4d5c:	00ffffc4 	movi	r3,-1
    4d60:	9009883a 	mov	r4,r18
    4d64:	000b883a 	mov	r5,zero
    4d68:	01c00074 	movhi	r7,1
    4d6c:	39e9bf04 	addi	r7,r7,-22788
    4d70:	31800054 	ori	r6,r6,1
    4d74:	10c00926 	beq	r2,r3,4d9c <_malloc_trim_r+0xe8>
    4d78:	38800017 	ldw	r2,0(r7)
    4d7c:	98c00217 	ldw	r3,8(r19)
    4d80:	9009883a 	mov	r4,r18
    4d84:	1445c83a 	sub	r2,r2,r17
    4d88:	38800015 	stw	r2,0(r7)
    4d8c:	19800115 	stw	r6,4(r3)
    4d90:	00065080 	call	6508 <__malloc_unlock>
    4d94:	00800044 	movi	r2,1
    4d98:	003fe606 	br	4d34 <_malloc_trim_r+0x80>
    4d9c:	0005b480 	call	5b48 <_sbrk_r>
    4da0:	99800217 	ldw	r6,8(r19)
    4da4:	100f883a 	mov	r7,r2
    4da8:	9009883a 	mov	r4,r18
    4dac:	1187c83a 	sub	r3,r2,r6
    4db0:	008003c4 	movi	r2,15
    4db4:	19400054 	ori	r5,r3,1
    4db8:	10ffdc0e 	bge	r2,r3,4d2c <_malloc_trim_r+0x78>
    4dbc:	00800074 	movhi	r2,1
    4dc0:	10a24004 	addi	r2,r2,-30464
    4dc4:	10c00017 	ldw	r3,0(r2)
    4dc8:	00800074 	movhi	r2,1
    4dcc:	10a9bf04 	addi	r2,r2,-22788
    4dd0:	31400115 	stw	r5,4(r6)
    4dd4:	38c7c83a 	sub	r3,r7,r3
    4dd8:	10c00015 	stw	r3,0(r2)
    4ddc:	003fd306 	br	4d2c <_malloc_trim_r+0x78>

00004de0 <_free_r>:
    4de0:	defffd04 	addi	sp,sp,-12
    4de4:	dc400115 	stw	r17,4(sp)
    4de8:	dc000015 	stw	r16,0(sp)
    4dec:	dfc00215 	stw	ra,8(sp)
    4df0:	2821883a 	mov	r16,r5
    4df4:	2023883a 	mov	r17,r4
    4df8:	28005a26 	beq	r5,zero,4f64 <_free_r+0x184>
    4dfc:	00064e80 	call	64e8 <__malloc_lock>
    4e00:	823ffe04 	addi	r8,r16,-8
    4e04:	41400117 	ldw	r5,4(r8)
    4e08:	00bfff84 	movi	r2,-2
    4e0c:	02800074 	movhi	r10,1
    4e10:	52a13204 	addi	r10,r10,-31544
    4e14:	288e703a 	and	r7,r5,r2
    4e18:	41cd883a 	add	r6,r8,r7
    4e1c:	30c00117 	ldw	r3,4(r6)
    4e20:	51000217 	ldw	r4,8(r10)
    4e24:	00bfff04 	movi	r2,-4
    4e28:	1892703a 	and	r9,r3,r2
    4e2c:	5017883a 	mov	r11,r10
    4e30:	31006726 	beq	r6,r4,4fd0 <_free_r+0x1f0>
    4e34:	2880004c 	andi	r2,r5,1
    4e38:	1005003a 	cmpeq	r2,r2,zero
    4e3c:	32400115 	stw	r9,4(r6)
    4e40:	10001a1e 	bne	r2,zero,4eac <_free_r+0xcc>
    4e44:	000b883a 	mov	r5,zero
    4e48:	3247883a 	add	r3,r6,r9
    4e4c:	18800117 	ldw	r2,4(r3)
    4e50:	1080004c 	andi	r2,r2,1
    4e54:	1000231e 	bne	r2,zero,4ee4 <_free_r+0x104>
    4e58:	280ac03a 	cmpne	r5,r5,zero
    4e5c:	3a4f883a 	add	r7,r7,r9
    4e60:	2800451e 	bne	r5,zero,4f78 <_free_r+0x198>
    4e64:	31000217 	ldw	r4,8(r6)
    4e68:	00800074 	movhi	r2,1
    4e6c:	10a13404 	addi	r2,r2,-31536
    4e70:	20807b26 	beq	r4,r2,5060 <_free_r+0x280>
    4e74:	30800317 	ldw	r2,12(r6)
    4e78:	3a07883a 	add	r3,r7,r8
    4e7c:	19c00015 	stw	r7,0(r3)
    4e80:	11000215 	stw	r4,8(r2)
    4e84:	20800315 	stw	r2,12(r4)
    4e88:	38800054 	ori	r2,r7,1
    4e8c:	40800115 	stw	r2,4(r8)
    4e90:	28001a26 	beq	r5,zero,4efc <_free_r+0x11c>
    4e94:	8809883a 	mov	r4,r17
    4e98:	dfc00217 	ldw	ra,8(sp)
    4e9c:	dc400117 	ldw	r17,4(sp)
    4ea0:	dc000017 	ldw	r16,0(sp)
    4ea4:	dec00304 	addi	sp,sp,12
    4ea8:	00065081 	jmpi	6508 <__malloc_unlock>
    4eac:	80bffe17 	ldw	r2,-8(r16)
    4eb0:	50c00204 	addi	r3,r10,8
    4eb4:	4091c83a 	sub	r8,r8,r2
    4eb8:	41000217 	ldw	r4,8(r8)
    4ebc:	388f883a 	add	r7,r7,r2
    4ec0:	20c06126 	beq	r4,r3,5048 <_free_r+0x268>
    4ec4:	40800317 	ldw	r2,12(r8)
    4ec8:	3247883a 	add	r3,r6,r9
    4ecc:	000b883a 	mov	r5,zero
    4ed0:	11000215 	stw	r4,8(r2)
    4ed4:	20800315 	stw	r2,12(r4)
    4ed8:	18800117 	ldw	r2,4(r3)
    4edc:	1080004c 	andi	r2,r2,1
    4ee0:	103fdd26 	beq	r2,zero,4e58 <_free_r+0x78>
    4ee4:	38800054 	ori	r2,r7,1
    4ee8:	3a07883a 	add	r3,r7,r8
    4eec:	280ac03a 	cmpne	r5,r5,zero
    4ef0:	40800115 	stw	r2,4(r8)
    4ef4:	19c00015 	stw	r7,0(r3)
    4ef8:	283fe61e 	bne	r5,zero,4e94 <_free_r+0xb4>
    4efc:	00807fc4 	movi	r2,511
    4f00:	11c01f2e 	bgeu	r2,r7,4f80 <_free_r+0x1a0>
    4f04:	3806d27a 	srli	r3,r7,9
    4f08:	1800481e 	bne	r3,zero,502c <_free_r+0x24c>
    4f0c:	3804d0fa 	srli	r2,r7,3
    4f10:	100690fa 	slli	r3,r2,3
    4f14:	1acd883a 	add	r6,r3,r11
    4f18:	31400217 	ldw	r5,8(r6)
    4f1c:	31405926 	beq	r6,r5,5084 <_free_r+0x2a4>
    4f20:	28800117 	ldw	r2,4(r5)
    4f24:	00ffff04 	movi	r3,-4
    4f28:	10c4703a 	and	r2,r2,r3
    4f2c:	3880022e 	bgeu	r7,r2,4f38 <_free_r+0x158>
    4f30:	29400217 	ldw	r5,8(r5)
    4f34:	317ffa1e 	bne	r6,r5,4f20 <_free_r+0x140>
    4f38:	29800317 	ldw	r6,12(r5)
    4f3c:	41800315 	stw	r6,12(r8)
    4f40:	41400215 	stw	r5,8(r8)
    4f44:	8809883a 	mov	r4,r17
    4f48:	2a000315 	stw	r8,12(r5)
    4f4c:	32000215 	stw	r8,8(r6)
    4f50:	dfc00217 	ldw	ra,8(sp)
    4f54:	dc400117 	ldw	r17,4(sp)
    4f58:	dc000017 	ldw	r16,0(sp)
    4f5c:	dec00304 	addi	sp,sp,12
    4f60:	00065081 	jmpi	6508 <__malloc_unlock>
    4f64:	dfc00217 	ldw	ra,8(sp)
    4f68:	dc400117 	ldw	r17,4(sp)
    4f6c:	dc000017 	ldw	r16,0(sp)
    4f70:	dec00304 	addi	sp,sp,12
    4f74:	f800283a 	ret
    4f78:	31000217 	ldw	r4,8(r6)
    4f7c:	003fbd06 	br	4e74 <_free_r+0x94>
    4f80:	3806d0fa 	srli	r3,r7,3
    4f84:	00800044 	movi	r2,1
    4f88:	51400117 	ldw	r5,4(r10)
    4f8c:	180890fa 	slli	r4,r3,3
    4f90:	1807d0ba 	srai	r3,r3,2
    4f94:	22c9883a 	add	r4,r4,r11
    4f98:	21800217 	ldw	r6,8(r4)
    4f9c:	10c4983a 	sll	r2,r2,r3
    4fa0:	41000315 	stw	r4,12(r8)
    4fa4:	41800215 	stw	r6,8(r8)
    4fa8:	288ab03a 	or	r5,r5,r2
    4fac:	22000215 	stw	r8,8(r4)
    4fb0:	8809883a 	mov	r4,r17
    4fb4:	51400115 	stw	r5,4(r10)
    4fb8:	32000315 	stw	r8,12(r6)
    4fbc:	dfc00217 	ldw	ra,8(sp)
    4fc0:	dc400117 	ldw	r17,4(sp)
    4fc4:	dc000017 	ldw	r16,0(sp)
    4fc8:	dec00304 	addi	sp,sp,12
    4fcc:	00065081 	jmpi	6508 <__malloc_unlock>
    4fd0:	2880004c 	andi	r2,r5,1
    4fd4:	3a4d883a 	add	r6,r7,r9
    4fd8:	1000071e 	bne	r2,zero,4ff8 <_free_r+0x218>
    4fdc:	80bffe17 	ldw	r2,-8(r16)
    4fe0:	4091c83a 	sub	r8,r8,r2
    4fe4:	41000317 	ldw	r4,12(r8)
    4fe8:	40c00217 	ldw	r3,8(r8)
    4fec:	308d883a 	add	r6,r6,r2
    4ff0:	20c00215 	stw	r3,8(r4)
    4ff4:	19000315 	stw	r4,12(r3)
    4ff8:	00800074 	movhi	r2,1
    4ffc:	10a23f04 	addi	r2,r2,-30468
    5000:	11000017 	ldw	r4,0(r2)
    5004:	30c00054 	ori	r3,r6,1
    5008:	52000215 	stw	r8,8(r10)
    500c:	40c00115 	stw	r3,4(r8)
    5010:	313fa036 	bltu	r6,r4,4e94 <_free_r+0xb4>
    5014:	00800074 	movhi	r2,1
    5018:	10a9bc04 	addi	r2,r2,-22800
    501c:	11400017 	ldw	r5,0(r2)
    5020:	8809883a 	mov	r4,r17
    5024:	0004cb40 	call	4cb4 <_malloc_trim_r>
    5028:	003f9a06 	br	4e94 <_free_r+0xb4>
    502c:	00800104 	movi	r2,4
    5030:	10c0072e 	bgeu	r2,r3,5050 <_free_r+0x270>
    5034:	00800504 	movi	r2,20
    5038:	10c01936 	bltu	r2,r3,50a0 <_free_r+0x2c0>
    503c:	188016c4 	addi	r2,r3,91
    5040:	100690fa 	slli	r3,r2,3
    5044:	003fb306 	br	4f14 <_free_r+0x134>
    5048:	01400044 	movi	r5,1
    504c:	003f7e06 	br	4e48 <_free_r+0x68>
    5050:	3804d1ba 	srli	r2,r7,6
    5054:	10800e04 	addi	r2,r2,56
    5058:	100690fa 	slli	r3,r2,3
    505c:	003fad06 	br	4f14 <_free_r+0x134>
    5060:	22000315 	stw	r8,12(r4)
    5064:	22000215 	stw	r8,8(r4)
    5068:	3a05883a 	add	r2,r7,r8
    506c:	38c00054 	ori	r3,r7,1
    5070:	11c00015 	stw	r7,0(r2)
    5074:	41000215 	stw	r4,8(r8)
    5078:	40c00115 	stw	r3,4(r8)
    507c:	41000315 	stw	r4,12(r8)
    5080:	003f8406 	br	4e94 <_free_r+0xb4>
    5084:	1005d0ba 	srai	r2,r2,2
    5088:	00c00044 	movi	r3,1
    508c:	51000117 	ldw	r4,4(r10)
    5090:	1886983a 	sll	r3,r3,r2
    5094:	20c8b03a 	or	r4,r4,r3
    5098:	51000115 	stw	r4,4(r10)
    509c:	003fa706 	br	4f3c <_free_r+0x15c>
    50a0:	00801504 	movi	r2,84
    50a4:	10c00436 	bltu	r2,r3,50b8 <_free_r+0x2d8>
    50a8:	3804d33a 	srli	r2,r7,12
    50ac:	10801b84 	addi	r2,r2,110
    50b0:	100690fa 	slli	r3,r2,3
    50b4:	003f9706 	br	4f14 <_free_r+0x134>
    50b8:	00805504 	movi	r2,340
    50bc:	10c00436 	bltu	r2,r3,50d0 <_free_r+0x2f0>
    50c0:	3804d3fa 	srli	r2,r7,15
    50c4:	10801dc4 	addi	r2,r2,119
    50c8:	100690fa 	slli	r3,r2,3
    50cc:	003f9106 	br	4f14 <_free_r+0x134>
    50d0:	00815504 	movi	r2,1364
    50d4:	10c0032e 	bgeu	r2,r3,50e4 <_free_r+0x304>
    50d8:	00801f84 	movi	r2,126
    50dc:	00c0fc04 	movi	r3,1008
    50e0:	003f8c06 	br	4f14 <_free_r+0x134>
    50e4:	3804d4ba 	srli	r2,r7,18
    50e8:	10801f04 	addi	r2,r2,124
    50ec:	100690fa 	slli	r3,r2,3
    50f0:	003f8806 	br	4f14 <_free_r+0x134>

000050f4 <_fwalk_reent>:
    50f4:	defff704 	addi	sp,sp,-36
    50f8:	dcc00315 	stw	r19,12(sp)
    50fc:	24c0b804 	addi	r19,r4,736
    5100:	dd800615 	stw	r22,24(sp)
    5104:	dd400515 	stw	r21,20(sp)
    5108:	dfc00815 	stw	ra,32(sp)
    510c:	ddc00715 	stw	r23,28(sp)
    5110:	dd000415 	stw	r20,16(sp)
    5114:	dc800215 	stw	r18,8(sp)
    5118:	dc400115 	stw	r17,4(sp)
    511c:	dc000015 	stw	r16,0(sp)
    5120:	202b883a 	mov	r21,r4
    5124:	282d883a 	mov	r22,r5
    5128:	0004a4c0 	call	4a4c <__sfp_lock_acquire>
    512c:	98002126 	beq	r19,zero,51b4 <_fwalk_reent+0xc0>
    5130:	002f883a 	mov	r23,zero
    5134:	9c800117 	ldw	r18,4(r19)
    5138:	9c000217 	ldw	r16,8(r19)
    513c:	90bfffc4 	addi	r2,r18,-1
    5140:	10000d16 	blt	r2,zero,5178 <_fwalk_reent+0x84>
    5144:	0023883a 	mov	r17,zero
    5148:	053fffc4 	movi	r20,-1
    514c:	8080030f 	ldh	r2,12(r16)
    5150:	8c400044 	addi	r17,r17,1
    5154:	10000626 	beq	r2,zero,5170 <_fwalk_reent+0x7c>
    5158:	8080038f 	ldh	r2,14(r16)
    515c:	800b883a 	mov	r5,r16
    5160:	a809883a 	mov	r4,r21
    5164:	15000226 	beq	r2,r20,5170 <_fwalk_reent+0x7c>
    5168:	b03ee83a 	callr	r22
    516c:	b8aeb03a 	or	r23,r23,r2
    5170:	84001704 	addi	r16,r16,92
    5174:	947ff51e 	bne	r18,r17,514c <_fwalk_reent+0x58>
    5178:	9cc00017 	ldw	r19,0(r19)
    517c:	983fed1e 	bne	r19,zero,5134 <_fwalk_reent+0x40>
    5180:	0004a500 	call	4a50 <__sfp_lock_release>
    5184:	b805883a 	mov	r2,r23
    5188:	dfc00817 	ldw	ra,32(sp)
    518c:	ddc00717 	ldw	r23,28(sp)
    5190:	dd800617 	ldw	r22,24(sp)
    5194:	dd400517 	ldw	r21,20(sp)
    5198:	dd000417 	ldw	r20,16(sp)
    519c:	dcc00317 	ldw	r19,12(sp)
    51a0:	dc800217 	ldw	r18,8(sp)
    51a4:	dc400117 	ldw	r17,4(sp)
    51a8:	dc000017 	ldw	r16,0(sp)
    51ac:	dec00904 	addi	sp,sp,36
    51b0:	f800283a 	ret
    51b4:	002f883a 	mov	r23,zero
    51b8:	003ff106 	br	5180 <_fwalk_reent+0x8c>

000051bc <_fwalk>:
    51bc:	defff804 	addi	sp,sp,-32
    51c0:	dcc00315 	stw	r19,12(sp)
    51c4:	24c0b804 	addi	r19,r4,736
    51c8:	dd400515 	stw	r21,20(sp)
    51cc:	dfc00715 	stw	ra,28(sp)
    51d0:	dd800615 	stw	r22,24(sp)
    51d4:	dd000415 	stw	r20,16(sp)
    51d8:	dc800215 	stw	r18,8(sp)
    51dc:	dc400115 	stw	r17,4(sp)
    51e0:	dc000015 	stw	r16,0(sp)
    51e4:	282b883a 	mov	r21,r5
    51e8:	0004a4c0 	call	4a4c <__sfp_lock_acquire>
    51ec:	98001f26 	beq	r19,zero,526c <_fwalk+0xb0>
    51f0:	002d883a 	mov	r22,zero
    51f4:	9c800117 	ldw	r18,4(r19)
    51f8:	9c000217 	ldw	r16,8(r19)
    51fc:	90bfffc4 	addi	r2,r18,-1
    5200:	10000c16 	blt	r2,zero,5234 <_fwalk+0x78>
    5204:	0023883a 	mov	r17,zero
    5208:	053fffc4 	movi	r20,-1
    520c:	8080030f 	ldh	r2,12(r16)
    5210:	8c400044 	addi	r17,r17,1
    5214:	10000526 	beq	r2,zero,522c <_fwalk+0x70>
    5218:	8080038f 	ldh	r2,14(r16)
    521c:	8009883a 	mov	r4,r16
    5220:	15000226 	beq	r2,r20,522c <_fwalk+0x70>
    5224:	a83ee83a 	callr	r21
    5228:	b0acb03a 	or	r22,r22,r2
    522c:	84001704 	addi	r16,r16,92
    5230:	947ff61e 	bne	r18,r17,520c <_fwalk+0x50>
    5234:	9cc00017 	ldw	r19,0(r19)
    5238:	983fee1e 	bne	r19,zero,51f4 <_fwalk+0x38>
    523c:	0004a500 	call	4a50 <__sfp_lock_release>
    5240:	b005883a 	mov	r2,r22
    5244:	dfc00717 	ldw	ra,28(sp)
    5248:	dd800617 	ldw	r22,24(sp)
    524c:	dd400517 	ldw	r21,20(sp)
    5250:	dd000417 	ldw	r20,16(sp)
    5254:	dcc00317 	ldw	r19,12(sp)
    5258:	dc800217 	ldw	r18,8(sp)
    525c:	dc400117 	ldw	r17,4(sp)
    5260:	dc000017 	ldw	r16,0(sp)
    5264:	dec00804 	addi	sp,sp,32
    5268:	f800283a 	ret
    526c:	002d883a 	mov	r22,zero
    5270:	003ff206 	br	523c <_fwalk+0x80>

00005274 <__smakebuf_r>:
    5274:	2880030b 	ldhu	r2,12(r5)
    5278:	deffed04 	addi	sp,sp,-76
    527c:	dc401015 	stw	r17,64(sp)
    5280:	1080008c 	andi	r2,r2,2
    5284:	dc000f15 	stw	r16,60(sp)
    5288:	dfc01215 	stw	ra,72(sp)
    528c:	dc801115 	stw	r18,68(sp)
    5290:	2821883a 	mov	r16,r5
    5294:	2023883a 	mov	r17,r4
    5298:	10000b26 	beq	r2,zero,52c8 <__smakebuf_r+0x54>
    529c:	28c010c4 	addi	r3,r5,67
    52a0:	00800044 	movi	r2,1
    52a4:	28800515 	stw	r2,20(r5)
    52a8:	28c00415 	stw	r3,16(r5)
    52ac:	28c00015 	stw	r3,0(r5)
    52b0:	dfc01217 	ldw	ra,72(sp)
    52b4:	dc801117 	ldw	r18,68(sp)
    52b8:	dc401017 	ldw	r17,64(sp)
    52bc:	dc000f17 	ldw	r16,60(sp)
    52c0:	dec01304 	addi	sp,sp,76
    52c4:	f800283a 	ret
    52c8:	2940038f 	ldh	r5,14(r5)
    52cc:	28002116 	blt	r5,zero,5354 <__smakebuf_r+0xe0>
    52d0:	d80d883a 	mov	r6,sp
    52d4:	0005f100 	call	5f10 <_fstat_r>
    52d8:	10001e16 	blt	r2,zero,5354 <__smakebuf_r+0xe0>
    52dc:	d8800117 	ldw	r2,4(sp)
    52e0:	00e00014 	movui	r3,32768
    52e4:	113c000c 	andi	r4,r2,61440
    52e8:	20c03126 	beq	r4,r3,53b0 <__smakebuf_r+0x13c>
    52ec:	8080030b 	ldhu	r2,12(r16)
    52f0:	00c80004 	movi	r3,8192
    52f4:	10820014 	ori	r2,r2,2048
    52f8:	8080030d 	sth	r2,12(r16)
    52fc:	20c01e26 	beq	r4,r3,5378 <__smakebuf_r+0x104>
    5300:	04810004 	movi	r18,1024
    5304:	8809883a 	mov	r4,r17
    5308:	900b883a 	mov	r5,r18
    530c:	00054080 	call	5408 <_malloc_r>
    5310:	1009883a 	mov	r4,r2
    5314:	10003126 	beq	r2,zero,53dc <__smakebuf_r+0x168>
    5318:	80c0030b 	ldhu	r3,12(r16)
    531c:	00800034 	movhi	r2,0
    5320:	1092d004 	addi	r2,r2,19264
    5324:	88800f15 	stw	r2,60(r17)
    5328:	18c02014 	ori	r3,r3,128
    532c:	84800515 	stw	r18,20(r16)
    5330:	80c0030d 	sth	r3,12(r16)
    5334:	81000415 	stw	r4,16(r16)
    5338:	81000015 	stw	r4,0(r16)
    533c:	dfc01217 	ldw	ra,72(sp)
    5340:	dc801117 	ldw	r18,68(sp)
    5344:	dc401017 	ldw	r17,64(sp)
    5348:	dc000f17 	ldw	r16,60(sp)
    534c:	dec01304 	addi	sp,sp,76
    5350:	f800283a 	ret
    5354:	80c0030b 	ldhu	r3,12(r16)
    5358:	1880200c 	andi	r2,r3,128
    535c:	10000426 	beq	r2,zero,5370 <__smakebuf_r+0xfc>
    5360:	04801004 	movi	r18,64
    5364:	18820014 	ori	r2,r3,2048
    5368:	8080030d 	sth	r2,12(r16)
    536c:	003fe506 	br	5304 <__smakebuf_r+0x90>
    5370:	04810004 	movi	r18,1024
    5374:	003ffb06 	br	5364 <__smakebuf_r+0xf0>
    5378:	8140038f 	ldh	r5,14(r16)
    537c:	8809883a 	mov	r4,r17
    5380:	0005f840 	call	5f84 <_isatty_r>
    5384:	103fde26 	beq	r2,zero,5300 <__smakebuf_r+0x8c>
    5388:	8080030b 	ldhu	r2,12(r16)
    538c:	80c010c4 	addi	r3,r16,67
    5390:	04810004 	movi	r18,1024
    5394:	10800054 	ori	r2,r2,1
    5398:	8080030d 	sth	r2,12(r16)
    539c:	00800044 	movi	r2,1
    53a0:	80c00415 	stw	r3,16(r16)
    53a4:	80800515 	stw	r2,20(r16)
    53a8:	80c00015 	stw	r3,0(r16)
    53ac:	003fd506 	br	5304 <__smakebuf_r+0x90>
    53b0:	80c00a17 	ldw	r3,40(r16)
    53b4:	00800034 	movhi	r2,0
    53b8:	1096f004 	addi	r2,r2,23488
    53bc:	18bfcb1e 	bne	r3,r2,52ec <__smakebuf_r+0x78>
    53c0:	8080030b 	ldhu	r2,12(r16)
    53c4:	00c10004 	movi	r3,1024
    53c8:	1825883a 	mov	r18,r3
    53cc:	10c4b03a 	or	r2,r2,r3
    53d0:	8080030d 	sth	r2,12(r16)
    53d4:	80c01315 	stw	r3,76(r16)
    53d8:	003fca06 	br	5304 <__smakebuf_r+0x90>
    53dc:	8100030b 	ldhu	r4,12(r16)
    53e0:	2080800c 	andi	r2,r4,512
    53e4:	103fb21e 	bne	r2,zero,52b0 <__smakebuf_r+0x3c>
    53e8:	80c010c4 	addi	r3,r16,67
    53ec:	21000094 	ori	r4,r4,2
    53f0:	00800044 	movi	r2,1
    53f4:	80800515 	stw	r2,20(r16)
    53f8:	8100030d 	sth	r4,12(r16)
    53fc:	80c00415 	stw	r3,16(r16)
    5400:	80c00015 	stw	r3,0(r16)
    5404:	003faa06 	br	52b0 <__smakebuf_r+0x3c>

00005408 <_malloc_r>:
    5408:	defff604 	addi	sp,sp,-40
    540c:	28c002c4 	addi	r3,r5,11
    5410:	00800584 	movi	r2,22
    5414:	dc800215 	stw	r18,8(sp)
    5418:	dfc00915 	stw	ra,36(sp)
    541c:	df000815 	stw	fp,32(sp)
    5420:	ddc00715 	stw	r23,28(sp)
    5424:	dd800615 	stw	r22,24(sp)
    5428:	dd400515 	stw	r21,20(sp)
    542c:	dd000415 	stw	r20,16(sp)
    5430:	dcc00315 	stw	r19,12(sp)
    5434:	dc400115 	stw	r17,4(sp)
    5438:	dc000015 	stw	r16,0(sp)
    543c:	2025883a 	mov	r18,r4
    5440:	10c01236 	bltu	r2,r3,548c <_malloc_r+0x84>
    5444:	04400404 	movi	r17,16
    5448:	8940142e 	bgeu	r17,r5,549c <_malloc_r+0x94>
    544c:	00800304 	movi	r2,12
    5450:	0007883a 	mov	r3,zero
    5454:	90800015 	stw	r2,0(r18)
    5458:	1805883a 	mov	r2,r3
    545c:	dfc00917 	ldw	ra,36(sp)
    5460:	df000817 	ldw	fp,32(sp)
    5464:	ddc00717 	ldw	r23,28(sp)
    5468:	dd800617 	ldw	r22,24(sp)
    546c:	dd400517 	ldw	r21,20(sp)
    5470:	dd000417 	ldw	r20,16(sp)
    5474:	dcc00317 	ldw	r19,12(sp)
    5478:	dc800217 	ldw	r18,8(sp)
    547c:	dc400117 	ldw	r17,4(sp)
    5480:	dc000017 	ldw	r16,0(sp)
    5484:	dec00a04 	addi	sp,sp,40
    5488:	f800283a 	ret
    548c:	00bffe04 	movi	r2,-8
    5490:	18a2703a 	and	r17,r3,r2
    5494:	883fed16 	blt	r17,zero,544c <_malloc_r+0x44>
    5498:	897fec36 	bltu	r17,r5,544c <_malloc_r+0x44>
    549c:	9009883a 	mov	r4,r18
    54a0:	00064e80 	call	64e8 <__malloc_lock>
    54a4:	00807dc4 	movi	r2,503
    54a8:	14402b2e 	bgeu	r2,r17,5558 <_malloc_r+0x150>
    54ac:	8806d27a 	srli	r3,r17,9
    54b0:	18003f1e 	bne	r3,zero,55b0 <_malloc_r+0x1a8>
    54b4:	880cd0fa 	srli	r6,r17,3
    54b8:	300490fa 	slli	r2,r6,3
    54bc:	02c00074 	movhi	r11,1
    54c0:	5ae13204 	addi	r11,r11,-31544
    54c4:	12cb883a 	add	r5,r2,r11
    54c8:	2c000317 	ldw	r16,12(r5)
    54cc:	580f883a 	mov	r7,r11
    54d0:	2c00041e 	bne	r5,r16,54e4 <_malloc_r+0xdc>
    54d4:	00000a06 	br	5500 <_malloc_r+0xf8>
    54d8:	1800860e 	bge	r3,zero,56f4 <_malloc_r+0x2ec>
    54dc:	84000317 	ldw	r16,12(r16)
    54e0:	2c000726 	beq	r5,r16,5500 <_malloc_r+0xf8>
    54e4:	80800117 	ldw	r2,4(r16)
    54e8:	00ffff04 	movi	r3,-4
    54ec:	10c8703a 	and	r4,r2,r3
    54f0:	2447c83a 	sub	r3,r4,r17
    54f4:	008003c4 	movi	r2,15
    54f8:	10fff70e 	bge	r2,r3,54d8 <_malloc_r+0xd0>
    54fc:	31bfffc4 	addi	r6,r6,-1
    5500:	32400044 	addi	r9,r6,1
    5504:	02800074 	movhi	r10,1
    5508:	52a13404 	addi	r10,r10,-31536
    550c:	54000217 	ldw	r16,8(r10)
    5510:	8280a026 	beq	r16,r10,5794 <_malloc_r+0x38c>
    5514:	80800117 	ldw	r2,4(r16)
    5518:	00ffff04 	movi	r3,-4
    551c:	10ca703a 	and	r5,r2,r3
    5520:	2c4dc83a 	sub	r6,r5,r17
    5524:	008003c4 	movi	r2,15
    5528:	11808316 	blt	r2,r6,5738 <_malloc_r+0x330>
    552c:	52800315 	stw	r10,12(r10)
    5530:	52800215 	stw	r10,8(r10)
    5534:	30002916 	blt	r6,zero,55dc <_malloc_r+0x1d4>
    5538:	8147883a 	add	r3,r16,r5
    553c:	18800117 	ldw	r2,4(r3)
    5540:	9009883a 	mov	r4,r18
    5544:	10800054 	ori	r2,r2,1
    5548:	18800115 	stw	r2,4(r3)
    554c:	00065080 	call	6508 <__malloc_unlock>
    5550:	80c00204 	addi	r3,r16,8
    5554:	003fc006 	br	5458 <_malloc_r+0x50>
    5558:	02c00074 	movhi	r11,1
    555c:	5ae13204 	addi	r11,r11,-31544
    5560:	8ac5883a 	add	r2,r17,r11
    5564:	14000317 	ldw	r16,12(r2)
    5568:	580f883a 	mov	r7,r11
    556c:	8806d0fa 	srli	r3,r17,3
    5570:	14006c26 	beq	r2,r16,5724 <_malloc_r+0x31c>
    5574:	80c00117 	ldw	r3,4(r16)
    5578:	00bfff04 	movi	r2,-4
    557c:	81800317 	ldw	r6,12(r16)
    5580:	1886703a 	and	r3,r3,r2
    5584:	80c7883a 	add	r3,r16,r3
    5588:	18800117 	ldw	r2,4(r3)
    558c:	81400217 	ldw	r5,8(r16)
    5590:	9009883a 	mov	r4,r18
    5594:	10800054 	ori	r2,r2,1
    5598:	18800115 	stw	r2,4(r3)
    559c:	31400215 	stw	r5,8(r6)
    55a0:	29800315 	stw	r6,12(r5)
    55a4:	00065080 	call	6508 <__malloc_unlock>
    55a8:	80c00204 	addi	r3,r16,8
    55ac:	003faa06 	br	5458 <_malloc_r+0x50>
    55b0:	00800104 	movi	r2,4
    55b4:	10c0052e 	bgeu	r2,r3,55cc <_malloc_r+0x1c4>
    55b8:	00800504 	movi	r2,20
    55bc:	10c07836 	bltu	r2,r3,57a0 <_malloc_r+0x398>
    55c0:	198016c4 	addi	r6,r3,91
    55c4:	300490fa 	slli	r2,r6,3
    55c8:	003fbc06 	br	54bc <_malloc_r+0xb4>
    55cc:	8804d1ba 	srli	r2,r17,6
    55d0:	11800e04 	addi	r6,r2,56
    55d4:	300490fa 	slli	r2,r6,3
    55d8:	003fb806 	br	54bc <_malloc_r+0xb4>
    55dc:	00807fc4 	movi	r2,511
    55e0:	1140bb36 	bltu	r2,r5,58d0 <_malloc_r+0x4c8>
    55e4:	2806d0fa 	srli	r3,r5,3
    55e8:	573ffe04 	addi	fp,r10,-8
    55ec:	00800044 	movi	r2,1
    55f0:	180890fa 	slli	r4,r3,3
    55f4:	1807d0ba 	srai	r3,r3,2
    55f8:	e1c00117 	ldw	r7,4(fp)
    55fc:	5909883a 	add	r4,r11,r4
    5600:	21400217 	ldw	r5,8(r4)
    5604:	10c4983a 	sll	r2,r2,r3
    5608:	81000315 	stw	r4,12(r16)
    560c:	81400215 	stw	r5,8(r16)
    5610:	388eb03a 	or	r7,r7,r2
    5614:	2c000315 	stw	r16,12(r5)
    5618:	24000215 	stw	r16,8(r4)
    561c:	e1c00115 	stw	r7,4(fp)
    5620:	4807883a 	mov	r3,r9
    5624:	4800cd16 	blt	r9,zero,595c <_malloc_r+0x554>
    5628:	1807d0ba 	srai	r3,r3,2
    562c:	00800044 	movi	r2,1
    5630:	10c8983a 	sll	r4,r2,r3
    5634:	39004436 	bltu	r7,r4,5748 <_malloc_r+0x340>
    5638:	21c4703a 	and	r2,r4,r7
    563c:	10000a1e 	bne	r2,zero,5668 <_malloc_r+0x260>
    5640:	2109883a 	add	r4,r4,r4
    5644:	00bfff04 	movi	r2,-4
    5648:	4884703a 	and	r2,r9,r2
    564c:	3906703a 	and	r3,r7,r4
    5650:	12400104 	addi	r9,r2,4
    5654:	1800041e 	bne	r3,zero,5668 <_malloc_r+0x260>
    5658:	2109883a 	add	r4,r4,r4
    565c:	3904703a 	and	r2,r7,r4
    5660:	4a400104 	addi	r9,r9,4
    5664:	103ffc26 	beq	r2,zero,5658 <_malloc_r+0x250>
    5668:	480490fa 	slli	r2,r9,3
    566c:	4819883a 	mov	r12,r9
    5670:	023fff04 	movi	r8,-4
    5674:	589b883a 	add	r13,r11,r2
    5678:	6807883a 	mov	r3,r13
    567c:	014003c4 	movi	r5,15
    5680:	1c000317 	ldw	r16,12(r3)
    5684:	1c00041e 	bne	r3,r16,5698 <_malloc_r+0x290>
    5688:	0000a706 	br	5928 <_malloc_r+0x520>
    568c:	3000ab0e 	bge	r6,zero,593c <_malloc_r+0x534>
    5690:	84000317 	ldw	r16,12(r16)
    5694:	1c00a426 	beq	r3,r16,5928 <_malloc_r+0x520>
    5698:	80800117 	ldw	r2,4(r16)
    569c:	1204703a 	and	r2,r2,r8
    56a0:	144dc83a 	sub	r6,r2,r17
    56a4:	29bff90e 	bge	r5,r6,568c <_malloc_r+0x284>
    56a8:	81000317 	ldw	r4,12(r16)
    56ac:	80c00217 	ldw	r3,8(r16)
    56b0:	89400054 	ori	r5,r17,1
    56b4:	8445883a 	add	r2,r16,r17
    56b8:	20c00215 	stw	r3,8(r4)
    56bc:	19000315 	stw	r4,12(r3)
    56c0:	81400115 	stw	r5,4(r16)
    56c4:	1187883a 	add	r3,r2,r6
    56c8:	31000054 	ori	r4,r6,1
    56cc:	50800315 	stw	r2,12(r10)
    56d0:	50800215 	stw	r2,8(r10)
    56d4:	19800015 	stw	r6,0(r3)
    56d8:	11000115 	stw	r4,4(r2)
    56dc:	12800215 	stw	r10,8(r2)
    56e0:	12800315 	stw	r10,12(r2)
    56e4:	9009883a 	mov	r4,r18
    56e8:	00065080 	call	6508 <__malloc_unlock>
    56ec:	80c00204 	addi	r3,r16,8
    56f0:	003f5906 	br	5458 <_malloc_r+0x50>
    56f4:	8109883a 	add	r4,r16,r4
    56f8:	20800117 	ldw	r2,4(r4)
    56fc:	80c00217 	ldw	r3,8(r16)
    5700:	81400317 	ldw	r5,12(r16)
    5704:	10800054 	ori	r2,r2,1
    5708:	20800115 	stw	r2,4(r4)
    570c:	28c00215 	stw	r3,8(r5)
    5710:	19400315 	stw	r5,12(r3)
    5714:	9009883a 	mov	r4,r18
    5718:	00065080 	call	6508 <__malloc_unlock>
    571c:	80c00204 	addi	r3,r16,8
    5720:	003f4d06 	br	5458 <_malloc_r+0x50>
    5724:	80800204 	addi	r2,r16,8
    5728:	14000317 	ldw	r16,12(r2)
    572c:	143f911e 	bne	r2,r16,5574 <_malloc_r+0x16c>
    5730:	1a400084 	addi	r9,r3,2
    5734:	003f7306 	br	5504 <_malloc_r+0xfc>
    5738:	88c00054 	ori	r3,r17,1
    573c:	8445883a 	add	r2,r16,r17
    5740:	80c00115 	stw	r3,4(r16)
    5744:	003fdf06 	br	56c4 <_malloc_r+0x2bc>
    5748:	e4000217 	ldw	r16,8(fp)
    574c:	00bfff04 	movi	r2,-4
    5750:	80c00117 	ldw	r3,4(r16)
    5754:	802d883a 	mov	r22,r16
    5758:	18aa703a 	and	r21,r3,r2
    575c:	ac401636 	bltu	r21,r17,57b8 <_malloc_r+0x3b0>
    5760:	ac49c83a 	sub	r4,r21,r17
    5764:	008003c4 	movi	r2,15
    5768:	1100130e 	bge	r2,r4,57b8 <_malloc_r+0x3b0>
    576c:	88800054 	ori	r2,r17,1
    5770:	8447883a 	add	r3,r16,r17
    5774:	80800115 	stw	r2,4(r16)
    5778:	20800054 	ori	r2,r4,1
    577c:	18800115 	stw	r2,4(r3)
    5780:	e0c00215 	stw	r3,8(fp)
    5784:	9009883a 	mov	r4,r18
    5788:	00065080 	call	6508 <__malloc_unlock>
    578c:	80c00204 	addi	r3,r16,8
    5790:	003f3106 	br	5458 <_malloc_r+0x50>
    5794:	39c00117 	ldw	r7,4(r7)
    5798:	573ffe04 	addi	fp,r10,-8
    579c:	003fa006 	br	5620 <_malloc_r+0x218>
    57a0:	00801504 	movi	r2,84
    57a4:	10c06736 	bltu	r2,r3,5944 <_malloc_r+0x53c>
    57a8:	8804d33a 	srli	r2,r17,12
    57ac:	11801b84 	addi	r6,r2,110
    57b0:	300490fa 	slli	r2,r6,3
    57b4:	003f4106 	br	54bc <_malloc_r+0xb4>
    57b8:	d0a78817 	ldw	r2,-25056(gp)
    57bc:	d0e00c17 	ldw	r3,-32720(gp)
    57c0:	053fffc4 	movi	r20,-1
    57c4:	10800404 	addi	r2,r2,16
    57c8:	88a7883a 	add	r19,r17,r2
    57cc:	1d000326 	beq	r3,r20,57dc <_malloc_r+0x3d4>
    57d0:	98c3ffc4 	addi	r3,r19,4095
    57d4:	00bc0004 	movi	r2,-4096
    57d8:	18a6703a 	and	r19,r3,r2
    57dc:	9009883a 	mov	r4,r18
    57e0:	980b883a 	mov	r5,r19
    57e4:	0005b480 	call	5b48 <_sbrk_r>
    57e8:	1009883a 	mov	r4,r2
    57ec:	15000426 	beq	r2,r20,5800 <_malloc_r+0x3f8>
    57f0:	854b883a 	add	r5,r16,r21
    57f4:	1029883a 	mov	r20,r2
    57f8:	11405a2e 	bgeu	r2,r5,5964 <_malloc_r+0x55c>
    57fc:	87000c26 	beq	r16,fp,5830 <_malloc_r+0x428>
    5800:	e4000217 	ldw	r16,8(fp)
    5804:	80c00117 	ldw	r3,4(r16)
    5808:	00bfff04 	movi	r2,-4
    580c:	1884703a 	and	r2,r3,r2
    5810:	14400336 	bltu	r2,r17,5820 <_malloc_r+0x418>
    5814:	1449c83a 	sub	r4,r2,r17
    5818:	008003c4 	movi	r2,15
    581c:	113fd316 	blt	r2,r4,576c <_malloc_r+0x364>
    5820:	9009883a 	mov	r4,r18
    5824:	00065080 	call	6508 <__malloc_unlock>
    5828:	0007883a 	mov	r3,zero
    582c:	003f0a06 	br	5458 <_malloc_r+0x50>
    5830:	05c00074 	movhi	r23,1
    5834:	bde9bf04 	addi	r23,r23,-22788
    5838:	b8800017 	ldw	r2,0(r23)
    583c:	988d883a 	add	r6,r19,r2
    5840:	b9800015 	stw	r6,0(r23)
    5844:	d0e00c17 	ldw	r3,-32720(gp)
    5848:	00bfffc4 	movi	r2,-1
    584c:	18808e26 	beq	r3,r2,5a88 <_malloc_r+0x680>
    5850:	2145c83a 	sub	r2,r4,r5
    5854:	3085883a 	add	r2,r6,r2
    5858:	b8800015 	stw	r2,0(r23)
    585c:	20c001cc 	andi	r3,r4,7
    5860:	18005f1e 	bne	r3,zero,59e0 <_malloc_r+0x5d8>
    5864:	000b883a 	mov	r5,zero
    5868:	a4c5883a 	add	r2,r20,r19
    586c:	1083ffcc 	andi	r2,r2,4095
    5870:	00c40004 	movi	r3,4096
    5874:	1887c83a 	sub	r3,r3,r2
    5878:	28e7883a 	add	r19,r5,r3
    587c:	9009883a 	mov	r4,r18
    5880:	980b883a 	mov	r5,r19
    5884:	0005b480 	call	5b48 <_sbrk_r>
    5888:	1007883a 	mov	r3,r2
    588c:	00bfffc4 	movi	r2,-1
    5890:	18807a26 	beq	r3,r2,5a7c <_malloc_r+0x674>
    5894:	1d05c83a 	sub	r2,r3,r20
    5898:	9885883a 	add	r2,r19,r2
    589c:	10c00054 	ori	r3,r2,1
    58a0:	b8800017 	ldw	r2,0(r23)
    58a4:	a021883a 	mov	r16,r20
    58a8:	a0c00115 	stw	r3,4(r20)
    58ac:	9885883a 	add	r2,r19,r2
    58b0:	b8800015 	stw	r2,0(r23)
    58b4:	e5000215 	stw	r20,8(fp)
    58b8:	b7003626 	beq	r22,fp,5994 <_malloc_r+0x58c>
    58bc:	018003c4 	movi	r6,15
    58c0:	35404b36 	bltu	r6,r21,59f0 <_malloc_r+0x5e8>
    58c4:	00800044 	movi	r2,1
    58c8:	a0800115 	stw	r2,4(r20)
    58cc:	003fcd06 	br	5804 <_malloc_r+0x3fc>
    58d0:	2808d27a 	srli	r4,r5,9
    58d4:	2000371e 	bne	r4,zero,59b4 <_malloc_r+0x5ac>
    58d8:	2808d0fa 	srli	r4,r5,3
    58dc:	200690fa 	slli	r3,r4,3
    58e0:	1ad1883a 	add	r8,r3,r11
    58e4:	41800217 	ldw	r6,8(r8)
    58e8:	41805b26 	beq	r8,r6,5a58 <_malloc_r+0x650>
    58ec:	30800117 	ldw	r2,4(r6)
    58f0:	00ffff04 	movi	r3,-4
    58f4:	10c4703a 	and	r2,r2,r3
    58f8:	2880022e 	bgeu	r5,r2,5904 <_malloc_r+0x4fc>
    58fc:	31800217 	ldw	r6,8(r6)
    5900:	41bffa1e 	bne	r8,r6,58ec <_malloc_r+0x4e4>
    5904:	32000317 	ldw	r8,12(r6)
    5908:	39c00117 	ldw	r7,4(r7)
    590c:	82000315 	stw	r8,12(r16)
    5910:	81800215 	stw	r6,8(r16)
    5914:	07000074 	movhi	fp,1
    5918:	e7213204 	addi	fp,fp,-31544
    591c:	34000315 	stw	r16,12(r6)
    5920:	44000215 	stw	r16,8(r8)
    5924:	003f3e06 	br	5620 <_malloc_r+0x218>
    5928:	63000044 	addi	r12,r12,1
    592c:	608000cc 	andi	r2,r12,3
    5930:	10005d26 	beq	r2,zero,5aa8 <_malloc_r+0x6a0>
    5934:	18c00204 	addi	r3,r3,8
    5938:	003f5106 	br	5680 <_malloc_r+0x278>
    593c:	8089883a 	add	r4,r16,r2
    5940:	003f6d06 	br	56f8 <_malloc_r+0x2f0>
    5944:	00805504 	movi	r2,340
    5948:	10c02036 	bltu	r2,r3,59cc <_malloc_r+0x5c4>
    594c:	8804d3fa 	srli	r2,r17,15
    5950:	11801dc4 	addi	r6,r2,119
    5954:	300490fa 	slli	r2,r6,3
    5958:	003ed806 	br	54bc <_malloc_r+0xb4>
    595c:	48c000c4 	addi	r3,r9,3
    5960:	003f3106 	br	5628 <_malloc_r+0x220>
    5964:	05c00074 	movhi	r23,1
    5968:	bde9bf04 	addi	r23,r23,-22788
    596c:	b8800017 	ldw	r2,0(r23)
    5970:	988d883a 	add	r6,r19,r2
    5974:	b9800015 	stw	r6,0(r23)
    5978:	293fb21e 	bne	r5,r4,5844 <_malloc_r+0x43c>
    597c:	2083ffcc 	andi	r2,r4,4095
    5980:	103fb01e 	bne	r2,zero,5844 <_malloc_r+0x43c>
    5984:	e4000217 	ldw	r16,8(fp)
    5988:	9d45883a 	add	r2,r19,r21
    598c:	10800054 	ori	r2,r2,1
    5990:	80800115 	stw	r2,4(r16)
    5994:	b8c00017 	ldw	r3,0(r23)
    5998:	d0a78917 	ldw	r2,-25052(gp)
    599c:	10c0012e 	bgeu	r2,r3,59a4 <_malloc_r+0x59c>
    59a0:	d0e78915 	stw	r3,-25052(gp)
    59a4:	d0a78a17 	ldw	r2,-25048(gp)
    59a8:	10ff962e 	bgeu	r2,r3,5804 <_malloc_r+0x3fc>
    59ac:	d0e78a15 	stw	r3,-25048(gp)
    59b0:	003f9406 	br	5804 <_malloc_r+0x3fc>
    59b4:	00800104 	movi	r2,4
    59b8:	11001e36 	bltu	r2,r4,5a34 <_malloc_r+0x62c>
    59bc:	2804d1ba 	srli	r2,r5,6
    59c0:	11000e04 	addi	r4,r2,56
    59c4:	200690fa 	slli	r3,r4,3
    59c8:	003fc506 	br	58e0 <_malloc_r+0x4d8>
    59cc:	00815504 	movi	r2,1364
    59d0:	10c01d2e 	bgeu	r2,r3,5a48 <_malloc_r+0x640>
    59d4:	01801f84 	movi	r6,126
    59d8:	0080fc04 	movi	r2,1008
    59dc:	003eb706 	br	54bc <_malloc_r+0xb4>
    59e0:	00800204 	movi	r2,8
    59e4:	10cbc83a 	sub	r5,r2,r3
    59e8:	2169883a 	add	r20,r4,r5
    59ec:	003f9e06 	br	5868 <_malloc_r+0x460>
    59f0:	00bffe04 	movi	r2,-8
    59f4:	a93ffd04 	addi	r4,r21,-12
    59f8:	2088703a 	and	r4,r4,r2
    59fc:	b10b883a 	add	r5,r22,r4
    5a00:	00c00144 	movi	r3,5
    5a04:	28c00215 	stw	r3,8(r5)
    5a08:	28c00115 	stw	r3,4(r5)
    5a0c:	b0800117 	ldw	r2,4(r22)
    5a10:	1080004c 	andi	r2,r2,1
    5a14:	2084b03a 	or	r2,r4,r2
    5a18:	b0800115 	stw	r2,4(r22)
    5a1c:	313fdd2e 	bgeu	r6,r4,5994 <_malloc_r+0x58c>
    5a20:	b1400204 	addi	r5,r22,8
    5a24:	9009883a 	mov	r4,r18
    5a28:	0004de00 	call	4de0 <_free_r>
    5a2c:	e4000217 	ldw	r16,8(fp)
    5a30:	003fd806 	br	5994 <_malloc_r+0x58c>
    5a34:	00800504 	movi	r2,20
    5a38:	11001536 	bltu	r2,r4,5a90 <_malloc_r+0x688>
    5a3c:	210016c4 	addi	r4,r4,91
    5a40:	200690fa 	slli	r3,r4,3
    5a44:	003fa606 	br	58e0 <_malloc_r+0x4d8>
    5a48:	8804d4ba 	srli	r2,r17,18
    5a4c:	11801f04 	addi	r6,r2,124
    5a50:	300490fa 	slli	r2,r6,3
    5a54:	003e9906 	br	54bc <_malloc_r+0xb4>
    5a58:	2009d0ba 	srai	r4,r4,2
    5a5c:	01400074 	movhi	r5,1
    5a60:	29613204 	addi	r5,r5,-31544
    5a64:	00c00044 	movi	r3,1
    5a68:	28800117 	ldw	r2,4(r5)
    5a6c:	1906983a 	sll	r3,r3,r4
    5a70:	10c4b03a 	or	r2,r2,r3
    5a74:	28800115 	stw	r2,4(r5)
    5a78:	003fa306 	br	5908 <_malloc_r+0x500>
    5a7c:	0027883a 	mov	r19,zero
    5a80:	00c00044 	movi	r3,1
    5a84:	003f8606 	br	58a0 <_malloc_r+0x498>
    5a88:	d1200c15 	stw	r4,-32720(gp)
    5a8c:	003f7306 	br	585c <_malloc_r+0x454>
    5a90:	00801504 	movi	r2,84
    5a94:	11001936 	bltu	r2,r4,5afc <_malloc_r+0x6f4>
    5a98:	2804d33a 	srli	r2,r5,12
    5a9c:	11001b84 	addi	r4,r2,110
    5aa0:	200690fa 	slli	r3,r4,3
    5aa4:	003f8e06 	br	58e0 <_malloc_r+0x4d8>
    5aa8:	480b883a 	mov	r5,r9
    5aac:	6807883a 	mov	r3,r13
    5ab0:	288000cc 	andi	r2,r5,3
    5ab4:	18fffe04 	addi	r3,r3,-8
    5ab8:	297fffc4 	addi	r5,r5,-1
    5abc:	10001526 	beq	r2,zero,5b14 <_malloc_r+0x70c>
    5ac0:	18800217 	ldw	r2,8(r3)
    5ac4:	10fffa26 	beq	r2,r3,5ab0 <_malloc_r+0x6a8>
    5ac8:	2109883a 	add	r4,r4,r4
    5acc:	393f1e36 	bltu	r7,r4,5748 <_malloc_r+0x340>
    5ad0:	203f1d26 	beq	r4,zero,5748 <_malloc_r+0x340>
    5ad4:	21c4703a 	and	r2,r4,r7
    5ad8:	10000226 	beq	r2,zero,5ae4 <_malloc_r+0x6dc>
    5adc:	6013883a 	mov	r9,r12
    5ae0:	003ee106 	br	5668 <_malloc_r+0x260>
    5ae4:	2109883a 	add	r4,r4,r4
    5ae8:	3904703a 	and	r2,r7,r4
    5aec:	63000104 	addi	r12,r12,4
    5af0:	103ffc26 	beq	r2,zero,5ae4 <_malloc_r+0x6dc>
    5af4:	6013883a 	mov	r9,r12
    5af8:	003edb06 	br	5668 <_malloc_r+0x260>
    5afc:	00805504 	movi	r2,340
    5b00:	11000836 	bltu	r2,r4,5b24 <_malloc_r+0x71c>
    5b04:	2804d3fa 	srli	r2,r5,15
    5b08:	11001dc4 	addi	r4,r2,119
    5b0c:	200690fa 	slli	r3,r4,3
    5b10:	003f7306 	br	58e0 <_malloc_r+0x4d8>
    5b14:	0104303a 	nor	r2,zero,r4
    5b18:	388e703a 	and	r7,r7,r2
    5b1c:	e1c00115 	stw	r7,4(fp)
    5b20:	003fe906 	br	5ac8 <_malloc_r+0x6c0>
    5b24:	00815504 	movi	r2,1364
    5b28:	1100032e 	bgeu	r2,r4,5b38 <_malloc_r+0x730>
    5b2c:	01001f84 	movi	r4,126
    5b30:	00c0fc04 	movi	r3,1008
    5b34:	003f6a06 	br	58e0 <_malloc_r+0x4d8>
    5b38:	2804d4ba 	srli	r2,r5,18
    5b3c:	11001f04 	addi	r4,r2,124
    5b40:	200690fa 	slli	r3,r4,3
    5b44:	003f6606 	br	58e0 <_malloc_r+0x4d8>

00005b48 <_sbrk_r>:
    5b48:	defffd04 	addi	sp,sp,-12
    5b4c:	dc000015 	stw	r16,0(sp)
    5b50:	04000074 	movhi	r16,1
    5b54:	8429bb04 	addi	r16,r16,-22804
    5b58:	dc400115 	stw	r17,4(sp)
    5b5c:	80000015 	stw	zero,0(r16)
    5b60:	2023883a 	mov	r17,r4
    5b64:	2809883a 	mov	r4,r5
    5b68:	dfc00215 	stw	ra,8(sp)
    5b6c:	00066a80 	call	66a8 <sbrk>
    5b70:	1007883a 	mov	r3,r2
    5b74:	00bfffc4 	movi	r2,-1
    5b78:	18800626 	beq	r3,r2,5b94 <_sbrk_r+0x4c>
    5b7c:	1805883a 	mov	r2,r3
    5b80:	dfc00217 	ldw	ra,8(sp)
    5b84:	dc400117 	ldw	r17,4(sp)
    5b88:	dc000017 	ldw	r16,0(sp)
    5b8c:	dec00304 	addi	sp,sp,12
    5b90:	f800283a 	ret
    5b94:	80800017 	ldw	r2,0(r16)
    5b98:	103ff826 	beq	r2,zero,5b7c <_sbrk_r+0x34>
    5b9c:	88800015 	stw	r2,0(r17)
    5ba0:	1805883a 	mov	r2,r3
    5ba4:	dfc00217 	ldw	ra,8(sp)
    5ba8:	dc400117 	ldw	r17,4(sp)
    5bac:	dc000017 	ldw	r16,0(sp)
    5bb0:	dec00304 	addi	sp,sp,12
    5bb4:	f800283a 	ret

00005bb8 <__sclose>:
    5bb8:	2940038f 	ldh	r5,14(r5)
    5bbc:	0005d7c1 	jmpi	5d7c <_close_r>

00005bc0 <__sseek>:
    5bc0:	defffe04 	addi	sp,sp,-8
    5bc4:	dc000015 	stw	r16,0(sp)
    5bc8:	2821883a 	mov	r16,r5
    5bcc:	2940038f 	ldh	r5,14(r5)
    5bd0:	dfc00115 	stw	ra,4(sp)
    5bd4:	0005ff40 	call	5ff4 <_lseek_r>
    5bd8:	1007883a 	mov	r3,r2
    5bdc:	00bfffc4 	movi	r2,-1
    5be0:	18800926 	beq	r3,r2,5c08 <__sseek+0x48>
    5be4:	8080030b 	ldhu	r2,12(r16)
    5be8:	80c01415 	stw	r3,80(r16)
    5bec:	10840014 	ori	r2,r2,4096
    5bf0:	8080030d 	sth	r2,12(r16)
    5bf4:	1805883a 	mov	r2,r3
    5bf8:	dfc00117 	ldw	ra,4(sp)
    5bfc:	dc000017 	ldw	r16,0(sp)
    5c00:	dec00204 	addi	sp,sp,8
    5c04:	f800283a 	ret
    5c08:	8080030b 	ldhu	r2,12(r16)
    5c0c:	10bbffcc 	andi	r2,r2,61439
    5c10:	8080030d 	sth	r2,12(r16)
    5c14:	1805883a 	mov	r2,r3
    5c18:	dfc00117 	ldw	ra,4(sp)
    5c1c:	dc000017 	ldw	r16,0(sp)
    5c20:	dec00204 	addi	sp,sp,8
    5c24:	f800283a 	ret

00005c28 <__swrite>:
    5c28:	2880030b 	ldhu	r2,12(r5)
    5c2c:	defffb04 	addi	sp,sp,-20
    5c30:	dcc00315 	stw	r19,12(sp)
    5c34:	1080400c 	andi	r2,r2,256
    5c38:	dc800215 	stw	r18,8(sp)
    5c3c:	dc400115 	stw	r17,4(sp)
    5c40:	dc000015 	stw	r16,0(sp)
    5c44:	3027883a 	mov	r19,r6
    5c48:	3825883a 	mov	r18,r7
    5c4c:	dfc00415 	stw	ra,16(sp)
    5c50:	2821883a 	mov	r16,r5
    5c54:	000d883a 	mov	r6,zero
    5c58:	01c00084 	movi	r7,2
    5c5c:	2023883a 	mov	r17,r4
    5c60:	10000226 	beq	r2,zero,5c6c <__swrite+0x44>
    5c64:	2940038f 	ldh	r5,14(r5)
    5c68:	0005ff40 	call	5ff4 <_lseek_r>
    5c6c:	8080030b 	ldhu	r2,12(r16)
    5c70:	8140038f 	ldh	r5,14(r16)
    5c74:	8809883a 	mov	r4,r17
    5c78:	10bbffcc 	andi	r2,r2,61439
    5c7c:	980d883a 	mov	r6,r19
    5c80:	900f883a 	mov	r7,r18
    5c84:	8080030d 	sth	r2,12(r16)
    5c88:	dfc00417 	ldw	ra,16(sp)
    5c8c:	dcc00317 	ldw	r19,12(sp)
    5c90:	dc800217 	ldw	r18,8(sp)
    5c94:	dc400117 	ldw	r17,4(sp)
    5c98:	dc000017 	ldw	r16,0(sp)
    5c9c:	dec00504 	addi	sp,sp,20
    5ca0:	0005d041 	jmpi	5d04 <_write_r>

00005ca4 <__sread>:
    5ca4:	defffe04 	addi	sp,sp,-8
    5ca8:	dc000015 	stw	r16,0(sp)
    5cac:	2821883a 	mov	r16,r5
    5cb0:	2940038f 	ldh	r5,14(r5)
    5cb4:	dfc00115 	stw	ra,4(sp)
    5cb8:	000606c0 	call	606c <_read_r>
    5cbc:	1007883a 	mov	r3,r2
    5cc0:	10000816 	blt	r2,zero,5ce4 <__sread+0x40>
    5cc4:	80801417 	ldw	r2,80(r16)
    5cc8:	10c5883a 	add	r2,r2,r3
    5ccc:	80801415 	stw	r2,80(r16)
    5cd0:	1805883a 	mov	r2,r3
    5cd4:	dfc00117 	ldw	ra,4(sp)
    5cd8:	dc000017 	ldw	r16,0(sp)
    5cdc:	dec00204 	addi	sp,sp,8
    5ce0:	f800283a 	ret
    5ce4:	8080030b 	ldhu	r2,12(r16)
    5ce8:	10bbffcc 	andi	r2,r2,61439
    5cec:	8080030d 	sth	r2,12(r16)
    5cf0:	1805883a 	mov	r2,r3
    5cf4:	dfc00117 	ldw	ra,4(sp)
    5cf8:	dc000017 	ldw	r16,0(sp)
    5cfc:	dec00204 	addi	sp,sp,8
    5d00:	f800283a 	ret

00005d04 <_write_r>:
    5d04:	defffd04 	addi	sp,sp,-12
    5d08:	dc000015 	stw	r16,0(sp)
    5d0c:	04000074 	movhi	r16,1
    5d10:	8429bb04 	addi	r16,r16,-22804
    5d14:	dc400115 	stw	r17,4(sp)
    5d18:	80000015 	stw	zero,0(r16)
    5d1c:	2023883a 	mov	r17,r4
    5d20:	2809883a 	mov	r4,r5
    5d24:	300b883a 	mov	r5,r6
    5d28:	380d883a 	mov	r6,r7
    5d2c:	dfc00215 	stw	ra,8(sp)
    5d30:	00067640 	call	6764 <write>
    5d34:	1007883a 	mov	r3,r2
    5d38:	00bfffc4 	movi	r2,-1
    5d3c:	18800626 	beq	r3,r2,5d58 <_write_r+0x54>
    5d40:	1805883a 	mov	r2,r3
    5d44:	dfc00217 	ldw	ra,8(sp)
    5d48:	dc400117 	ldw	r17,4(sp)
    5d4c:	dc000017 	ldw	r16,0(sp)
    5d50:	dec00304 	addi	sp,sp,12
    5d54:	f800283a 	ret
    5d58:	80800017 	ldw	r2,0(r16)
    5d5c:	103ff826 	beq	r2,zero,5d40 <_write_r+0x3c>
    5d60:	88800015 	stw	r2,0(r17)
    5d64:	1805883a 	mov	r2,r3
    5d68:	dfc00217 	ldw	ra,8(sp)
    5d6c:	dc400117 	ldw	r17,4(sp)
    5d70:	dc000017 	ldw	r16,0(sp)
    5d74:	dec00304 	addi	sp,sp,12
    5d78:	f800283a 	ret

00005d7c <_close_r>:
    5d7c:	defffd04 	addi	sp,sp,-12
    5d80:	dc000015 	stw	r16,0(sp)
    5d84:	04000074 	movhi	r16,1
    5d88:	8429bb04 	addi	r16,r16,-22804
    5d8c:	dc400115 	stw	r17,4(sp)
    5d90:	80000015 	stw	zero,0(r16)
    5d94:	2023883a 	mov	r17,r4
    5d98:	2809883a 	mov	r4,r5
    5d9c:	dfc00215 	stw	ra,8(sp)
    5da0:	0002f480 	call	2f48 <close>
    5da4:	1007883a 	mov	r3,r2
    5da8:	00bfffc4 	movi	r2,-1
    5dac:	18800626 	beq	r3,r2,5dc8 <_close_r+0x4c>
    5db0:	1805883a 	mov	r2,r3
    5db4:	dfc00217 	ldw	ra,8(sp)
    5db8:	dc400117 	ldw	r17,4(sp)
    5dbc:	dc000017 	ldw	r16,0(sp)
    5dc0:	dec00304 	addi	sp,sp,12
    5dc4:	f800283a 	ret
    5dc8:	80800017 	ldw	r2,0(r16)
    5dcc:	103ff826 	beq	r2,zero,5db0 <_close_r+0x34>
    5dd0:	88800015 	stw	r2,0(r17)
    5dd4:	1805883a 	mov	r2,r3
    5dd8:	dfc00217 	ldw	ra,8(sp)
    5ddc:	dc400117 	ldw	r17,4(sp)
    5de0:	dc000017 	ldw	r16,0(sp)
    5de4:	dec00304 	addi	sp,sp,12
    5de8:	f800283a 	ret

00005dec <_fclose_r>:
    5dec:	defffc04 	addi	sp,sp,-16
    5df0:	dc400115 	stw	r17,4(sp)
    5df4:	dc000015 	stw	r16,0(sp)
    5df8:	dfc00315 	stw	ra,12(sp)
    5dfc:	dc800215 	stw	r18,8(sp)
    5e00:	2821883a 	mov	r16,r5
    5e04:	2023883a 	mov	r17,r4
    5e08:	28002926 	beq	r5,zero,5eb0 <_fclose_r+0xc4>
    5e0c:	0004a4c0 	call	4a4c <__sfp_lock_acquire>
    5e10:	88000226 	beq	r17,zero,5e1c <_fclose_r+0x30>
    5e14:	88800e17 	ldw	r2,56(r17)
    5e18:	10002d26 	beq	r2,zero,5ed0 <_fclose_r+0xe4>
    5e1c:	8080030f 	ldh	r2,12(r16)
    5e20:	10002226 	beq	r2,zero,5eac <_fclose_r+0xc0>
    5e24:	8809883a 	mov	r4,r17
    5e28:	800b883a 	mov	r5,r16
    5e2c:	00047c40 	call	47c4 <_fflush_r>
    5e30:	1025883a 	mov	r18,r2
    5e34:	80800b17 	ldw	r2,44(r16)
    5e38:	10000426 	beq	r2,zero,5e4c <_fclose_r+0x60>
    5e3c:	81400717 	ldw	r5,28(r16)
    5e40:	8809883a 	mov	r4,r17
    5e44:	103ee83a 	callr	r2
    5e48:	10002a16 	blt	r2,zero,5ef4 <_fclose_r+0x108>
    5e4c:	8080030b 	ldhu	r2,12(r16)
    5e50:	1080200c 	andi	r2,r2,128
    5e54:	1000231e 	bne	r2,zero,5ee4 <_fclose_r+0xf8>
    5e58:	81400c17 	ldw	r5,48(r16)
    5e5c:	28000526 	beq	r5,zero,5e74 <_fclose_r+0x88>
    5e60:	80801004 	addi	r2,r16,64
    5e64:	28800226 	beq	r5,r2,5e70 <_fclose_r+0x84>
    5e68:	8809883a 	mov	r4,r17
    5e6c:	0004de00 	call	4de0 <_free_r>
    5e70:	80000c15 	stw	zero,48(r16)
    5e74:	81401117 	ldw	r5,68(r16)
    5e78:	28000326 	beq	r5,zero,5e88 <_fclose_r+0x9c>
    5e7c:	8809883a 	mov	r4,r17
    5e80:	0004de00 	call	4de0 <_free_r>
    5e84:	80001115 	stw	zero,68(r16)
    5e88:	8000030d 	sth	zero,12(r16)
    5e8c:	0004a500 	call	4a50 <__sfp_lock_release>
    5e90:	9005883a 	mov	r2,r18
    5e94:	dfc00317 	ldw	ra,12(sp)
    5e98:	dc800217 	ldw	r18,8(sp)
    5e9c:	dc400117 	ldw	r17,4(sp)
    5ea0:	dc000017 	ldw	r16,0(sp)
    5ea4:	dec00404 	addi	sp,sp,16
    5ea8:	f800283a 	ret
    5eac:	0004a500 	call	4a50 <__sfp_lock_release>
    5eb0:	0025883a 	mov	r18,zero
    5eb4:	9005883a 	mov	r2,r18
    5eb8:	dfc00317 	ldw	ra,12(sp)
    5ebc:	dc800217 	ldw	r18,8(sp)
    5ec0:	dc400117 	ldw	r17,4(sp)
    5ec4:	dc000017 	ldw	r16,0(sp)
    5ec8:	dec00404 	addi	sp,sp,16
    5ecc:	f800283a 	ret
    5ed0:	8809883a 	mov	r4,r17
    5ed4:	0004a5c0 	call	4a5c <__sinit>
    5ed8:	8080030f 	ldh	r2,12(r16)
    5edc:	103fd11e 	bne	r2,zero,5e24 <_fclose_r+0x38>
    5ee0:	003ff206 	br	5eac <_fclose_r+0xc0>
    5ee4:	81400417 	ldw	r5,16(r16)
    5ee8:	8809883a 	mov	r4,r17
    5eec:	0004de00 	call	4de0 <_free_r>
    5ef0:	003fd906 	br	5e58 <_fclose_r+0x6c>
    5ef4:	04bfffc4 	movi	r18,-1
    5ef8:	003fd406 	br	5e4c <_fclose_r+0x60>

00005efc <fclose>:
    5efc:	00800074 	movhi	r2,1
    5f00:	10a23d04 	addi	r2,r2,-30476
    5f04:	200b883a 	mov	r5,r4
    5f08:	11000017 	ldw	r4,0(r2)
    5f0c:	0005dec1 	jmpi	5dec <_fclose_r>

00005f10 <_fstat_r>:
    5f10:	defffd04 	addi	sp,sp,-12
    5f14:	dc000015 	stw	r16,0(sp)
    5f18:	04000074 	movhi	r16,1
    5f1c:	8429bb04 	addi	r16,r16,-22804
    5f20:	dc400115 	stw	r17,4(sp)
    5f24:	80000015 	stw	zero,0(r16)
    5f28:	2023883a 	mov	r17,r4
    5f2c:	2809883a 	mov	r4,r5
    5f30:	300b883a 	mov	r5,r6
    5f34:	dfc00215 	stw	ra,8(sp)
    5f38:	00061440 	call	6144 <fstat>
    5f3c:	1007883a 	mov	r3,r2
    5f40:	00bfffc4 	movi	r2,-1
    5f44:	18800626 	beq	r3,r2,5f60 <_fstat_r+0x50>
    5f48:	1805883a 	mov	r2,r3
    5f4c:	dfc00217 	ldw	ra,8(sp)
    5f50:	dc400117 	ldw	r17,4(sp)
    5f54:	dc000017 	ldw	r16,0(sp)
    5f58:	dec00304 	addi	sp,sp,12
    5f5c:	f800283a 	ret
    5f60:	80800017 	ldw	r2,0(r16)
    5f64:	103ff826 	beq	r2,zero,5f48 <_fstat_r+0x38>
    5f68:	88800015 	stw	r2,0(r17)
    5f6c:	1805883a 	mov	r2,r3
    5f70:	dfc00217 	ldw	ra,8(sp)
    5f74:	dc400117 	ldw	r17,4(sp)
    5f78:	dc000017 	ldw	r16,0(sp)
    5f7c:	dec00304 	addi	sp,sp,12
    5f80:	f800283a 	ret

00005f84 <_isatty_r>:
    5f84:	defffd04 	addi	sp,sp,-12
    5f88:	dc000015 	stw	r16,0(sp)
    5f8c:	04000074 	movhi	r16,1
    5f90:	8429bb04 	addi	r16,r16,-22804
    5f94:	dc400115 	stw	r17,4(sp)
    5f98:	80000015 	stw	zero,0(r16)
    5f9c:	2023883a 	mov	r17,r4
    5fa0:	2809883a 	mov	r4,r5
    5fa4:	dfc00215 	stw	ra,8(sp)
    5fa8:	00062780 	call	6278 <isatty>
    5fac:	1007883a 	mov	r3,r2
    5fb0:	00bfffc4 	movi	r2,-1
    5fb4:	18800626 	beq	r3,r2,5fd0 <_isatty_r+0x4c>
    5fb8:	1805883a 	mov	r2,r3
    5fbc:	dfc00217 	ldw	ra,8(sp)
    5fc0:	dc400117 	ldw	r17,4(sp)
    5fc4:	dc000017 	ldw	r16,0(sp)
    5fc8:	dec00304 	addi	sp,sp,12
    5fcc:	f800283a 	ret
    5fd0:	80800017 	ldw	r2,0(r16)
    5fd4:	103ff826 	beq	r2,zero,5fb8 <_isatty_r+0x34>
    5fd8:	88800015 	stw	r2,0(r17)
    5fdc:	1805883a 	mov	r2,r3
    5fe0:	dfc00217 	ldw	ra,8(sp)
    5fe4:	dc400117 	ldw	r17,4(sp)
    5fe8:	dc000017 	ldw	r16,0(sp)
    5fec:	dec00304 	addi	sp,sp,12
    5ff0:	f800283a 	ret

00005ff4 <_lseek_r>:
    5ff4:	defffd04 	addi	sp,sp,-12
    5ff8:	dc000015 	stw	r16,0(sp)
    5ffc:	04000074 	movhi	r16,1
    6000:	8429bb04 	addi	r16,r16,-22804
    6004:	dc400115 	stw	r17,4(sp)
    6008:	80000015 	stw	zero,0(r16)
    600c:	2023883a 	mov	r17,r4
    6010:	2809883a 	mov	r4,r5
    6014:	300b883a 	mov	r5,r6
    6018:	380d883a 	mov	r6,r7
    601c:	dfc00215 	stw	ra,8(sp)
    6020:	00063980 	call	6398 <lseek>
    6024:	1007883a 	mov	r3,r2
    6028:	00bfffc4 	movi	r2,-1
    602c:	18800626 	beq	r3,r2,6048 <_lseek_r+0x54>
    6030:	1805883a 	mov	r2,r3
    6034:	dfc00217 	ldw	ra,8(sp)
    6038:	dc400117 	ldw	r17,4(sp)
    603c:	dc000017 	ldw	r16,0(sp)
    6040:	dec00304 	addi	sp,sp,12
    6044:	f800283a 	ret
    6048:	80800017 	ldw	r2,0(r16)
    604c:	103ff826 	beq	r2,zero,6030 <_lseek_r+0x3c>
    6050:	88800015 	stw	r2,0(r17)
    6054:	1805883a 	mov	r2,r3
    6058:	dfc00217 	ldw	ra,8(sp)
    605c:	dc400117 	ldw	r17,4(sp)
    6060:	dc000017 	ldw	r16,0(sp)
    6064:	dec00304 	addi	sp,sp,12
    6068:	f800283a 	ret

0000606c <_read_r>:
    606c:	defffd04 	addi	sp,sp,-12
    6070:	dc000015 	stw	r16,0(sp)
    6074:	04000074 	movhi	r16,1
    6078:	8429bb04 	addi	r16,r16,-22804
    607c:	dc400115 	stw	r17,4(sp)
    6080:	80000015 	stw	zero,0(r16)
    6084:	2023883a 	mov	r17,r4
    6088:	2809883a 	mov	r4,r5
    608c:	300b883a 	mov	r5,r6
    6090:	380d883a 	mov	r6,r7
    6094:	dfc00215 	stw	ra,8(sp)
    6098:	00065280 	call	6528 <read>
    609c:	1007883a 	mov	r3,r2
    60a0:	00bfffc4 	movi	r2,-1
    60a4:	18800626 	beq	r3,r2,60c0 <_read_r+0x54>
    60a8:	1805883a 	mov	r2,r3
    60ac:	dfc00217 	ldw	ra,8(sp)
    60b0:	dc400117 	ldw	r17,4(sp)
    60b4:	dc000017 	ldw	r16,0(sp)
    60b8:	dec00304 	addi	sp,sp,12
    60bc:	f800283a 	ret
    60c0:	80800017 	ldw	r2,0(r16)
    60c4:	103ff826 	beq	r2,zero,60a8 <_read_r+0x3c>
    60c8:	88800015 	stw	r2,0(r17)
    60cc:	1805883a 	mov	r2,r3
    60d0:	dfc00217 	ldw	ra,8(sp)
    60d4:	dc400117 	ldw	r17,4(sp)
    60d8:	dc000017 	ldw	r16,0(sp)
    60dc:	dec00304 	addi	sp,sp,12
    60e0:	f800283a 	ret

000060e4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    60e4:	defffd04 	addi	sp,sp,-12
    60e8:	df000215 	stw	fp,8(sp)
    60ec:	df000204 	addi	fp,sp,8
    60f0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    60f4:	e0bfff17 	ldw	r2,-4(fp)
    60f8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    60fc:	e0bffe17 	ldw	r2,-8(fp)
    6100:	1005003a 	cmpeq	r2,r2,zero
    6104:	1000021e 	bne	r2,zero,6110 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    6108:	002af070 	cmpltui	zero,zero,43969
    610c:	00000106 	br	6114 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    6110:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    6114:	e037883a 	mov	sp,fp
    6118:	df000017 	ldw	fp,0(sp)
    611c:	dec00104 	addi	sp,sp,4
    6120:	f800283a 	ret

00006124 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6124:	defffd04 	addi	sp,sp,-12
    6128:	dfc00215 	stw	ra,8(sp)
    612c:	df000115 	stw	fp,4(sp)
    6130:	df000104 	addi	fp,sp,4
    6134:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    6138:	e13fff17 	ldw	r4,-4(fp)
    613c:	00060e40 	call	60e4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6140:	003fff06 	br	6140 <_exit+0x1c>

00006144 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    6144:	defff904 	addi	sp,sp,-28
    6148:	dfc00615 	stw	ra,24(sp)
    614c:	df000515 	stw	fp,20(sp)
    6150:	df000504 	addi	fp,sp,20
    6154:	e13ffc15 	stw	r4,-16(fp)
    6158:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    615c:	e0bffc17 	ldw	r2,-16(fp)
    6160:	1004803a 	cmplt	r2,r2,zero
    6164:	1000081e 	bne	r2,zero,6188 <fstat+0x44>
    6168:	e0bffc17 	ldw	r2,-16(fp)
    616c:	10800324 	muli	r2,r2,12
    6170:	1007883a 	mov	r3,r2
    6174:	00800034 	movhi	r2,0
    6178:	109fd204 	addi	r2,r2,32584
    617c:	1887883a 	add	r3,r3,r2
    6180:	e0ffff15 	stw	r3,-4(fp)
    6184:	00000106 	br	618c <fstat+0x48>
    6188:	e03fff15 	stw	zero,-4(fp)
    618c:	e0bfff17 	ldw	r2,-4(fp)
    6190:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    6194:	e0bffb17 	ldw	r2,-20(fp)
    6198:	1005003a 	cmpeq	r2,r2,zero
    619c:	1000121e 	bne	r2,zero,61e8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    61a0:	e0bffb17 	ldw	r2,-20(fp)
    61a4:	10800017 	ldw	r2,0(r2)
    61a8:	10800817 	ldw	r2,32(r2)
    61ac:	1005003a 	cmpeq	r2,r2,zero
    61b0:	1000081e 	bne	r2,zero,61d4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    61b4:	e0bffb17 	ldw	r2,-20(fp)
    61b8:	10800017 	ldw	r2,0(r2)
    61bc:	10800817 	ldw	r2,32(r2)
    61c0:	e13ffb17 	ldw	r4,-20(fp)
    61c4:	e17ffd17 	ldw	r5,-12(fp)
    61c8:	103ee83a 	callr	r2
    61cc:	e0bffe15 	stw	r2,-8(fp)
    61d0:	00000b06 	br	6200 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    61d4:	e0fffd17 	ldw	r3,-12(fp)
    61d8:	00880004 	movi	r2,8192
    61dc:	18800115 	stw	r2,4(r3)
      return 0;
    61e0:	e03ffe15 	stw	zero,-8(fp)
    61e4:	00000606 	br	6200 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    61e8:	00062180 	call	6218 <alt_get_errno>
    61ec:	1007883a 	mov	r3,r2
    61f0:	00801444 	movi	r2,81
    61f4:	18800015 	stw	r2,0(r3)
    return -1;
    61f8:	00bfffc4 	movi	r2,-1
    61fc:	e0bffe15 	stw	r2,-8(fp)
    6200:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    6204:	e037883a 	mov	sp,fp
    6208:	dfc00117 	ldw	ra,4(sp)
    620c:	df000017 	ldw	fp,0(sp)
    6210:	dec00204 	addi	sp,sp,8
    6214:	f800283a 	ret

00006218 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6218:	defffd04 	addi	sp,sp,-12
    621c:	dfc00215 	stw	ra,8(sp)
    6220:	df000115 	stw	fp,4(sp)
    6224:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6228:	00800074 	movhi	r2,1
    622c:	10a23904 	addi	r2,r2,-30492
    6230:	10800017 	ldw	r2,0(r2)
    6234:	1005003a 	cmpeq	r2,r2,zero
    6238:	1000061e 	bne	r2,zero,6254 <alt_get_errno+0x3c>
    623c:	00800074 	movhi	r2,1
    6240:	10a23904 	addi	r2,r2,-30492
    6244:	10800017 	ldw	r2,0(r2)
    6248:	103ee83a 	callr	r2
    624c:	e0bfff15 	stw	r2,-4(fp)
    6250:	00000306 	br	6260 <alt_get_errno+0x48>
    6254:	00800074 	movhi	r2,1
    6258:	10a9bb04 	addi	r2,r2,-22804
    625c:	e0bfff15 	stw	r2,-4(fp)
    6260:	e0bfff17 	ldw	r2,-4(fp)
}
    6264:	e037883a 	mov	sp,fp
    6268:	dfc00117 	ldw	ra,4(sp)
    626c:	df000017 	ldw	fp,0(sp)
    6270:	dec00204 	addi	sp,sp,8
    6274:	f800283a 	ret

00006278 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    6278:	deffeb04 	addi	sp,sp,-84
    627c:	dfc01415 	stw	ra,80(sp)
    6280:	df001315 	stw	fp,76(sp)
    6284:	df001304 	addi	fp,sp,76
    6288:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    628c:	e0bffd17 	ldw	r2,-12(fp)
    6290:	1004803a 	cmplt	r2,r2,zero
    6294:	1000081e 	bne	r2,zero,62b8 <isatty+0x40>
    6298:	e0bffd17 	ldw	r2,-12(fp)
    629c:	10800324 	muli	r2,r2,12
    62a0:	1007883a 	mov	r3,r2
    62a4:	00800034 	movhi	r2,0
    62a8:	109fd204 	addi	r2,r2,32584
    62ac:	1887883a 	add	r3,r3,r2
    62b0:	e0ffff15 	stw	r3,-4(fp)
    62b4:	00000106 	br	62bc <isatty+0x44>
    62b8:	e03fff15 	stw	zero,-4(fp)
    62bc:	e0bfff17 	ldw	r2,-4(fp)
    62c0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    62c4:	e0bfed17 	ldw	r2,-76(fp)
    62c8:	1005003a 	cmpeq	r2,r2,zero
    62cc:	10000f1e 	bne	r2,zero,630c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    62d0:	e0bfed17 	ldw	r2,-76(fp)
    62d4:	10800017 	ldw	r2,0(r2)
    62d8:	10800817 	ldw	r2,32(r2)
    62dc:	1004c03a 	cmpne	r2,r2,zero
    62e0:	1000031e 	bne	r2,zero,62f0 <isatty+0x78>
    {
      return 1;
    62e4:	00800044 	movi	r2,1
    62e8:	e0bffe15 	stw	r2,-8(fp)
    62ec:	00000c06 	br	6320 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    62f0:	e17fee04 	addi	r5,fp,-72
    62f4:	e13ffd17 	ldw	r4,-12(fp)
    62f8:	00061440 	call	6144 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    62fc:	e0bfef17 	ldw	r2,-68(fp)
    6300:	10880020 	cmpeqi	r2,r2,8192
    6304:	e0bffe15 	stw	r2,-8(fp)
    6308:	00000506 	br	6320 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    630c:	00063380 	call	6338 <alt_get_errno>
    6310:	1007883a 	mov	r3,r2
    6314:	00801444 	movi	r2,81
    6318:	18800015 	stw	r2,0(r3)
    return 0;
    631c:	e03ffe15 	stw	zero,-8(fp)
    6320:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    6324:	e037883a 	mov	sp,fp
    6328:	dfc00117 	ldw	ra,4(sp)
    632c:	df000017 	ldw	fp,0(sp)
    6330:	dec00204 	addi	sp,sp,8
    6334:	f800283a 	ret

00006338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6338:	defffd04 	addi	sp,sp,-12
    633c:	dfc00215 	stw	ra,8(sp)
    6340:	df000115 	stw	fp,4(sp)
    6344:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6348:	00800074 	movhi	r2,1
    634c:	10a23904 	addi	r2,r2,-30492
    6350:	10800017 	ldw	r2,0(r2)
    6354:	1005003a 	cmpeq	r2,r2,zero
    6358:	1000061e 	bne	r2,zero,6374 <alt_get_errno+0x3c>
    635c:	00800074 	movhi	r2,1
    6360:	10a23904 	addi	r2,r2,-30492
    6364:	10800017 	ldw	r2,0(r2)
    6368:	103ee83a 	callr	r2
    636c:	e0bfff15 	stw	r2,-4(fp)
    6370:	00000306 	br	6380 <alt_get_errno+0x48>
    6374:	00800074 	movhi	r2,1
    6378:	10a9bb04 	addi	r2,r2,-22804
    637c:	e0bfff15 	stw	r2,-4(fp)
    6380:	e0bfff17 	ldw	r2,-4(fp)
}
    6384:	e037883a 	mov	sp,fp
    6388:	dfc00117 	ldw	ra,4(sp)
    638c:	df000017 	ldw	fp,0(sp)
    6390:	dec00204 	addi	sp,sp,8
    6394:	f800283a 	ret

00006398 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    6398:	defff804 	addi	sp,sp,-32
    639c:	dfc00715 	stw	ra,28(sp)
    63a0:	df000615 	stw	fp,24(sp)
    63a4:	df000604 	addi	fp,sp,24
    63a8:	e13ffc15 	stw	r4,-16(fp)
    63ac:	e17ffd15 	stw	r5,-12(fp)
    63b0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    63b4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    63b8:	e0bffc17 	ldw	r2,-16(fp)
    63bc:	1004803a 	cmplt	r2,r2,zero
    63c0:	1000081e 	bne	r2,zero,63e4 <lseek+0x4c>
    63c4:	e0bffc17 	ldw	r2,-16(fp)
    63c8:	10800324 	muli	r2,r2,12
    63cc:	1007883a 	mov	r3,r2
    63d0:	00800034 	movhi	r2,0
    63d4:	109fd204 	addi	r2,r2,32584
    63d8:	1887883a 	add	r3,r3,r2
    63dc:	e0ffff15 	stw	r3,-4(fp)
    63e0:	00000106 	br	63e8 <lseek+0x50>
    63e4:	e03fff15 	stw	zero,-4(fp)
    63e8:	e0bfff17 	ldw	r2,-4(fp)
    63ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    63f0:	e0bffb17 	ldw	r2,-20(fp)
    63f4:	1005003a 	cmpeq	r2,r2,zero
    63f8:	1000111e 	bne	r2,zero,6440 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    63fc:	e0bffb17 	ldw	r2,-20(fp)
    6400:	10800017 	ldw	r2,0(r2)
    6404:	10800717 	ldw	r2,28(r2)
    6408:	1005003a 	cmpeq	r2,r2,zero
    640c:	1000091e 	bne	r2,zero,6434 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    6410:	e0bffb17 	ldw	r2,-20(fp)
    6414:	10800017 	ldw	r2,0(r2)
    6418:	10800717 	ldw	r2,28(r2)
    641c:	e13ffb17 	ldw	r4,-20(fp)
    6420:	e17ffd17 	ldw	r5,-12(fp)
    6424:	e1bffe17 	ldw	r6,-8(fp)
    6428:	103ee83a 	callr	r2
    642c:	e0bffa15 	stw	r2,-24(fp)
    6430:	00000506 	br	6448 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    6434:	00bfde84 	movi	r2,-134
    6438:	e0bffa15 	stw	r2,-24(fp)
    643c:	00000206 	br	6448 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    6440:	00bfebc4 	movi	r2,-81
    6444:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    6448:	e0bffa17 	ldw	r2,-24(fp)
    644c:	1004403a 	cmpge	r2,r2,zero
    6450:	1000071e 	bne	r2,zero,6470 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    6454:	00064880 	call	6488 <alt_get_errno>
    6458:	1007883a 	mov	r3,r2
    645c:	e0bffa17 	ldw	r2,-24(fp)
    6460:	0085c83a 	sub	r2,zero,r2
    6464:	18800015 	stw	r2,0(r3)
    rc = -1;
    6468:	00bfffc4 	movi	r2,-1
    646c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    6470:	e0bffa17 	ldw	r2,-24(fp)
}
    6474:	e037883a 	mov	sp,fp
    6478:	dfc00117 	ldw	ra,4(sp)
    647c:	df000017 	ldw	fp,0(sp)
    6480:	dec00204 	addi	sp,sp,8
    6484:	f800283a 	ret

00006488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6488:	defffd04 	addi	sp,sp,-12
    648c:	dfc00215 	stw	ra,8(sp)
    6490:	df000115 	stw	fp,4(sp)
    6494:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6498:	00800074 	movhi	r2,1
    649c:	10a23904 	addi	r2,r2,-30492
    64a0:	10800017 	ldw	r2,0(r2)
    64a4:	1005003a 	cmpeq	r2,r2,zero
    64a8:	1000061e 	bne	r2,zero,64c4 <alt_get_errno+0x3c>
    64ac:	00800074 	movhi	r2,1
    64b0:	10a23904 	addi	r2,r2,-30492
    64b4:	10800017 	ldw	r2,0(r2)
    64b8:	103ee83a 	callr	r2
    64bc:	e0bfff15 	stw	r2,-4(fp)
    64c0:	00000306 	br	64d0 <alt_get_errno+0x48>
    64c4:	00800074 	movhi	r2,1
    64c8:	10a9bb04 	addi	r2,r2,-22804
    64cc:	e0bfff15 	stw	r2,-4(fp)
    64d0:	e0bfff17 	ldw	r2,-4(fp)
}
    64d4:	e037883a 	mov	sp,fp
    64d8:	dfc00117 	ldw	ra,4(sp)
    64dc:	df000017 	ldw	fp,0(sp)
    64e0:	dec00204 	addi	sp,sp,8
    64e4:	f800283a 	ret

000064e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    64e8:	defffe04 	addi	sp,sp,-8
    64ec:	df000115 	stw	fp,4(sp)
    64f0:	df000104 	addi	fp,sp,4
    64f4:	e13fff15 	stw	r4,-4(fp)
}
    64f8:	e037883a 	mov	sp,fp
    64fc:	df000017 	ldw	fp,0(sp)
    6500:	dec00104 	addi	sp,sp,4
    6504:	f800283a 	ret

00006508 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    6508:	defffe04 	addi	sp,sp,-8
    650c:	df000115 	stw	fp,4(sp)
    6510:	df000104 	addi	fp,sp,4
    6514:	e13fff15 	stw	r4,-4(fp)
}
    6518:	e037883a 	mov	sp,fp
    651c:	df000017 	ldw	fp,0(sp)
    6520:	dec00104 	addi	sp,sp,4
    6524:	f800283a 	ret

00006528 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    6528:	defff704 	addi	sp,sp,-36
    652c:	dfc00815 	stw	ra,32(sp)
    6530:	df000715 	stw	fp,28(sp)
    6534:	df000704 	addi	fp,sp,28
    6538:	e13ffb15 	stw	r4,-20(fp)
    653c:	e17ffc15 	stw	r5,-16(fp)
    6540:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6544:	e0bffb17 	ldw	r2,-20(fp)
    6548:	1004803a 	cmplt	r2,r2,zero
    654c:	1000081e 	bne	r2,zero,6570 <read+0x48>
    6550:	e0bffb17 	ldw	r2,-20(fp)
    6554:	10800324 	muli	r2,r2,12
    6558:	1007883a 	mov	r3,r2
    655c:	00800034 	movhi	r2,0
    6560:	109fd204 	addi	r2,r2,32584
    6564:	1887883a 	add	r3,r3,r2
    6568:	e0ffff15 	stw	r3,-4(fp)
    656c:	00000106 	br	6574 <read+0x4c>
    6570:	e03fff15 	stw	zero,-4(fp)
    6574:	e0bfff17 	ldw	r2,-4(fp)
    6578:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    657c:	e0bffa17 	ldw	r2,-24(fp)
    6580:	1005003a 	cmpeq	r2,r2,zero
    6584:	1000241e 	bne	r2,zero,6618 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6588:	e0bffa17 	ldw	r2,-24(fp)
    658c:	10800217 	ldw	r2,8(r2)
    6590:	108000cc 	andi	r2,r2,3
    6594:	10800060 	cmpeqi	r2,r2,1
    6598:	10001a1e 	bne	r2,zero,6604 <read+0xdc>
    659c:	e0bffa17 	ldw	r2,-24(fp)
    65a0:	10800017 	ldw	r2,0(r2)
    65a4:	10800517 	ldw	r2,20(r2)
    65a8:	1005003a 	cmpeq	r2,r2,zero
    65ac:	1000151e 	bne	r2,zero,6604 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    65b0:	e0bffa17 	ldw	r2,-24(fp)
    65b4:	10800017 	ldw	r2,0(r2)
    65b8:	10800517 	ldw	r2,20(r2)
    65bc:	e17ffc17 	ldw	r5,-16(fp)
    65c0:	e1bffd17 	ldw	r6,-12(fp)
    65c4:	e13ffa17 	ldw	r4,-24(fp)
    65c8:	103ee83a 	callr	r2
    65cc:	e0bff915 	stw	r2,-28(fp)
    65d0:	e0bff917 	ldw	r2,-28(fp)
    65d4:	1004403a 	cmpge	r2,r2,zero
    65d8:	1000071e 	bne	r2,zero,65f8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    65dc:	00066480 	call	6648 <alt_get_errno>
    65e0:	e0fff917 	ldw	r3,-28(fp)
    65e4:	00c7c83a 	sub	r3,zero,r3
    65e8:	10c00015 	stw	r3,0(r2)
          return -1;
    65ec:	00bfffc4 	movi	r2,-1
    65f0:	e0bffe15 	stw	r2,-8(fp)
    65f4:	00000e06 	br	6630 <read+0x108>
        }
        return rval;
    65f8:	e0bff917 	ldw	r2,-28(fp)
    65fc:	e0bffe15 	stw	r2,-8(fp)
    6600:	00000b06 	br	6630 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    6604:	00066480 	call	6648 <alt_get_errno>
    6608:	1007883a 	mov	r3,r2
    660c:	00800344 	movi	r2,13
    6610:	18800015 	stw	r2,0(r3)
    6614:	00000406 	br	6628 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    6618:	00066480 	call	6648 <alt_get_errno>
    661c:	1007883a 	mov	r3,r2
    6620:	00801444 	movi	r2,81
    6624:	18800015 	stw	r2,0(r3)
  }
  return -1;
    6628:	00bfffc4 	movi	r2,-1
    662c:	e0bffe15 	stw	r2,-8(fp)
    6630:	e0bffe17 	ldw	r2,-8(fp)
}
    6634:	e037883a 	mov	sp,fp
    6638:	dfc00117 	ldw	ra,4(sp)
    663c:	df000017 	ldw	fp,0(sp)
    6640:	dec00204 	addi	sp,sp,8
    6644:	f800283a 	ret

00006648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6648:	defffd04 	addi	sp,sp,-12
    664c:	dfc00215 	stw	ra,8(sp)
    6650:	df000115 	stw	fp,4(sp)
    6654:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6658:	00800074 	movhi	r2,1
    665c:	10a23904 	addi	r2,r2,-30492
    6660:	10800017 	ldw	r2,0(r2)
    6664:	1005003a 	cmpeq	r2,r2,zero
    6668:	1000061e 	bne	r2,zero,6684 <alt_get_errno+0x3c>
    666c:	00800074 	movhi	r2,1
    6670:	10a23904 	addi	r2,r2,-30492
    6674:	10800017 	ldw	r2,0(r2)
    6678:	103ee83a 	callr	r2
    667c:	e0bfff15 	stw	r2,-4(fp)
    6680:	00000306 	br	6690 <alt_get_errno+0x48>
    6684:	00800074 	movhi	r2,1
    6688:	10a9bb04 	addi	r2,r2,-22804
    668c:	e0bfff15 	stw	r2,-4(fp)
    6690:	e0bfff17 	ldw	r2,-4(fp)
}
    6694:	e037883a 	mov	sp,fp
    6698:	dfc00117 	ldw	ra,4(sp)
    669c:	df000017 	ldw	fp,0(sp)
    66a0:	dec00204 	addi	sp,sp,8
    66a4:	f800283a 	ret

000066a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    66a8:	defff804 	addi	sp,sp,-32
    66ac:	df000715 	stw	fp,28(sp)
    66b0:	df000704 	addi	fp,sp,28
    66b4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66b8:	0005303a 	rdctl	r2,status
    66bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66c0:	e0fffb17 	ldw	r3,-20(fp)
    66c4:	00bfff84 	movi	r2,-2
    66c8:	1884703a 	and	r2,r3,r2
    66cc:	1001703a 	wrctl	status,r2
  
  return context;
    66d0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    66d4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    66d8:	d0a00d17 	ldw	r2,-32716(gp)
    66dc:	10c000c4 	addi	r3,r2,3
    66e0:	00bfff04 	movi	r2,-4
    66e4:	1884703a 	and	r2,r3,r2
    66e8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    66ec:	d0e00d17 	ldw	r3,-32716(gp)
    66f0:	e0bffe17 	ldw	r2,-8(fp)
    66f4:	1887883a 	add	r3,r3,r2
    66f8:	00820034 	movhi	r2,2048
    66fc:	10800004 	addi	r2,r2,0
    6700:	10c0072e 	bgeu	r2,r3,6720 <sbrk+0x78>
    6704:	e0bffd17 	ldw	r2,-12(fp)
    6708:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    670c:	e0bffa17 	ldw	r2,-24(fp)
    6710:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    6714:	00bfffc4 	movi	r2,-1
    6718:	e0bfff15 	stw	r2,-4(fp)
    671c:	00000c06 	br	6750 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    6720:	d0a00d17 	ldw	r2,-32716(gp)
    6724:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    6728:	d0e00d17 	ldw	r3,-32716(gp)
    672c:	e0bffe17 	ldw	r2,-8(fp)
    6730:	1885883a 	add	r2,r3,r2
    6734:	d0a00d15 	stw	r2,-32716(gp)
    6738:	e0bffd17 	ldw	r2,-12(fp)
    673c:	e0bff915 	stw	r2,-28(fp)
    6740:	e0bff917 	ldw	r2,-28(fp)
    6744:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    6748:	e0bffc17 	ldw	r2,-16(fp)
    674c:	e0bfff15 	stw	r2,-4(fp)
    6750:	e0bfff17 	ldw	r2,-4(fp)
} 
    6754:	e037883a 	mov	sp,fp
    6758:	df000017 	ldw	fp,0(sp)
    675c:	dec00104 	addi	sp,sp,4
    6760:	f800283a 	ret

00006764 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    6764:	defff704 	addi	sp,sp,-36
    6768:	dfc00815 	stw	ra,32(sp)
    676c:	df000715 	stw	fp,28(sp)
    6770:	df000704 	addi	fp,sp,28
    6774:	e13ffb15 	stw	r4,-20(fp)
    6778:	e17ffc15 	stw	r5,-16(fp)
    677c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6780:	e0bffb17 	ldw	r2,-20(fp)
    6784:	1004803a 	cmplt	r2,r2,zero
    6788:	1000081e 	bne	r2,zero,67ac <write+0x48>
    678c:	e0bffb17 	ldw	r2,-20(fp)
    6790:	10800324 	muli	r2,r2,12
    6794:	1007883a 	mov	r3,r2
    6798:	00800034 	movhi	r2,0
    679c:	109fd204 	addi	r2,r2,32584
    67a0:	1887883a 	add	r3,r3,r2
    67a4:	e0ffff15 	stw	r3,-4(fp)
    67a8:	00000106 	br	67b0 <write+0x4c>
    67ac:	e03fff15 	stw	zero,-4(fp)
    67b0:	e0bfff17 	ldw	r2,-4(fp)
    67b4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    67b8:	e0bffa17 	ldw	r2,-24(fp)
    67bc:	1005003a 	cmpeq	r2,r2,zero
    67c0:	1000241e 	bne	r2,zero,6854 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    67c4:	e0bffa17 	ldw	r2,-24(fp)
    67c8:	10800217 	ldw	r2,8(r2)
    67cc:	108000cc 	andi	r2,r2,3
    67d0:	1005003a 	cmpeq	r2,r2,zero
    67d4:	10001a1e 	bne	r2,zero,6840 <write+0xdc>
    67d8:	e0bffa17 	ldw	r2,-24(fp)
    67dc:	10800017 	ldw	r2,0(r2)
    67e0:	10800617 	ldw	r2,24(r2)
    67e4:	1005003a 	cmpeq	r2,r2,zero
    67e8:	1000151e 	bne	r2,zero,6840 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    67ec:	e0bffa17 	ldw	r2,-24(fp)
    67f0:	10800017 	ldw	r2,0(r2)
    67f4:	10800617 	ldw	r2,24(r2)
    67f8:	e17ffc17 	ldw	r5,-16(fp)
    67fc:	e1bffd17 	ldw	r6,-12(fp)
    6800:	e13ffa17 	ldw	r4,-24(fp)
    6804:	103ee83a 	callr	r2
    6808:	e0bff915 	stw	r2,-28(fp)
    680c:	e0bff917 	ldw	r2,-28(fp)
    6810:	1004403a 	cmpge	r2,r2,zero
    6814:	1000071e 	bne	r2,zero,6834 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    6818:	00068840 	call	6884 <alt_get_errno>
    681c:	e0fff917 	ldw	r3,-28(fp)
    6820:	00c7c83a 	sub	r3,zero,r3
    6824:	10c00015 	stw	r3,0(r2)
        return -1;
    6828:	00bfffc4 	movi	r2,-1
    682c:	e0bffe15 	stw	r2,-8(fp)
    6830:	00000e06 	br	686c <write+0x108>
      }
      return rval;
    6834:	e0bff917 	ldw	r2,-28(fp)
    6838:	e0bffe15 	stw	r2,-8(fp)
    683c:	00000b06 	br	686c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    6840:	00068840 	call	6884 <alt_get_errno>
    6844:	1007883a 	mov	r3,r2
    6848:	00800344 	movi	r2,13
    684c:	18800015 	stw	r2,0(r3)
    6850:	00000406 	br	6864 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    6854:	00068840 	call	6884 <alt_get_errno>
    6858:	1007883a 	mov	r3,r2
    685c:	00801444 	movi	r2,81
    6860:	18800015 	stw	r2,0(r3)
  }
  return -1;
    6864:	00bfffc4 	movi	r2,-1
    6868:	e0bffe15 	stw	r2,-8(fp)
    686c:	e0bffe17 	ldw	r2,-8(fp)
}
    6870:	e037883a 	mov	sp,fp
    6874:	dfc00117 	ldw	ra,4(sp)
    6878:	df000017 	ldw	fp,0(sp)
    687c:	dec00204 	addi	sp,sp,8
    6880:	f800283a 	ret

00006884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6884:	defffd04 	addi	sp,sp,-12
    6888:	dfc00215 	stw	ra,8(sp)
    688c:	df000115 	stw	fp,4(sp)
    6890:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6894:	00800074 	movhi	r2,1
    6898:	10a23904 	addi	r2,r2,-30492
    689c:	10800017 	ldw	r2,0(r2)
    68a0:	1005003a 	cmpeq	r2,r2,zero
    68a4:	1000061e 	bne	r2,zero,68c0 <alt_get_errno+0x3c>
    68a8:	00800074 	movhi	r2,1
    68ac:	10a23904 	addi	r2,r2,-30492
    68b0:	10800017 	ldw	r2,0(r2)
    68b4:	103ee83a 	callr	r2
    68b8:	e0bfff15 	stw	r2,-4(fp)
    68bc:	00000306 	br	68cc <alt_get_errno+0x48>
    68c0:	00800074 	movhi	r2,1
    68c4:	10a9bb04 	addi	r2,r2,-22804
    68c8:	e0bfff15 	stw	r2,-4(fp)
    68cc:	e0bfff17 	ldw	r2,-4(fp)
}
    68d0:	e037883a 	mov	sp,fp
    68d4:	dfc00117 	ldw	ra,4(sp)
    68d8:	df000017 	ldw	fp,0(sp)
    68dc:	dec00204 	addi	sp,sp,8
    68e0:	f800283a 	ret
    68e4:	00004610 	cmplti	zero,zero,280
