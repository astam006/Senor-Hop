
final.elf:     file format elf32-littlenios2
final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00008d9c memsz 0x00008d9c flags r-x
    LOAD off    0x00009dbc vaddr 0x00008dbc paddr 0x0000a834 align 2**12
         filesz 0x00001a78 memsz 0x00001a78 flags rw-
    LOAD off    0x0000c2ac vaddr 0x0000c2ac paddr 0x0000c2ac align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000089ac  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000025c  00008b60  00008b60  00009b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a78  00008dbc  0000a834  00009dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000c2ac  0000c2ac  0000c2ac  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000b834  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c58  00000000  00000000  0000b860  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000012c3  00000000  00000000  0000c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001ec5b  00000000  00000000  0000d77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000070e5  00000000  00000000  0002c3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010b74  00000000  00000000  000334bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001628  00000000  00000000  00044030  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ea3  00000000  00000000  00045658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005ef3  00000000  00000000  000474fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0004d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005f0  00000000  00000000  0004d410  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000506ee  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000506f1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000506f4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000506f5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000506f6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000506fa  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000506fe  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00050702  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005070b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00050714  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0005071d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00050728  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000587ad  00000000  00000000  00050749  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00008b60 l    d  .rodata	00000000 .rodata
00008dbc l    d  .rwdata	00000000 .rwdata
0000c2ac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00008c24 l     O .rodata	00000010 bp
00008c34 l     O .rodata	00000010 dp_l
00008c44 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00008c54 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
00002404 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00008dbc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00003af0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000091bc l     O .rwdata	00001060 JTAG_UART
0000a21c l     O .rwdata	0000002c Char_LCD_16x2
00003f08 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004148 l     F .text	00000228 altera_avalon_jtag_uart_irq
00004370 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000049ec l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000526c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000052e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000053c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005880 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000059bc l     F .text	000000dc alt_file_locked
00005c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00006888 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006c6c l     F .text	00000058 std
00006d78 l     F .text	00000008 __fp_lock
00006d80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000835c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00008490 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000085b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00008700 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000088c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000a830 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00008afc l     F .text	00000060 alt_get_errno
000081fc g     F .text	00000070 _isatty_r
00003b5c g     F .text	0000006c alt_main
0000c2fc g     O .bss	00000100 alt_irq
00001f74 g     F .text	00000018 fabs
0000826c g     F .text	00000078 _lseek_r
0000a834 g       *ABS*	00000000 __flash_rwdata_start
00004b68 g     F .text	00000034 alt_up_character_lcd_send_cmd
00002f24 g     F .text	00000088 __eqdf2
0000c58c g       *ABS*	00000000 __alt_heap_start
00007e38 g     F .text	00000068 __sseek
00006cd4 g     F .text	000000a4 __sinit
000064cc g     F .text	00000130 __swbuf_r
00006dd4 g     F .text	00000068 __sfmoreglue
00008780 g     F .text	00000020 __malloc_unlock
00006dc4 g     F .text	00000010 _cleanup
00003034 g     F .text	00000088 __gtdf2
000039c8 g     F .text	00000010 __errno
00004aec g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008188 g     F .text	00000074 _fstat_r
0000c2c4 g     O .bss	00000004 errno
0000c2b0 g     O .bss	00000004 alt_argv
000127f8 g       *ABS*	00000000 _gp
0000a270 g     O .rwdata	00000180 alt_fd_list
000054f0 g     F .text	00000094 alt_find_dev
000061cc g     F .text	000000a0 memcpy
00004d00 g     F .text	0000004c alt_up_character_lcd_write_fd
00006db8 g     F .text	0000000c _cleanup_r
000031cc g     F .text	000000f8 __floatsidf
00005944 g     F .text	00000078 alt_io_redirect
000030bc g     F .text	00000088 __ltdf2
00008b60 g       *ABS*	00000000 __DTOR_END__
00004588 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000084f0 g     F .text	000000c0 isatty
0000607c g     F .text	00000090 alt_icache_flush
0000c2c8 g     O .bss	00000004 __malloc_top_pad
00007dc0 g     F .text	00000070 _sbrk_r
000082e4 g     F .text	00000078 _read_r
0000a814 g     O .rwdata	00000004 alt_max_fd
000037c8 g     F .text	00000138 __unpack_d
00008064 g     F .text	00000110 _fclose_r
00006c38 g     F .text	00000034 fflush
0000c2cc g     O .bss	00000004 __malloc_max_sbrked_mem
00002894 g     F .text	00000074 __adddf3
00008610 g     F .text	000000f0 lseek
0000a7f8 g     O .rwdata	00000004 __fdlib_version
0000a800 g     O .rwdata	00000004 _global_impure_ptr
0000c58c g       *ABS*	00000000 __bss_end
00005788 g     F .text	000000f8 alt_iic_isr_register
00005d78 g     F .text	0000010c alt_tick
00006da0 g     F .text	00000018 __fp_lock_all
00005740 g     F .text	00000048 alt_ic_irq_enabled
00005ce0 g     F .text	00000098 alt_alarm_stop
0000c2b8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000a248 g     O .rwdata	00000028 alt_dev_null
00001ff0 g     F .text	00000210 rint
00004fe8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000052cc g     F .text	0000001c alt_dcache_flush_all
000032c4 g     F .text	000000d8 __fixdfsi
0000a834 g       *ABS*	00000000 __ram_rwdata_end
0000a80c g     O .rwdata	00000008 alt_dev_list
000089dc g     F .text	00000120 write
00006370 g     F .text	000000e8 _putc_r
00008dbc g       *ABS*	00000000 __ram_rodata_end
000083bc g     F .text	000000d4 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00003144 g     F .text	00000088 __ledf2
0000c58c g       *ABS*	00000000 end
00004088 g     F .text	000000c0 altera_avalon_jtag_uart_init
00008b5c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00004a5c g     F .text	00000090 alt_avalon_timer_sc_init
00003434 g     F .text	00000080 __clzsi2
000047ac g     F .text	00000240 altera_avalon_jtag_uart_write
00006cc4 g     F .text	00000004 __sfp_lock_acquire
00004c10 g     F .text	00000078 alt_up_character_lcd_write
00007058 g     F .text	00000314 _free_r
00003bc8 g     F .text	00000258 alt_printf
0000688c g     F .text	000001b0 __call_exitprocs
0000a82c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
0000c2bc g     O .bss	00000004 _alt_tick_rate
0000c2c0 g     O .bss	00000004 _alt_nticks
000087a0 g     F .text	00000120 read
00003e94 g     F .text	00000074 alt_sys_init
00004e74 g     F .text	000000b0 alt_up_character_lcd_shift_display
00006754 g     F .text	00000134 __register_exitproc
00004f24 g     F .text	00000090 alt_up_character_lcd_erase_pos
000009ac g     F .text	00001300 __ieee754_pow
00004420 g     F .text	00000074 altera_avalon_jtag_uart_close
00000524 g     F .text	00000488 pow
00008dbc g       *ABS*	00000000 __ram_rwdata_start
00008b60 g       *ABS*	00000000 __ram_rodata_start
0000c2d4 g     O .bss	00000028 __malloc_current_mallinfo
00003f40 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00005fc4 g     F .text	000000b8 alt_get_fd
00003900 g     F .text	000000c8 __fpcmp_parts_d
00007ff4 g     F .text	00000070 _close_r
00006158 g     F .text	00000074 memcmp
00003ff0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000c58c g       *ABS*	00000000 __alt_stack_base
00004038 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00006618 g     F .text	0000013c __swsetup_r
00002ccc g     F .text	00000258 __divdf3
00006e3c g     F .text	000000f0 __sfp
0000a3f0 g     O .rwdata	00000408 __malloc_av_
00006cd0 g     F .text	00000004 __sinit_lock_release
00002908 g     F .text	000003c4 __muldf3
00007f1c g     F .text	00000060 __sread
00005ea4 g     F .text	00000120 alt_find_file
00005314 g     F .text	000000b4 alt_dev_llist_insert
00008760 g     F .text	00000020 __malloc_lock
00008920 g     F .text	000000bc sbrk
00006a3c g     F .text	000001fc _fflush_r
0000c2ac g       *ABS*	00000000 __bss_start
000039d8 g     F .text	00000098 memset
000001f0 g     F .text	00000334 main
0000c2b4 g     O .bss	00000004 alt_envp
0000c2d0 g     O .bss	00000004 __malloc_max_total_mem
00003f98 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000065fc g     F .text	0000001c __swbuf
00004dc4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00007e30 g     F .text	00000008 __sclose
00001fd8 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
00008174 g     F .text	00000014 fclose
0000c3fc g     O .bss	00000190 _atexit0
00007680 g     F .text	00000740 _malloc_r
0000a818 g     O .rwdata	00000004 alt_errno
00007434 g     F .text	000000b8 _fwalk
0000626c g     F .text	00000104 putc
00008c64 g     O .rodata	00000014 __thenan_df
00004bd0 g     F .text	00000040 alt_up_character_lcd_open_dev
00006f2c g     F .text	0000012c _malloc_trim_r
00008b60 g       *ABS*	00000000 __CTOR_END__
00001f8c g     F .text	0000001c finite
00004b9c g     F .text	00000034 alt_up_character_lcd_init
00008b60 g       *ABS*	00000000 __flash_rodata_start
00008b60 g       *ABS*	00000000 __DTOR_LIST__
000023e0 g     F .text	00000024 copysign
00002fac g     F .text	00000088 __nedf2
00003e60 g     F .text	00000034 alt_irq_init
00005c80 g     F .text	00000060 alt_release_fd
00004fb4 g     F .text	00000034 alt_up_character_lcd_cursor_off
00008c78 g     O .rodata	00000100 __clz_tab
0000610c g     F .text	00000014 atexit
00007f7c g     F .text	00000078 _write_r
0000a7fc g     O .rwdata	00000004 _impure_ptr
0000c2ac g     O .bss	00000004 alt_argc
00002200 g     F .text	000001e0 scalbn
0000548c g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006d88 g     F .text	00000018 __fp_unlock_all
0000a804 g     O .rwdata	00000008 alt_fs_list
00001fe0 g     F .text	00000010 nan
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001cac g     F .text	000002c8 __ieee754_sqrt
000055b4 g     F .text	00000050 alt_ic_isr_register
0000a834 g       *ABS*	00000000 _edata
0000c58c g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00004494 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000056a0 g     F .text	000000a0 alt_ic_irq_disable
00007ea0 g     F .text	0000007c __swrite
0000a828 g     O .rwdata	00000004 __malloc_trim_threshold
00005e84 g     F .text	00000020 altera_nios2_qsys_irq_init
00006120 g     F .text	00000038 exit
0000736c g     F .text	000000c8 _fwalk_reent
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006cc8 g     F .text	00000004 __sfp_lock_release
00004c88 g     F .text	00000078 alt_up_character_lcd_string
0000839c g     F .text	00000020 _exit
00001fa8 g     F .text	00000030 __isnand
0000501c g     F .text	00000154 alt_alarm_start
0000339c g     F .text	00000098 __muldi3
000074ec g     F .text	00000194 __smakebuf_r
00006458 g     F .text	00000074 strlen
00005a98 g     F .text	00000188 open
00003e20 g     F .text	00000040 alt_putchar
00005584 g     F .text	00000030 alt_icache_flush_all
00004d4c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0000a81c g     O .rwdata	00000004 alt_priority_mask
00005604 g     F .text	0000009c alt_ic_irq_enable
00002814 g     F .text	00000080 __subdf3
0000a820 g     O .rwdata	00000008 alt_alarm_list
00005428 g     F .text	00000064 _do_ctors
00005170 g     F .text	000000fc close
00003a70 g     F .text	00000080 alt_load
000034b4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006ccc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18f0bf04 	addi	r3,r3,-15620
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18f0bf04 	addi	r3,r3,-15620
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d689fe14 	ori	gp,gp,10232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10b0ab14 	ori	r2,r2,49836

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18f16314 	ori	r3,r3,50572

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0003a700 	call	3a70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	0003b5c0 	call	3b5c <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
     1f0:	deffe104 	addi	sp,sp,-124
     1f4:	dfc01e15 	stw	ra,120(sp)
     1f8:	df001d15 	stw	fp,116(sp)
     1fc:	dc001c15 	stw	r16,112(sp)
     200:	df001c04 	addi	fp,sp,112
	int * top_row = (int *) TOP_ROW_BASE;
     204:	00820834 	movhi	r2,2080
     208:	10800804 	addi	r2,r2,32
     20c:	e0bfea15 	stw	r2,-88(fp)
	int * bottom_row = (int *) BOTTOM_ROW_BASE;
     210:	00820834 	movhi	r2,2080
     214:	10800c04 	addi	r2,r2,48
     218:	e0bfe915 	stw	r2,-92(fp)
	int * location_in = (int *) LOCATION_BASE;
     21c:	00820834 	movhi	r2,2080
     220:	10800404 	addi	r2,r2,16
     224:	e0bfe815 	stw	r2,-96(fp)
	unsigned short top = *top_row;
     228:	e0bfea17 	ldw	r2,-88(fp)
     22c:	10800017 	ldw	r2,0(r2)
     230:	e0bfe78d 	sth	r2,-98(fp)
	unsigned short bottom = *bottom_row;
     234:	e0bfe917 	ldw	r2,-92(fp)
     238:	10800017 	ldw	r2,0(r2)
     23c:	e0bfe70d 	sth	r2,-100(fp)
	int location = *location_in;
     240:	e0bfe817 	ldw	r2,-96(fp)
     244:	10800017 	ldw	r2,0(r2)
     248:	e0bfe615 	stw	r2,-104(fp)


	alt_up_character_lcd_dev *lcd_dev;

	/* create a message to be displayed on the VGA and LCD displays */
	char text_top_row[40] = "Senor Hop\0";
     24c:	00c00074 	movhi	r3,1
     250:	18e2f304 	addi	r3,r3,-29748
     254:	18800017 	ldw	r2,0(r3)
     258:	e0bfeb15 	stw	r2,-84(fp)
     25c:	18800117 	ldw	r2,4(r3)
     260:	e0bfec15 	stw	r2,-80(fp)
     264:	1880020b 	ldhu	r2,8(r3)
     268:	e0bfed0d 	sth	r2,-76(fp)
     26c:	18800283 	ldbu	r2,10(r3)
     270:	e0bfed85 	stb	r2,-74(fp)
     274:	e13fedc4 	addi	r4,fp,-73
     278:	01800744 	movi	r6,29
     27c:	000b883a 	mov	r5,zero
     280:	00039d80 	call	39d8 <memset>
	char text_bottom_row[40] = "Get Some\0";
     284:	00c00074 	movhi	r3,1
     288:	18e2fd04 	addi	r3,r3,-29708
     28c:	18800017 	ldw	r2,0(r3)
     290:	e0bff515 	stw	r2,-44(fp)
     294:	18800117 	ldw	r2,4(r3)
     298:	e0bff615 	stw	r2,-40(fp)
     29c:	1880020b 	ldhu	r2,8(r3)
     2a0:	e0bff70d 	sth	r2,-36(fp)
     2a4:	e13ff784 	addi	r4,fp,-34
     2a8:	01800784 	movi	r6,30
     2ac:	000b883a 	mov	r5,zero
     2b0:	00039d80 	call	39d8 <memset>


	/* loop controller*/
	int cursor = 0;
     2b4:	e03fe415 	stw	zero,-112(fp)
	//unsigned short top = 0x1111;
	//unsigned short bottom = 0x8444;
	//int location = 0;

	/* output text message to the LCD */
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     2b8:	01000074 	movhi	r4,1
     2bc:	2122d804 	addi	r4,r4,-29856
     2c0:	0004bd00 	call	4bd0 <alt_up_character_lcd_open_dev>
     2c4:	e0bfe515 	stw	r2,-108(fp)
	if (lcd_dev == NULL)
     2c8:	e0bfe517 	ldw	r2,-108(fp)
     2cc:	1004c03a 	cmpne	r2,r2,zero
     2d0:	1000061e 	bne	r2,zero,2ec <main+0xfc>
	{
		alt_printf ("Error: could not open character LCD device\n");
     2d4:	01000074 	movhi	r4,1
     2d8:	2122dd04 	addi	r4,r4,-29836
     2dc:	0003bc80 	call	3bc8 <alt_printf>
		return -1;
     2e0:	00bfffc4 	movi	r2,-1
     2e4:	e0bfff15 	stw	r2,-4(fp)
     2e8:	00008706 	br	508 <main+0x318>
	}
	else
		alt_printf ("Opened character LCD device\n");
     2ec:	01000074 	movhi	r4,1
     2f0:	2122e804 	addi	r4,r4,-29792
     2f4:	0003bc80 	call	3bc8 <alt_printf>
    //alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
	//alt_up_character_lcd_string (lcd_dev, text_top_row);
	//alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 1);	// set LCD cursor location to bottom row
	//alt_up_character_lcd_string (lcd_dev, text_bottom_row);
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor
     2f8:	e13fe517 	ldw	r4,-108(fp)
     2fc:	0004fb40 	call	4fb4 <alt_up_character_lcd_cursor_off>


//start loop for display during game
while(1)
	{
		top = *top_row;
     300:	e0bfea17 	ldw	r2,-88(fp)
     304:	10800017 	ldw	r2,0(r2)
     308:	e0bfe78d 	sth	r2,-98(fp)
		bottom = *bottom_row;
     30c:	e0bfe917 	ldw	r2,-92(fp)
     310:	10800017 	ldw	r2,0(r2)
     314:	e0bfe70d 	sth	r2,-100(fp)
		location = *location_in;
     318:	e0bfe817 	ldw	r2,-96(fp)
     31c:	10800017 	ldw	r2,0(r2)
     320:	e0bfe615 	stw	r2,-104(fp)
		cursor = 0;
     324:	e03fe415 	stw	zero,-112(fp)
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 0);	// set LCD cursor location to top row
     328:	e17fe417 	ldw	r5,-112(fp)
     32c:	e13fe517 	ldw	r4,-108(fp)
     330:	000d883a 	mov	r6,zero
     334:	0004d4c0 	call	4d4c <alt_up_character_lcd_set_cursor_pos>
		if(location == 1){
     338:	e0bfe617 	ldw	r2,-104(fp)
     33c:	10800058 	cmpnei	r2,r2,1
     340:	1000321e 	bne	r2,zero,40c <main+0x21c>
			alt_up_character_lcd_write (lcd_dev, ">", 1);
     344:	e13fe517 	ldw	r4,-108(fp)
     348:	01400074 	movhi	r5,1
     34c:	2962f004 	addi	r5,r5,-29760
     350:	01800044 	movi	r6,1
     354:	0004c100 	call	4c10 <alt_up_character_lcd_write>
			cursor = 1;
     358:	00800044 	movi	r2,1
     35c:	e0bfe415 	stw	r2,-112(fp)
		}

		while(cursor < 16){
     360:	00002a06 	br	40c <main+0x21c>
		    alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 0);	// set LCD cursor location to top row
     364:	e17fe417 	ldw	r5,-112(fp)
     368:	e13fe517 	ldw	r4,-108(fp)
     36c:	000d883a 	mov	r6,zero
     370:	0004d4c0 	call	4d4c <alt_up_character_lcd_set_cursor_pos>
			if((top / (int)pow(2,(15-cursor)))%2 != 0)
     374:	e43fe78b 	ldhu	r16,-98(fp)
     378:	00c003c4 	movi	r3,15
     37c:	e0bfe417 	ldw	r2,-112(fp)
     380:	1889c83a 	sub	r4,r3,r2
     384:	00031cc0 	call	31cc <__floatsidf>
     388:	100f883a 	mov	r7,r2
     38c:	1811883a 	mov	r8,r3
     390:	0009883a 	mov	r4,zero
     394:	01500034 	movhi	r5,16384
     398:	380d883a 	mov	r6,r7
     39c:	400f883a 	mov	r7,r8
     3a0:	00005240 	call	524 <pow>
     3a4:	1009883a 	mov	r4,r2
     3a8:	180b883a 	mov	r5,r3
     3ac:	2005883a 	mov	r2,r4
     3b0:	2807883a 	mov	r3,r5
     3b4:	1009883a 	mov	r4,r2
     3b8:	180b883a 	mov	r5,r3
     3bc:	00032c40 	call	32c4 <__fixdfsi>
     3c0:	8085283a 	div	r2,r16,r2
     3c4:	1080004c 	andi	r2,r2,1
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	1005003a 	cmpeq	r2,r2,zero
     3d0:	1000061e 	bne	r2,zero,3ec <main+0x1fc>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
     3d4:	e13fe517 	ldw	r4,-108(fp)
     3d8:	01400074 	movhi	r5,1
     3dc:	2962f104 	addi	r5,r5,-29756
     3e0:	01800044 	movi	r6,1
     3e4:	0004c100 	call	4c10 <alt_up_character_lcd_write>
     3e8:	00000506 	br	400 <main+0x210>
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
     3ec:	e13fe517 	ldw	r4,-108(fp)
     3f0:	01400074 	movhi	r5,1
     3f4:	2962f204 	addi	r5,r5,-29752
     3f8:	01800044 	movi	r6,1
     3fc:	0004c100 	call	4c10 <alt_up_character_lcd_write>
			cursor++;
     400:	e0bfe417 	ldw	r2,-112(fp)
     404:	10800044 	addi	r2,r2,1
     408:	e0bfe415 	stw	r2,-112(fp)
		if(location == 1){
			alt_up_character_lcd_write (lcd_dev, ">", 1);
			cursor = 1;
		}

		while(cursor < 16){
     40c:	e0bfe417 	ldw	r2,-112(fp)
     410:	10800410 	cmplti	r2,r2,16
     414:	103fd31e 	bne	r2,zero,364 <main+0x174>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
			cursor++;
		}
		cursor = 0;
     418:	e03fe415 	stw	zero,-112(fp)
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
     41c:	e17fe417 	ldw	r5,-112(fp)
     420:	e13fe517 	ldw	r4,-108(fp)
     424:	01800044 	movi	r6,1
     428:	0004d4c0 	call	4d4c <alt_up_character_lcd_set_cursor_pos>
		if(location == 0){
     42c:	e0bfe617 	ldw	r2,-104(fp)
     430:	1004c03a 	cmpne	r2,r2,zero
     434:	1000301e 	bne	r2,zero,4f8 <main+0x308>
			alt_up_character_lcd_write (lcd_dev, ">", 1);
     438:	e13fe517 	ldw	r4,-108(fp)
     43c:	01400074 	movhi	r5,1
     440:	2962f004 	addi	r5,r5,-29760
     444:	01800044 	movi	r6,1
     448:	0004c100 	call	4c10 <alt_up_character_lcd_write>
			cursor = 1;}
     44c:	00800044 	movi	r2,1
     450:	e0bfe415 	stw	r2,-112(fp)
	while(cursor < 16){
     454:	00002806 	br	4f8 <main+0x308>
		    alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
     458:	e17fe417 	ldw	r5,-112(fp)
     45c:	e13fe517 	ldw	r4,-108(fp)
     460:	01800044 	movi	r6,1
     464:	0004d4c0 	call	4d4c <alt_up_character_lcd_set_cursor_pos>
			if((bottom / (int)pow(2,(15-cursor)))%2 != 0)
     468:	e43fe70b 	ldhu	r16,-100(fp)
     46c:	00c003c4 	movi	r3,15
     470:	e0bfe417 	ldw	r2,-112(fp)
     474:	1889c83a 	sub	r4,r3,r2
     478:	00031cc0 	call	31cc <__floatsidf>
     47c:	100f883a 	mov	r7,r2
     480:	1811883a 	mov	r8,r3
     484:	0009883a 	mov	r4,zero
     488:	01500034 	movhi	r5,16384
     48c:	380d883a 	mov	r6,r7
     490:	400f883a 	mov	r7,r8
     494:	00005240 	call	524 <pow>
     498:	100b883a 	mov	r5,r2
     49c:	180d883a 	mov	r6,r3
     4a0:	2809883a 	mov	r4,r5
     4a4:	300b883a 	mov	r5,r6
     4a8:	00032c40 	call	32c4 <__fixdfsi>
     4ac:	8085283a 	div	r2,r16,r2
     4b0:	1080004c 	andi	r2,r2,1
     4b4:	10803fcc 	andi	r2,r2,255
     4b8:	1005003a 	cmpeq	r2,r2,zero
     4bc:	1000061e 	bne	r2,zero,4d8 <main+0x2e8>
				alt_up_character_lcd_write (lcd_dev, "O", 1);
     4c0:	e13fe517 	ldw	r4,-108(fp)
     4c4:	01400074 	movhi	r5,1
     4c8:	2962f104 	addi	r5,r5,-29756
     4cc:	01800044 	movi	r6,1
     4d0:	0004c100 	call	4c10 <alt_up_character_lcd_write>
     4d4:	00000506 	br	4ec <main+0x2fc>
			else
				alt_up_character_lcd_write (lcd_dev, " ", 1);
     4d8:	e13fe517 	ldw	r4,-108(fp)
     4dc:	01400074 	movhi	r5,1
     4e0:	2962f204 	addi	r5,r5,-29752
     4e4:	01800044 	movi	r6,1
     4e8:	0004c100 	call	4c10 <alt_up_character_lcd_write>
			cursor++;
     4ec:	e0bfe417 	ldw	r2,-112(fp)
     4f0:	10800044 	addi	r2,r2,1
     4f4:	e0bfe415 	stw	r2,-112(fp)
		cursor = 0;
		alt_up_character_lcd_set_cursor_pos (lcd_dev, cursor, 1);	// set LCD cursor location to top row
		if(location == 0){
			alt_up_character_lcd_write (lcd_dev, ">", 1);
			cursor = 1;}
	while(cursor < 16){
     4f8:	e0bfe417 	ldw	r2,-112(fp)
     4fc:	10800410 	cmplti	r2,r2,16
     500:	103fd51e 	bne	r2,zero,458 <main+0x268>
				alt_up_character_lcd_write (lcd_dev, " ", 1);
			cursor++;
		}


	}
     504:	003f7e06 	br	300 <main+0x110>

}
     508:	e0bfff17 	ldw	r2,-4(fp)
     50c:	e037883a 	mov	sp,fp
     510:	dfc00217 	ldw	ra,8(sp)
     514:	df000117 	ldw	fp,4(sp)
     518:	dc000017 	ldw	r16,0(sp)
     51c:	dec00304 	addi	sp,sp,12
     520:	f800283a 	ret

00000524 <pow>:
     524:	deffee04 	addi	sp,sp,-72
     528:	ddc01015 	stw	r23,64(sp)
     52c:	05c00074 	movhi	r23,1
     530:	bde9fe04 	addi	r23,r23,-22536
     534:	dd800f15 	stw	r22,60(sp)
     538:	dd400e15 	stw	r21,56(sp)
     53c:	dd000d15 	stw	r20,52(sp)
     540:	dcc00c15 	stw	r19,48(sp)
     544:	dc800b15 	stw	r18,44(sp)
     548:	dc400a15 	stw	r17,40(sp)
     54c:	dc000915 	stw	r16,36(sp)
     550:	2029883a 	mov	r20,r4
     554:	dfc01115 	stw	ra,68(sp)
     558:	3025883a 	mov	r18,r6
     55c:	282b883a 	mov	r21,r5
     560:	3827883a 	mov	r19,r7
     564:	00009ac0 	call	9ac <__ieee754_pow>
     568:	b9000017 	ldw	r4,0(r23)
     56c:	05bfffc4 	movi	r22,-1
     570:	1021883a 	mov	r16,r2
     574:	1823883a 	mov	r17,r3
     578:	25800426 	beq	r4,r22,58c <pow+0x68>
     57c:	9009883a 	mov	r4,r18
     580:	980b883a 	mov	r5,r19
     584:	0001fa80 	call	1fa8 <__isnand>
     588:	10000d26 	beq	r2,zero,5c0 <pow+0x9c>
     58c:	8005883a 	mov	r2,r16
     590:	8807883a 	mov	r3,r17
     594:	dfc01117 	ldw	ra,68(sp)
     598:	ddc01017 	ldw	r23,64(sp)
     59c:	dd800f17 	ldw	r22,60(sp)
     5a0:	dd400e17 	ldw	r21,56(sp)
     5a4:	dd000d17 	ldw	r20,52(sp)
     5a8:	dcc00c17 	ldw	r19,48(sp)
     5ac:	dc800b17 	ldw	r18,44(sp)
     5b0:	dc400a17 	ldw	r17,40(sp)
     5b4:	dc000917 	ldw	r16,36(sp)
     5b8:	dec01204 	addi	sp,sp,72
     5bc:	f800283a 	ret
     5c0:	a009883a 	mov	r4,r20
     5c4:	a80b883a 	mov	r5,r21
     5c8:	0001fa80 	call	1fa8 <__isnand>
     5cc:	1000151e 	bne	r2,zero,624 <pow+0x100>
     5d0:	000d883a 	mov	r6,zero
     5d4:	000f883a 	mov	r7,zero
     5d8:	a009883a 	mov	r4,r20
     5dc:	a80b883a 	mov	r5,r21
     5e0:	0002f240 	call	2f24 <__eqdf2>
     5e4:	1000541e 	bne	r2,zero,738 <pow+0x214>
     5e8:	000d883a 	mov	r6,zero
     5ec:	000f883a 	mov	r7,zero
     5f0:	9009883a 	mov	r4,r18
     5f4:	980b883a 	mov	r5,r19
     5f8:	0002f240 	call	2f24 <__eqdf2>
     5fc:	10002c1e 	bne	r2,zero,6b0 <pow+0x18c>
     600:	b8800017 	ldw	r2,0(r23)
     604:	d8000615 	stw	zero,24(sp)
     608:	d8000715 	stw	zero,28(sp)
     60c:	10001226 	beq	r2,zero,658 <pow+0x134>
     610:	008ffc34 	movhi	r2,16368
     614:	d8800715 	stw	r2,28(sp)
     618:	dc000617 	ldw	r16,24(sp)
     61c:	dc400717 	ldw	r17,28(sp)
     620:	003fda06 	br	58c <pow+0x68>
     624:	000d883a 	mov	r6,zero
     628:	000f883a 	mov	r7,zero
     62c:	9009883a 	mov	r4,r18
     630:	980b883a 	mov	r5,r19
     634:	0002f240 	call	2f24 <__eqdf2>
     638:	103fd41e 	bne	r2,zero,58c <pow+0x68>
     63c:	b8c00017 	ldw	r3,0(r23)
     640:	010ffc34 	movhi	r4,16368
     644:	d8000615 	stw	zero,24(sp)
     648:	d9000715 	stw	r4,28(sp)
     64c:	1d801526 	beq	r3,r22,6a4 <pow+0x180>
     650:	00800084 	movi	r2,2
     654:	18801326 	beq	r3,r2,6a4 <pow+0x180>
     658:	00800074 	movhi	r2,1
     65c:	10a30704 	addi	r2,r2,-29668
     660:	00c00044 	movi	r3,1
     664:	d809883a 	mov	r4,sp
     668:	dcc00515 	stw	r19,20(sp)
     66c:	dd400315 	stw	r21,12(sp)
     670:	d8800115 	stw	r2,4(sp)
     674:	d8c00015 	stw	r3,0(sp)
     678:	dc800415 	stw	r18,16(sp)
     67c:	dd000215 	stw	r20,8(sp)
     680:	d8000815 	stw	zero,32(sp)
     684:	0001fd80 	call	1fd8 <matherr>
     688:	10002726 	beq	r2,zero,728 <pow+0x204>
     68c:	d8800817 	ldw	r2,32(sp)
     690:	103fe126 	beq	r2,zero,618 <pow+0xf4>
     694:	00039c80 	call	39c8 <__errno>
     698:	d8c00817 	ldw	r3,32(sp)
     69c:	10c00015 	stw	r3,0(r2)
     6a0:	003fdd06 	br	618 <pow+0xf4>
     6a4:	d9000715 	stw	r4,28(sp)
     6a8:	d8000615 	stw	zero,24(sp)
     6ac:	003fda06 	br	618 <pow+0xf4>
     6b0:	9009883a 	mov	r4,r18
     6b4:	980b883a 	mov	r5,r19
     6b8:	0001f8c0 	call	1f8c <finite>
     6bc:	103fb326 	beq	r2,zero,58c <pow+0x68>
     6c0:	000d883a 	mov	r6,zero
     6c4:	000f883a 	mov	r7,zero
     6c8:	9009883a 	mov	r4,r18
     6cc:	980b883a 	mov	r5,r19
     6d0:	00030bc0 	call	30bc <__ltdf2>
     6d4:	103fad0e 	bge	r2,zero,58c <pow+0x68>
     6d8:	b9000017 	ldw	r4,0(r23)
     6dc:	00800044 	movi	r2,1
     6e0:	00c00074 	movhi	r3,1
     6e4:	18e30704 	addi	r3,r3,-29668
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	d8c00115 	stw	r3,4(sp)
     6f0:	dd400315 	stw	r21,12(sp)
     6f4:	dcc00515 	stw	r19,20(sp)
     6f8:	d8000815 	stw	zero,32(sp)
     6fc:	dd000215 	stw	r20,8(sp)
     700:	dc800415 	stw	r18,16(sp)
     704:	20005626 	beq	r4,zero,860 <pow+0x33c>
     708:	00bffc34 	movhi	r2,65520
     70c:	d8800715 	stw	r2,28(sp)
     710:	00800084 	movi	r2,2
     714:	d8000615 	stw	zero,24(sp)
     718:	20800326 	beq	r4,r2,728 <pow+0x204>
     71c:	d809883a 	mov	r4,sp
     720:	0001fd80 	call	1fd8 <matherr>
     724:	103fd91e 	bne	r2,zero,68c <pow+0x168>
     728:	00039c80 	call	39c8 <__errno>
     72c:	00c00844 	movi	r3,33
     730:	10c00015 	stw	r3,0(r2)
     734:	003fd506 	br	68c <pow+0x168>
     738:	8009883a 	mov	r4,r16
     73c:	880b883a 	mov	r5,r17
     740:	0001f8c0 	call	1f8c <finite>
     744:	10002426 	beq	r2,zero,7d8 <pow+0x2b4>
     748:	000d883a 	mov	r6,zero
     74c:	000f883a 	mov	r7,zero
     750:	8009883a 	mov	r4,r16
     754:	880b883a 	mov	r5,r17
     758:	0002f240 	call	2f24 <__eqdf2>
     75c:	103f8b1e 	bne	r2,zero,58c <pow+0x68>
     760:	a009883a 	mov	r4,r20
     764:	a80b883a 	mov	r5,r21
     768:	0001f8c0 	call	1f8c <finite>
     76c:	103f8726 	beq	r2,zero,58c <pow+0x68>
     770:	9009883a 	mov	r4,r18
     774:	980b883a 	mov	r5,r19
     778:	0001f8c0 	call	1f8c <finite>
     77c:	103f8326 	beq	r2,zero,58c <pow+0x68>
     780:	b9000017 	ldw	r4,0(r23)
     784:	00800104 	movi	r2,4
     788:	d8800015 	stw	r2,0(sp)
     78c:	00c00074 	movhi	r3,1
     790:	18e30704 	addi	r3,r3,-29668
     794:	00800084 	movi	r2,2
     798:	d8c00115 	stw	r3,4(sp)
     79c:	dd400315 	stw	r21,12(sp)
     7a0:	dcc00515 	stw	r19,20(sp)
     7a4:	d8000815 	stw	zero,32(sp)
     7a8:	dd000215 	stw	r20,8(sp)
     7ac:	dc800415 	stw	r18,16(sp)
     7b0:	d8000615 	stw	zero,24(sp)
     7b4:	d8000715 	stw	zero,28(sp)
     7b8:	20800326 	beq	r4,r2,7c8 <pow+0x2a4>
     7bc:	d809883a 	mov	r4,sp
     7c0:	0001fd80 	call	1fd8 <matherr>
     7c4:	103fb11e 	bne	r2,zero,68c <pow+0x168>
     7c8:	00039c80 	call	39c8 <__errno>
     7cc:	00c00884 	movi	r3,34
     7d0:	10c00015 	stw	r3,0(r2)
     7d4:	003fad06 	br	68c <pow+0x168>
     7d8:	a009883a 	mov	r4,r20
     7dc:	a80b883a 	mov	r5,r21
     7e0:	0001f8c0 	call	1f8c <finite>
     7e4:	103fd826 	beq	r2,zero,748 <pow+0x224>
     7e8:	9009883a 	mov	r4,r18
     7ec:	980b883a 	mov	r5,r19
     7f0:	0001f8c0 	call	1f8c <finite>
     7f4:	103fd426 	beq	r2,zero,748 <pow+0x224>
     7f8:	880b883a 	mov	r5,r17
     7fc:	8009883a 	mov	r4,r16
     800:	0001fa80 	call	1fa8 <__isnand>
     804:	10001926 	beq	r2,zero,86c <pow+0x348>
     808:	bc000017 	ldw	r16,0(r23)
     80c:	00800044 	movi	r2,1
     810:	00c00074 	movhi	r3,1
     814:	18e30704 	addi	r3,r3,-29668
     818:	d8800015 	stw	r2,0(sp)
     81c:	d8c00115 	stw	r3,4(sp)
     820:	dd400315 	stw	r21,12(sp)
     824:	dcc00515 	stw	r19,20(sp)
     828:	d8000815 	stw	zero,32(sp)
     82c:	dd000215 	stw	r20,8(sp)
     830:	dc800415 	stw	r18,16(sp)
     834:	80000a26 	beq	r16,zero,860 <pow+0x33c>
     838:	0009883a 	mov	r4,zero
     83c:	000d883a 	mov	r6,zero
     840:	000b883a 	mov	r5,zero
     844:	000f883a 	mov	r7,zero
     848:	0002ccc0 	call	2ccc <__divdf3>
     84c:	d8800615 	stw	r2,24(sp)
     850:	00800084 	movi	r2,2
     854:	d8c00715 	stw	r3,28(sp)
     858:	80bfb01e 	bne	r16,r2,71c <pow+0x1f8>
     85c:	003fb206 	br	728 <pow+0x204>
     860:	d8000615 	stw	zero,24(sp)
     864:	d8000715 	stw	zero,28(sp)
     868:	003fac06 	br	71c <pow+0x1f8>
     86c:	b8800017 	ldw	r2,0(r23)
     870:	00c000c4 	movi	r3,3
     874:	01000074 	movhi	r4,1
     878:	21230704 	addi	r4,r4,-29668
     87c:	d8c00015 	stw	r3,0(sp)
     880:	d9000115 	stw	r4,4(sp)
     884:	d8000815 	stw	zero,32(sp)
     888:	dd000215 	stw	r20,8(sp)
     88c:	dd400315 	stw	r21,12(sp)
     890:	dc800415 	stw	r18,16(sp)
     894:	dcc00515 	stw	r19,20(sp)
     898:	1000251e 	bne	r2,zero,930 <pow+0x40c>
     89c:	05b80034 	movhi	r22,57344
     8a0:	0091fc34 	movhi	r2,18416
     8a4:	10bfffc4 	addi	r2,r2,-1
     8a8:	000d883a 	mov	r6,zero
     8ac:	000f883a 	mov	r7,zero
     8b0:	a80b883a 	mov	r5,r21
     8b4:	a009883a 	mov	r4,r20
     8b8:	d8800715 	stw	r2,28(sp)
     8bc:	dd800615 	stw	r22,24(sp)
     8c0:	00030bc0 	call	30bc <__ltdf2>
     8c4:	103fbd0e 	bge	r2,zero,7bc <pow+0x298>
     8c8:	0005883a 	mov	r2,zero
     8cc:	00cff834 	movhi	r3,16352
     8d0:	180f883a 	mov	r7,r3
     8d4:	100d883a 	mov	r6,r2
     8d8:	980b883a 	mov	r5,r19
     8dc:	9009883a 	mov	r4,r18
     8e0:	00029080 	call	2908 <__muldf3>
     8e4:	1009883a 	mov	r4,r2
     8e8:	180b883a 	mov	r5,r3
     8ec:	1021883a 	mov	r16,r2
     8f0:	1823883a 	mov	r17,r3
     8f4:	0001ff00 	call	1ff0 <rint>
     8f8:	180f883a 	mov	r7,r3
     8fc:	8009883a 	mov	r4,r16
     900:	880b883a 	mov	r5,r17
     904:	100d883a 	mov	r6,r2
     908:	0002fac0 	call	2fac <__nedf2>
     90c:	10000426 	beq	r2,zero,920 <pow+0x3fc>
     910:	00b1fc34 	movhi	r2,51184
     914:	10bfffc4 	addi	r2,r2,-1
     918:	dd800615 	stw	r22,24(sp)
     91c:	d8800715 	stw	r2,28(sp)
     920:	b8c00017 	ldw	r3,0(r23)
     924:	00800084 	movi	r2,2
     928:	18bfa41e 	bne	r3,r2,7bc <pow+0x298>
     92c:	003fa606 	br	7c8 <pow+0x2a4>
     930:	009ffc34 	movhi	r2,32752
     934:	000d883a 	mov	r6,zero
     938:	000f883a 	mov	r7,zero
     93c:	a80b883a 	mov	r5,r21
     940:	a009883a 	mov	r4,r20
     944:	d8800715 	stw	r2,28(sp)
     948:	d8000615 	stw	zero,24(sp)
     94c:	00030bc0 	call	30bc <__ltdf2>
     950:	103ff30e 	bge	r2,zero,920 <pow+0x3fc>
     954:	0005883a 	mov	r2,zero
     958:	00cff834 	movhi	r3,16352
     95c:	180f883a 	mov	r7,r3
     960:	100d883a 	mov	r6,r2
     964:	980b883a 	mov	r5,r19
     968:	9009883a 	mov	r4,r18
     96c:	00029080 	call	2908 <__muldf3>
     970:	1009883a 	mov	r4,r2
     974:	180b883a 	mov	r5,r3
     978:	1021883a 	mov	r16,r2
     97c:	1823883a 	mov	r17,r3
     980:	0001ff00 	call	1ff0 <rint>
     984:	180f883a 	mov	r7,r3
     988:	8009883a 	mov	r4,r16
     98c:	880b883a 	mov	r5,r17
     990:	100d883a 	mov	r6,r2
     994:	0002fac0 	call	2fac <__nedf2>
     998:	103fe126 	beq	r2,zero,920 <pow+0x3fc>
     99c:	00bffc34 	movhi	r2,65520
     9a0:	d8800715 	stw	r2,28(sp)
     9a4:	d8000615 	stw	zero,24(sp)
     9a8:	003fdd06 	br	920 <pow+0x3fc>

000009ac <__ieee754_pow>:
     9ac:	deffbb04 	addi	sp,sp,-276
     9b0:	3005883a 	mov	r2,r6
     9b4:	dd404015 	stw	r21,256(sp)
     9b8:	dd003f15 	stw	r20,252(sp)
     9bc:	d9802815 	stw	r6,160(sp)
     9c0:	2029883a 	mov	r20,r4
     9c4:	282b883a 	mov	r21,r5
     9c8:	3009883a 	mov	r4,r6
     9cc:	380b883a 	mov	r5,r7
     9d0:	01a00034 	movhi	r6,32768
     9d4:	31bfffc4 	addi	r6,r6,-1
     9d8:	dc003b15 	stw	r16,236(sp)
     9dc:	29a0703a 	and	r16,r5,r6
     9e0:	1404b03a 	or	r2,r2,r16
     9e4:	dd804115 	stw	r22,260(sp)
     9e8:	dc403c15 	stw	r17,240(sp)
     9ec:	d9c02915 	stw	r7,164(sp)
     9f0:	382d883a 	mov	r22,r7
     9f4:	dfc04415 	stw	ra,272(sp)
     9f8:	200f883a 	mov	r7,r4
     9fc:	df004315 	stw	fp,268(sp)
     a00:	ddc04215 	stw	r23,264(sp)
     a04:	dcc03e15 	stw	r19,248(sp)
     a08:	dc803d15 	stw	r18,244(sp)
     a0c:	a023883a 	mov	r17,r20
     a10:	2809883a 	mov	r4,r5
     a14:	10000826 	beq	r2,zero,a38 <__ieee754_pow+0x8c>
     a18:	a9a4703a 	and	r18,r21,r6
     a1c:	009ffc34 	movhi	r2,32752
     a20:	a827883a 	mov	r19,r21
     a24:	1480180e 	bge	r2,r18,a88 <__ieee754_pow+0xdc>
     a28:	00b00434 	movhi	r2,49168
     a2c:	9085883a 	add	r2,r18,r2
     a30:	8884b03a 	or	r2,r17,r2
     a34:	1000321e 	bne	r2,zero,b00 <__ieee754_pow+0x154>
     a38:	0009883a 	mov	r4,zero
     a3c:	014ffc34 	movhi	r5,16368
     a40:	d9002815 	stw	r4,160(sp)
     a44:	d9402915 	stw	r5,164(sp)
     a48:	d9002817 	ldw	r4,160(sp)
     a4c:	d9402917 	ldw	r5,164(sp)
     a50:	2005883a 	mov	r2,r4
     a54:	2807883a 	mov	r3,r5
     a58:	dfc04417 	ldw	ra,272(sp)
     a5c:	df004317 	ldw	fp,268(sp)
     a60:	ddc04217 	ldw	r23,264(sp)
     a64:	dd804117 	ldw	r22,260(sp)
     a68:	dd404017 	ldw	r21,256(sp)
     a6c:	dd003f17 	ldw	r20,252(sp)
     a70:	dcc03e17 	ldw	r19,248(sp)
     a74:	dc803d17 	ldw	r18,244(sp)
     a78:	dc403c17 	ldw	r17,240(sp)
     a7c:	dc003b17 	ldw	r16,236(sp)
     a80:	dec04504 	addi	sp,sp,276
     a84:	f800283a 	ret
     a88:	90802b26 	beq	r18,r2,b38 <__ieee754_pow+0x18c>
     a8c:	143fe616 	blt	r2,r16,a28 <__ieee754_pow+0x7c>
     a90:	80806126 	beq	r16,r2,c18 <__ieee754_pow+0x26c>
     a94:	982e403a 	cmpge	r23,r19,zero
     a98:	b8004e26 	beq	r23,zero,bd4 <__ieee754_pow+0x228>
     a9c:	0039883a 	mov	fp,zero
     aa0:	3800281e 	bne	r7,zero,b44 <__ieee754_pow+0x198>
     aa4:	009ffc34 	movhi	r2,32752
     aa8:	80804f26 	beq	r16,r2,be8 <__ieee754_pow+0x23c>
     aac:	008ffc34 	movhi	r2,16368
     ab0:	80808226 	beq	r16,r2,cbc <__ieee754_pow+0x310>
     ab4:	00900034 	movhi	r2,16384
     ab8:	20828426 	beq	r4,r2,14cc <__ieee754_pow+0xb20>
     abc:	008ff834 	movhi	r2,16352
     ac0:	2080201e 	bne	r4,r2,b44 <__ieee754_pow+0x198>
     ac4:	98001f16 	blt	r19,zero,b44 <__ieee754_pow+0x198>
     ac8:	a80b883a 	mov	r5,r21
     acc:	a009883a 	mov	r4,r20
     ad0:	dfc04417 	ldw	ra,272(sp)
     ad4:	df004317 	ldw	fp,268(sp)
     ad8:	ddc04217 	ldw	r23,264(sp)
     adc:	dd804117 	ldw	r22,260(sp)
     ae0:	dd404017 	ldw	r21,256(sp)
     ae4:	dd003f17 	ldw	r20,252(sp)
     ae8:	dcc03e17 	ldw	r19,248(sp)
     aec:	dc803d17 	ldw	r18,244(sp)
     af0:	dc403c17 	ldw	r17,240(sp)
     af4:	dc003b17 	ldw	r16,236(sp)
     af8:	dec04504 	addi	sp,sp,276
     afc:	0001cac1 	jmpi	1cac <__ieee754_sqrt>
     b00:	01000074 	movhi	r4,1
     b04:	21230804 	addi	r4,r4,-29664
     b08:	dfc04417 	ldw	ra,272(sp)
     b0c:	df004317 	ldw	fp,268(sp)
     b10:	ddc04217 	ldw	r23,264(sp)
     b14:	dd804117 	ldw	r22,260(sp)
     b18:	dd404017 	ldw	r21,256(sp)
     b1c:	dd003f17 	ldw	r20,252(sp)
     b20:	dcc03e17 	ldw	r19,248(sp)
     b24:	dc803d17 	ldw	r18,244(sp)
     b28:	dc403c17 	ldw	r17,240(sp)
     b2c:	dc003b17 	ldw	r16,236(sp)
     b30:	dec04504 	addi	sp,sp,276
     b34:	0001fe01 	jmpi	1fe0 <nan>
     b38:	a03fbb1e 	bne	r20,zero,a28 <__ieee754_pow+0x7c>
     b3c:	003fd306 	br	a8c <__ieee754_pow+0xe0>
     b40:	0039883a 	mov	fp,zero
     b44:	a009883a 	mov	r4,r20
     b48:	a80b883a 	mov	r5,r21
     b4c:	0001f740 	call	1f74 <fabs>
     b50:	1015883a 	mov	r10,r2
     b54:	1817883a 	mov	r11,r3
     b58:	88001226 	beq	r17,zero,ba4 <__ieee754_pow+0x1f8>
     b5c:	9804d7fa 	srli	r2,r19,31
     b60:	10bfffc4 	addi	r2,r2,-1
     b64:	1706b03a 	or	r3,r2,fp
     b68:	d8802515 	stw	r2,148(sp)
     b6c:	18002c1e 	bne	r3,zero,c20 <__ieee754_pow+0x274>
     b70:	a80f883a 	mov	r7,r21
     b74:	a009883a 	mov	r4,r20
     b78:	a80b883a 	mov	r5,r21
     b7c:	a00d883a 	mov	r6,r20
     b80:	00028140 	call	2814 <__subdf3>
     b84:	1009883a 	mov	r4,r2
     b88:	180b883a 	mov	r5,r3
     b8c:	100d883a 	mov	r6,r2
     b90:	180f883a 	mov	r7,r3
     b94:	0002ccc0 	call	2ccc <__divdf3>
     b98:	d8802815 	stw	r2,160(sp)
     b9c:	d8c02915 	stw	r3,164(sp)
     ba0:	003fa906 	br	a48 <__ieee754_pow+0x9c>
     ba4:	009ffc34 	movhi	r2,32752
     ba8:	90800326 	beq	r18,r2,bb8 <__ieee754_pow+0x20c>
     bac:	90000226 	beq	r18,zero,bb8 <__ieee754_pow+0x20c>
     bb0:	008ffc34 	movhi	r2,16368
     bb4:	90bfe91e 	bne	r18,r2,b5c <__ieee754_pow+0x1b0>
     bb8:	b0026316 	blt	r22,zero,1548 <__ieee754_pow+0xb9c>
     bbc:	5011883a 	mov	r8,r10
     bc0:	5813883a 	mov	r9,r11
     bc4:	b8023126 	beq	r23,zero,148c <__ieee754_pow+0xae0>
     bc8:	da002815 	stw	r8,160(sp)
     bcc:	da402915 	stw	r9,164(sp)
     bd0:	003f9d06 	br	a48 <__ieee754_pow+0x9c>
     bd4:	0090d034 	movhi	r2,17216
     bd8:	10bfffc4 	addi	r2,r2,-1
     bdc:	1400270e 	bge	r2,r16,c7c <__ieee754_pow+0x2d0>
     be0:	07000084 	movi	fp,2
     be4:	003fae06 	br	aa0 <__ieee754_pow+0xf4>
     be8:	00b00434 	movhi	r2,49168
     bec:	9085883a 	add	r2,r18,r2
     bf0:	8884b03a 	or	r2,r17,r2
     bf4:	103f9026 	beq	r2,zero,a38 <__ieee754_pow+0x8c>
     bf8:	008ffc34 	movhi	r2,16368
     bfc:	10bfffc4 	addi	r2,r2,-1
     c00:	1482d00e 	bge	r2,r18,1744 <__ieee754_pow+0xd98>
     c04:	b03f900e 	bge	r22,zero,a48 <__ieee754_pow+0x9c>
     c08:	0005883a 	mov	r2,zero
     c0c:	d8802815 	stw	r2,160(sp)
     c10:	d8802915 	stw	r2,164(sp)
     c14:	003f8c06 	br	a48 <__ieee754_pow+0x9c>
     c18:	383f9e26 	beq	r7,zero,a94 <__ieee754_pow+0xe8>
     c1c:	003f8206 	br	a28 <__ieee754_pow+0x7c>
     c20:	00907834 	movhi	r2,16864
     c24:	1400290e 	bge	r2,r16,ccc <__ieee754_pow+0x320>
     c28:	0090fc34 	movhi	r2,17392
     c2c:	1402500e 	bge	r2,r16,1570 <__ieee754_pow+0xbc4>
     c30:	008ffc34 	movhi	r2,16368
     c34:	10bfffc4 	addi	r2,r2,-1
     c38:	14800b0e 	bge	r2,r18,c68 <__ieee754_pow+0x2bc>
     c3c:	05800b0e 	bge	zero,r22,c6c <__ieee754_pow+0x2c0>
     c40:	00a20034 	movhi	r2,34816
     c44:	109d6704 	addi	r2,r2,30108
     c48:	00df8e34 	movhi	r3,32312
     c4c:	18f90f04 	addi	r3,r3,-7108
     c50:	100d883a 	mov	r6,r2
     c54:	180f883a 	mov	r7,r3
     c58:	1009883a 	mov	r4,r2
     c5c:	180b883a 	mov	r5,r3
     c60:	00029080 	call	2908 <__muldf3>
     c64:	003fcc06 	br	b98 <__ieee754_pow+0x1ec>
     c68:	b03ff516 	blt	r22,zero,c40 <__ieee754_pow+0x294>
     c6c:	0007883a 	mov	r3,zero
     c70:	d8c02815 	stw	r3,160(sp)
     c74:	d8c02915 	stw	r3,164(sp)
     c78:	003f7306 	br	a48 <__ieee754_pow+0x9c>
     c7c:	008ffc34 	movhi	r2,16368
     c80:	10bfffc4 	addi	r2,r2,-1
     c84:	143f850e 	bge	r2,r16,a9c <__ieee754_pow+0xf0>
     c88:	8005d53a 	srai	r2,r16,20
     c8c:	01400504 	movi	r5,20
     c90:	10ff0044 	addi	r3,r2,-1023
     c94:	28c3e10e 	bge	r5,r3,1c1c <__ieee754_pow+0x1270>
     c98:	00800d04 	movi	r2,52
     c9c:	10c5c83a 	sub	r2,r2,r3
     ca0:	3886d83a 	srl	r3,r7,r2
     ca4:	1884983a 	sll	r2,r3,r2
     ca8:	38bf7c1e 	bne	r7,r2,a9c <__ieee754_pow+0xf0>
     cac:	18c0004c 	andi	r3,r3,1
     cb0:	00800084 	movi	r2,2
     cb4:	10f9c83a 	sub	fp,r2,r3
     cb8:	003f7906 	br	aa0 <__ieee754_pow+0xf4>
     cbc:	b0038516 	blt	r22,zero,1ad4 <__ieee754_pow+0x1128>
     cc0:	dd002815 	stw	r20,160(sp)
     cc4:	dd402915 	stw	r21,164(sp)
     cc8:	003f5f06 	br	a48 <__ieee754_pow+0x9c>
     ccc:	00800434 	movhi	r2,16
     cd0:	10bfffc4 	addi	r2,r2,-1
     cd4:	1482900e 	bge	r2,r18,1718 <__ieee754_pow+0xd6c>
     cd8:	000b883a 	mov	r5,zero
     cdc:	9005d53a 	srai	r2,r18,20
     ce0:	00c00434 	movhi	r3,16
     ce4:	18ffffc4 	addi	r3,r3,-1
     ce8:	90c8703a 	and	r4,r18,r3
     cec:	2887883a 	add	r3,r5,r2
     cf0:	18bf0044 	addi	r2,r3,-1023
     cf4:	d8800015 	stw	r2,0(sp)
     cf8:	00800134 	movhi	r2,4
     cfc:	10a62384 	addi	r2,r2,-26482
     d00:	250ffc34 	orhi	r20,r4,16368
     d04:	1101ee0e 	bge	r2,r4,14c0 <__ieee754_pow+0xb14>
     d08:	00800334 	movhi	r2,12
     d0c:	10ad9e44 	addi	r2,r2,-18823
     d10:	1101e716 	blt	r2,r4,14b0 <__ieee754_pow+0xb04>
     d14:	01000044 	movi	r4,1
     d18:	04000334 	movhi	r16,12
     d1c:	200890fa 	slli	r4,r4,3
     d20:	da800115 	stw	r10,4(sp)
     d24:	dd000215 	stw	r20,8(sp)
     d28:	d9002c15 	stw	r4,176(sp)
     d2c:	d9402c17 	ldw	r5,176(sp)
     d30:	01000074 	movhi	r4,1
     d34:	21230904 	addi	r4,r4,-29660
     d38:	a02bd07a 	srai	r21,r20,1
     d3c:	2909883a 	add	r4,r5,r4
     d40:	25800017 	ldw	r22,0(r4)
     d44:	25c00117 	ldw	r23,4(r4)
     d48:	a00b883a 	mov	r5,r20
     d4c:	5009883a 	mov	r4,r10
     d50:	b00d883a 	mov	r6,r22
     d54:	b80f883a 	mov	r7,r23
     d58:	00028140 	call	2814 <__subdf3>
     d5c:	d9000117 	ldw	r4,4(sp)
     d60:	a00b883a 	mov	r5,r20
     d64:	b00d883a 	mov	r6,r22
     d68:	b80f883a 	mov	r7,r23
     d6c:	1025883a 	mov	r18,r2
     d70:	1827883a 	mov	r19,r3
     d74:	00028940 	call	2894 <__adddf3>
     d78:	0011883a 	mov	r8,zero
     d7c:	024ffc34 	movhi	r9,16368
     d80:	480b883a 	mov	r5,r9
     d84:	4009883a 	mov	r4,r8
     d88:	180f883a 	mov	r7,r3
     d8c:	100d883a 	mov	r6,r2
     d90:	0002ccc0 	call	2ccc <__divdf3>
     d94:	d8c02e15 	stw	r3,184(sp)
     d98:	d8800f15 	stw	r2,60(sp)
     d9c:	d8802d15 	stw	r2,180(sp)
     da0:	d8802e17 	ldw	r2,184(sp)
     da4:	d9800f17 	ldw	r6,60(sp)
     da8:	9009883a 	mov	r4,r18
     dac:	980b883a 	mov	r5,r19
     db0:	100f883a 	mov	r7,r2
     db4:	dc800b15 	stw	r18,44(sp)
     db8:	dcc00c15 	stw	r19,48(sp)
     dbc:	d8801015 	stw	r2,64(sp)
     dc0:	00029080 	call	2908 <__muldf3>
     dc4:	d8c03015 	stw	r3,192(sp)
     dc8:	d9003017 	ldw	r4,192(sp)
     dcc:	d8802f15 	stw	r2,188(sp)
     dd0:	d8800315 	stw	r2,12(sp)
     dd4:	ad480034 	orhi	r21,r21,8192
     dd8:	0005883a 	mov	r2,zero
     ddc:	ac2b883a 	add	r21,r21,r16
     de0:	000b883a 	mov	r5,zero
     de4:	1021883a 	mov	r16,r2
     de8:	2005883a 	mov	r2,r4
     dec:	800d883a 	mov	r6,r16
     df0:	a80f883a 	mov	r7,r21
     df4:	d9000415 	stw	r4,16(sp)
     df8:	d9002715 	stw	r4,156(sp)
     dfc:	d9402615 	stw	r5,152(sp)
     e00:	d9401615 	stw	r5,88(sp)
     e04:	d9001715 	stw	r4,92(sp)
     e08:	100b883a 	mov	r5,r2
     e0c:	0009883a 	mov	r4,zero
     e10:	00029080 	call	2908 <__muldf3>
     e14:	d9000b17 	ldw	r4,44(sp)
     e18:	980b883a 	mov	r5,r19
     e1c:	180f883a 	mov	r7,r3
     e20:	100d883a 	mov	r6,r2
     e24:	00028140 	call	2814 <__subdf3>
     e28:	8009883a 	mov	r4,r16
     e2c:	a80b883a 	mov	r5,r21
     e30:	b80f883a 	mov	r7,r23
     e34:	b00d883a 	mov	r6,r22
     e38:	1021883a 	mov	r16,r2
     e3c:	1823883a 	mov	r17,r3
     e40:	00028140 	call	2814 <__subdf3>
     e44:	d9000117 	ldw	r4,4(sp)
     e48:	a00b883a 	mov	r5,r20
     e4c:	180f883a 	mov	r7,r3
     e50:	100d883a 	mov	r6,r2
     e54:	00028140 	call	2814 <__subdf3>
     e58:	d9001617 	ldw	r4,88(sp)
     e5c:	d9402717 	ldw	r5,156(sp)
     e60:	180f883a 	mov	r7,r3
     e64:	100d883a 	mov	r6,r2
     e68:	00029080 	call	2908 <__muldf3>
     e6c:	180f883a 	mov	r7,r3
     e70:	880b883a 	mov	r5,r17
     e74:	8009883a 	mov	r4,r16
     e78:	100d883a 	mov	r6,r2
     e7c:	00028140 	call	2814 <__subdf3>
     e80:	d9000f17 	ldw	r4,60(sp)
     e84:	d9402e17 	ldw	r5,184(sp)
     e88:	180f883a 	mov	r7,r3
     e8c:	100d883a 	mov	r6,r2
     e90:	00029080 	call	2908 <__muldf3>
     e94:	d9000317 	ldw	r4,12(sp)
     e98:	d9403017 	ldw	r5,192(sp)
     e9c:	d8803115 	stw	r2,196(sp)
     ea0:	200d883a 	mov	r6,r4
     ea4:	280f883a 	mov	r7,r5
     ea8:	d8c03215 	stw	r3,200(sp)
     eac:	00029080 	call	2908 <__muldf3>
     eb0:	1009883a 	mov	r4,r2
     eb4:	180b883a 	mov	r5,r3
     eb8:	100d883a 	mov	r6,r2
     ebc:	180f883a 	mov	r7,r3
     ec0:	1021883a 	mov	r16,r2
     ec4:	1823883a 	mov	r17,r3
     ec8:	00029080 	call	2908 <__muldf3>
     ecc:	02129174 	movhi	r8,19013
     ed0:	4213bbc4 	addi	r8,r8,20207
     ed4:	024ff2b4 	movhi	r9,16330
     ed8:	4a5f8a04 	addi	r9,r9,32296
     edc:	480f883a 	mov	r7,r9
     ee0:	8009883a 	mov	r4,r16
     ee4:	880b883a 	mov	r5,r17
     ee8:	400d883a 	mov	r6,r8
     eec:	1029883a 	mov	r20,r2
     ef0:	182b883a 	mov	r21,r3
     ef4:	00029080 	call	2908 <__muldf3>
     ef8:	0224f2b4 	movhi	r8,37834
     efc:	4236d944 	addi	r8,r8,-9371
     f00:	024ff3b4 	movhi	r9,16334
     f04:	4a619284 	addi	r9,r9,-31158
     f08:	480f883a 	mov	r7,r9
     f0c:	400d883a 	mov	r6,r8
     f10:	180b883a 	mov	r5,r3
     f14:	1009883a 	mov	r4,r2
     f18:	00028940 	call	2894 <__adddf3>
     f1c:	180f883a 	mov	r7,r3
     f20:	8009883a 	mov	r4,r16
     f24:	880b883a 	mov	r5,r17
     f28:	100d883a 	mov	r6,r2
     f2c:	00029080 	call	2908 <__muldf3>
     f30:	022a4774 	movhi	r8,43293
     f34:	42104044 	addi	r8,r8,16641
     f38:	024ff474 	movhi	r9,16337
     f3c:	4a5d1804 	addi	r9,r9,29792
     f40:	480f883a 	mov	r7,r9
     f44:	400d883a 	mov	r6,r8
     f48:	180b883a 	mov	r5,r3
     f4c:	1009883a 	mov	r4,r2
     f50:	00028940 	call	2894 <__adddf3>
     f54:	180f883a 	mov	r7,r3
     f58:	8009883a 	mov	r4,r16
     f5c:	880b883a 	mov	r5,r17
     f60:	100d883a 	mov	r6,r2
     f64:	00029080 	call	2908 <__muldf3>
     f68:	021463f4 	movhi	r8,20879
     f6c:	42099344 	addi	r8,r8,9805
     f70:	024ff574 	movhi	r9,16341
     f74:	4a555544 	addi	r9,r9,21845
     f78:	480f883a 	mov	r7,r9
     f7c:	400d883a 	mov	r6,r8
     f80:	180b883a 	mov	r5,r3
     f84:	1009883a 	mov	r4,r2
     f88:	00028940 	call	2894 <__adddf3>
     f8c:	180f883a 	mov	r7,r3
     f90:	8009883a 	mov	r4,r16
     f94:	880b883a 	mov	r5,r17
     f98:	100d883a 	mov	r6,r2
     f9c:	00029080 	call	2908 <__muldf3>
     fa0:	0236dc34 	movhi	r8,56176
     fa4:	422affc4 	addi	r8,r8,-21505
     fa8:	024ff6f4 	movhi	r9,16347
     fac:	4a5b6d84 	addi	r9,r9,28086
     fb0:	480f883a 	mov	r7,r9
     fb4:	400d883a 	mov	r6,r8
     fb8:	180b883a 	mov	r5,r3
     fbc:	1009883a 	mov	r4,r2
     fc0:	00028940 	call	2894 <__adddf3>
     fc4:	180f883a 	mov	r7,r3
     fc8:	8009883a 	mov	r4,r16
     fcc:	880b883a 	mov	r5,r17
     fd0:	100d883a 	mov	r6,r2
     fd4:	00029080 	call	2908 <__muldf3>
     fd8:	020cccf4 	movhi	r8,13107
     fdc:	420cc0c4 	addi	r8,r8,13059
     fe0:	024ff8f4 	movhi	r9,16355
     fe4:	4a4cccc4 	addi	r9,r9,13107
     fe8:	480f883a 	mov	r7,r9
     fec:	400d883a 	mov	r6,r8
     ff0:	180b883a 	mov	r5,r3
     ff4:	1009883a 	mov	r4,r2
     ff8:	00028940 	call	2894 <__adddf3>
     ffc:	180f883a 	mov	r7,r3
    1000:	a80b883a 	mov	r5,r21
    1004:	a009883a 	mov	r4,r20
    1008:	100d883a 	mov	r6,r2
    100c:	00029080 	call	2908 <__muldf3>
    1010:	d9000317 	ldw	r4,12(sp)
    1014:	d9403017 	ldw	r5,192(sp)
    1018:	d9801617 	ldw	r6,88(sp)
    101c:	d9c02717 	ldw	r7,156(sp)
    1020:	1021883a 	mov	r16,r2
    1024:	1823883a 	mov	r17,r3
    1028:	00028940 	call	2894 <__adddf3>
    102c:	d9003117 	ldw	r4,196(sp)
    1030:	d9403217 	ldw	r5,200(sp)
    1034:	180f883a 	mov	r7,r3
    1038:	100d883a 	mov	r6,r2
    103c:	d9001415 	stw	r4,80(sp)
    1040:	d9401515 	stw	r5,84(sp)
    1044:	00029080 	call	2908 <__muldf3>
    1048:	180f883a 	mov	r7,r3
    104c:	8009883a 	mov	r4,r16
    1050:	880b883a 	mov	r5,r17
    1054:	100d883a 	mov	r6,r2
    1058:	00028940 	call	2894 <__adddf3>
    105c:	d9001617 	ldw	r4,88(sp)
    1060:	d9402717 	ldw	r5,156(sp)
    1064:	d8803315 	stw	r2,204(sp)
    1068:	200d883a 	mov	r6,r4
    106c:	280f883a 	mov	r7,r5
    1070:	d8c03415 	stw	r3,208(sp)
    1074:	00029080 	call	2908 <__muldf3>
    1078:	182f883a 	mov	r23,r3
    107c:	05500234 	movhi	r21,16392
    1080:	0029883a 	mov	r20,zero
    1084:	b80b883a 	mov	r5,r23
    1088:	a00d883a 	mov	r6,r20
    108c:	a80f883a 	mov	r7,r21
    1090:	1009883a 	mov	r4,r2
    1094:	d8800715 	stw	r2,28(sp)
    1098:	d8c00815 	stw	r3,32(sp)
    109c:	00028940 	call	2894 <__adddf3>
    10a0:	d9003317 	ldw	r4,204(sp)
    10a4:	d9403417 	ldw	r5,208(sp)
    10a8:	180f883a 	mov	r7,r3
    10ac:	100d883a 	mov	r6,r2
    10b0:	d9000515 	stw	r4,20(sp)
    10b4:	d9400615 	stw	r5,24(sp)
    10b8:	00028940 	call	2894 <__adddf3>
    10bc:	d9001617 	ldw	r4,88(sp)
    10c0:	d9402717 	ldw	r5,156(sp)
    10c4:	0025883a 	mov	r18,zero
    10c8:	900d883a 	mov	r6,r18
    10cc:	180f883a 	mov	r7,r3
    10d0:	1823883a 	mov	r17,r3
    10d4:	00029080 	call	2908 <__muldf3>
    10d8:	d9001417 	ldw	r4,80(sp)
    10dc:	d9403217 	ldw	r5,200(sp)
    10e0:	880f883a 	mov	r7,r17
    10e4:	900d883a 	mov	r6,r18
    10e8:	d8803515 	stw	r2,212(sp)
    10ec:	d8c03615 	stw	r3,216(sp)
    10f0:	00029080 	call	2908 <__muldf3>
    10f4:	a80f883a 	mov	r7,r21
    10f8:	880b883a 	mov	r5,r17
    10fc:	000d883a 	mov	r6,zero
    1100:	9009883a 	mov	r4,r18
    1104:	1021883a 	mov	r16,r2
    1108:	1823883a 	mov	r17,r3
    110c:	00028140 	call	2814 <__subdf3>
    1110:	d9800717 	ldw	r6,28(sp)
    1114:	b80f883a 	mov	r7,r23
    1118:	180b883a 	mov	r5,r3
    111c:	1009883a 	mov	r4,r2
    1120:	00028140 	call	2814 <__subdf3>
    1124:	d9000517 	ldw	r4,20(sp)
    1128:	d9403417 	ldw	r5,208(sp)
    112c:	180f883a 	mov	r7,r3
    1130:	100d883a 	mov	r6,r2
    1134:	00028140 	call	2814 <__subdf3>
    1138:	d9000317 	ldw	r4,12(sp)
    113c:	d9403017 	ldw	r5,192(sp)
    1140:	180f883a 	mov	r7,r3
    1144:	100d883a 	mov	r6,r2
    1148:	00029080 	call	2908 <__muldf3>
    114c:	180f883a 	mov	r7,r3
    1150:	880b883a 	mov	r5,r17
    1154:	8009883a 	mov	r4,r16
    1158:	100d883a 	mov	r6,r2
    115c:	00028940 	call	2894 <__adddf3>
    1160:	102d883a 	mov	r22,r2
    1164:	d9003617 	ldw	r4,216(sp)
    1168:	d8803517 	ldw	r2,212(sp)
    116c:	d9403617 	ldw	r5,216(sp)
    1170:	182f883a 	mov	r23,r3
    1174:	b00d883a 	mov	r6,r22
    1178:	b80f883a 	mov	r7,r23
    117c:	d9000a15 	stw	r4,40(sp)
    1180:	1009883a 	mov	r4,r2
    1184:	054ffbf4 	movhi	r21,16367
    1188:	ad71c244 	addi	r21,r21,-14583
    118c:	dd800d15 	stw	r22,52(sp)
    1190:	ddc00e15 	stw	r23,56(sp)
    1194:	05380034 	movhi	r20,57344
    1198:	d8800915 	stw	r2,36(sp)
    119c:	00028940 	call	2894 <__adddf3>
    11a0:	180b883a 	mov	r5,r3
    11a4:	a00d883a 	mov	r6,r20
    11a8:	a80f883a 	mov	r7,r21
    11ac:	9009883a 	mov	r4,r18
    11b0:	1823883a 	mov	r17,r3
    11b4:	00029080 	call	2908 <__muldf3>
    11b8:	020516f4 	movhi	r8,5211
    11bc:	42007d44 	addi	r8,r8,501
    11c0:	026f8fb4 	movhi	r9,48702
    11c4:	4a4bf804 	addi	r9,r9,12256
    11c8:	480f883a 	mov	r7,r9
    11cc:	400d883a 	mov	r6,r8
    11d0:	880b883a 	mov	r5,r17
    11d4:	9009883a 	mov	r4,r18
    11d8:	d8803715 	stw	r2,220(sp)
    11dc:	d8c03815 	stw	r3,224(sp)
    11e0:	00029080 	call	2908 <__muldf3>
    11e4:	d9800917 	ldw	r6,36(sp)
    11e8:	d9c03617 	ldw	r7,216(sp)
    11ec:	880b883a 	mov	r5,r17
    11f0:	9009883a 	mov	r4,r18
    11f4:	1021883a 	mov	r16,r2
    11f8:	1823883a 	mov	r17,r3
    11fc:	00028140 	call	2814 <__subdf3>
    1200:	d9000d17 	ldw	r4,52(sp)
    1204:	b80b883a 	mov	r5,r23
    1208:	180f883a 	mov	r7,r3
    120c:	100d883a 	mov	r6,r2
    1210:	00028140 	call	2814 <__subdf3>
    1214:	180b883a 	mov	r5,r3
    1218:	a80f883a 	mov	r7,r21
    121c:	01b70eb4 	movhi	r6,56378
    1220:	3180ff44 	addi	r6,r6,1021
    1224:	1009883a 	mov	r4,r2
    1228:	00029080 	call	2908 <__muldf3>
    122c:	180f883a 	mov	r7,r3
    1230:	880b883a 	mov	r5,r17
    1234:	8009883a 	mov	r4,r16
    1238:	100d883a 	mov	r6,r2
    123c:	00028940 	call	2894 <__adddf3>
    1240:	d9402c17 	ldw	r5,176(sp)
    1244:	01000074 	movhi	r4,1
    1248:	21230d04 	addi	r4,r4,-29644
    124c:	2909883a 	add	r4,r5,r4
    1250:	22400117 	ldw	r9,4(r4)
    1254:	22000017 	ldw	r8,0(r4)
    1258:	180b883a 	mov	r5,r3
    125c:	480f883a 	mov	r7,r9
    1260:	400d883a 	mov	r6,r8
    1264:	1009883a 	mov	r4,r2
    1268:	00028940 	call	2894 <__adddf3>
    126c:	d9000017 	ldw	r4,0(sp)
    1270:	182f883a 	mov	r23,r3
    1274:	102d883a 	mov	r22,r2
    1278:	00031cc0 	call	31cc <__floatsidf>
    127c:	d9402c17 	ldw	r5,176(sp)
    1280:	01000074 	movhi	r4,1
    1284:	21231104 	addi	r4,r4,-29628
    1288:	b00d883a 	mov	r6,r22
    128c:	2911883a 	add	r8,r5,r4
    1290:	d9003717 	ldw	r4,220(sp)
    1294:	d9403817 	ldw	r5,224(sp)
    1298:	45000017 	ldw	r20,0(r8)
    129c:	d9002315 	stw	r4,140(sp)
    12a0:	d9003817 	ldw	r4,224(sp)
    12a4:	45400117 	ldw	r21,4(r8)
    12a8:	b80f883a 	mov	r7,r23
    12ac:	d9002415 	stw	r4,144(sp)
    12b0:	d9002317 	ldw	r4,140(sp)
    12b4:	1021883a 	mov	r16,r2
    12b8:	1823883a 	mov	r17,r3
    12bc:	dd802115 	stw	r22,132(sp)
    12c0:	ddc02215 	stw	r23,136(sp)
    12c4:	00028940 	call	2894 <__adddf3>
    12c8:	180b883a 	mov	r5,r3
    12cc:	1009883a 	mov	r4,r2
    12d0:	a00d883a 	mov	r6,r20
    12d4:	a80f883a 	mov	r7,r21
    12d8:	00028940 	call	2894 <__adddf3>
    12dc:	180f883a 	mov	r7,r3
    12e0:	8009883a 	mov	r4,r16
    12e4:	880b883a 	mov	r5,r17
    12e8:	100d883a 	mov	r6,r2
    12ec:	00028940 	call	2894 <__adddf3>
    12f0:	180b883a 	mov	r5,r3
    12f4:	0009883a 	mov	r4,zero
    12f8:	800d883a 	mov	r6,r16
    12fc:	880f883a 	mov	r7,r17
    1300:	d9001b15 	stw	r4,108(sp)
    1304:	d8c01c15 	stw	r3,112(sp)
    1308:	00028140 	call	2814 <__subdf3>
    130c:	180b883a 	mov	r5,r3
    1310:	a80f883a 	mov	r7,r21
    1314:	1009883a 	mov	r4,r2
    1318:	a00d883a 	mov	r6,r20
    131c:	00028140 	call	2814 <__subdf3>
    1320:	d9802317 	ldw	r6,140(sp)
    1324:	d9c03817 	ldw	r7,224(sp)
    1328:	180b883a 	mov	r5,r3
    132c:	1009883a 	mov	r4,r2
    1330:	00028140 	call	2814 <__subdf3>
    1334:	d9002117 	ldw	r4,132(sp)
    1338:	1011883a 	mov	r8,r2
    133c:	1813883a 	mov	r9,r3
    1340:	b80b883a 	mov	r5,r23
    1344:	480f883a 	mov	r7,r9
    1348:	400d883a 	mov	r6,r8
    134c:	00028140 	call	2814 <__subdf3>
    1350:	1823883a 	mov	r17,r3
    1354:	d8c02517 	ldw	r3,148(sp)
    1358:	1021883a 	mov	r16,r2
    135c:	e0bfffc4 	addi	r2,fp,-1
    1360:	1884b03a 	or	r2,r3,r2
    1364:	1000731e 	bne	r2,zero,1534 <__ieee754_pow+0xb88>
    1368:	0009883a 	mov	r4,zero
    136c:	016ffc34 	movhi	r5,49136
    1370:	d9001915 	stw	r4,100(sp)
    1374:	d9401a15 	stw	r5,104(sp)
    1378:	d9402917 	ldw	r5,164(sp)
    137c:	d9002817 	ldw	r4,160(sp)
    1380:	0029883a 	mov	r20,zero
    1384:	a00d883a 	mov	r6,r20
    1388:	280f883a 	mov	r7,r5
    138c:	2827883a 	mov	r19,r5
    1390:	00028140 	call	2814 <__subdf3>
    1394:	d9001b17 	ldw	r4,108(sp)
    1398:	d9401c17 	ldw	r5,112(sp)
    139c:	180f883a 	mov	r7,r3
    13a0:	100d883a 	mov	r6,r2
    13a4:	00029080 	call	2908 <__muldf3>
    13a8:	d9c02917 	ldw	r7,164(sp)
    13ac:	d9802817 	ldw	r6,160(sp)
    13b0:	880b883a 	mov	r5,r17
    13b4:	8009883a 	mov	r4,r16
    13b8:	1823883a 	mov	r17,r3
    13bc:	1021883a 	mov	r16,r2
    13c0:	00029080 	call	2908 <__muldf3>
    13c4:	180f883a 	mov	r7,r3
    13c8:	880b883a 	mov	r5,r17
    13cc:	8009883a 	mov	r4,r16
    13d0:	100d883a 	mov	r6,r2
    13d4:	00028940 	call	2894 <__adddf3>
    13d8:	d9401c17 	ldw	r5,112(sp)
    13dc:	d9001b17 	ldw	r4,108(sp)
    13e0:	a00d883a 	mov	r6,r20
    13e4:	980f883a 	mov	r7,r19
    13e8:	1029883a 	mov	r20,r2
    13ec:	182b883a 	mov	r21,r3
    13f0:	00029080 	call	2908 <__muldf3>
    13f4:	1025883a 	mov	r18,r2
    13f8:	1827883a 	mov	r19,r3
    13fc:	a009883a 	mov	r4,r20
    1400:	a80b883a 	mov	r5,r21
    1404:	900d883a 	mov	r6,r18
    1408:	980f883a 	mov	r7,r19
    140c:	dd001d15 	stw	r20,116(sp)
    1410:	dc801f15 	stw	r18,124(sp)
    1414:	dd401e15 	stw	r21,120(sp)
    1418:	dcc02015 	stw	r19,128(sp)
    141c:	00028940 	call	2894 <__adddf3>
    1420:	1823883a 	mov	r17,r3
    1424:	01102434 	movhi	r4,16528
    1428:	213fffc4 	addi	r4,r4,-1
    142c:	1021883a 	mov	r16,r2
    1430:	182f883a 	mov	r23,r3
    1434:	dc401815 	stw	r17,96(sp)
    1438:	100b883a 	mov	r5,r2
    143c:	20c02c0e 	bge	r4,r3,14f0 <__ieee754_pow+0xb44>
    1440:	00afdc34 	movhi	r2,49008
    1444:	1885883a 	add	r2,r3,r2
    1448:	2884b03a 	or	r2,r5,r2
    144c:	1001a626 	beq	r2,zero,1ae8 <__ieee754_pow+0x113c>
    1450:	04220034 	movhi	r16,34816
    1454:	841d6704 	addi	r16,r16,30108
    1458:	045f8e34 	movhi	r17,32312
    145c:	8c790f04 	addi	r17,r17,-7108
    1460:	d9401a17 	ldw	r5,104(sp)
    1464:	d9001917 	ldw	r4,100(sp)
    1468:	800d883a 	mov	r6,r16
    146c:	880f883a 	mov	r7,r17
    1470:	00029080 	call	2908 <__muldf3>
    1474:	180b883a 	mov	r5,r3
    1478:	800d883a 	mov	r6,r16
    147c:	880f883a 	mov	r7,r17
    1480:	1009883a 	mov	r4,r2
    1484:	00029080 	call	2908 <__muldf3>
    1488:	003dc306 	br	b98 <__ieee754_pow+0x1ec>
    148c:	00b00434 	movhi	r2,49168
    1490:	9085883a 	add	r2,r18,r2
    1494:	e084b03a 	or	r2,fp,r2
    1498:	1000af1e 	bne	r2,zero,1758 <__ieee754_pow+0xdac>
    149c:	480f883a 	mov	r7,r9
    14a0:	4009883a 	mov	r4,r8
    14a4:	480b883a 	mov	r5,r9
    14a8:	400d883a 	mov	r6,r8
    14ac:	003db406 	br	b80 <__ieee754_pow+0x1d4>
    14b0:	00bffc34 	movhi	r2,65520
    14b4:	18ff0084 	addi	r3,r3,-1022
    14b8:	a0a9883a 	add	r20,r20,r2
    14bc:	d8c00015 	stw	r3,0(sp)
    14c0:	0009883a 	mov	r4,zero
    14c4:	04000234 	movhi	r16,8
    14c8:	003e1406 	br	d1c <__ieee754_pow+0x370>
    14cc:	a80f883a 	mov	r7,r21
    14d0:	a009883a 	mov	r4,r20
    14d4:	a80b883a 	mov	r5,r21
    14d8:	a00d883a 	mov	r6,r20
    14dc:	00029080 	call	2908 <__muldf3>
    14e0:	180b883a 	mov	r5,r3
    14e4:	d8802815 	stw	r2,160(sp)
    14e8:	d9402915 	stw	r5,164(sp)
    14ec:	003d5606 	br	a48 <__ieee754_pow+0x9c>
    14f0:	d9001817 	ldw	r4,96(sp)
    14f4:	00a00034 	movhi	r2,32768
    14f8:	10bfffc4 	addi	r2,r2,-1
    14fc:	00d02474 	movhi	r3,16529
    1500:	18f2ffc4 	addi	r3,r3,-13313
    1504:	20b8703a 	and	fp,r4,r2
    1508:	1f009d0e 	bge	r3,fp,1780 <__ieee754_pow+0xdd4>
    150c:	008fdbf4 	movhi	r2,16239
    1510:	108d0004 	addi	r2,r2,13312
    1514:	2085883a 	add	r2,r4,r2
    1518:	1144b03a 	or	r2,r2,r5
    151c:	1001c626 	beq	r2,zero,1c38 <__ieee754_pow+0x128c>
    1520:	0430be74 	movhi	r16,49913
    1524:	843cd644 	addi	r16,r16,-3239
    1528:	04406974 	movhi	r17,421
    152c:	8c5b87c4 	addi	r17,r17,28191
    1530:	003fcb06 	br	1460 <__ieee754_pow+0xab4>
    1534:	0005883a 	mov	r2,zero
    1538:	00cffc34 	movhi	r3,16368
    153c:	d8801915 	stw	r2,100(sp)
    1540:	d8c01a15 	stw	r3,104(sp)
    1544:	003f8c06 	br	1378 <__ieee754_pow+0x9cc>
    1548:	0005883a 	mov	r2,zero
    154c:	00cffc34 	movhi	r3,16368
    1550:	180b883a 	mov	r5,r3
    1554:	580f883a 	mov	r7,r11
    1558:	1009883a 	mov	r4,r2
    155c:	500d883a 	mov	r6,r10
    1560:	0002ccc0 	call	2ccc <__divdf3>
    1564:	1011883a 	mov	r8,r2
    1568:	1813883a 	mov	r9,r3
    156c:	003d9506 	br	bc4 <__ieee754_pow+0x218>
    1570:	008ffc34 	movhi	r2,16368
    1574:	10bfff84 	addi	r2,r2,-2
    1578:	14bdbb0e 	bge	r2,r18,c68 <__ieee754_pow+0x2bc>
    157c:	008ffc34 	movhi	r2,16368
    1580:	14bdae16 	blt	r2,r18,c3c <__ieee754_pow+0x290>
    1584:	580b883a 	mov	r5,r11
    1588:	5009883a 	mov	r4,r10
    158c:	000d883a 	mov	r6,zero
    1590:	100f883a 	mov	r7,r2
    1594:	00028140 	call	2814 <__subdf3>
    1598:	1021883a 	mov	r16,r2
    159c:	1823883a 	mov	r17,r3
    15a0:	00980034 	movhi	r2,24576
    15a4:	00cffdf4 	movhi	r3,16375
    15a8:	18c551c4 	addi	r3,r3,5447
    15ac:	8009883a 	mov	r4,r16
    15b0:	880b883a 	mov	r5,r17
    15b4:	180f883a 	mov	r7,r3
    15b8:	100d883a 	mov	r6,r2
    15bc:	00029080 	call	2908 <__muldf3>
    15c0:	023e17b4 	movhi	r8,63582
    15c4:	4237d104 	addi	r8,r8,-8380
    15c8:	024f9574 	movhi	r9,15957
    15cc:	4a6b82c4 	addi	r9,r9,-20981
    15d0:	480f883a 	mov	r7,r9
    15d4:	400d883a 	mov	r6,r8
    15d8:	8009883a 	mov	r4,r16
    15dc:	880b883a 	mov	r5,r17
    15e0:	102d883a 	mov	r22,r2
    15e4:	182f883a 	mov	r23,r3
    15e8:	00029080 	call	2908 <__muldf3>
    15ec:	8009883a 	mov	r4,r16
    15f0:	880b883a 	mov	r5,r17
    15f4:	800d883a 	mov	r6,r16
    15f8:	880f883a 	mov	r7,r17
    15fc:	d8802a15 	stw	r2,168(sp)
    1600:	d8c02b15 	stw	r3,172(sp)
    1604:	00029080 	call	2908 <__muldf3>
    1608:	0011883a 	mov	r8,zero
    160c:	026ff434 	movhi	r9,49104
    1610:	480f883a 	mov	r7,r9
    1614:	8009883a 	mov	r4,r16
    1618:	880b883a 	mov	r5,r17
    161c:	400d883a 	mov	r6,r8
    1620:	1029883a 	mov	r20,r2
    1624:	182b883a 	mov	r21,r3
    1628:	00029080 	call	2908 <__muldf3>
    162c:	02155574 	movhi	r8,21845
    1630:	42155544 	addi	r8,r8,21845
    1634:	024ff574 	movhi	r9,16341
    1638:	4a555544 	addi	r9,r9,21845
    163c:	480f883a 	mov	r7,r9
    1640:	400d883a 	mov	r6,r8
    1644:	180b883a 	mov	r5,r3
    1648:	1009883a 	mov	r4,r2
    164c:	00028940 	call	2894 <__adddf3>
    1650:	180f883a 	mov	r7,r3
    1654:	8009883a 	mov	r4,r16
    1658:	880b883a 	mov	r5,r17
    165c:	100d883a 	mov	r6,r2
    1660:	00029080 	call	2908 <__muldf3>
    1664:	0011883a 	mov	r8,zero
    1668:	024ff834 	movhi	r9,16352
    166c:	480b883a 	mov	r5,r9
    1670:	4009883a 	mov	r4,r8
    1674:	180f883a 	mov	r7,r3
    1678:	100d883a 	mov	r6,r2
    167c:	00028140 	call	2814 <__subdf3>
    1680:	180f883a 	mov	r7,r3
    1684:	a80b883a 	mov	r5,r21
    1688:	a009883a 	mov	r4,r20
    168c:	100d883a 	mov	r6,r2
    1690:	00029080 	call	2908 <__muldf3>
    1694:	02194b34 	movhi	r8,25900
    1698:	4220bf84 	addi	r8,r8,-32002
    169c:	026ffdf4 	movhi	r9,49143
    16a0:	4a4551c4 	addi	r9,r9,5447
    16a4:	480f883a 	mov	r7,r9
    16a8:	400d883a 	mov	r6,r8
    16ac:	180b883a 	mov	r5,r3
    16b0:	1009883a 	mov	r4,r2
    16b4:	00029080 	call	2908 <__muldf3>
    16b8:	d9402b17 	ldw	r5,172(sp)
    16bc:	d9002a17 	ldw	r4,168(sp)
    16c0:	180f883a 	mov	r7,r3
    16c4:	100d883a 	mov	r6,r2
    16c8:	00028940 	call	2894 <__adddf3>
    16cc:	100d883a 	mov	r6,r2
    16d0:	b009883a 	mov	r4,r22
    16d4:	b80b883a 	mov	r5,r23
    16d8:	180f883a 	mov	r7,r3
    16dc:	1021883a 	mov	r16,r2
    16e0:	1823883a 	mov	r17,r3
    16e4:	00028940 	call	2894 <__adddf3>
    16e8:	180b883a 	mov	r5,r3
    16ec:	0009883a 	mov	r4,zero
    16f0:	b00d883a 	mov	r6,r22
    16f4:	b80f883a 	mov	r7,r23
    16f8:	d9001b15 	stw	r4,108(sp)
    16fc:	d8c01c15 	stw	r3,112(sp)
    1700:	00028140 	call	2814 <__subdf3>
    1704:	1011883a 	mov	r8,r2
    1708:	1813883a 	mov	r9,r3
    170c:	8009883a 	mov	r4,r16
    1710:	880b883a 	mov	r5,r17
    1714:	003f0b06 	br	1344 <__ieee754_pow+0x998>
    1718:	0005883a 	mov	r2,zero
    171c:	00d0d034 	movhi	r3,17216
    1720:	580b883a 	mov	r5,r11
    1724:	5009883a 	mov	r4,r10
    1728:	180f883a 	mov	r7,r3
    172c:	100d883a 	mov	r6,r2
    1730:	00029080 	call	2908 <__muldf3>
    1734:	1015883a 	mov	r10,r2
    1738:	1825883a 	mov	r18,r3
    173c:	017ff2c4 	movi	r5,-53
    1740:	003d6606 	br	cdc <__ieee754_pow+0x330>
    1744:	b03d300e 	bge	r22,zero,c08 <__ieee754_pow+0x25c>
    1748:	d9402917 	ldw	r5,164(sp)
    174c:	28e0003c 	xorhi	r3,r5,32768
    1750:	d8c02915 	stw	r3,164(sp)
    1754:	003cbc06 	br	a48 <__ieee754_pow+0x9c>
    1758:	00800044 	movi	r2,1
    175c:	e0bd1a1e 	bne	fp,r2,bc8 <__ieee754_pow+0x21c>
    1760:	48e0003c 	xorhi	r3,r9,32768
    1764:	da002815 	stw	r8,160(sp)
    1768:	d8c02915 	stw	r3,164(sp)
    176c:	003cb606 	br	a48 <__ieee754_pow+0x9c>
    1770:	d9001817 	ldw	r4,96(sp)
    1774:	00a00034 	movhi	r2,32768
    1778:	10bfffc4 	addi	r2,r2,-1
    177c:	20b8703a 	and	fp,r4,r2
    1780:	008ff834 	movhi	r2,16352
    1784:	1700fc16 	blt	r2,fp,1b78 <__ieee754_pow+0x11cc>
    1788:	0039883a 	mov	fp,zero
    178c:	d8001315 	stw	zero,76(sp)
    1790:	0025883a 	mov	r18,zero
    1794:	0005883a 	mov	r2,zero
    1798:	00cff9b4 	movhi	r3,16358
    179c:	18cb90c4 	addi	r3,r3,11843
    17a0:	9009883a 	mov	r4,r18
    17a4:	b80b883a 	mov	r5,r23
    17a8:	180f883a 	mov	r7,r3
    17ac:	100d883a 	mov	r6,r2
    17b0:	00029080 	call	2908 <__muldf3>
    17b4:	d9c02017 	ldw	r7,128(sp)
    17b8:	d9801f17 	ldw	r6,124(sp)
    17bc:	9009883a 	mov	r4,r18
    17c0:	b80b883a 	mov	r5,r23
    17c4:	b823883a 	mov	r17,r23
    17c8:	102d883a 	mov	r22,r2
    17cc:	182f883a 	mov	r23,r3
    17d0:	00028140 	call	2814 <__subdf3>
    17d4:	d9401e17 	ldw	r5,120(sp)
    17d8:	d9001d17 	ldw	r4,116(sp)
    17dc:	180f883a 	mov	r7,r3
    17e0:	100d883a 	mov	r6,r2
    17e4:	00028140 	call	2814 <__subdf3>
    17e8:	023fbeb4 	movhi	r8,65274
    17ec:	420e7bc4 	addi	r8,r8,14831
    17f0:	024ff9b4 	movhi	r9,16358
    17f4:	4a4b9084 	addi	r9,r9,11842
    17f8:	480f883a 	mov	r7,r9
    17fc:	400d883a 	mov	r6,r8
    1800:	180b883a 	mov	r5,r3
    1804:	1009883a 	mov	r4,r2
    1808:	00029080 	call	2908 <__muldf3>
    180c:	02032a34 	movhi	r8,3240
    1810:	421b0e44 	addi	r8,r8,27705
    1814:	026f8834 	movhi	r9,48672
    1818:	4a571844 	addi	r9,r9,23649
    181c:	480f883a 	mov	r7,r9
    1820:	400d883a 	mov	r6,r8
    1824:	9009883a 	mov	r4,r18
    1828:	880b883a 	mov	r5,r17
    182c:	1021883a 	mov	r16,r2
    1830:	1823883a 	mov	r17,r3
    1834:	00029080 	call	2908 <__muldf3>
    1838:	180f883a 	mov	r7,r3
    183c:	880b883a 	mov	r5,r17
    1840:	8009883a 	mov	r4,r16
    1844:	100d883a 	mov	r6,r2
    1848:	00028940 	call	2894 <__adddf3>
    184c:	100d883a 	mov	r6,r2
    1850:	b009883a 	mov	r4,r22
    1854:	b80b883a 	mov	r5,r23
    1858:	180f883a 	mov	r7,r3
    185c:	1021883a 	mov	r16,r2
    1860:	1823883a 	mov	r17,r3
    1864:	00028940 	call	2894 <__adddf3>
    1868:	1009883a 	mov	r4,r2
    186c:	180b883a 	mov	r5,r3
    1870:	b00d883a 	mov	r6,r22
    1874:	b80f883a 	mov	r7,r23
    1878:	d8803915 	stw	r2,228(sp)
    187c:	d8c03a15 	stw	r3,232(sp)
    1880:	d8801115 	stw	r2,68(sp)
    1884:	d8c01215 	stw	r3,72(sp)
    1888:	00028140 	call	2814 <__subdf3>
    188c:	180f883a 	mov	r7,r3
    1890:	8009883a 	mov	r4,r16
    1894:	880b883a 	mov	r5,r17
    1898:	100d883a 	mov	r6,r2
    189c:	00028140 	call	2814 <__subdf3>
    18a0:	d9001117 	ldw	r4,68(sp)
    18a4:	d9403a17 	ldw	r5,232(sp)
    18a8:	1029883a 	mov	r20,r2
    18ac:	200d883a 	mov	r6,r4
    18b0:	280f883a 	mov	r7,r5
    18b4:	182b883a 	mov	r21,r3
    18b8:	00029080 	call	2908 <__muldf3>
    18bc:	1021883a 	mov	r16,r2
    18c0:	1823883a 	mov	r17,r3
    18c4:	009caff4 	movhi	r2,29375
    18c8:	10a93404 	addi	r2,r2,-23344
    18cc:	00cf99b4 	movhi	r3,15974
    18d0:	18cdda44 	addi	r3,r3,14185
    18d4:	8009883a 	mov	r4,r16
    18d8:	880b883a 	mov	r5,r17
    18dc:	180f883a 	mov	r7,r3
    18e0:	100d883a 	mov	r6,r2
    18e4:	00029080 	call	2908 <__muldf3>
    18e8:	023174b4 	movhi	r8,50642
    18ec:	421afc44 	addi	r8,r8,27633
    18f0:	024faf34 	movhi	r9,16060
    18f4:	4a6f5044 	addi	r9,r9,-17087
    18f8:	480f883a 	mov	r7,r9
    18fc:	400d883a 	mov	r6,r8
    1900:	180b883a 	mov	r5,r3
    1904:	1009883a 	mov	r4,r2
    1908:	00028140 	call	2814 <__subdf3>
    190c:	180f883a 	mov	r7,r3
    1910:	8009883a 	mov	r4,r16
    1914:	880b883a 	mov	r5,r17
    1918:	100d883a 	mov	r6,r2
    191c:	00029080 	call	2908 <__muldf3>
    1920:	022bc9b4 	movhi	r8,44838
    1924:	42378b04 	addi	r8,r8,-8660
    1928:	024fc474 	movhi	r9,16145
    192c:	4a559a84 	addi	r9,r9,22122
    1930:	480f883a 	mov	r7,r9
    1934:	400d883a 	mov	r6,r8
    1938:	180b883a 	mov	r5,r3
    193c:	1009883a 	mov	r4,r2
    1940:	00028940 	call	2894 <__adddf3>
    1944:	180f883a 	mov	r7,r3
    1948:	8009883a 	mov	r4,r16
    194c:	880b883a 	mov	r5,r17
    1950:	100d883a 	mov	r6,r2
    1954:	00029080 	call	2908 <__muldf3>
    1958:	0205aff4 	movhi	r8,5823
    195c:	422f64c4 	addi	r8,r8,-17005
    1960:	024fd9f4 	movhi	r9,16231
    1964:	4a705b04 	addi	r9,r9,-16020
    1968:	480f883a 	mov	r7,r9
    196c:	400d883a 	mov	r6,r8
    1970:	180b883a 	mov	r5,r3
    1974:	1009883a 	mov	r4,r2
    1978:	00028140 	call	2814 <__subdf3>
    197c:	180f883a 	mov	r7,r3
    1980:	8009883a 	mov	r4,r16
    1984:	880b883a 	mov	r5,r17
    1988:	100d883a 	mov	r6,r2
    198c:	00029080 	call	2908 <__muldf3>
    1990:	02155574 	movhi	r8,21845
    1994:	42154f84 	addi	r8,r8,21822
    1998:	024ff174 	movhi	r9,16325
    199c:	4a555544 	addi	r9,r9,21845
    19a0:	480f883a 	mov	r7,r9
    19a4:	400d883a 	mov	r6,r8
    19a8:	180b883a 	mov	r5,r3
    19ac:	1009883a 	mov	r4,r2
    19b0:	00028940 	call	2894 <__adddf3>
    19b4:	180f883a 	mov	r7,r3
    19b8:	8009883a 	mov	r4,r16
    19bc:	880b883a 	mov	r5,r17
    19c0:	100d883a 	mov	r6,r2
    19c4:	00029080 	call	2908 <__muldf3>
    19c8:	d9001117 	ldw	r4,68(sp)
    19cc:	d9403a17 	ldw	r5,232(sp)
    19d0:	180f883a 	mov	r7,r3
    19d4:	100d883a 	mov	r6,r2
    19d8:	00028140 	call	2814 <__subdf3>
    19dc:	d9001117 	ldw	r4,68(sp)
    19e0:	d9403a17 	ldw	r5,232(sp)
    19e4:	100d883a 	mov	r6,r2
    19e8:	180f883a 	mov	r7,r3
    19ec:	1021883a 	mov	r16,r2
    19f0:	1823883a 	mov	r17,r3
    19f4:	00029080 	call	2908 <__muldf3>
    19f8:	0011883a 	mov	r8,zero
    19fc:	02500034 	movhi	r9,16384
    1a00:	480f883a 	mov	r7,r9
    1a04:	400d883a 	mov	r6,r8
    1a08:	8009883a 	mov	r4,r16
    1a0c:	880b883a 	mov	r5,r17
    1a10:	1021883a 	mov	r16,r2
    1a14:	1823883a 	mov	r17,r3
    1a18:	00028140 	call	2814 <__subdf3>
    1a1c:	180f883a 	mov	r7,r3
    1a20:	880b883a 	mov	r5,r17
    1a24:	8009883a 	mov	r4,r16
    1a28:	100d883a 	mov	r6,r2
    1a2c:	0002ccc0 	call	2ccc <__divdf3>
    1a30:	d9001117 	ldw	r4,68(sp)
    1a34:	d9403a17 	ldw	r5,232(sp)
    1a38:	a00d883a 	mov	r6,r20
    1a3c:	a80f883a 	mov	r7,r21
    1a40:	1025883a 	mov	r18,r2
    1a44:	1827883a 	mov	r19,r3
    1a48:	00029080 	call	2908 <__muldf3>
    1a4c:	180f883a 	mov	r7,r3
    1a50:	a009883a 	mov	r4,r20
    1a54:	a80b883a 	mov	r5,r21
    1a58:	100d883a 	mov	r6,r2
    1a5c:	00028940 	call	2894 <__adddf3>
    1a60:	180f883a 	mov	r7,r3
    1a64:	980b883a 	mov	r5,r19
    1a68:	9009883a 	mov	r4,r18
    1a6c:	100d883a 	mov	r6,r2
    1a70:	00028140 	call	2814 <__subdf3>
    1a74:	d9801117 	ldw	r6,68(sp)
    1a78:	d9c03a17 	ldw	r7,232(sp)
    1a7c:	180b883a 	mov	r5,r3
    1a80:	1009883a 	mov	r4,r2
    1a84:	00028140 	call	2814 <__subdf3>
    1a88:	0011883a 	mov	r8,zero
    1a8c:	024ffc34 	movhi	r9,16368
    1a90:	480b883a 	mov	r5,r9
    1a94:	180f883a 	mov	r7,r3
    1a98:	4009883a 	mov	r4,r8
    1a9c:	100d883a 	mov	r6,r2
    1aa0:	00028140 	call	2814 <__subdf3>
    1aa4:	100b883a 	mov	r5,r2
    1aa8:	d8801317 	ldw	r2,76(sp)
    1aac:	10d5883a 	add	r10,r2,r3
    1ab0:	5005d53a 	srai	r2,r10,20
    1ab4:	0080720e 	bge	zero,r2,1c80 <__ieee754_pow+0x12d4>
    1ab8:	2811883a 	mov	r8,r5
    1abc:	5013883a 	mov	r9,r10
    1ac0:	d9c01a17 	ldw	r7,104(sp)
    1ac4:	d9801917 	ldw	r6,100(sp)
    1ac8:	480b883a 	mov	r5,r9
    1acc:	4009883a 	mov	r4,r8
    1ad0:	003e8206 	br	14dc <__ieee754_pow+0xb30>
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	800b883a 	mov	r5,r16
    1adc:	a80f883a 	mov	r7,r21
    1ae0:	a00d883a 	mov	r6,r20
    1ae4:	003c2b06 	br	b94 <__ieee754_pow+0x1e8>
    1ae8:	d9001d17 	ldw	r4,116(sp)
    1aec:	00994b34 	movhi	r2,25900
    1af0:	10a0bf84 	addi	r2,r2,-32002
    1af4:	00cf25f4 	movhi	r3,15511
    1af8:	18c551c4 	addi	r3,r3,5447
    1afc:	a80b883a 	mov	r5,r21
    1b00:	180f883a 	mov	r7,r3
    1b04:	100d883a 	mov	r6,r2
    1b08:	00028940 	call	2894 <__adddf3>
    1b0c:	d9801f17 	ldw	r6,124(sp)
    1b10:	880b883a 	mov	r5,r17
    1b14:	8009883a 	mov	r4,r16
    1b18:	980f883a 	mov	r7,r19
    1b1c:	1021883a 	mov	r16,r2
    1b20:	1823883a 	mov	r17,r3
    1b24:	00028140 	call	2814 <__subdf3>
    1b28:	180f883a 	mov	r7,r3
    1b2c:	880b883a 	mov	r5,r17
    1b30:	8009883a 	mov	r4,r16
    1b34:	100d883a 	mov	r6,r2
    1b38:	00030340 	call	3034 <__gtdf2>
    1b3c:	00bf0c0e 	bge	zero,r2,1770 <__ieee754_pow+0xdc4>
    1b40:	04220034 	movhi	r16,34816
    1b44:	841d6704 	addi	r16,r16,30108
    1b48:	045f8e34 	movhi	r17,32312
    1b4c:	8c790f04 	addi	r17,r17,-7108
    1b50:	d9401a17 	ldw	r5,104(sp)
    1b54:	d9001917 	ldw	r4,100(sp)
    1b58:	800d883a 	mov	r6,r16
    1b5c:	880f883a 	mov	r7,r17
    1b60:	00029080 	call	2908 <__muldf3>
    1b64:	180b883a 	mov	r5,r3
    1b68:	800d883a 	mov	r6,r16
    1b6c:	880f883a 	mov	r7,r17
    1b70:	1009883a 	mov	r4,r2
    1b74:	003e5906 	br	14dc <__ieee754_pow+0xb30>
    1b78:	e005d53a 	srai	r2,fp,20
    1b7c:	01800434 	movhi	r6,16
    1b80:	d9401817 	ldw	r5,96(sp)
    1b84:	10bf0084 	addi	r2,r2,-1022
    1b88:	308dd83a 	sra	r6,r6,r2
    1b8c:	02000434 	movhi	r8,16
    1b90:	423fffc4 	addi	r8,r8,-1
    1b94:	0005883a 	mov	r2,zero
    1b98:	298d883a 	add	r6,r5,r6
    1b9c:	318b883a 	add	r5,r6,r6
    1ba0:	320e703a 	and	r7,r6,r8
    1ba4:	1013883a 	mov	r9,r2
    1ba8:	280ad57a 	srli	r5,r5,21
    1bac:	d8801817 	ldw	r2,96(sp)
    1bb0:	01000504 	movi	r4,20
    1bb4:	297f0044 	addi	r5,r5,-1023
    1bb8:	4151d83a 	sra	r8,r8,r5
    1bbc:	39c00434 	orhi	r7,r7,16
    1bc0:	2149c83a 	sub	r4,r4,r5
    1bc4:	0210303a 	nor	r8,zero,r8
    1bc8:	3939d83a 	sra	fp,r7,r4
    1bcc:	320e703a 	and	r7,r6,r8
    1bd0:	10002916 	blt	r2,zero,1c78 <__ieee754_pow+0x12cc>
    1bd4:	d9402017 	ldw	r5,128(sp)
    1bd8:	d9001f17 	ldw	r4,124(sp)
    1bdc:	480d883a 	mov	r6,r9
    1be0:	00028140 	call	2814 <__subdf3>
    1be4:	180b883a 	mov	r5,r3
    1be8:	d9402015 	stw	r5,128(sp)
    1bec:	280f883a 	mov	r7,r5
    1bf0:	d9001d17 	ldw	r4,116(sp)
    1bf4:	d9401e17 	ldw	r5,120(sp)
    1bf8:	1007883a 	mov	r3,r2
    1bfc:	180d883a 	mov	r6,r3
    1c00:	d8801f15 	stw	r2,124(sp)
    1c04:	00028940 	call	2894 <__adddf3>
    1c08:	180b883a 	mov	r5,r3
    1c0c:	e006953a 	slli	r3,fp,20
    1c10:	282f883a 	mov	r23,r5
    1c14:	d8c01315 	stw	r3,76(sp)
    1c18:	003edd06 	br	1790 <__ieee754_pow+0xde4>
    1c1c:	383bc81e 	bne	r7,zero,b40 <__ieee754_pow+0x194>
    1c20:	28c5c83a 	sub	r2,r5,r3
    1c24:	8087d83a 	sra	r3,r16,r2
    1c28:	1884983a 	sll	r2,r3,r2
    1c2c:	80801b26 	beq	r16,r2,1c9c <__ieee754_pow+0x12f0>
    1c30:	0039883a 	mov	fp,zero
    1c34:	003b9d06 	br	aac <__ieee754_pow+0x100>
    1c38:	d9801f17 	ldw	r6,124(sp)
    1c3c:	8009883a 	mov	r4,r16
    1c40:	880b883a 	mov	r5,r17
    1c44:	980f883a 	mov	r7,r19
    1c48:	00028140 	call	2814 <__subdf3>
    1c4c:	d9001d17 	ldw	r4,116(sp)
    1c50:	a80b883a 	mov	r5,r21
    1c54:	180f883a 	mov	r7,r3
    1c58:	100d883a 	mov	r6,r2
    1c5c:	00031440 	call	3144 <__ledf2>
    1c60:	00bfc516 	blt	zero,r2,1b78 <__ieee754_pow+0x11cc>
    1c64:	0430be74 	movhi	r16,49913
    1c68:	843cd644 	addi	r16,r16,-3239
    1c6c:	04406974 	movhi	r17,421
    1c70:	8c5b87c4 	addi	r17,r17,28191
    1c74:	003fb606 	br	1b50 <__ieee754_pow+0x11a4>
    1c78:	0739c83a 	sub	fp,zero,fp
    1c7c:	003fd506 	br	1bd4 <__ieee754_pow+0x1228>
    1c80:	2809883a 	mov	r4,r5
    1c84:	e00d883a 	mov	r6,fp
    1c88:	180b883a 	mov	r5,r3
    1c8c:	00022000 	call	2200 <scalbn>
    1c90:	1011883a 	mov	r8,r2
    1c94:	1813883a 	mov	r9,r3
    1c98:	003f8906 	br	1ac0 <__ieee754_pow+0x1114>
    1c9c:	18c0004c 	andi	r3,r3,1
    1ca0:	00800084 	movi	r2,2
    1ca4:	10f9c83a 	sub	fp,r2,r3
    1ca8:	003b8006 	br	aac <__ieee754_pow+0x100>

00001cac <__ieee754_sqrt>:
    1cac:	defffd04 	addi	sp,sp,-12
    1cb0:	dc000015 	stw	r16,0(sp)
    1cb4:	009ffc34 	movhi	r2,32752
    1cb8:	2021883a 	mov	r16,r4
    1cbc:	291ffc2c 	andhi	r4,r5,32752
    1cc0:	dc400115 	stw	r17,4(sp)
    1cc4:	dfc00215 	stw	ra,8(sp)
    1cc8:	2823883a 	mov	r17,r5
    1ccc:	280f883a 	mov	r7,r5
    1cd0:	2807883a 	mov	r3,r5
    1cd4:	8011883a 	mov	r8,r16
    1cd8:	20807d26 	beq	r4,r2,1ed0 <__ieee754_sqrt+0x224>
    1cdc:	01408d0e 	bge	zero,r5,1f14 <__ieee754_sqrt+0x268>
    1ce0:	380dd53a 	srai	r6,r7,20
    1ce4:	3000131e 	bne	r6,zero,1d34 <__ieee754_sqrt+0x88>
    1ce8:	1800041e 	bne	r3,zero,1cfc <__ieee754_sqrt+0x50>
    1cec:	400ed2fa 	srli	r7,r8,11
    1cf0:	31bffac4 	addi	r6,r6,-21
    1cf4:	4010957a 	slli	r8,r8,21
    1cf8:	383ffc26 	beq	r7,zero,1cec <__ieee754_sqrt+0x40>
    1cfc:	3880042c 	andhi	r2,r7,16
    1d00:	1000991e 	bne	r2,zero,1f68 <__ieee754_sqrt+0x2bc>
    1d04:	0009883a 	mov	r4,zero
    1d08:	39cf883a 	add	r7,r7,r7
    1d0c:	3880042c 	andhi	r2,r7,16
    1d10:	21000044 	addi	r4,r4,1
    1d14:	103ffc26 	beq	r2,zero,1d08 <__ieee754_sqrt+0x5c>
    1d18:	00800804 	movi	r2,32
    1d1c:	1105c83a 	sub	r2,r2,r4
    1d20:	4086d83a 	srl	r3,r8,r2
    1d24:	4110983a 	sll	r8,r8,r4
    1d28:	3105c83a 	sub	r2,r6,r4
    1d2c:	38ceb03a 	or	r7,r7,r3
    1d30:	11800044 	addi	r6,r2,1
    1d34:	31bf0044 	addi	r6,r6,-1023
    1d38:	30c0004c 	andi	r3,r6,1
    1d3c:	00800434 	movhi	r2,16
    1d40:	10bfffc4 	addi	r2,r2,-1
    1d44:	3884703a 	and	r2,r7,r2
    1d48:	1807003a 	cmpeq	r3,r3,zero
    1d4c:	11000434 	orhi	r4,r2,16
    1d50:	18005426 	beq	r3,zero,1ea4 <__ieee754_sqrt+0x1f8>
    1d54:	4004d7fa 	srli	r2,r8,31
    1d58:	4207883a 	add	r3,r8,r8
    1d5c:	02800834 	movhi	r10,32
    1d60:	1105883a 	add	r2,r2,r4
    1d64:	2089883a 	add	r4,r4,r2
    1d68:	0011883a 	mov	r8,zero
    1d6c:	000b883a 	mov	r5,zero
    1d70:	0013883a 	mov	r9,zero
    1d74:	02c00584 	movi	r11,22
    1d78:	520f883a 	add	r7,r10,r8
    1d7c:	1804d7fa 	srli	r2,r3,31
    1d80:	4a400044 	addi	r9,r9,1
    1d84:	18c7883a 	add	r3,r3,r3
    1d88:	21c00316 	blt	r4,r7,1d98 <__ieee754_sqrt+0xec>
    1d8c:	21c9c83a 	sub	r4,r4,r7
    1d90:	2a8b883a 	add	r5,r5,r10
    1d94:	51d1883a 	add	r8,r10,r7
    1d98:	1105883a 	add	r2,r2,r4
    1d9c:	5014d07a 	srli	r10,r10,1
    1da0:	2089883a 	add	r4,r4,r2
    1da4:	4afff41e 	bne	r9,r11,1d78 <__ieee754_sqrt+0xcc>
    1da8:	02600034 	movhi	r9,32768
    1dac:	0017883a 	mov	r11,zero
    1db0:	0019883a 	mov	r12,zero
    1db4:	0015883a 	mov	r10,zero
    1db8:	4821883a 	mov	r16,r9
    1dbc:	03c00804 	movi	r15,32
    1dc0:	00000806 	br	1de4 <__ieee754_sqrt+0x138>
    1dc4:	22003426 	beq	r4,r8,1e98 <__ieee754_sqrt+0x1ec>
    1dc8:	1804d7fa 	srli	r2,r3,31
    1dcc:	52800044 	addi	r10,r10,1
    1dd0:	18c7883a 	add	r3,r3,r3
    1dd4:	1105883a 	add	r2,r2,r4
    1dd8:	2089883a 	add	r4,r4,r2
    1ddc:	4812d07a 	srli	r9,r9,1
    1de0:	53c01326 	beq	r10,r15,1e30 <__ieee754_sqrt+0x184>
    1de4:	4acf883a 	add	r7,r9,r11
    1de8:	413ff60e 	bge	r8,r4,1dc4 <__ieee754_sqrt+0x118>
    1dec:	38a0002c 	andhi	r2,r7,32768
    1df0:	3a57883a 	add	r11,r7,r9
    1df4:	14002426 	beq	r2,r16,1e88 <__ieee754_sqrt+0x1dc>
    1df8:	4005883a 	mov	r2,r8
    1dfc:	2209c83a 	sub	r4,r4,r8
    1e00:	19c0012e 	bgeu	r3,r7,1e08 <__ieee754_sqrt+0x15c>
    1e04:	213fffc4 	addi	r4,r4,-1
    1e08:	19c7c83a 	sub	r3,r3,r7
    1e0c:	1011883a 	mov	r8,r2
    1e10:	1804d7fa 	srli	r2,r3,31
    1e14:	52800044 	addi	r10,r10,1
    1e18:	6259883a 	add	r12,r12,r9
    1e1c:	1105883a 	add	r2,r2,r4
    1e20:	18c7883a 	add	r3,r3,r3
    1e24:	2089883a 	add	r4,r4,r2
    1e28:	4812d07a 	srli	r9,r9,1
    1e2c:	53ffed1e 	bne	r10,r15,1de4 <__ieee754_sqrt+0x138>
    1e30:	20c4b03a 	or	r2,r4,r3
    1e34:	1000201e 	bne	r2,zero,1eb8 <__ieee754_sqrt+0x20c>
    1e38:	600ed07a 	srli	r7,r12,1
    1e3c:	2880004c 	andi	r2,r5,1
    1e40:	1005003a 	cmpeq	r2,r2,zero
    1e44:	1000011e 	bne	r2,zero,1e4c <__ieee754_sqrt+0x1a0>
    1e48:	39e00034 	orhi	r7,r7,32768
    1e4c:	300dd07a 	srai	r6,r6,1
    1e50:	280bd07a 	srai	r5,r5,1
    1e54:	010ff834 	movhi	r4,16352
    1e58:	300c953a 	slli	r6,r6,20
    1e5c:	290b883a 	add	r5,r5,r4
    1e60:	3821883a 	mov	r16,r7
    1e64:	299d883a 	add	r14,r5,r6
    1e68:	7023883a 	mov	r17,r14
    1e6c:	8005883a 	mov	r2,r16
    1e70:	8807883a 	mov	r3,r17
    1e74:	dfc00217 	ldw	ra,8(sp)
    1e78:	dc400117 	ldw	r17,4(sp)
    1e7c:	dc000017 	ldw	r16,0(sp)
    1e80:	dec00304 	addi	sp,sp,12
    1e84:	f800283a 	ret
    1e88:	5884703a 	and	r2,r11,r2
    1e8c:	103fda1e 	bne	r2,zero,1df8 <__ieee754_sqrt+0x14c>
    1e90:	40800044 	addi	r2,r8,1
    1e94:	003fd906 	br	1dfc <__ieee754_sqrt+0x150>
    1e98:	19ffd42e 	bgeu	r3,r7,1dec <__ieee754_sqrt+0x140>
    1e9c:	2011883a 	mov	r8,r4
    1ea0:	003fc906 	br	1dc8 <__ieee754_sqrt+0x11c>
    1ea4:	4004d7fa 	srli	r2,r8,31
    1ea8:	4211883a 	add	r8,r8,r8
    1eac:	1105883a 	add	r2,r2,r4
    1eb0:	2089883a 	add	r4,r4,r2
    1eb4:	003fa706 	br	1d54 <__ieee754_sqrt+0xa8>
    1eb8:	00bfffc4 	movi	r2,-1
    1ebc:	60802726 	beq	r12,r2,1f5c <__ieee754_sqrt+0x2b0>
    1ec0:	6080004c 	andi	r2,r12,1
    1ec4:	6085883a 	add	r2,r12,r2
    1ec8:	100ed07a 	srli	r7,r2,1
    1ecc:	003fdb06 	br	1e3c <__ieee754_sqrt+0x190>
    1ed0:	8009883a 	mov	r4,r16
    1ed4:	800d883a 	mov	r6,r16
    1ed8:	00029080 	call	2908 <__muldf3>
    1edc:	180f883a 	mov	r7,r3
    1ee0:	880b883a 	mov	r5,r17
    1ee4:	8009883a 	mov	r4,r16
    1ee8:	100d883a 	mov	r6,r2
    1eec:	00028940 	call	2894 <__adddf3>
    1ef0:	1021883a 	mov	r16,r2
    1ef4:	1823883a 	mov	r17,r3
    1ef8:	8005883a 	mov	r2,r16
    1efc:	8807883a 	mov	r3,r17
    1f00:	dfc00217 	ldw	ra,8(sp)
    1f04:	dc400117 	ldw	r17,4(sp)
    1f08:	dc000017 	ldw	r16,0(sp)
    1f0c:	dec00304 	addi	sp,sp,12
    1f10:	f800283a 	ret
    1f14:	00a00034 	movhi	r2,32768
    1f18:	10bfffc4 	addi	r2,r2,-1
    1f1c:	2884703a 	and	r2,r5,r2
    1f20:	8084b03a 	or	r2,r16,r2
    1f24:	103fd126 	beq	r2,zero,1e6c <__ieee754_sqrt+0x1c0>
    1f28:	283f6d26 	beq	r5,zero,1ce0 <__ieee754_sqrt+0x34>
    1f2c:	280f883a 	mov	r7,r5
    1f30:	8009883a 	mov	r4,r16
    1f34:	800d883a 	mov	r6,r16
    1f38:	00028140 	call	2814 <__subdf3>
    1f3c:	1009883a 	mov	r4,r2
    1f40:	180b883a 	mov	r5,r3
    1f44:	100d883a 	mov	r6,r2
    1f48:	180f883a 	mov	r7,r3
    1f4c:	0002ccc0 	call	2ccc <__divdf3>
    1f50:	1021883a 	mov	r16,r2
    1f54:	1823883a 	mov	r17,r3
    1f58:	003fc406 	br	1e6c <__ieee754_sqrt+0x1c0>
    1f5c:	29400044 	addi	r5,r5,1
    1f60:	000f883a 	mov	r7,zero
    1f64:	003fb506 	br	1e3c <__ieee754_sqrt+0x190>
    1f68:	0009883a 	mov	r4,zero
    1f6c:	00800804 	movi	r2,32
    1f70:	003f6b06 	br	1d20 <__ieee754_sqrt+0x74>

00001f74 <fabs>:
    1f74:	01e00034 	movhi	r7,32768
    1f78:	39ffffc4 	addi	r7,r7,-1
    1f7c:	394e703a 	and	r7,r7,r5
    1f80:	2005883a 	mov	r2,r4
    1f84:	3807883a 	mov	r3,r7
    1f88:	f800283a 	ret

00001f8c <finite>:
    1f8c:	00a00034 	movhi	r2,32768
    1f90:	10bfffc4 	addi	r2,r2,-1
    1f94:	2884703a 	and	r2,r5,r2
    1f98:	01600434 	movhi	r5,32784
    1f9c:	1145883a 	add	r2,r2,r5
    1fa0:	1004d7fa 	srli	r2,r2,31
    1fa4:	f800283a 	ret

00001fa8 <__isnand>:
    1fa8:	200d883a 	mov	r6,r4
    1fac:	0109c83a 	sub	r4,zero,r4
    1fb0:	2188b03a 	or	r4,r4,r6
    1fb4:	2008d7fa 	srli	r4,r4,31
    1fb8:	00a00034 	movhi	r2,32768
    1fbc:	10bfffc4 	addi	r2,r2,-1
    1fc0:	1144703a 	and	r2,r2,r5
    1fc4:	2088b03a 	or	r4,r4,r2
    1fc8:	009ffc34 	movhi	r2,32752
    1fcc:	1105c83a 	sub	r2,r2,r4
    1fd0:	1004d7fa 	srli	r2,r2,31
    1fd4:	f800283a 	ret

00001fd8 <matherr>:
    1fd8:	0005883a 	mov	r2,zero
    1fdc:	f800283a 	ret

00001fe0 <nan>:
    1fe0:	015ffe34 	movhi	r5,32760
    1fe4:	0005883a 	mov	r2,zero
    1fe8:	2807883a 	mov	r3,r5
    1fec:	f800283a 	ret

00001ff0 <rint>:
    1ff0:	2015883a 	mov	r10,r4
    1ff4:	2809d53a 	srai	r4,r5,20
    1ff8:	defff904 	addi	sp,sp,-28
    1ffc:	034004c4 	movi	r13,19
    2000:	2101ffcc 	andi	r4,r4,2047
    2004:	227f0044 	addi	r9,r4,-1023
    2008:	dc800415 	stw	r18,16(sp)
    200c:	dfc00615 	stw	ra,24(sp)
    2010:	dcc00515 	stw	r19,20(sp)
    2014:	dc400315 	stw	r17,12(sp)
    2018:	dc000215 	stw	r16,8(sp)
    201c:	2817883a 	mov	r11,r5
    2020:	500d883a 	mov	r6,r10
    2024:	2824d7fa 	srli	r18,r5,31
    2028:	6a403016 	blt	r13,r9,20ec <rint+0xfc>
    202c:	48004916 	blt	r9,zero,2154 <rint+0x164>
    2030:	00800434 	movhi	r2,16
    2034:	10bfffc4 	addi	r2,r2,-1
    2038:	1247d83a 	sra	r3,r2,r9
    203c:	2809883a 	mov	r4,r5
    2040:	1944703a 	and	r2,r3,r5
    2044:	5084b03a 	or	r2,r10,r2
    2048:	10001f26 	beq	r2,zero,20c8 <rint+0xd8>
    204c:	180ad07a 	srli	r5,r3,1
    2050:	5944703a 	and	r2,r11,r5
    2054:	5084b03a 	or	r2,r10,r2
    2058:	10000626 	beq	r2,zero,2074 <rint+0x84>
    205c:	4b406626 	beq	r9,r13,21f8 <rint+0x208>
    2060:	00c000b4 	movhi	r3,2
    2064:	1a47d83a 	sra	r3,r3,r9
    2068:	0144303a 	nor	r2,zero,r5
    206c:	5884703a 	and	r2,r11,r2
    2070:	10c8b03a 	or	r4,r2,r3
    2074:	900690fa 	slli	r3,r18,3
    2078:	00800074 	movhi	r2,1
    207c:	10a31504 	addi	r2,r2,-29612
    2080:	200f883a 	mov	r7,r4
    2084:	1887883a 	add	r3,r3,r2
    2088:	1c000017 	ldw	r16,0(r3)
    208c:	1c400117 	ldw	r17,4(r3)
    2090:	8009883a 	mov	r4,r16
    2094:	880b883a 	mov	r5,r17
    2098:	00028940 	call	2894 <__adddf3>
    209c:	d8800015 	stw	r2,0(sp)
    20a0:	d8c00115 	stw	r3,4(sp)
    20a4:	d8800017 	ldw	r2,0(sp)
    20a8:	d8c00117 	ldw	r3,4(sp)
    20ac:	880f883a 	mov	r7,r17
    20b0:	800d883a 	mov	r6,r16
    20b4:	180b883a 	mov	r5,r3
    20b8:	1009883a 	mov	r4,r2
    20bc:	00028140 	call	2814 <__subdf3>
    20c0:	1015883a 	mov	r10,r2
    20c4:	1817883a 	mov	r11,r3
    20c8:	5005883a 	mov	r2,r10
    20cc:	5807883a 	mov	r3,r11
    20d0:	dfc00617 	ldw	ra,24(sp)
    20d4:	dcc00517 	ldw	r19,20(sp)
    20d8:	dc800417 	ldw	r18,16(sp)
    20dc:	dc400317 	ldw	r17,12(sp)
    20e0:	dc000217 	ldw	r16,8(sp)
    20e4:	dec00704 	addi	sp,sp,28
    20e8:	f800283a 	ret
    20ec:	00800cc4 	movi	r2,51
    20f0:	12400f16 	blt	r2,r9,2130 <rint+0x140>
    20f4:	213efb44 	addi	r4,r4,-1043
    20f8:	00bfffc4 	movi	r2,-1
    20fc:	1104d83a 	srl	r2,r2,r4
    2100:	5086703a 	and	r3,r10,r2
    2104:	183ff026 	beq	r3,zero,20c8 <rint+0xd8>
    2108:	100ad07a 	srli	r5,r2,1
    210c:	5144703a 	and	r2,r10,r5
    2110:	10000526 	beq	r2,zero,2128 <rint+0x138>
    2114:	00d00034 	movhi	r3,16384
    2118:	1907d83a 	sra	r3,r3,r4
    211c:	0144303a 	nor	r2,zero,r5
    2120:	5084703a 	and	r2,r10,r2
    2124:	10ccb03a 	or	r6,r2,r3
    2128:	5809883a 	mov	r4,r11
    212c:	003fd106 	br	2074 <rint+0x84>
    2130:	00810004 	movi	r2,1024
    2134:	48bfe41e 	bne	r9,r2,20c8 <rint+0xd8>
    2138:	5009883a 	mov	r4,r10
    213c:	500d883a 	mov	r6,r10
    2140:	280f883a 	mov	r7,r5
    2144:	00028940 	call	2894 <__adddf3>
    2148:	1015883a 	mov	r10,r2
    214c:	1817883a 	mov	r11,r3
    2150:	003fdd06 	br	20c8 <rint+0xd8>
    2154:	04e00034 	movhi	r19,32768
    2158:	9cffffc4 	addi	r19,r19,-1
    215c:	2cc4703a 	and	r2,r5,r19
    2160:	5084b03a 	or	r2,r10,r2
    2164:	103fd826 	beq	r2,zero,20c8 <rint+0xd8>
    2168:	00c00434 	movhi	r3,16
    216c:	18ffffc4 	addi	r3,r3,-1
    2170:	28c6703a 	and	r3,r5,r3
    2174:	50c6b03a 	or	r3,r10,r3
    2178:	00cdc83a 	sub	r6,zero,r3
    217c:	900a90fa 	slli	r5,r18,3
    2180:	1986b03a 	or	r3,r3,r6
    2184:	01000074 	movhi	r4,1
    2188:	21231504 	addi	r4,r4,-29612
    218c:	1806d33a 	srli	r3,r3,12
    2190:	290b883a 	add	r5,r5,r4
    2194:	2c000017 	ldw	r16,0(r5)
    2198:	2c400117 	ldw	r17,4(r5)
    219c:	593fffac 	andhi	r4,r11,65534
    21a0:	18c0022c 	andhi	r3,r3,8
    21a4:	1906b03a 	or	r3,r3,r4
    21a8:	500d883a 	mov	r6,r10
    21ac:	180f883a 	mov	r7,r3
    21b0:	8009883a 	mov	r4,r16
    21b4:	880b883a 	mov	r5,r17
    21b8:	00028940 	call	2894 <__adddf3>
    21bc:	d8800015 	stw	r2,0(sp)
    21c0:	d8c00115 	stw	r3,4(sp)
    21c4:	d8800017 	ldw	r2,0(sp)
    21c8:	d8c00117 	ldw	r3,4(sp)
    21cc:	880f883a 	mov	r7,r17
    21d0:	800d883a 	mov	r6,r16
    21d4:	180b883a 	mov	r5,r3
    21d8:	1009883a 	mov	r4,r2
    21dc:	00028140 	call	2814 <__subdf3>
    21e0:	901297fa 	slli	r9,r18,31
    21e4:	98d0703a 	and	r8,r19,r3
    21e8:	1015883a 	mov	r10,r2
    21ec:	4250b03a 	or	r8,r8,r9
    21f0:	4017883a 	mov	r11,r8
    21f4:	003fb406 	br	20c8 <rint+0xd8>
    21f8:	01900034 	movhi	r6,16384
    21fc:	003f9d06 	br	2074 <rint+0x84>

00002200 <scalbn>:
    2200:	2011883a 	mov	r8,r4
    2204:	291ffc2c 	andhi	r4,r5,32752
    2208:	2009d53a 	srai	r4,r4,20
    220c:	defffd04 	addi	sp,sp,-12
    2210:	dc000015 	stw	r16,0(sp)
    2214:	dfc00215 	stw	ra,8(sp)
    2218:	dc400115 	stw	r17,4(sp)
    221c:	2813883a 	mov	r9,r5
    2220:	2815883a 	mov	r10,r5
    2224:	3021883a 	mov	r16,r6
    2228:	2000281e 	bne	r4,zero,22cc <scalbn+0xcc>
    222c:	00a00034 	movhi	r2,32768
    2230:	10bfffc4 	addi	r2,r2,-1
    2234:	2884703a 	and	r2,r5,r2
    2238:	4084b03a 	or	r2,r8,r2
    223c:	10001826 	beq	r2,zero,22a0 <scalbn+0xa0>
    2240:	0005883a 	mov	r2,zero
    2244:	00d0d434 	movhi	r3,17232
    2248:	4009883a 	mov	r4,r8
    224c:	100d883a 	mov	r6,r2
    2250:	180f883a 	mov	r7,r3
    2254:	00029080 	call	2908 <__muldf3>
    2258:	100b883a 	mov	r5,r2
    225c:	1011883a 	mov	r8,r2
    2260:	00bffff4 	movhi	r2,65535
    2264:	108f2c04 	addi	r2,r2,15536
    2268:	180d883a 	mov	r6,r3
    226c:	1813883a 	mov	r9,r3
    2270:	8080120e 	bge	r16,r2,22bc <scalbn+0xbc>
    2274:	00b0be74 	movhi	r2,49913
    2278:	10bcd644 	addi	r2,r2,-3239
    227c:	00c06974 	movhi	r3,421
    2280:	18db87c4 	addi	r3,r3,28191
    2284:	2809883a 	mov	r4,r5
    2288:	180f883a 	mov	r7,r3
    228c:	300b883a 	mov	r5,r6
    2290:	100d883a 	mov	r6,r2
    2294:	00029080 	call	2908 <__muldf3>
    2298:	1011883a 	mov	r8,r2
    229c:	1813883a 	mov	r9,r3
    22a0:	4005883a 	mov	r2,r8
    22a4:	4807883a 	mov	r3,r9
    22a8:	dfc00217 	ldw	ra,8(sp)
    22ac:	dc400117 	ldw	r17,4(sp)
    22b0:	dc000017 	ldw	r16,0(sp)
    22b4:	dec00304 	addi	sp,sp,12
    22b8:	f800283a 	ret
    22bc:	189ffc2c 	andhi	r2,r3,32752
    22c0:	1005d53a 	srai	r2,r2,20
    22c4:	1815883a 	mov	r10,r3
    22c8:	113ff284 	addi	r4,r2,-54
    22cc:	0081ffc4 	movi	r2,2047
    22d0:	20801126 	beq	r4,r2,2318 <scalbn+0x118>
    22d4:	2409883a 	add	r4,r4,r16
    22d8:	0081ff84 	movi	r2,2046
    22dc:	11001c16 	blt	r2,r4,2350 <scalbn+0x150>
    22e0:	0100290e 	bge	zero,r4,2388 <scalbn+0x188>
    22e4:	200a953a 	slli	r5,r4,20
    22e8:	01200434 	movhi	r4,32784
    22ec:	213fffc4 	addi	r4,r4,-1
    22f0:	5108703a 	and	r4,r10,r4
    22f4:	2148b03a 	or	r4,r4,r5
    22f8:	2013883a 	mov	r9,r4
    22fc:	4005883a 	mov	r2,r8
    2300:	4807883a 	mov	r3,r9
    2304:	dfc00217 	ldw	ra,8(sp)
    2308:	dc400117 	ldw	r17,4(sp)
    230c:	dc000017 	ldw	r16,0(sp)
    2310:	dec00304 	addi	sp,sp,12
    2314:	f800283a 	ret
    2318:	480f883a 	mov	r7,r9
    231c:	4009883a 	mov	r4,r8
    2320:	480b883a 	mov	r5,r9
    2324:	400d883a 	mov	r6,r8
    2328:	00028940 	call	2894 <__adddf3>
    232c:	1011883a 	mov	r8,r2
    2330:	1813883a 	mov	r9,r3
    2334:	4005883a 	mov	r2,r8
    2338:	4807883a 	mov	r3,r9
    233c:	dfc00217 	ldw	ra,8(sp)
    2340:	dc400117 	ldw	r17,4(sp)
    2344:	dc000017 	ldw	r16,0(sp)
    2348:	dec00304 	addi	sp,sp,12
    234c:	f800283a 	ret
    2350:	04220034 	movhi	r16,34816
    2354:	841d6704 	addi	r16,r16,30108
    2358:	045f8e34 	movhi	r17,32312
    235c:	8c790f04 	addi	r17,r17,-7108
    2360:	480f883a 	mov	r7,r9
    2364:	400d883a 	mov	r6,r8
    2368:	8009883a 	mov	r4,r16
    236c:	880b883a 	mov	r5,r17
    2370:	00023e00 	call	23e0 <copysign>
    2374:	180b883a 	mov	r5,r3
    2378:	800d883a 	mov	r6,r16
    237c:	880f883a 	mov	r7,r17
    2380:	1009883a 	mov	r4,r2
    2384:	003fc306 	br	2294 <scalbn+0x94>
    2388:	00bff284 	movi	r2,-54
    238c:	11000716 	blt	r2,r4,23ac <scalbn+0x1ac>
    2390:	00b0d414 	movui	r2,50000
    2394:	143fee16 	blt	r2,r16,2350 <scalbn+0x150>
    2398:	0430be74 	movhi	r16,49913
    239c:	843cd644 	addi	r16,r16,-3239
    23a0:	04406974 	movhi	r17,421
    23a4:	8c5b87c4 	addi	r17,r17,28191
    23a8:	003fed06 	br	2360 <scalbn+0x160>
    23ac:	21000d84 	addi	r4,r4,54
    23b0:	2008953a 	slli	r4,r4,20
    23b4:	01e00434 	movhi	r7,32784
    23b8:	39ffffc4 	addi	r7,r7,-1
    23bc:	51ce703a 	and	r7,r10,r7
    23c0:	390eb03a 	or	r7,r7,r4
    23c4:	024f2434 	movhi	r9,15504
    23c8:	4009883a 	mov	r4,r8
    23cc:	0011883a 	mov	r8,zero
    23d0:	380b883a 	mov	r5,r7
    23d4:	400d883a 	mov	r6,r8
    23d8:	480f883a 	mov	r7,r9
    23dc:	003fad06 	br	2294 <scalbn+0x94>

000023e0 <copysign>:
    23e0:	3813883a 	mov	r9,r7
    23e4:	01e00034 	movhi	r7,32768
    23e8:	39ffffc4 	addi	r7,r7,-1
    23ec:	394e703a 	and	r7,r7,r5
    23f0:	4aa0002c 	andhi	r10,r9,32768
    23f4:	3a8eb03a 	or	r7,r7,r10
    23f8:	2005883a 	mov	r2,r4
    23fc:	3807883a 	mov	r3,r7
    2400:	f800283a 	ret

00002404 <_fpadd_parts>:
    2404:	defff804 	addi	sp,sp,-32
    2408:	dcc00315 	stw	r19,12(sp)
    240c:	2027883a 	mov	r19,r4
    2410:	21000017 	ldw	r4,0(r4)
    2414:	00c00044 	movi	r3,1
    2418:	dd400515 	stw	r21,20(sp)
    241c:	dd000415 	stw	r20,16(sp)
    2420:	ddc00715 	stw	r23,28(sp)
    2424:	dd800615 	stw	r22,24(sp)
    2428:	dc800215 	stw	r18,8(sp)
    242c:	dc400115 	stw	r17,4(sp)
    2430:	dc000015 	stw	r16,0(sp)
    2434:	282b883a 	mov	r21,r5
    2438:	3029883a 	mov	r20,r6
    243c:	1900632e 	bgeu	r3,r4,25cc <_fpadd_parts+0x1c8>
    2440:	28800017 	ldw	r2,0(r5)
    2444:	1880812e 	bgeu	r3,r2,264c <_fpadd_parts+0x248>
    2448:	00c00104 	movi	r3,4
    244c:	20c0dc26 	beq	r4,r3,27c0 <_fpadd_parts+0x3bc>
    2450:	10c07e26 	beq	r2,r3,264c <_fpadd_parts+0x248>
    2454:	00c00084 	movi	r3,2
    2458:	10c06726 	beq	r2,r3,25f8 <_fpadd_parts+0x1f4>
    245c:	20c07b26 	beq	r4,r3,264c <_fpadd_parts+0x248>
    2460:	9dc00217 	ldw	r23,8(r19)
    2464:	28c00217 	ldw	r3,8(r5)
    2468:	9c400317 	ldw	r17,12(r19)
    246c:	2bc00317 	ldw	r15,12(r5)
    2470:	b8cdc83a 	sub	r6,r23,r3
    2474:	9c800417 	ldw	r18,16(r19)
    2478:	2c000417 	ldw	r16,16(r5)
    247c:	3009883a 	mov	r4,r6
    2480:	30009716 	blt	r6,zero,26e0 <_fpadd_parts+0x2dc>
    2484:	00800fc4 	movi	r2,63
    2488:	11806b16 	blt	r2,r6,2638 <_fpadd_parts+0x234>
    248c:	0100a40e 	bge	zero,r4,2720 <_fpadd_parts+0x31c>
    2490:	35bff804 	addi	r22,r6,-32
    2494:	b000bc16 	blt	r22,zero,2788 <_fpadd_parts+0x384>
    2498:	8596d83a 	srl	r11,r16,r22
    249c:	0019883a 	mov	r12,zero
    24a0:	0013883a 	mov	r9,zero
    24a4:	01000044 	movi	r4,1
    24a8:	0015883a 	mov	r10,zero
    24ac:	b000be16 	blt	r22,zero,27a8 <_fpadd_parts+0x3a4>
    24b0:	2590983a 	sll	r8,r4,r22
    24b4:	000f883a 	mov	r7,zero
    24b8:	00bfffc4 	movi	r2,-1
    24bc:	3889883a 	add	r4,r7,r2
    24c0:	408b883a 	add	r5,r8,r2
    24c4:	21cd803a 	cmpltu	r6,r4,r7
    24c8:	314b883a 	add	r5,r6,r5
    24cc:	7904703a 	and	r2,r15,r4
    24d0:	8146703a 	and	r3,r16,r5
    24d4:	10c4b03a 	or	r2,r2,r3
    24d8:	10000226 	beq	r2,zero,24e4 <_fpadd_parts+0xe0>
    24dc:	02400044 	movi	r9,1
    24e0:	0015883a 	mov	r10,zero
    24e4:	5a5eb03a 	or	r15,r11,r9
    24e8:	62a0b03a 	or	r16,r12,r10
    24ec:	99400117 	ldw	r5,4(r19)
    24f0:	a8800117 	ldw	r2,4(r21)
    24f4:	28806e26 	beq	r5,r2,26b0 <_fpadd_parts+0x2ac>
    24f8:	28006626 	beq	r5,zero,2694 <_fpadd_parts+0x290>
    24fc:	7c45c83a 	sub	r2,r15,r17
    2500:	7889803a 	cmpltu	r4,r15,r2
    2504:	8487c83a 	sub	r3,r16,r18
    2508:	1909c83a 	sub	r4,r3,r4
    250c:	100d883a 	mov	r6,r2
    2510:	200f883a 	mov	r7,r4
    2514:	38007716 	blt	r7,zero,26f4 <_fpadd_parts+0x2f0>
    2518:	a5c00215 	stw	r23,8(r20)
    251c:	a1c00415 	stw	r7,16(r20)
    2520:	a0000115 	stw	zero,4(r20)
    2524:	a1800315 	stw	r6,12(r20)
    2528:	a2000317 	ldw	r8,12(r20)
    252c:	a2400417 	ldw	r9,16(r20)
    2530:	00bfffc4 	movi	r2,-1
    2534:	408b883a 	add	r5,r8,r2
    2538:	2a09803a 	cmpltu	r4,r5,r8
    253c:	488d883a 	add	r6,r9,r2
    2540:	01c40034 	movhi	r7,4096
    2544:	39ffffc4 	addi	r7,r7,-1
    2548:	218d883a 	add	r6,r4,r6
    254c:	39801736 	bltu	r7,r6,25ac <_fpadd_parts+0x1a8>
    2550:	31c06526 	beq	r6,r7,26e8 <_fpadd_parts+0x2e4>
    2554:	a3000217 	ldw	r12,8(r20)
    2558:	4209883a 	add	r4,r8,r8
    255c:	00bfffc4 	movi	r2,-1
    2560:	220f803a 	cmpltu	r7,r4,r8
    2564:	4a4b883a 	add	r5,r9,r9
    2568:	394f883a 	add	r7,r7,r5
    256c:	2095883a 	add	r10,r4,r2
    2570:	3897883a 	add	r11,r7,r2
    2574:	510d803a 	cmpltu	r6,r10,r4
    2578:	6099883a 	add	r12,r12,r2
    257c:	32d7883a 	add	r11,r6,r11
    2580:	00840034 	movhi	r2,4096
    2584:	10bfffc4 	addi	r2,r2,-1
    2588:	2011883a 	mov	r8,r4
    258c:	3813883a 	mov	r9,r7
    2590:	a1000315 	stw	r4,12(r20)
    2594:	a1c00415 	stw	r7,16(r20)
    2598:	a3000215 	stw	r12,8(r20)
    259c:	12c00336 	bltu	r2,r11,25ac <_fpadd_parts+0x1a8>
    25a0:	58bfed1e 	bne	r11,r2,2558 <_fpadd_parts+0x154>
    25a4:	00bfff84 	movi	r2,-2
    25a8:	12bfeb2e 	bgeu	r2,r10,2558 <_fpadd_parts+0x154>
    25ac:	a2800417 	ldw	r10,16(r20)
    25b0:	008000c4 	movi	r2,3
    25b4:	00c80034 	movhi	r3,8192
    25b8:	18ffffc4 	addi	r3,r3,-1
    25bc:	a2400317 	ldw	r9,12(r20)
    25c0:	a0800015 	stw	r2,0(r20)
    25c4:	1a802336 	bltu	r3,r10,2654 <_fpadd_parts+0x250>
    25c8:	a027883a 	mov	r19,r20
    25cc:	9805883a 	mov	r2,r19
    25d0:	ddc00717 	ldw	r23,28(sp)
    25d4:	dd800617 	ldw	r22,24(sp)
    25d8:	dd400517 	ldw	r21,20(sp)
    25dc:	dd000417 	ldw	r20,16(sp)
    25e0:	dcc00317 	ldw	r19,12(sp)
    25e4:	dc800217 	ldw	r18,8(sp)
    25e8:	dc400117 	ldw	r17,4(sp)
    25ec:	dc000017 	ldw	r16,0(sp)
    25f0:	dec00804 	addi	sp,sp,32
    25f4:	f800283a 	ret
    25f8:	20fff41e 	bne	r4,r3,25cc <_fpadd_parts+0x1c8>
    25fc:	31000015 	stw	r4,0(r6)
    2600:	98800117 	ldw	r2,4(r19)
    2604:	30800115 	stw	r2,4(r6)
    2608:	98c00217 	ldw	r3,8(r19)
    260c:	30c00215 	stw	r3,8(r6)
    2610:	98800317 	ldw	r2,12(r19)
    2614:	30800315 	stw	r2,12(r6)
    2618:	98c00417 	ldw	r3,16(r19)
    261c:	30c00415 	stw	r3,16(r6)
    2620:	98800117 	ldw	r2,4(r19)
    2624:	28c00117 	ldw	r3,4(r5)
    2628:	3027883a 	mov	r19,r6
    262c:	10c4703a 	and	r2,r2,r3
    2630:	30800115 	stw	r2,4(r6)
    2634:	003fe506 	br	25cc <_fpadd_parts+0x1c8>
    2638:	1dc02616 	blt	r3,r23,26d4 <_fpadd_parts+0x2d0>
    263c:	0023883a 	mov	r17,zero
    2640:	182f883a 	mov	r23,r3
    2644:	0025883a 	mov	r18,zero
    2648:	003fa806 	br	24ec <_fpadd_parts+0xe8>
    264c:	a827883a 	mov	r19,r21
    2650:	003fde06 	br	25cc <_fpadd_parts+0x1c8>
    2654:	01800044 	movi	r6,1
    2658:	500497fa 	slli	r2,r10,31
    265c:	4808d07a 	srli	r4,r9,1
    2660:	518ad83a 	srl	r5,r10,r6
    2664:	a2000217 	ldw	r8,8(r20)
    2668:	1108b03a 	or	r4,r2,r4
    266c:	0007883a 	mov	r3,zero
    2670:	4984703a 	and	r2,r9,r6
    2674:	208cb03a 	or	r6,r4,r2
    2678:	28ceb03a 	or	r7,r5,r3
    267c:	42000044 	addi	r8,r8,1
    2680:	a027883a 	mov	r19,r20
    2684:	a1c00415 	stw	r7,16(r20)
    2688:	a2000215 	stw	r8,8(r20)
    268c:	a1800315 	stw	r6,12(r20)
    2690:	003fce06 	br	25cc <_fpadd_parts+0x1c8>
    2694:	8bc5c83a 	sub	r2,r17,r15
    2698:	8889803a 	cmpltu	r4,r17,r2
    269c:	9407c83a 	sub	r3,r18,r16
    26a0:	1909c83a 	sub	r4,r3,r4
    26a4:	100d883a 	mov	r6,r2
    26a8:	200f883a 	mov	r7,r4
    26ac:	003f9906 	br	2514 <_fpadd_parts+0x110>
    26b0:	7c45883a 	add	r2,r15,r17
    26b4:	13c9803a 	cmpltu	r4,r2,r15
    26b8:	8487883a 	add	r3,r16,r18
    26bc:	20c9883a 	add	r4,r4,r3
    26c0:	a1400115 	stw	r5,4(r20)
    26c4:	a5c00215 	stw	r23,8(r20)
    26c8:	a0800315 	stw	r2,12(r20)
    26cc:	a1000415 	stw	r4,16(r20)
    26d0:	003fb606 	br	25ac <_fpadd_parts+0x1a8>
    26d4:	001f883a 	mov	r15,zero
    26d8:	0021883a 	mov	r16,zero
    26dc:	003f8306 	br	24ec <_fpadd_parts+0xe8>
    26e0:	018dc83a 	sub	r6,zero,r6
    26e4:	003f6706 	br	2484 <_fpadd_parts+0x80>
    26e8:	00bfff84 	movi	r2,-2
    26ec:	117faf36 	bltu	r2,r5,25ac <_fpadd_parts+0x1a8>
    26f0:	003f9806 	br	2554 <_fpadd_parts+0x150>
    26f4:	0005883a 	mov	r2,zero
    26f8:	1189c83a 	sub	r4,r2,r6
    26fc:	1105803a 	cmpltu	r2,r2,r4
    2700:	01cbc83a 	sub	r5,zero,r7
    2704:	2885c83a 	sub	r2,r5,r2
    2708:	01800044 	movi	r6,1
    270c:	a1800115 	stw	r6,4(r20)
    2710:	a5c00215 	stw	r23,8(r20)
    2714:	a1000315 	stw	r4,12(r20)
    2718:	a0800415 	stw	r2,16(r20)
    271c:	003f8206 	br	2528 <_fpadd_parts+0x124>
    2720:	203f7226 	beq	r4,zero,24ec <_fpadd_parts+0xe8>
    2724:	35bff804 	addi	r22,r6,-32
    2728:	b9af883a 	add	r23,r23,r6
    272c:	b0003116 	blt	r22,zero,27f4 <_fpadd_parts+0x3f0>
    2730:	959ad83a 	srl	r13,r18,r22
    2734:	001d883a 	mov	r14,zero
    2738:	000f883a 	mov	r7,zero
    273c:	01000044 	movi	r4,1
    2740:	0011883a 	mov	r8,zero
    2744:	b0002516 	blt	r22,zero,27dc <_fpadd_parts+0x3d8>
    2748:	2594983a 	sll	r10,r4,r22
    274c:	0013883a 	mov	r9,zero
    2750:	00bfffc4 	movi	r2,-1
    2754:	4889883a 	add	r4,r9,r2
    2758:	508b883a 	add	r5,r10,r2
    275c:	224d803a 	cmpltu	r6,r4,r9
    2760:	314b883a 	add	r5,r6,r5
    2764:	8904703a 	and	r2,r17,r4
    2768:	9146703a 	and	r3,r18,r5
    276c:	10c4b03a 	or	r2,r2,r3
    2770:	10000226 	beq	r2,zero,277c <_fpadd_parts+0x378>
    2774:	01c00044 	movi	r7,1
    2778:	0011883a 	mov	r8,zero
    277c:	69e2b03a 	or	r17,r13,r7
    2780:	7224b03a 	or	r18,r14,r8
    2784:	003f5906 	br	24ec <_fpadd_parts+0xe8>
    2788:	8407883a 	add	r3,r16,r16
    278c:	008007c4 	movi	r2,31
    2790:	1185c83a 	sub	r2,r2,r6
    2794:	1886983a 	sll	r3,r3,r2
    2798:	7996d83a 	srl	r11,r15,r6
    279c:	8198d83a 	srl	r12,r16,r6
    27a0:	1ad6b03a 	or	r11,r3,r11
    27a4:	003f3e06 	br	24a0 <_fpadd_parts+0x9c>
    27a8:	2006d07a 	srli	r3,r4,1
    27ac:	008007c4 	movi	r2,31
    27b0:	1185c83a 	sub	r2,r2,r6
    27b4:	1890d83a 	srl	r8,r3,r2
    27b8:	218e983a 	sll	r7,r4,r6
    27bc:	003f3e06 	br	24b8 <_fpadd_parts+0xb4>
    27c0:	113f821e 	bne	r2,r4,25cc <_fpadd_parts+0x1c8>
    27c4:	28c00117 	ldw	r3,4(r5)
    27c8:	98800117 	ldw	r2,4(r19)
    27cc:	10ff7f26 	beq	r2,r3,25cc <_fpadd_parts+0x1c8>
    27d0:	04c00074 	movhi	r19,1
    27d4:	9ce31904 	addi	r19,r19,-29596
    27d8:	003f7c06 	br	25cc <_fpadd_parts+0x1c8>
    27dc:	2006d07a 	srli	r3,r4,1
    27e0:	008007c4 	movi	r2,31
    27e4:	1185c83a 	sub	r2,r2,r6
    27e8:	1894d83a 	srl	r10,r3,r2
    27ec:	2192983a 	sll	r9,r4,r6
    27f0:	003fd706 	br	2750 <_fpadd_parts+0x34c>
    27f4:	9487883a 	add	r3,r18,r18
    27f8:	008007c4 	movi	r2,31
    27fc:	1185c83a 	sub	r2,r2,r6
    2800:	1886983a 	sll	r3,r3,r2
    2804:	899ad83a 	srl	r13,r17,r6
    2808:	919cd83a 	srl	r14,r18,r6
    280c:	1b5ab03a 	or	r13,r3,r13
    2810:	003fc906 	br	2738 <_fpadd_parts+0x334>

00002814 <__subdf3>:
    2814:	deffea04 	addi	sp,sp,-88
    2818:	dcc01415 	stw	r19,80(sp)
    281c:	dcc00404 	addi	r19,sp,16
    2820:	2011883a 	mov	r8,r4
    2824:	2813883a 	mov	r9,r5
    2828:	dc401315 	stw	r17,76(sp)
    282c:	d809883a 	mov	r4,sp
    2830:	980b883a 	mov	r5,r19
    2834:	dc400904 	addi	r17,sp,36
    2838:	dfc01515 	stw	ra,84(sp)
    283c:	da400115 	stw	r9,4(sp)
    2840:	d9c00315 	stw	r7,12(sp)
    2844:	da000015 	stw	r8,0(sp)
    2848:	d9800215 	stw	r6,8(sp)
    284c:	00037c80 	call	37c8 <__unpack_d>
    2850:	d9000204 	addi	r4,sp,8
    2854:	880b883a 	mov	r5,r17
    2858:	00037c80 	call	37c8 <__unpack_d>
    285c:	d8800a17 	ldw	r2,40(sp)
    2860:	880b883a 	mov	r5,r17
    2864:	9809883a 	mov	r4,r19
    2868:	d9800e04 	addi	r6,sp,56
    286c:	1080005c 	xori	r2,r2,1
    2870:	d8800a15 	stw	r2,40(sp)
    2874:	00024040 	call	2404 <_fpadd_parts>
    2878:	1009883a 	mov	r4,r2
    287c:	00034b40 	call	34b4 <__pack_d>
    2880:	dfc01517 	ldw	ra,84(sp)
    2884:	dcc01417 	ldw	r19,80(sp)
    2888:	dc401317 	ldw	r17,76(sp)
    288c:	dec01604 	addi	sp,sp,88
    2890:	f800283a 	ret

00002894 <__adddf3>:
    2894:	deffea04 	addi	sp,sp,-88
    2898:	dcc01415 	stw	r19,80(sp)
    289c:	dcc00404 	addi	r19,sp,16
    28a0:	2011883a 	mov	r8,r4
    28a4:	2813883a 	mov	r9,r5
    28a8:	dc401315 	stw	r17,76(sp)
    28ac:	d809883a 	mov	r4,sp
    28b0:	980b883a 	mov	r5,r19
    28b4:	dc400904 	addi	r17,sp,36
    28b8:	dfc01515 	stw	ra,84(sp)
    28bc:	da400115 	stw	r9,4(sp)
    28c0:	d9c00315 	stw	r7,12(sp)
    28c4:	da000015 	stw	r8,0(sp)
    28c8:	d9800215 	stw	r6,8(sp)
    28cc:	00037c80 	call	37c8 <__unpack_d>
    28d0:	d9000204 	addi	r4,sp,8
    28d4:	880b883a 	mov	r5,r17
    28d8:	00037c80 	call	37c8 <__unpack_d>
    28dc:	d9800e04 	addi	r6,sp,56
    28e0:	9809883a 	mov	r4,r19
    28e4:	880b883a 	mov	r5,r17
    28e8:	00024040 	call	2404 <_fpadd_parts>
    28ec:	1009883a 	mov	r4,r2
    28f0:	00034b40 	call	34b4 <__pack_d>
    28f4:	dfc01517 	ldw	ra,84(sp)
    28f8:	dcc01417 	ldw	r19,80(sp)
    28fc:	dc401317 	ldw	r17,76(sp)
    2900:	dec01604 	addi	sp,sp,88
    2904:	f800283a 	ret

00002908 <__muldf3>:
    2908:	deffe004 	addi	sp,sp,-128
    290c:	dc401815 	stw	r17,96(sp)
    2910:	dc400404 	addi	r17,sp,16
    2914:	2011883a 	mov	r8,r4
    2918:	2813883a 	mov	r9,r5
    291c:	dc001715 	stw	r16,92(sp)
    2920:	d809883a 	mov	r4,sp
    2924:	880b883a 	mov	r5,r17
    2928:	dc000904 	addi	r16,sp,36
    292c:	dfc01f15 	stw	ra,124(sp)
    2930:	da400115 	stw	r9,4(sp)
    2934:	d9c00315 	stw	r7,12(sp)
    2938:	da000015 	stw	r8,0(sp)
    293c:	d9800215 	stw	r6,8(sp)
    2940:	ddc01e15 	stw	r23,120(sp)
    2944:	dd801d15 	stw	r22,116(sp)
    2948:	dd401c15 	stw	r21,112(sp)
    294c:	dd001b15 	stw	r20,108(sp)
    2950:	dcc01a15 	stw	r19,104(sp)
    2954:	dc801915 	stw	r18,100(sp)
    2958:	00037c80 	call	37c8 <__unpack_d>
    295c:	d9000204 	addi	r4,sp,8
    2960:	800b883a 	mov	r5,r16
    2964:	00037c80 	call	37c8 <__unpack_d>
    2968:	d9000417 	ldw	r4,16(sp)
    296c:	00800044 	movi	r2,1
    2970:	1100102e 	bgeu	r2,r4,29b4 <__muldf3+0xac>
    2974:	d8c00917 	ldw	r3,36(sp)
    2978:	10c0062e 	bgeu	r2,r3,2994 <__muldf3+0x8c>
    297c:	00800104 	movi	r2,4
    2980:	20800a26 	beq	r4,r2,29ac <__muldf3+0xa4>
    2984:	1880cc26 	beq	r3,r2,2cb8 <__muldf3+0x3b0>
    2988:	00800084 	movi	r2,2
    298c:	20800926 	beq	r4,r2,29b4 <__muldf3+0xac>
    2990:	1880191e 	bne	r3,r2,29f8 <__muldf3+0xf0>
    2994:	d8c00a17 	ldw	r3,40(sp)
    2998:	d8800517 	ldw	r2,20(sp)
    299c:	8009883a 	mov	r4,r16
    29a0:	10c4c03a 	cmpne	r2,r2,r3
    29a4:	d8800a15 	stw	r2,40(sp)
    29a8:	00000706 	br	29c8 <__muldf3+0xc0>
    29ac:	00800084 	movi	r2,2
    29b0:	1880c326 	beq	r3,r2,2cc0 <__muldf3+0x3b8>
    29b4:	d8800517 	ldw	r2,20(sp)
    29b8:	d8c00a17 	ldw	r3,40(sp)
    29bc:	8809883a 	mov	r4,r17
    29c0:	10c4c03a 	cmpne	r2,r2,r3
    29c4:	d8800515 	stw	r2,20(sp)
    29c8:	00034b40 	call	34b4 <__pack_d>
    29cc:	dfc01f17 	ldw	ra,124(sp)
    29d0:	ddc01e17 	ldw	r23,120(sp)
    29d4:	dd801d17 	ldw	r22,116(sp)
    29d8:	dd401c17 	ldw	r21,112(sp)
    29dc:	dd001b17 	ldw	r20,108(sp)
    29e0:	dcc01a17 	ldw	r19,104(sp)
    29e4:	dc801917 	ldw	r18,100(sp)
    29e8:	dc401817 	ldw	r17,96(sp)
    29ec:	dc001717 	ldw	r16,92(sp)
    29f0:	dec02004 	addi	sp,sp,128
    29f4:	f800283a 	ret
    29f8:	dd800717 	ldw	r22,28(sp)
    29fc:	dc800c17 	ldw	r18,48(sp)
    2a00:	002b883a 	mov	r21,zero
    2a04:	0023883a 	mov	r17,zero
    2a08:	a80b883a 	mov	r5,r21
    2a0c:	b00d883a 	mov	r6,r22
    2a10:	880f883a 	mov	r7,r17
    2a14:	ddc00817 	ldw	r23,32(sp)
    2a18:	dcc00d17 	ldw	r19,52(sp)
    2a1c:	9009883a 	mov	r4,r18
    2a20:	000339c0 	call	339c <__muldi3>
    2a24:	001b883a 	mov	r13,zero
    2a28:	680f883a 	mov	r7,r13
    2a2c:	b009883a 	mov	r4,r22
    2a30:	000b883a 	mov	r5,zero
    2a34:	980d883a 	mov	r6,r19
    2a38:	b82d883a 	mov	r22,r23
    2a3c:	002f883a 	mov	r23,zero
    2a40:	db401615 	stw	r13,88(sp)
    2a44:	d8801315 	stw	r2,76(sp)
    2a48:	d8c01415 	stw	r3,80(sp)
    2a4c:	dcc01515 	stw	r19,84(sp)
    2a50:	000339c0 	call	339c <__muldi3>
    2a54:	b00d883a 	mov	r6,r22
    2a58:	000b883a 	mov	r5,zero
    2a5c:	9009883a 	mov	r4,r18
    2a60:	b80f883a 	mov	r7,r23
    2a64:	1021883a 	mov	r16,r2
    2a68:	1823883a 	mov	r17,r3
    2a6c:	000339c0 	call	339c <__muldi3>
    2a70:	8085883a 	add	r2,r16,r2
    2a74:	140d803a 	cmpltu	r6,r2,r16
    2a78:	88c7883a 	add	r3,r17,r3
    2a7c:	30cd883a 	add	r6,r6,r3
    2a80:	1029883a 	mov	r20,r2
    2a84:	302b883a 	mov	r21,r6
    2a88:	da801317 	ldw	r10,76(sp)
    2a8c:	dac01417 	ldw	r11,80(sp)
    2a90:	db001517 	ldw	r12,84(sp)
    2a94:	db401617 	ldw	r13,88(sp)
    2a98:	3440612e 	bgeu	r6,r17,2c20 <__muldf3+0x318>
    2a9c:	0009883a 	mov	r4,zero
    2aa0:	5105883a 	add	r2,r10,r4
    2aa4:	128d803a 	cmpltu	r6,r2,r10
    2aa8:	5d07883a 	add	r3,r11,r20
    2aac:	30cd883a 	add	r6,r6,r3
    2ab0:	0021883a 	mov	r16,zero
    2ab4:	04400044 	movi	r17,1
    2ab8:	1025883a 	mov	r18,r2
    2abc:	3027883a 	mov	r19,r6
    2ac0:	32c06236 	bltu	r6,r11,2c4c <__muldf3+0x344>
    2ac4:	59807a26 	beq	r11,r6,2cb0 <__muldf3+0x3a8>
    2ac8:	680b883a 	mov	r5,r13
    2acc:	b80f883a 	mov	r7,r23
    2ad0:	6009883a 	mov	r4,r12
    2ad4:	b00d883a 	mov	r6,r22
    2ad8:	000339c0 	call	339c <__muldi3>
    2adc:	1009883a 	mov	r4,r2
    2ae0:	000f883a 	mov	r7,zero
    2ae4:	1545883a 	add	r2,r2,r21
    2ae8:	1111803a 	cmpltu	r8,r2,r4
    2aec:	19c7883a 	add	r3,r3,r7
    2af0:	40c7883a 	add	r3,r8,r3
    2af4:	88cb883a 	add	r5,r17,r3
    2af8:	d8c00617 	ldw	r3,24(sp)
    2afc:	8089883a 	add	r4,r16,r2
    2b00:	d8800b17 	ldw	r2,44(sp)
    2b04:	18c00104 	addi	r3,r3,4
    2b08:	240d803a 	cmpltu	r6,r4,r16
    2b0c:	10c7883a 	add	r3,r2,r3
    2b10:	2013883a 	mov	r9,r4
    2b14:	d8800a17 	ldw	r2,40(sp)
    2b18:	d9000517 	ldw	r4,20(sp)
    2b1c:	314d883a 	add	r6,r6,r5
    2b20:	3015883a 	mov	r10,r6
    2b24:	2088c03a 	cmpne	r4,r4,r2
    2b28:	00880034 	movhi	r2,8192
    2b2c:	10bfffc4 	addi	r2,r2,-1
    2b30:	d9000f15 	stw	r4,60(sp)
    2b34:	d8c01015 	stw	r3,64(sp)
    2b38:	1180162e 	bgeu	r2,r6,2b94 <__muldf3+0x28c>
    2b3c:	1811883a 	mov	r8,r3
    2b40:	101f883a 	mov	r15,r2
    2b44:	980497fa 	slli	r2,r19,31
    2b48:	9016d07a 	srli	r11,r18,1
    2b4c:	500697fa 	slli	r3,r10,31
    2b50:	480cd07a 	srli	r6,r9,1
    2b54:	500ed07a 	srli	r7,r10,1
    2b58:	12d6b03a 	or	r11,r2,r11
    2b5c:	00800044 	movi	r2,1
    2b60:	198cb03a 	or	r6,r3,r6
    2b64:	4888703a 	and	r4,r9,r2
    2b68:	9818d07a 	srli	r12,r19,1
    2b6c:	001b883a 	mov	r13,zero
    2b70:	03a00034 	movhi	r14,32768
    2b74:	3013883a 	mov	r9,r6
    2b78:	3815883a 	mov	r10,r7
    2b7c:	4091883a 	add	r8,r8,r2
    2b80:	20000226 	beq	r4,zero,2b8c <__muldf3+0x284>
    2b84:	5b64b03a 	or	r18,r11,r13
    2b88:	63a6b03a 	or	r19,r12,r14
    2b8c:	7abfed36 	bltu	r15,r10,2b44 <__muldf3+0x23c>
    2b90:	da001015 	stw	r8,64(sp)
    2b94:	00840034 	movhi	r2,4096
    2b98:	10bfffc4 	addi	r2,r2,-1
    2b9c:	12801436 	bltu	r2,r10,2bf0 <__muldf3+0x2e8>
    2ba0:	da001017 	ldw	r8,64(sp)
    2ba4:	101f883a 	mov	r15,r2
    2ba8:	4a45883a 	add	r2,r9,r9
    2bac:	124d803a 	cmpltu	r6,r2,r9
    2bb0:	5287883a 	add	r3,r10,r10
    2bb4:	9497883a 	add	r11,r18,r18
    2bb8:	5c8f803a 	cmpltu	r7,r11,r18
    2bbc:	9cd9883a 	add	r12,r19,r19
    2bc0:	01000044 	movi	r4,1
    2bc4:	30cd883a 	add	r6,r6,r3
    2bc8:	3b0f883a 	add	r7,r7,r12
    2bcc:	423fffc4 	addi	r8,r8,-1
    2bd0:	1013883a 	mov	r9,r2
    2bd4:	3015883a 	mov	r10,r6
    2bd8:	111ab03a 	or	r13,r2,r4
    2bdc:	98003016 	blt	r19,zero,2ca0 <__muldf3+0x398>
    2be0:	5825883a 	mov	r18,r11
    2be4:	3827883a 	mov	r19,r7
    2be8:	7abfef2e 	bgeu	r15,r10,2ba8 <__muldf3+0x2a0>
    2bec:	da001015 	stw	r8,64(sp)
    2bf0:	00803fc4 	movi	r2,255
    2bf4:	488e703a 	and	r7,r9,r2
    2bf8:	00802004 	movi	r2,128
    2bfc:	0007883a 	mov	r3,zero
    2c00:	0011883a 	mov	r8,zero
    2c04:	38801826 	beq	r7,r2,2c68 <__muldf3+0x360>
    2c08:	008000c4 	movi	r2,3
    2c0c:	d9000e04 	addi	r4,sp,56
    2c10:	da801215 	stw	r10,72(sp)
    2c14:	d8800e15 	stw	r2,56(sp)
    2c18:	da401115 	stw	r9,68(sp)
    2c1c:	003f6a06 	br	29c8 <__muldf3+0xc0>
    2c20:	89802126 	beq	r17,r6,2ca8 <__muldf3+0x3a0>
    2c24:	0009883a 	mov	r4,zero
    2c28:	5105883a 	add	r2,r10,r4
    2c2c:	128d803a 	cmpltu	r6,r2,r10
    2c30:	5d07883a 	add	r3,r11,r20
    2c34:	30cd883a 	add	r6,r6,r3
    2c38:	0021883a 	mov	r16,zero
    2c3c:	0023883a 	mov	r17,zero
    2c40:	1025883a 	mov	r18,r2
    2c44:	3027883a 	mov	r19,r6
    2c48:	32ff9e2e 	bgeu	r6,r11,2ac4 <__muldf3+0x1bc>
    2c4c:	00800044 	movi	r2,1
    2c50:	8089883a 	add	r4,r16,r2
    2c54:	240d803a 	cmpltu	r6,r4,r16
    2c58:	344d883a 	add	r6,r6,r17
    2c5c:	2021883a 	mov	r16,r4
    2c60:	3023883a 	mov	r17,r6
    2c64:	003f9806 	br	2ac8 <__muldf3+0x1c0>
    2c68:	403fe71e 	bne	r8,zero,2c08 <__muldf3+0x300>
    2c6c:	01004004 	movi	r4,256
    2c70:	4904703a 	and	r2,r9,r4
    2c74:	10c4b03a 	or	r2,r2,r3
    2c78:	103fe31e 	bne	r2,zero,2c08 <__muldf3+0x300>
    2c7c:	94c4b03a 	or	r2,r18,r19
    2c80:	103fe126 	beq	r2,zero,2c08 <__muldf3+0x300>
    2c84:	49c5883a 	add	r2,r9,r7
    2c88:	1251803a 	cmpltu	r8,r2,r9
    2c8c:	4291883a 	add	r8,r8,r10
    2c90:	013fc004 	movi	r4,-256
    2c94:	1112703a 	and	r9,r2,r4
    2c98:	4015883a 	mov	r10,r8
    2c9c:	003fda06 	br	2c08 <__muldf3+0x300>
    2ca0:	6813883a 	mov	r9,r13
    2ca4:	003fce06 	br	2be0 <__muldf3+0x2d8>
    2ca8:	143f7c36 	bltu	r2,r16,2a9c <__muldf3+0x194>
    2cac:	003fdd06 	br	2c24 <__muldf3+0x31c>
    2cb0:	12bf852e 	bgeu	r2,r10,2ac8 <__muldf3+0x1c0>
    2cb4:	003fe506 	br	2c4c <__muldf3+0x344>
    2cb8:	00800084 	movi	r2,2
    2cbc:	20bf351e 	bne	r4,r2,2994 <__muldf3+0x8c>
    2cc0:	01000074 	movhi	r4,1
    2cc4:	21231904 	addi	r4,r4,-29596
    2cc8:	003f3f06 	br	29c8 <__muldf3+0xc0>

00002ccc <__divdf3>:
    2ccc:	deffed04 	addi	sp,sp,-76
    2cd0:	dcc01115 	stw	r19,68(sp)
    2cd4:	dcc00404 	addi	r19,sp,16
    2cd8:	2011883a 	mov	r8,r4
    2cdc:	2813883a 	mov	r9,r5
    2ce0:	dc000e15 	stw	r16,56(sp)
    2ce4:	d809883a 	mov	r4,sp
    2ce8:	980b883a 	mov	r5,r19
    2cec:	dc000904 	addi	r16,sp,36
    2cf0:	dfc01215 	stw	ra,72(sp)
    2cf4:	da400115 	stw	r9,4(sp)
    2cf8:	d9c00315 	stw	r7,12(sp)
    2cfc:	da000015 	stw	r8,0(sp)
    2d00:	d9800215 	stw	r6,8(sp)
    2d04:	dc801015 	stw	r18,64(sp)
    2d08:	dc400f15 	stw	r17,60(sp)
    2d0c:	00037c80 	call	37c8 <__unpack_d>
    2d10:	d9000204 	addi	r4,sp,8
    2d14:	800b883a 	mov	r5,r16
    2d18:	00037c80 	call	37c8 <__unpack_d>
    2d1c:	d9000417 	ldw	r4,16(sp)
    2d20:	00800044 	movi	r2,1
    2d24:	11000b2e 	bgeu	r2,r4,2d54 <__divdf3+0x88>
    2d28:	d9400917 	ldw	r5,36(sp)
    2d2c:	1140762e 	bgeu	r2,r5,2f08 <__divdf3+0x23c>
    2d30:	d8800517 	ldw	r2,20(sp)
    2d34:	d8c00a17 	ldw	r3,40(sp)
    2d38:	01800104 	movi	r6,4
    2d3c:	10c4f03a 	xor	r2,r2,r3
    2d40:	d8800515 	stw	r2,20(sp)
    2d44:	21800226 	beq	r4,r6,2d50 <__divdf3+0x84>
    2d48:	00800084 	movi	r2,2
    2d4c:	2080141e 	bne	r4,r2,2da0 <__divdf3+0xd4>
    2d50:	29000926 	beq	r5,r4,2d78 <__divdf3+0xac>
    2d54:	9809883a 	mov	r4,r19
    2d58:	00034b40 	call	34b4 <__pack_d>
    2d5c:	dfc01217 	ldw	ra,72(sp)
    2d60:	dcc01117 	ldw	r19,68(sp)
    2d64:	dc801017 	ldw	r18,64(sp)
    2d68:	dc400f17 	ldw	r17,60(sp)
    2d6c:	dc000e17 	ldw	r16,56(sp)
    2d70:	dec01304 	addi	sp,sp,76
    2d74:	f800283a 	ret
    2d78:	01000074 	movhi	r4,1
    2d7c:	21231904 	addi	r4,r4,-29596
    2d80:	00034b40 	call	34b4 <__pack_d>
    2d84:	dfc01217 	ldw	ra,72(sp)
    2d88:	dcc01117 	ldw	r19,68(sp)
    2d8c:	dc801017 	ldw	r18,64(sp)
    2d90:	dc400f17 	ldw	r17,60(sp)
    2d94:	dc000e17 	ldw	r16,56(sp)
    2d98:	dec01304 	addi	sp,sp,76
    2d9c:	f800283a 	ret
    2da0:	29805b26 	beq	r5,r6,2f10 <__divdf3+0x244>
    2da4:	28802d26 	beq	r5,r2,2e5c <__divdf3+0x190>
    2da8:	d8c00617 	ldw	r3,24(sp)
    2dac:	d8800b17 	ldw	r2,44(sp)
    2db0:	d9c00817 	ldw	r7,32(sp)
    2db4:	dc400d17 	ldw	r17,52(sp)
    2db8:	188bc83a 	sub	r5,r3,r2
    2dbc:	d9800717 	ldw	r6,28(sp)
    2dc0:	dc000c17 	ldw	r16,48(sp)
    2dc4:	d9400615 	stw	r5,24(sp)
    2dc8:	3c403836 	bltu	r7,r17,2eac <__divdf3+0x1e0>
    2dcc:	89c03626 	beq	r17,r7,2ea8 <__divdf3+0x1dc>
    2dd0:	0015883a 	mov	r10,zero
    2dd4:	001d883a 	mov	r14,zero
    2dd8:	02c40034 	movhi	r11,4096
    2ddc:	001f883a 	mov	r15,zero
    2de0:	003f883a 	mov	ra,zero
    2de4:	04800f44 	movi	r18,61
    2de8:	00000f06 	br	2e28 <__divdf3+0x15c>
    2dec:	601d883a 	mov	r14,r12
    2df0:	681f883a 	mov	r15,r13
    2df4:	400d883a 	mov	r6,r8
    2df8:	100f883a 	mov	r7,r2
    2dfc:	3191883a 	add	r8,r6,r6
    2e00:	5808d07a 	srli	r4,r11,1
    2e04:	4185803a 	cmpltu	r2,r8,r6
    2e08:	39d3883a 	add	r9,r7,r7
    2e0c:	28c6b03a 	or	r3,r5,r3
    2e10:	1245883a 	add	r2,r2,r9
    2e14:	1815883a 	mov	r10,r3
    2e18:	2017883a 	mov	r11,r4
    2e1c:	400d883a 	mov	r6,r8
    2e20:	100f883a 	mov	r7,r2
    2e24:	fc801726 	beq	ra,r18,2e84 <__divdf3+0x1b8>
    2e28:	580a97fa 	slli	r5,r11,31
    2e2c:	5006d07a 	srli	r3,r10,1
    2e30:	ffc00044 	addi	ra,ra,1
    2e34:	3c7ff136 	bltu	r7,r17,2dfc <__divdf3+0x130>
    2e38:	3411c83a 	sub	r8,r6,r16
    2e3c:	3205803a 	cmpltu	r2,r6,r8
    2e40:	3c53c83a 	sub	r9,r7,r17
    2e44:	7298b03a 	or	r12,r14,r10
    2e48:	7adab03a 	or	r13,r15,r11
    2e4c:	4885c83a 	sub	r2,r9,r2
    2e50:	89ffe61e 	bne	r17,r7,2dec <__divdf3+0x120>
    2e54:	343fe936 	bltu	r6,r16,2dfc <__divdf3+0x130>
    2e58:	003fe406 	br	2dec <__divdf3+0x120>
    2e5c:	9809883a 	mov	r4,r19
    2e60:	d9800415 	stw	r6,16(sp)
    2e64:	00034b40 	call	34b4 <__pack_d>
    2e68:	dfc01217 	ldw	ra,72(sp)
    2e6c:	dcc01117 	ldw	r19,68(sp)
    2e70:	dc801017 	ldw	r18,64(sp)
    2e74:	dc400f17 	ldw	r17,60(sp)
    2e78:	dc000e17 	ldw	r16,56(sp)
    2e7c:	dec01304 	addi	sp,sp,76
    2e80:	f800283a 	ret
    2e84:	00803fc4 	movi	r2,255
    2e88:	7090703a 	and	r8,r14,r2
    2e8c:	00802004 	movi	r2,128
    2e90:	0007883a 	mov	r3,zero
    2e94:	0013883a 	mov	r9,zero
    2e98:	40800d26 	beq	r8,r2,2ed0 <__divdf3+0x204>
    2e9c:	dbc00815 	stw	r15,32(sp)
    2ea0:	db800715 	stw	r14,28(sp)
    2ea4:	003fab06 	br	2d54 <__divdf3+0x88>
    2ea8:	343fc92e 	bgeu	r6,r16,2dd0 <__divdf3+0x104>
    2eac:	3185883a 	add	r2,r6,r6
    2eb0:	1189803a 	cmpltu	r4,r2,r6
    2eb4:	39c7883a 	add	r3,r7,r7
    2eb8:	20c9883a 	add	r4,r4,r3
    2ebc:	297fffc4 	addi	r5,r5,-1
    2ec0:	100d883a 	mov	r6,r2
    2ec4:	200f883a 	mov	r7,r4
    2ec8:	d9400615 	stw	r5,24(sp)
    2ecc:	003fc006 	br	2dd0 <__divdf3+0x104>
    2ed0:	483ff21e 	bne	r9,zero,2e9c <__divdf3+0x1d0>
    2ed4:	01004004 	movi	r4,256
    2ed8:	7104703a 	and	r2,r14,r4
    2edc:	10c4b03a 	or	r2,r2,r3
    2ee0:	103fee1e 	bne	r2,zero,2e9c <__divdf3+0x1d0>
    2ee4:	31c4b03a 	or	r2,r6,r7
    2ee8:	103fec26 	beq	r2,zero,2e9c <__divdf3+0x1d0>
    2eec:	7205883a 	add	r2,r14,r8
    2ef0:	1391803a 	cmpltu	r8,r2,r14
    2ef4:	43d1883a 	add	r8,r8,r15
    2ef8:	013fc004 	movi	r4,-256
    2efc:	111c703a 	and	r14,r2,r4
    2f00:	401f883a 	mov	r15,r8
    2f04:	003fe506 	br	2e9c <__divdf3+0x1d0>
    2f08:	8009883a 	mov	r4,r16
    2f0c:	003f9206 	br	2d58 <__divdf3+0x8c>
    2f10:	9809883a 	mov	r4,r19
    2f14:	d8000715 	stw	zero,28(sp)
    2f18:	d8000815 	stw	zero,32(sp)
    2f1c:	d8000615 	stw	zero,24(sp)
    2f20:	003f8d06 	br	2d58 <__divdf3+0x8c>

00002f24 <__eqdf2>:
    2f24:	deffef04 	addi	sp,sp,-68
    2f28:	dc400f15 	stw	r17,60(sp)
    2f2c:	dc400404 	addi	r17,sp,16
    2f30:	2005883a 	mov	r2,r4
    2f34:	2807883a 	mov	r3,r5
    2f38:	dc000e15 	stw	r16,56(sp)
    2f3c:	d809883a 	mov	r4,sp
    2f40:	880b883a 	mov	r5,r17
    2f44:	dc000904 	addi	r16,sp,36
    2f48:	d8c00115 	stw	r3,4(sp)
    2f4c:	d8800015 	stw	r2,0(sp)
    2f50:	d9800215 	stw	r6,8(sp)
    2f54:	dfc01015 	stw	ra,64(sp)
    2f58:	d9c00315 	stw	r7,12(sp)
    2f5c:	00037c80 	call	37c8 <__unpack_d>
    2f60:	d9000204 	addi	r4,sp,8
    2f64:	800b883a 	mov	r5,r16
    2f68:	00037c80 	call	37c8 <__unpack_d>
    2f6c:	d8800417 	ldw	r2,16(sp)
    2f70:	00c00044 	movi	r3,1
    2f74:	180d883a 	mov	r6,r3
    2f78:	1880062e 	bgeu	r3,r2,2f94 <__eqdf2+0x70>
    2f7c:	d8800917 	ldw	r2,36(sp)
    2f80:	8809883a 	mov	r4,r17
    2f84:	800b883a 	mov	r5,r16
    2f88:	1880022e 	bgeu	r3,r2,2f94 <__eqdf2+0x70>
    2f8c:	00039000 	call	3900 <__fpcmp_parts_d>
    2f90:	100d883a 	mov	r6,r2
    2f94:	3005883a 	mov	r2,r6
    2f98:	dfc01017 	ldw	ra,64(sp)
    2f9c:	dc400f17 	ldw	r17,60(sp)
    2fa0:	dc000e17 	ldw	r16,56(sp)
    2fa4:	dec01104 	addi	sp,sp,68
    2fa8:	f800283a 	ret

00002fac <__nedf2>:
    2fac:	deffef04 	addi	sp,sp,-68
    2fb0:	dc400f15 	stw	r17,60(sp)
    2fb4:	dc400404 	addi	r17,sp,16
    2fb8:	2005883a 	mov	r2,r4
    2fbc:	2807883a 	mov	r3,r5
    2fc0:	dc000e15 	stw	r16,56(sp)
    2fc4:	d809883a 	mov	r4,sp
    2fc8:	880b883a 	mov	r5,r17
    2fcc:	dc000904 	addi	r16,sp,36
    2fd0:	d8c00115 	stw	r3,4(sp)
    2fd4:	d8800015 	stw	r2,0(sp)
    2fd8:	d9800215 	stw	r6,8(sp)
    2fdc:	dfc01015 	stw	ra,64(sp)
    2fe0:	d9c00315 	stw	r7,12(sp)
    2fe4:	00037c80 	call	37c8 <__unpack_d>
    2fe8:	d9000204 	addi	r4,sp,8
    2fec:	800b883a 	mov	r5,r16
    2ff0:	00037c80 	call	37c8 <__unpack_d>
    2ff4:	d8800417 	ldw	r2,16(sp)
    2ff8:	00c00044 	movi	r3,1
    2ffc:	180d883a 	mov	r6,r3
    3000:	1880062e 	bgeu	r3,r2,301c <__nedf2+0x70>
    3004:	d8800917 	ldw	r2,36(sp)
    3008:	8809883a 	mov	r4,r17
    300c:	800b883a 	mov	r5,r16
    3010:	1880022e 	bgeu	r3,r2,301c <__nedf2+0x70>
    3014:	00039000 	call	3900 <__fpcmp_parts_d>
    3018:	100d883a 	mov	r6,r2
    301c:	3005883a 	mov	r2,r6
    3020:	dfc01017 	ldw	ra,64(sp)
    3024:	dc400f17 	ldw	r17,60(sp)
    3028:	dc000e17 	ldw	r16,56(sp)
    302c:	dec01104 	addi	sp,sp,68
    3030:	f800283a 	ret

00003034 <__gtdf2>:
    3034:	deffef04 	addi	sp,sp,-68
    3038:	dc400f15 	stw	r17,60(sp)
    303c:	dc400404 	addi	r17,sp,16
    3040:	2005883a 	mov	r2,r4
    3044:	2807883a 	mov	r3,r5
    3048:	dc000e15 	stw	r16,56(sp)
    304c:	d809883a 	mov	r4,sp
    3050:	880b883a 	mov	r5,r17
    3054:	dc000904 	addi	r16,sp,36
    3058:	d8c00115 	stw	r3,4(sp)
    305c:	d8800015 	stw	r2,0(sp)
    3060:	d9800215 	stw	r6,8(sp)
    3064:	dfc01015 	stw	ra,64(sp)
    3068:	d9c00315 	stw	r7,12(sp)
    306c:	00037c80 	call	37c8 <__unpack_d>
    3070:	d9000204 	addi	r4,sp,8
    3074:	800b883a 	mov	r5,r16
    3078:	00037c80 	call	37c8 <__unpack_d>
    307c:	d8800417 	ldw	r2,16(sp)
    3080:	00c00044 	movi	r3,1
    3084:	01bfffc4 	movi	r6,-1
    3088:	1880062e 	bgeu	r3,r2,30a4 <__gtdf2+0x70>
    308c:	d8800917 	ldw	r2,36(sp)
    3090:	8809883a 	mov	r4,r17
    3094:	800b883a 	mov	r5,r16
    3098:	1880022e 	bgeu	r3,r2,30a4 <__gtdf2+0x70>
    309c:	00039000 	call	3900 <__fpcmp_parts_d>
    30a0:	100d883a 	mov	r6,r2
    30a4:	3005883a 	mov	r2,r6
    30a8:	dfc01017 	ldw	ra,64(sp)
    30ac:	dc400f17 	ldw	r17,60(sp)
    30b0:	dc000e17 	ldw	r16,56(sp)
    30b4:	dec01104 	addi	sp,sp,68
    30b8:	f800283a 	ret

000030bc <__ltdf2>:
    30bc:	deffef04 	addi	sp,sp,-68
    30c0:	dc400f15 	stw	r17,60(sp)
    30c4:	dc400404 	addi	r17,sp,16
    30c8:	2005883a 	mov	r2,r4
    30cc:	2807883a 	mov	r3,r5
    30d0:	dc000e15 	stw	r16,56(sp)
    30d4:	d809883a 	mov	r4,sp
    30d8:	880b883a 	mov	r5,r17
    30dc:	dc000904 	addi	r16,sp,36
    30e0:	d8c00115 	stw	r3,4(sp)
    30e4:	d8800015 	stw	r2,0(sp)
    30e8:	d9800215 	stw	r6,8(sp)
    30ec:	dfc01015 	stw	ra,64(sp)
    30f0:	d9c00315 	stw	r7,12(sp)
    30f4:	00037c80 	call	37c8 <__unpack_d>
    30f8:	d9000204 	addi	r4,sp,8
    30fc:	800b883a 	mov	r5,r16
    3100:	00037c80 	call	37c8 <__unpack_d>
    3104:	d8800417 	ldw	r2,16(sp)
    3108:	00c00044 	movi	r3,1
    310c:	180d883a 	mov	r6,r3
    3110:	1880062e 	bgeu	r3,r2,312c <__ltdf2+0x70>
    3114:	d8800917 	ldw	r2,36(sp)
    3118:	8809883a 	mov	r4,r17
    311c:	800b883a 	mov	r5,r16
    3120:	1880022e 	bgeu	r3,r2,312c <__ltdf2+0x70>
    3124:	00039000 	call	3900 <__fpcmp_parts_d>
    3128:	100d883a 	mov	r6,r2
    312c:	3005883a 	mov	r2,r6
    3130:	dfc01017 	ldw	ra,64(sp)
    3134:	dc400f17 	ldw	r17,60(sp)
    3138:	dc000e17 	ldw	r16,56(sp)
    313c:	dec01104 	addi	sp,sp,68
    3140:	f800283a 	ret

00003144 <__ledf2>:
    3144:	deffef04 	addi	sp,sp,-68
    3148:	dc400f15 	stw	r17,60(sp)
    314c:	dc400404 	addi	r17,sp,16
    3150:	2005883a 	mov	r2,r4
    3154:	2807883a 	mov	r3,r5
    3158:	dc000e15 	stw	r16,56(sp)
    315c:	d809883a 	mov	r4,sp
    3160:	880b883a 	mov	r5,r17
    3164:	dc000904 	addi	r16,sp,36
    3168:	d8c00115 	stw	r3,4(sp)
    316c:	d8800015 	stw	r2,0(sp)
    3170:	d9800215 	stw	r6,8(sp)
    3174:	dfc01015 	stw	ra,64(sp)
    3178:	d9c00315 	stw	r7,12(sp)
    317c:	00037c80 	call	37c8 <__unpack_d>
    3180:	d9000204 	addi	r4,sp,8
    3184:	800b883a 	mov	r5,r16
    3188:	00037c80 	call	37c8 <__unpack_d>
    318c:	d8800417 	ldw	r2,16(sp)
    3190:	00c00044 	movi	r3,1
    3194:	180d883a 	mov	r6,r3
    3198:	1880062e 	bgeu	r3,r2,31b4 <__ledf2+0x70>
    319c:	d8800917 	ldw	r2,36(sp)
    31a0:	8809883a 	mov	r4,r17
    31a4:	800b883a 	mov	r5,r16
    31a8:	1880022e 	bgeu	r3,r2,31b4 <__ledf2+0x70>
    31ac:	00039000 	call	3900 <__fpcmp_parts_d>
    31b0:	100d883a 	mov	r6,r2
    31b4:	3005883a 	mov	r2,r6
    31b8:	dfc01017 	ldw	ra,64(sp)
    31bc:	dc400f17 	ldw	r17,60(sp)
    31c0:	dc000e17 	ldw	r16,56(sp)
    31c4:	dec01104 	addi	sp,sp,68
    31c8:	f800283a 	ret

000031cc <__floatsidf>:
    31cc:	2006d7fa 	srli	r3,r4,31
    31d0:	defff604 	addi	sp,sp,-40
    31d4:	008000c4 	movi	r2,3
    31d8:	dfc00915 	stw	ra,36(sp)
    31dc:	dcc00815 	stw	r19,32(sp)
    31e0:	dc800715 	stw	r18,28(sp)
    31e4:	dc400615 	stw	r17,24(sp)
    31e8:	dc000515 	stw	r16,20(sp)
    31ec:	d8800015 	stw	r2,0(sp)
    31f0:	d8c00115 	stw	r3,4(sp)
    31f4:	20000f1e 	bne	r4,zero,3234 <__floatsidf+0x68>
    31f8:	00800084 	movi	r2,2
    31fc:	d8800015 	stw	r2,0(sp)
    3200:	d809883a 	mov	r4,sp
    3204:	00034b40 	call	34b4 <__pack_d>
    3208:	1009883a 	mov	r4,r2
    320c:	180b883a 	mov	r5,r3
    3210:	2005883a 	mov	r2,r4
    3214:	2807883a 	mov	r3,r5
    3218:	dfc00917 	ldw	ra,36(sp)
    321c:	dcc00817 	ldw	r19,32(sp)
    3220:	dc800717 	ldw	r18,28(sp)
    3224:	dc400617 	ldw	r17,24(sp)
    3228:	dc000517 	ldw	r16,20(sp)
    322c:	dec00a04 	addi	sp,sp,40
    3230:	f800283a 	ret
    3234:	00800f04 	movi	r2,60
    3238:	1807003a 	cmpeq	r3,r3,zero
    323c:	d8800215 	stw	r2,8(sp)
    3240:	18001126 	beq	r3,zero,3288 <__floatsidf+0xbc>
    3244:	0027883a 	mov	r19,zero
    3248:	2025883a 	mov	r18,r4
    324c:	d9000315 	stw	r4,12(sp)
    3250:	dcc00415 	stw	r19,16(sp)
    3254:	00034340 	call	3434 <__clzsi2>
    3258:	11000744 	addi	r4,r2,29
    325c:	013fe80e 	bge	zero,r4,3200 <__floatsidf+0x34>
    3260:	10bfff44 	addi	r2,r2,-3
    3264:	10000c16 	blt	r2,zero,3298 <__floatsidf+0xcc>
    3268:	90a2983a 	sll	r17,r18,r2
    326c:	0021883a 	mov	r16,zero
    3270:	d8800217 	ldw	r2,8(sp)
    3274:	dc400415 	stw	r17,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	1105c83a 	sub	r2,r2,r4
    3280:	d8800215 	stw	r2,8(sp)
    3284:	003fde06 	br	3200 <__floatsidf+0x34>
    3288:	00a00034 	movhi	r2,32768
    328c:	20800a26 	beq	r4,r2,32b8 <__floatsidf+0xec>
    3290:	0109c83a 	sub	r4,zero,r4
    3294:	003feb06 	br	3244 <__floatsidf+0x78>
    3298:	9006d07a 	srli	r3,r18,1
    329c:	008007c4 	movi	r2,31
    32a0:	1105c83a 	sub	r2,r2,r4
    32a4:	1886d83a 	srl	r3,r3,r2
    32a8:	9922983a 	sll	r17,r19,r4
    32ac:	9120983a 	sll	r16,r18,r4
    32b0:	1c62b03a 	or	r17,r3,r17
    32b4:	003fee06 	br	3270 <__floatsidf+0xa4>
    32b8:	0009883a 	mov	r4,zero
    32bc:	01707834 	movhi	r5,49632
    32c0:	003fd306 	br	3210 <__floatsidf+0x44>

000032c4 <__fixdfsi>:
    32c4:	defff804 	addi	sp,sp,-32
    32c8:	2005883a 	mov	r2,r4
    32cc:	2807883a 	mov	r3,r5
    32d0:	d809883a 	mov	r4,sp
    32d4:	d9400204 	addi	r5,sp,8
    32d8:	d8c00115 	stw	r3,4(sp)
    32dc:	d8800015 	stw	r2,0(sp)
    32e0:	dfc00715 	stw	ra,28(sp)
    32e4:	00037c80 	call	37c8 <__unpack_d>
    32e8:	d8c00217 	ldw	r3,8(sp)
    32ec:	00800084 	movi	r2,2
    32f0:	1880051e 	bne	r3,r2,3308 <__fixdfsi+0x44>
    32f4:	0007883a 	mov	r3,zero
    32f8:	1805883a 	mov	r2,r3
    32fc:	dfc00717 	ldw	ra,28(sp)
    3300:	dec00804 	addi	sp,sp,32
    3304:	f800283a 	ret
    3308:	00800044 	movi	r2,1
    330c:	10fff92e 	bgeu	r2,r3,32f4 <__fixdfsi+0x30>
    3310:	00800104 	movi	r2,4
    3314:	18800426 	beq	r3,r2,3328 <__fixdfsi+0x64>
    3318:	d8c00417 	ldw	r3,16(sp)
    331c:	183ff516 	blt	r3,zero,32f4 <__fixdfsi+0x30>
    3320:	00800784 	movi	r2,30
    3324:	10c0080e 	bge	r2,r3,3348 <__fixdfsi+0x84>
    3328:	d8800317 	ldw	r2,12(sp)
    332c:	1000121e 	bne	r2,zero,3378 <__fixdfsi+0xb4>
    3330:	00e00034 	movhi	r3,32768
    3334:	18ffffc4 	addi	r3,r3,-1
    3338:	1805883a 	mov	r2,r3
    333c:	dfc00717 	ldw	ra,28(sp)
    3340:	dec00804 	addi	sp,sp,32
    3344:	f800283a 	ret
    3348:	00800f04 	movi	r2,60
    334c:	10d1c83a 	sub	r8,r2,r3
    3350:	40bff804 	addi	r2,r8,-32
    3354:	d9800517 	ldw	r6,20(sp)
    3358:	d9c00617 	ldw	r7,24(sp)
    335c:	10000816 	blt	r2,zero,3380 <__fixdfsi+0xbc>
    3360:	3888d83a 	srl	r4,r7,r2
    3364:	d8800317 	ldw	r2,12(sp)
    3368:	2007883a 	mov	r3,r4
    336c:	103fe226 	beq	r2,zero,32f8 <__fixdfsi+0x34>
    3370:	0107c83a 	sub	r3,zero,r4
    3374:	003fe006 	br	32f8 <__fixdfsi+0x34>
    3378:	00e00034 	movhi	r3,32768
    337c:	003fde06 	br	32f8 <__fixdfsi+0x34>
    3380:	39c7883a 	add	r3,r7,r7
    3384:	008007c4 	movi	r2,31
    3388:	1205c83a 	sub	r2,r2,r8
    338c:	1886983a 	sll	r3,r3,r2
    3390:	3208d83a 	srl	r4,r6,r8
    3394:	1908b03a 	or	r4,r3,r4
    3398:	003ff206 	br	3364 <__fixdfsi+0xa0>

0000339c <__muldi3>:
    339c:	2011883a 	mov	r8,r4
    33a0:	427fffcc 	andi	r9,r8,65535
    33a4:	4018d43a 	srli	r12,r8,16
    33a8:	32bfffcc 	andi	r10,r6,65535
    33ac:	3016d43a 	srli	r11,r6,16
    33b0:	4a85383a 	mul	r2,r9,r10
    33b4:	6295383a 	mul	r10,r12,r10
    33b8:	4ad3383a 	mul	r9,r9,r11
    33bc:	113fffcc 	andi	r4,r2,65535
    33c0:	1004d43a 	srli	r2,r2,16
    33c4:	4a93883a 	add	r9,r9,r10
    33c8:	3807883a 	mov	r3,r7
    33cc:	1245883a 	add	r2,r2,r9
    33d0:	280f883a 	mov	r7,r5
    33d4:	180b883a 	mov	r5,r3
    33d8:	1006943a 	slli	r3,r2,16
    33dc:	defffd04 	addi	sp,sp,-12
    33e0:	dc800215 	stw	r18,8(sp)
    33e4:	1907883a 	add	r3,r3,r4
    33e8:	dc400115 	stw	r17,4(sp)
    33ec:	dc000015 	stw	r16,0(sp)
    33f0:	4165383a 	mul	r18,r8,r5
    33f4:	31e3383a 	mul	r17,r6,r7
    33f8:	1012d43a 	srli	r9,r2,16
    33fc:	62d9383a 	mul	r12,r12,r11
    3400:	181f883a 	mov	r15,r3
    3404:	1280022e 	bgeu	r2,r10,3410 <__muldi3+0x74>
    3408:	00800074 	movhi	r2,1
    340c:	6099883a 	add	r12,r12,r2
    3410:	624d883a 	add	r6,r12,r9
    3414:	9187883a 	add	r3,r18,r6
    3418:	88c7883a 	add	r3,r17,r3
    341c:	7805883a 	mov	r2,r15
    3420:	dc800217 	ldw	r18,8(sp)
    3424:	dc400117 	ldw	r17,4(sp)
    3428:	dc000017 	ldw	r16,0(sp)
    342c:	dec00304 	addi	sp,sp,12
    3430:	f800283a 	ret

00003434 <__clzsi2>:
    3434:	00bfffd4 	movui	r2,65535
    3438:	11000e36 	bltu	r2,r4,3474 <__clzsi2+0x40>
    343c:	00803fc4 	movi	r2,255
    3440:	01400204 	movi	r5,8
    3444:	0007883a 	mov	r3,zero
    3448:	11001036 	bltu	r2,r4,348c <__clzsi2+0x58>
    344c:	000b883a 	mov	r5,zero
    3450:	20c6d83a 	srl	r3,r4,r3
    3454:	00800074 	movhi	r2,1
    3458:	10a31e04 	addi	r2,r2,-29576
    345c:	1887883a 	add	r3,r3,r2
    3460:	18800003 	ldbu	r2,0(r3)
    3464:	00c00804 	movi	r3,32
    3468:	2885883a 	add	r2,r5,r2
    346c:	1885c83a 	sub	r2,r3,r2
    3470:	f800283a 	ret
    3474:	01400404 	movi	r5,16
    3478:	00804034 	movhi	r2,256
    347c:	10bfffc4 	addi	r2,r2,-1
    3480:	2807883a 	mov	r3,r5
    3484:	113ff22e 	bgeu	r2,r4,3450 <__clzsi2+0x1c>
    3488:	01400604 	movi	r5,24
    348c:	2807883a 	mov	r3,r5
    3490:	20c6d83a 	srl	r3,r4,r3
    3494:	00800074 	movhi	r2,1
    3498:	10a31e04 	addi	r2,r2,-29576
    349c:	1887883a 	add	r3,r3,r2
    34a0:	18800003 	ldbu	r2,0(r3)
    34a4:	00c00804 	movi	r3,32
    34a8:	2885883a 	add	r2,r5,r2
    34ac:	1885c83a 	sub	r2,r3,r2
    34b0:	f800283a 	ret

000034b4 <__pack_d>:
    34b4:	20c00017 	ldw	r3,0(r4)
    34b8:	defffd04 	addi	sp,sp,-12
    34bc:	dc000015 	stw	r16,0(sp)
    34c0:	dc800215 	stw	r18,8(sp)
    34c4:	dc400115 	stw	r17,4(sp)
    34c8:	00800044 	movi	r2,1
    34cc:	22000317 	ldw	r8,12(r4)
    34d0:	001f883a 	mov	r15,zero
    34d4:	22400417 	ldw	r9,16(r4)
    34d8:	24000117 	ldw	r16,4(r4)
    34dc:	10c0552e 	bgeu	r2,r3,3634 <__pack_d+0x180>
    34e0:	00800104 	movi	r2,4
    34e4:	18804f26 	beq	r3,r2,3624 <__pack_d+0x170>
    34e8:	00800084 	movi	r2,2
    34ec:	18800226 	beq	r3,r2,34f8 <__pack_d+0x44>
    34f0:	4244b03a 	or	r2,r8,r9
    34f4:	10001a1e 	bne	r2,zero,3560 <__pack_d+0xac>
    34f8:	000d883a 	mov	r6,zero
    34fc:	000f883a 	mov	r7,zero
    3500:	0011883a 	mov	r8,zero
    3504:	00800434 	movhi	r2,16
    3508:	10bfffc4 	addi	r2,r2,-1
    350c:	301d883a 	mov	r14,r6
    3510:	3884703a 	and	r2,r7,r2
    3514:	400a953a 	slli	r5,r8,20
    3518:	79bffc2c 	andhi	r6,r15,65520
    351c:	308cb03a 	or	r6,r6,r2
    3520:	00e00434 	movhi	r3,32784
    3524:	18ffffc4 	addi	r3,r3,-1
    3528:	800497fa 	slli	r2,r16,31
    352c:	30c6703a 	and	r3,r6,r3
    3530:	1946b03a 	or	r3,r3,r5
    3534:	01600034 	movhi	r5,32768
    3538:	297fffc4 	addi	r5,r5,-1
    353c:	194a703a 	and	r5,r3,r5
    3540:	288ab03a 	or	r5,r5,r2
    3544:	2807883a 	mov	r3,r5
    3548:	7005883a 	mov	r2,r14
    354c:	dc800217 	ldw	r18,8(sp)
    3550:	dc400117 	ldw	r17,4(sp)
    3554:	dc000017 	ldw	r16,0(sp)
    3558:	dec00304 	addi	sp,sp,12
    355c:	f800283a 	ret
    3560:	21000217 	ldw	r4,8(r4)
    3564:	00bf0084 	movi	r2,-1022
    3568:	20803f16 	blt	r4,r2,3668 <__pack_d+0x1b4>
    356c:	0080ffc4 	movi	r2,1023
    3570:	11002c16 	blt	r2,r4,3624 <__pack_d+0x170>
    3574:	00803fc4 	movi	r2,255
    3578:	408c703a 	and	r6,r8,r2
    357c:	00802004 	movi	r2,128
    3580:	0007883a 	mov	r3,zero
    3584:	000f883a 	mov	r7,zero
    3588:	2280ffc4 	addi	r10,r4,1023
    358c:	30801e26 	beq	r6,r2,3608 <__pack_d+0x154>
    3590:	00801fc4 	movi	r2,127
    3594:	4089883a 	add	r4,r8,r2
    3598:	220d803a 	cmpltu	r6,r4,r8
    359c:	324d883a 	add	r6,r6,r9
    35a0:	2011883a 	mov	r8,r4
    35a4:	3013883a 	mov	r9,r6
    35a8:	00880034 	movhi	r2,8192
    35ac:	10bfffc4 	addi	r2,r2,-1
    35b0:	12400d36 	bltu	r2,r9,35e8 <__pack_d+0x134>
    35b4:	4804963a 	slli	r2,r9,24
    35b8:	400cd23a 	srli	r6,r8,8
    35bc:	480ed23a 	srli	r7,r9,8
    35c0:	013fffc4 	movi	r4,-1
    35c4:	118cb03a 	or	r6,r2,r6
    35c8:	01400434 	movhi	r5,16
    35cc:	297fffc4 	addi	r5,r5,-1
    35d0:	3104703a 	and	r2,r6,r4
    35d4:	3946703a 	and	r3,r7,r5
    35d8:	5201ffcc 	andi	r8,r10,2047
    35dc:	100d883a 	mov	r6,r2
    35e0:	180f883a 	mov	r7,r3
    35e4:	003fc706 	br	3504 <__pack_d+0x50>
    35e8:	480897fa 	slli	r4,r9,31
    35ec:	4004d07a 	srli	r2,r8,1
    35f0:	4806d07a 	srli	r3,r9,1
    35f4:	52800044 	addi	r10,r10,1
    35f8:	2084b03a 	or	r2,r4,r2
    35fc:	1011883a 	mov	r8,r2
    3600:	1813883a 	mov	r9,r3
    3604:	003feb06 	br	35b4 <__pack_d+0x100>
    3608:	383fe11e 	bne	r7,zero,3590 <__pack_d+0xdc>
    360c:	01004004 	movi	r4,256
    3610:	4104703a 	and	r2,r8,r4
    3614:	10c4b03a 	or	r2,r2,r3
    3618:	103fe326 	beq	r2,zero,35a8 <__pack_d+0xf4>
    361c:	3005883a 	mov	r2,r6
    3620:	003fdc06 	br	3594 <__pack_d+0xe0>
    3624:	000d883a 	mov	r6,zero
    3628:	000f883a 	mov	r7,zero
    362c:	0201ffc4 	movi	r8,2047
    3630:	003fb406 	br	3504 <__pack_d+0x50>
    3634:	0005883a 	mov	r2,zero
    3638:	00c00234 	movhi	r3,8
    363c:	408cb03a 	or	r6,r8,r2
    3640:	48ceb03a 	or	r7,r9,r3
    3644:	013fffc4 	movi	r4,-1
    3648:	01400434 	movhi	r5,16
    364c:	297fffc4 	addi	r5,r5,-1
    3650:	3104703a 	and	r2,r6,r4
    3654:	3946703a 	and	r3,r7,r5
    3658:	100d883a 	mov	r6,r2
    365c:	180f883a 	mov	r7,r3
    3660:	0201ffc4 	movi	r8,2047
    3664:	003fa706 	br	3504 <__pack_d+0x50>
    3668:	1109c83a 	sub	r4,r2,r4
    366c:	00800e04 	movi	r2,56
    3670:	11004316 	blt	r2,r4,3780 <__pack_d+0x2cc>
    3674:	21fff804 	addi	r7,r4,-32
    3678:	38004516 	blt	r7,zero,3790 <__pack_d+0x2dc>
    367c:	49d8d83a 	srl	r12,r9,r7
    3680:	001b883a 	mov	r13,zero
    3684:	0023883a 	mov	r17,zero
    3688:	01400044 	movi	r5,1
    368c:	0025883a 	mov	r18,zero
    3690:	38004716 	blt	r7,zero,37b0 <__pack_d+0x2fc>
    3694:	29d6983a 	sll	r11,r5,r7
    3698:	0015883a 	mov	r10,zero
    369c:	00bfffc4 	movi	r2,-1
    36a0:	5089883a 	add	r4,r10,r2
    36a4:	588b883a 	add	r5,r11,r2
    36a8:	228d803a 	cmpltu	r6,r4,r10
    36ac:	314b883a 	add	r5,r6,r5
    36b0:	4104703a 	and	r2,r8,r4
    36b4:	4946703a 	and	r3,r9,r5
    36b8:	10c4b03a 	or	r2,r2,r3
    36bc:	10000226 	beq	r2,zero,36c8 <__pack_d+0x214>
    36c0:	04400044 	movi	r17,1
    36c4:	0025883a 	mov	r18,zero
    36c8:	00803fc4 	movi	r2,255
    36cc:	644eb03a 	or	r7,r12,r17
    36d0:	3892703a 	and	r9,r7,r2
    36d4:	00802004 	movi	r2,128
    36d8:	6c90b03a 	or	r8,r13,r18
    36dc:	0015883a 	mov	r10,zero
    36e0:	48801626 	beq	r9,r2,373c <__pack_d+0x288>
    36e4:	01001fc4 	movi	r4,127
    36e8:	3905883a 	add	r2,r7,r4
    36ec:	11cd803a 	cmpltu	r6,r2,r7
    36f0:	320d883a 	add	r6,r6,r8
    36f4:	100f883a 	mov	r7,r2
    36f8:	00840034 	movhi	r2,4096
    36fc:	10bfffc4 	addi	r2,r2,-1
    3700:	3011883a 	mov	r8,r6
    3704:	0007883a 	mov	r3,zero
    3708:	11801b36 	bltu	r2,r6,3778 <__pack_d+0x2c4>
    370c:	4004963a 	slli	r2,r8,24
    3710:	3808d23a 	srli	r4,r7,8
    3714:	400ad23a 	srli	r5,r8,8
    3718:	1813883a 	mov	r9,r3
    371c:	1108b03a 	or	r4,r2,r4
    3720:	00bfffc4 	movi	r2,-1
    3724:	00c00434 	movhi	r3,16
    3728:	18ffffc4 	addi	r3,r3,-1
    372c:	208c703a 	and	r6,r4,r2
    3730:	28ce703a 	and	r7,r5,r3
    3734:	4a01ffcc 	andi	r8,r9,2047
    3738:	003f7206 	br	3504 <__pack_d+0x50>
    373c:	503fe91e 	bne	r10,zero,36e4 <__pack_d+0x230>
    3740:	01004004 	movi	r4,256
    3744:	3904703a 	and	r2,r7,r4
    3748:	0007883a 	mov	r3,zero
    374c:	10c4b03a 	or	r2,r2,r3
    3750:	10000626 	beq	r2,zero,376c <__pack_d+0x2b8>
    3754:	3a45883a 	add	r2,r7,r9
    3758:	11cd803a 	cmpltu	r6,r2,r7
    375c:	320d883a 	add	r6,r6,r8
    3760:	100f883a 	mov	r7,r2
    3764:	3011883a 	mov	r8,r6
    3768:	0007883a 	mov	r3,zero
    376c:	00840034 	movhi	r2,4096
    3770:	10bfffc4 	addi	r2,r2,-1
    3774:	123fe52e 	bgeu	r2,r8,370c <__pack_d+0x258>
    3778:	00c00044 	movi	r3,1
    377c:	003fe306 	br	370c <__pack_d+0x258>
    3780:	0009883a 	mov	r4,zero
    3784:	0013883a 	mov	r9,zero
    3788:	000b883a 	mov	r5,zero
    378c:	003fe406 	br	3720 <__pack_d+0x26c>
    3790:	4a47883a 	add	r3,r9,r9
    3794:	008007c4 	movi	r2,31
    3798:	1105c83a 	sub	r2,r2,r4
    379c:	1886983a 	sll	r3,r3,r2
    37a0:	4118d83a 	srl	r12,r8,r4
    37a4:	491ad83a 	srl	r13,r9,r4
    37a8:	1b18b03a 	or	r12,r3,r12
    37ac:	003fb506 	br	3684 <__pack_d+0x1d0>
    37b0:	2806d07a 	srli	r3,r5,1
    37b4:	008007c4 	movi	r2,31
    37b8:	1105c83a 	sub	r2,r2,r4
    37bc:	1896d83a 	srl	r11,r3,r2
    37c0:	2914983a 	sll	r10,r5,r4
    37c4:	003fb506 	br	369c <__pack_d+0x1e8>

000037c8 <__unpack_d>:
    37c8:	20c00117 	ldw	r3,4(r4)
    37cc:	22400017 	ldw	r9,0(r4)
    37d0:	00800434 	movhi	r2,16
    37d4:	10bfffc4 	addi	r2,r2,-1
    37d8:	1808d53a 	srli	r4,r3,20
    37dc:	180cd7fa 	srli	r6,r3,31
    37e0:	1894703a 	and	r10,r3,r2
    37e4:	2201ffcc 	andi	r8,r4,2047
    37e8:	281b883a 	mov	r13,r5
    37ec:	4817883a 	mov	r11,r9
    37f0:	29800115 	stw	r6,4(r5)
    37f4:	5019883a 	mov	r12,r10
    37f8:	40001e1e 	bne	r8,zero,3874 <__unpack_d+0xac>
    37fc:	4a84b03a 	or	r2,r9,r10
    3800:	10001926 	beq	r2,zero,3868 <__unpack_d+0xa0>
    3804:	4804d63a 	srli	r2,r9,24
    3808:	500c923a 	slli	r6,r10,8
    380c:	013f0084 	movi	r4,-1022
    3810:	00c40034 	movhi	r3,4096
    3814:	18ffffc4 	addi	r3,r3,-1
    3818:	118cb03a 	or	r6,r2,r6
    381c:	008000c4 	movi	r2,3
    3820:	480a923a 	slli	r5,r9,8
    3824:	68800015 	stw	r2,0(r13)
    3828:	69000215 	stw	r4,8(r13)
    382c:	19800b36 	bltu	r3,r6,385c <__unpack_d+0x94>
    3830:	200f883a 	mov	r7,r4
    3834:	1811883a 	mov	r8,r3
    3838:	2945883a 	add	r2,r5,r5
    383c:	1149803a 	cmpltu	r4,r2,r5
    3840:	3187883a 	add	r3,r6,r6
    3844:	20c9883a 	add	r4,r4,r3
    3848:	100b883a 	mov	r5,r2
    384c:	200d883a 	mov	r6,r4
    3850:	39ffffc4 	addi	r7,r7,-1
    3854:	413ff82e 	bgeu	r8,r4,3838 <__unpack_d+0x70>
    3858:	69c00215 	stw	r7,8(r13)
    385c:	69800415 	stw	r6,16(r13)
    3860:	69400315 	stw	r5,12(r13)
    3864:	f800283a 	ret
    3868:	00800084 	movi	r2,2
    386c:	28800015 	stw	r2,0(r5)
    3870:	f800283a 	ret
    3874:	0081ffc4 	movi	r2,2047
    3878:	40800f26 	beq	r8,r2,38b8 <__unpack_d+0xf0>
    387c:	480cd63a 	srli	r6,r9,24
    3880:	5006923a 	slli	r3,r10,8
    3884:	4804923a 	slli	r2,r9,8
    3888:	0009883a 	mov	r4,zero
    388c:	30c6b03a 	or	r3,r6,r3
    3890:	01440034 	movhi	r5,4096
    3894:	110cb03a 	or	r6,r2,r4
    3898:	423f0044 	addi	r8,r8,-1023
    389c:	194eb03a 	or	r7,r3,r5
    38a0:	008000c4 	movi	r2,3
    38a4:	69c00415 	stw	r7,16(r13)
    38a8:	6a000215 	stw	r8,8(r13)
    38ac:	68800015 	stw	r2,0(r13)
    38b0:	69800315 	stw	r6,12(r13)
    38b4:	f800283a 	ret
    38b8:	4a84b03a 	or	r2,r9,r10
    38bc:	1000031e 	bne	r2,zero,38cc <__unpack_d+0x104>
    38c0:	00800104 	movi	r2,4
    38c4:	28800015 	stw	r2,0(r5)
    38c8:	f800283a 	ret
    38cc:	0009883a 	mov	r4,zero
    38d0:	01400234 	movhi	r5,8
    38d4:	4904703a 	and	r2,r9,r4
    38d8:	5146703a 	and	r3,r10,r5
    38dc:	10c4b03a 	or	r2,r2,r3
    38e0:	10000526 	beq	r2,zero,38f8 <__unpack_d+0x130>
    38e4:	00800044 	movi	r2,1
    38e8:	68800015 	stw	r2,0(r13)
    38ec:	6b000415 	stw	r12,16(r13)
    38f0:	6ac00315 	stw	r11,12(r13)
    38f4:	f800283a 	ret
    38f8:	68000015 	stw	zero,0(r13)
    38fc:	003ffb06 	br	38ec <__unpack_d+0x124>

00003900 <__fpcmp_parts_d>:
    3900:	21800017 	ldw	r6,0(r4)
    3904:	00c00044 	movi	r3,1
    3908:	19800a2e 	bgeu	r3,r6,3934 <__fpcmp_parts_d+0x34>
    390c:	28800017 	ldw	r2,0(r5)
    3910:	1880082e 	bgeu	r3,r2,3934 <__fpcmp_parts_d+0x34>
    3914:	00c00104 	movi	r3,4
    3918:	30c02626 	beq	r6,r3,39b4 <__fpcmp_parts_d+0xb4>
    391c:	10c02226 	beq	r2,r3,39a8 <__fpcmp_parts_d+0xa8>
    3920:	00c00084 	movi	r3,2
    3924:	30c00526 	beq	r6,r3,393c <__fpcmp_parts_d+0x3c>
    3928:	10c0071e 	bne	r2,r3,3948 <__fpcmp_parts_d+0x48>
    392c:	20800117 	ldw	r2,4(r4)
    3930:	1000091e 	bne	r2,zero,3958 <__fpcmp_parts_d+0x58>
    3934:	00800044 	movi	r2,1
    3938:	f800283a 	ret
    393c:	10c01a1e 	bne	r2,r3,39a8 <__fpcmp_parts_d+0xa8>
    3940:	0005883a 	mov	r2,zero
    3944:	f800283a 	ret
    3948:	22000117 	ldw	r8,4(r4)
    394c:	28800117 	ldw	r2,4(r5)
    3950:	40800326 	beq	r8,r2,3960 <__fpcmp_parts_d+0x60>
    3954:	403ff726 	beq	r8,zero,3934 <__fpcmp_parts_d+0x34>
    3958:	00bfffc4 	movi	r2,-1
    395c:	f800283a 	ret
    3960:	20c00217 	ldw	r3,8(r4)
    3964:	28800217 	ldw	r2,8(r5)
    3968:	10fffa16 	blt	r2,r3,3954 <__fpcmp_parts_d+0x54>
    396c:	18800916 	blt	r3,r2,3994 <__fpcmp_parts_d+0x94>
    3970:	21c00417 	ldw	r7,16(r4)
    3974:	28c00417 	ldw	r3,16(r5)
    3978:	21800317 	ldw	r6,12(r4)
    397c:	28800317 	ldw	r2,12(r5)
    3980:	19fff436 	bltu	r3,r7,3954 <__fpcmp_parts_d+0x54>
    3984:	38c00526 	beq	r7,r3,399c <__fpcmp_parts_d+0x9c>
    3988:	38c00236 	bltu	r7,r3,3994 <__fpcmp_parts_d+0x94>
    398c:	19ffec1e 	bne	r3,r7,3940 <__fpcmp_parts_d+0x40>
    3990:	30bfeb2e 	bgeu	r6,r2,3940 <__fpcmp_parts_d+0x40>
    3994:	403fe71e 	bne	r8,zero,3934 <__fpcmp_parts_d+0x34>
    3998:	003fef06 	br	3958 <__fpcmp_parts_d+0x58>
    399c:	11bffa2e 	bgeu	r2,r6,3988 <__fpcmp_parts_d+0x88>
    39a0:	403fe426 	beq	r8,zero,3934 <__fpcmp_parts_d+0x34>
    39a4:	003fec06 	br	3958 <__fpcmp_parts_d+0x58>
    39a8:	28800117 	ldw	r2,4(r5)
    39ac:	103fe11e 	bne	r2,zero,3934 <__fpcmp_parts_d+0x34>
    39b0:	003fe906 	br	3958 <__fpcmp_parts_d+0x58>
    39b4:	11bfdd1e 	bne	r2,r6,392c <__fpcmp_parts_d+0x2c>
    39b8:	28c00117 	ldw	r3,4(r5)
    39bc:	20800117 	ldw	r2,4(r4)
    39c0:	1885c83a 	sub	r2,r3,r2
    39c4:	f800283a 	ret

000039c8 <__errno>:
    39c8:	00c00074 	movhi	r3,1
    39cc:	18e9ff04 	addi	r3,r3,-22532
    39d0:	18800017 	ldw	r2,0(r3)
    39d4:	f800283a 	ret

000039d8 <memset>:
    39d8:	008000c4 	movi	r2,3
    39dc:	29403fcc 	andi	r5,r5,255
    39e0:	2007883a 	mov	r3,r4
    39e4:	1180022e 	bgeu	r2,r6,39f0 <memset+0x18>
    39e8:	2084703a 	and	r2,r4,r2
    39ec:	10000826 	beq	r2,zero,3a10 <memset+0x38>
    39f0:	30000526 	beq	r6,zero,3a08 <memset+0x30>
    39f4:	2805883a 	mov	r2,r5
    39f8:	30cd883a 	add	r6,r6,r3
    39fc:	18800005 	stb	r2,0(r3)
    3a00:	18c00044 	addi	r3,r3,1
    3a04:	19bffd1e 	bne	r3,r6,39fc <memset+0x24>
    3a08:	2005883a 	mov	r2,r4
    3a0c:	f800283a 	ret
    3a10:	2804923a 	slli	r2,r5,8
    3a14:	020003c4 	movi	r8,15
    3a18:	200f883a 	mov	r7,r4
    3a1c:	2884b03a 	or	r2,r5,r2
    3a20:	1006943a 	slli	r3,r2,16
    3a24:	10c6b03a 	or	r3,r2,r3
    3a28:	41800a2e 	bgeu	r8,r6,3a54 <memset+0x7c>
    3a2c:	4005883a 	mov	r2,r8
    3a30:	31bffc04 	addi	r6,r6,-16
    3a34:	38c00015 	stw	r3,0(r7)
    3a38:	38c00115 	stw	r3,4(r7)
    3a3c:	38c00215 	stw	r3,8(r7)
    3a40:	38c00315 	stw	r3,12(r7)
    3a44:	39c00404 	addi	r7,r7,16
    3a48:	11bff936 	bltu	r2,r6,3a30 <memset+0x58>
    3a4c:	008000c4 	movi	r2,3
    3a50:	1180052e 	bgeu	r2,r6,3a68 <memset+0x90>
    3a54:	31bfff04 	addi	r6,r6,-4
    3a58:	008000c4 	movi	r2,3
    3a5c:	38c00015 	stw	r3,0(r7)
    3a60:	39c00104 	addi	r7,r7,4
    3a64:	11bffb36 	bltu	r2,r6,3a54 <memset+0x7c>
    3a68:	3807883a 	mov	r3,r7
    3a6c:	003fe006 	br	39f0 <memset+0x18>

00003a70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3a70:	defffe04 	addi	sp,sp,-8
    3a74:	dfc00115 	stw	ra,4(sp)
    3a78:	df000015 	stw	fp,0(sp)
    3a7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3a80:	01000074 	movhi	r4,1
    3a84:	212a0d04 	addi	r4,r4,-22476
    3a88:	01400074 	movhi	r5,1
    3a8c:	29636f04 	addi	r5,r5,-29252
    3a90:	01800074 	movhi	r6,1
    3a94:	31aa0d04 	addi	r6,r6,-22476
    3a98:	0003af00 	call	3af0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3a9c:	01000034 	movhi	r4,0
    3aa0:	21000804 	addi	r4,r4,32
    3aa4:	01400034 	movhi	r5,0
    3aa8:	29400804 	addi	r5,r5,32
    3aac:	01800034 	movhi	r6,0
    3ab0:	31806d04 	addi	r6,r6,436
    3ab4:	0003af00 	call	3af0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3ab8:	01000074 	movhi	r4,1
    3abc:	2122d804 	addi	r4,r4,-29856
    3ac0:	01400074 	movhi	r5,1
    3ac4:	2962d804 	addi	r5,r5,-29856
    3ac8:	01800074 	movhi	r6,1
    3acc:	31a36f04 	addi	r6,r6,-29252
    3ad0:	0003af00 	call	3af0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3ad4:	00052cc0 	call	52cc <alt_dcache_flush_all>
  alt_icache_flush_all();
    3ad8:	00055840 	call	5584 <alt_icache_flush_all>
}
    3adc:	e037883a 	mov	sp,fp
    3ae0:	dfc00117 	ldw	ra,4(sp)
    3ae4:	df000017 	ldw	fp,0(sp)
    3ae8:	dec00204 	addi	sp,sp,8
    3aec:	f800283a 	ret

00003af0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3af0:	defffc04 	addi	sp,sp,-16
    3af4:	df000315 	stw	fp,12(sp)
    3af8:	df000304 	addi	fp,sp,12
    3afc:	e13ffd15 	stw	r4,-12(fp)
    3b00:	e17ffe15 	stw	r5,-8(fp)
    3b04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3b08:	e0fffe17 	ldw	r3,-8(fp)
    3b0c:	e0bffd17 	ldw	r2,-12(fp)
    3b10:	18800e26 	beq	r3,r2,3b4c <alt_load_section+0x5c>
  {
    while( to != end )
    3b14:	00000a06 	br	3b40 <alt_load_section+0x50>
    {
      *to++ = *from++;
    3b18:	e0bffd17 	ldw	r2,-12(fp)
    3b1c:	10c00017 	ldw	r3,0(r2)
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10c00015 	stw	r3,0(r2)
    3b28:	e0bffe17 	ldw	r2,-8(fp)
    3b2c:	10800104 	addi	r2,r2,4
    3b30:	e0bffe15 	stw	r2,-8(fp)
    3b34:	e0bffd17 	ldw	r2,-12(fp)
    3b38:	10800104 	addi	r2,r2,4
    3b3c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3b40:	e0fffe17 	ldw	r3,-8(fp)
    3b44:	e0bfff17 	ldw	r2,-4(fp)
    3b48:	18bff31e 	bne	r3,r2,3b18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3b4c:	e037883a 	mov	sp,fp
    3b50:	df000017 	ldw	fp,0(sp)
    3b54:	dec00104 	addi	sp,sp,4
    3b58:	f800283a 	ret

00003b5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3b5c:	defffd04 	addi	sp,sp,-12
    3b60:	dfc00215 	stw	ra,8(sp)
    3b64:	df000115 	stw	fp,4(sp)
    3b68:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3b6c:	0009883a 	mov	r4,zero
    3b70:	0003e600 	call	3e60 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3b74:	0003e940 	call	3e94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3b78:	01000074 	movhi	r4,1
    3b7c:	21235f04 	addi	r4,r4,-29316
    3b80:	01400074 	movhi	r5,1
    3b84:	29635f04 	addi	r5,r5,-29316
    3b88:	01800074 	movhi	r6,1
    3b8c:	31a35f04 	addi	r6,r6,-29316
    3b90:	00059440 	call	5944 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3b94:	00054280 	call	5428 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3b98:	01000034 	movhi	r4,0
    3b9c:	21152304 	addi	r4,r4,21644
    3ba0:	000610c0 	call	610c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3ba4:	d126ad17 	ldw	r4,-25932(gp)
    3ba8:	d166ae17 	ldw	r5,-25928(gp)
    3bac:	d1a6af17 	ldw	r6,-25924(gp)
    3bb0:	00001f00 	call	1f0 <main>
    3bb4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3bb8:	01000044 	movi	r4,1
    3bbc:	00051700 	call	5170 <close>
  exit (result);
    3bc0:	e13fff17 	ldw	r4,-4(fp)
    3bc4:	00061200 	call	6120 <exit>

00003bc8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    3bc8:	defff204 	addi	sp,sp,-56
    3bcc:	dfc00a15 	stw	ra,40(sp)
    3bd0:	df000915 	stw	fp,36(sp)
    3bd4:	df000904 	addi	fp,sp,36
    3bd8:	e1400215 	stw	r5,8(fp)
    3bdc:	e1800315 	stw	r6,12(fp)
    3be0:	e1c00415 	stw	r7,16(fp)
    3be4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    3be8:	e0800204 	addi	r2,fp,8
    3bec:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    3bf0:	e0bfff17 	ldw	r2,-4(fp)
    3bf4:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    3bf8:	00007806 	br	3ddc <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    3bfc:	e0bffc07 	ldb	r2,-16(fp)
    3c00:	10800960 	cmpeqi	r2,r2,37
    3c04:	1000031e 	bne	r2,zero,3c14 <alt_printf+0x4c>
        {
            alt_putchar(c);
    3c08:	e13ffc07 	ldb	r4,-16(fp)
    3c0c:	0003e200 	call	3e20 <alt_putchar>
    3c10:	00007206 	br	3ddc <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    3c14:	e0bffd17 	ldw	r2,-12(fp)
    3c18:	10800003 	ldbu	r2,0(r2)
    3c1c:	e0bffc05 	stb	r2,-16(fp)
    3c20:	e0bffc07 	ldb	r2,-16(fp)
    3c24:	1004c03a 	cmpne	r2,r2,zero
    3c28:	1007883a 	mov	r3,r2
    3c2c:	e0bffd17 	ldw	r2,-12(fp)
    3c30:	10800044 	addi	r2,r2,1
    3c34:	e0bffd15 	stw	r2,-12(fp)
    3c38:	18803fcc 	andi	r2,r3,255
    3c3c:	1005003a 	cmpeq	r2,r2,zero
    3c40:	1000721e 	bne	r2,zero,3e0c <alt_printf+0x244>
            {
                if (c == '%')
    3c44:	e0bffc07 	ldb	r2,-16(fp)
    3c48:	10800958 	cmpnei	r2,r2,37
    3c4c:	1000031e 	bne	r2,zero,3c5c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    3c50:	e13ffc07 	ldb	r4,-16(fp)
    3c54:	0003e200 	call	3e20 <alt_putchar>
    3c58:	00006006 	br	3ddc <alt_printf+0x214>
                } 
                else if (c == 'c')
    3c5c:	e0bffc07 	ldb	r2,-16(fp)
    3c60:	108018d8 	cmpnei	r2,r2,99
    3c64:	1000091e 	bne	r2,zero,3c8c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    3c68:	e0fffe17 	ldw	r3,-8(fp)
    3c6c:	18800104 	addi	r2,r3,4
    3c70:	e0bffe15 	stw	r2,-8(fp)
    3c74:	1805883a 	mov	r2,r3
    3c78:	10800017 	ldw	r2,0(r2)
    3c7c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    3c80:	e13ffb17 	ldw	r4,-20(fp)
    3c84:	0003e200 	call	3e20 <alt_putchar>
    3c88:	00005406 	br	3ddc <alt_printf+0x214>
                }
                else if (c == 'x')
    3c8c:	e0bffc07 	ldb	r2,-16(fp)
    3c90:	10801e18 	cmpnei	r2,r2,120
    3c94:	1000371e 	bne	r2,zero,3d74 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    3c98:	e0fffe17 	ldw	r3,-8(fp)
    3c9c:	18800104 	addi	r2,r3,4
    3ca0:	e0bffe15 	stw	r2,-8(fp)
    3ca4:	1805883a 	mov	r2,r3
    3ca8:	10800017 	ldw	r2,0(r2)
    3cac:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    3cb0:	e0bffa17 	ldw	r2,-24(fp)
    3cb4:	1004c03a 	cmpne	r2,r2,zero
    3cb8:	1000031e 	bne	r2,zero,3cc8 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    3cbc:	01000c04 	movi	r4,48
    3cc0:	0003e200 	call	3e20 <alt_putchar>
                        continue;
    3cc4:	00004506 	br	3ddc <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    3cc8:	00800704 	movi	r2,28
    3ccc:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    3cd0:	00000306 	br	3ce0 <alt_printf+0x118>
                        digit_shift -= 4;
    3cd4:	e0bff817 	ldw	r2,-32(fp)
    3cd8:	10bfff04 	addi	r2,r2,-4
    3cdc:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    3ce0:	00c003c4 	movi	r3,15
    3ce4:	e0bff817 	ldw	r2,-32(fp)
    3ce8:	1884983a 	sll	r2,r3,r2
    3cec:	1007883a 	mov	r3,r2
    3cf0:	e0bffa17 	ldw	r2,-24(fp)
    3cf4:	1884703a 	and	r2,r3,r2
    3cf8:	1005003a 	cmpeq	r2,r2,zero
    3cfc:	103ff51e 	bne	r2,zero,3cd4 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3d00:	00001806 	br	3d64 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    3d04:	00c003c4 	movi	r3,15
    3d08:	e0bff817 	ldw	r2,-32(fp)
    3d0c:	1884983a 	sll	r2,r3,r2
    3d10:	1007883a 	mov	r3,r2
    3d14:	e0bffa17 	ldw	r2,-24(fp)
    3d18:	1886703a 	and	r3,r3,r2
    3d1c:	e0bff817 	ldw	r2,-32(fp)
    3d20:	1884d83a 	srl	r2,r3,r2
    3d24:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    3d28:	e0bff917 	ldw	r2,-28(fp)
    3d2c:	108002a8 	cmpgeui	r2,r2,10
    3d30:	1000041e 	bne	r2,zero,3d44 <alt_printf+0x17c>
                            c = '0' + digit;
    3d34:	e0bff917 	ldw	r2,-28(fp)
    3d38:	10800c04 	addi	r2,r2,48
    3d3c:	e0bffc05 	stb	r2,-16(fp)
    3d40:	00000306 	br	3d50 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    3d44:	e0bff917 	ldw	r2,-28(fp)
    3d48:	108015c4 	addi	r2,r2,87
    3d4c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    3d50:	e13ffc07 	ldb	r4,-16(fp)
    3d54:	0003e200 	call	3e20 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3d58:	e0bff817 	ldw	r2,-32(fp)
    3d5c:	10bfff04 	addi	r2,r2,-4
    3d60:	e0bff815 	stw	r2,-32(fp)
    3d64:	e0bff817 	ldw	r2,-32(fp)
    3d68:	1004403a 	cmpge	r2,r2,zero
    3d6c:	103fe51e 	bne	r2,zero,3d04 <alt_printf+0x13c>
    3d70:	00001a06 	br	3ddc <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    3d74:	e0bffc07 	ldb	r2,-16(fp)
    3d78:	10801cd8 	cmpnei	r2,r2,115
    3d7c:	1000171e 	bne	r2,zero,3ddc <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    3d80:	e0fffe17 	ldw	r3,-8(fp)
    3d84:	18800104 	addi	r2,r3,4
    3d88:	e0bffe15 	stw	r2,-8(fp)
    3d8c:	1805883a 	mov	r2,r3
    3d90:	10800017 	ldw	r2,0(r2)
    3d94:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    3d98:	00000906 	br	3dc0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    3d9c:	e0bff717 	ldw	r2,-36(fp)
    3da0:	10800003 	ldbu	r2,0(r2)
    3da4:	11003fcc 	andi	r4,r2,255
    3da8:	2100201c 	xori	r4,r4,128
    3dac:	213fe004 	addi	r4,r4,-128
    3db0:	e0bff717 	ldw	r2,-36(fp)
    3db4:	10800044 	addi	r2,r2,1
    3db8:	e0bff715 	stw	r2,-36(fp)
    3dbc:	0003e200 	call	3e20 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    3dc0:	e0bff717 	ldw	r2,-36(fp)
    3dc4:	10800003 	ldbu	r2,0(r2)
    3dc8:	10803fcc 	andi	r2,r2,255
    3dcc:	1080201c 	xori	r2,r2,128
    3dd0:	10bfe004 	addi	r2,r2,-128
    3dd4:	1004c03a 	cmpne	r2,r2,zero
    3dd8:	103ff01e 	bne	r2,zero,3d9c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    3ddc:	e0bffd17 	ldw	r2,-12(fp)
    3de0:	10800003 	ldbu	r2,0(r2)
    3de4:	e0bffc05 	stb	r2,-16(fp)
    3de8:	e0bffc07 	ldb	r2,-16(fp)
    3dec:	1004c03a 	cmpne	r2,r2,zero
    3df0:	1007883a 	mov	r3,r2
    3df4:	e0bffd17 	ldw	r2,-12(fp)
    3df8:	10800044 	addi	r2,r2,1
    3dfc:	e0bffd15 	stw	r2,-12(fp)
    3e00:	18803fcc 	andi	r2,r3,255
    3e04:	1004c03a 	cmpne	r2,r2,zero
    3e08:	103f7c1e 	bne	r2,zero,3bfc <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    3e0c:	e037883a 	mov	sp,fp
    3e10:	dfc00117 	ldw	ra,4(sp)
    3e14:	df000017 	ldw	fp,0(sp)
    3e18:	dec00504 	addi	sp,sp,20
    3e1c:	f800283a 	ret

00003e20 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3e20:	defffd04 	addi	sp,sp,-12
    3e24:	dfc00215 	stw	ra,8(sp)
    3e28:	df000115 	stw	fp,4(sp)
    3e2c:	df000104 	addi	fp,sp,4
    3e30:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    3e34:	00800074 	movhi	r2,1
    3e38:	10a9ff04 	addi	r2,r2,-22532
    3e3c:	10800017 	ldw	r2,0(r2)
    3e40:	11400217 	ldw	r5,8(r2)
    3e44:	e13fff17 	ldw	r4,-4(fp)
    3e48:	000626c0 	call	626c <putc>
#endif
}
    3e4c:	e037883a 	mov	sp,fp
    3e50:	dfc00117 	ldw	ra,4(sp)
    3e54:	df000017 	ldw	fp,0(sp)
    3e58:	dec00204 	addi	sp,sp,8
    3e5c:	f800283a 	ret

00003e60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3e60:	defffd04 	addi	sp,sp,-12
    3e64:	dfc00215 	stw	ra,8(sp)
    3e68:	df000115 	stw	fp,4(sp)
    3e6c:	df000104 	addi	fp,sp,4
    3e70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    3e74:	0005e840 	call	5e84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3e78:	00800044 	movi	r2,1
    3e7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3e80:	e037883a 	mov	sp,fp
    3e84:	dfc00117 	ldw	ra,4(sp)
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00204 	addi	sp,sp,8
    3e90:	f800283a 	ret

00003e94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3e94:	defffe04 	addi	sp,sp,-8
    3e98:	dfc00115 	stw	ra,4(sp)
    3e9c:	df000015 	stw	fp,0(sp)
    3ea0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3ea4:	01040034 	movhi	r4,4096
    3ea8:	21080004 	addi	r4,r4,8192
    3eac:	000b883a 	mov	r5,zero
    3eb0:	000d883a 	mov	r6,zero
    3eb4:	01c00204 	movi	r7,8
    3eb8:	0004a5c0 	call	4a5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3ebc:	01000074 	movhi	r4,1
    3ec0:	21247904 	addi	r4,r4,-28188
    3ec4:	000b883a 	mov	r5,zero
    3ec8:	01800204 	movi	r6,8
    3ecc:	00040880 	call	4088 <altera_avalon_jtag_uart_init>
    3ed0:	01000074 	movhi	r4,1
    3ed4:	21246f04 	addi	r4,r4,-28228
    3ed8:	0003f080 	call	3f08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    3edc:	01000074 	movhi	r4,1
    3ee0:	21288704 	addi	r4,r4,-24036
    3ee4:	0004b9c0 	call	4b9c <alt_up_character_lcd_init>
    3ee8:	01000074 	movhi	r4,1
    3eec:	21288704 	addi	r4,r4,-24036
    3ef0:	0003f080 	call	3f08 <alt_dev_reg>
}
    3ef4:	e037883a 	mov	sp,fp
    3ef8:	dfc00117 	ldw	ra,4(sp)
    3efc:	df000017 	ldw	fp,0(sp)
    3f00:	dec00204 	addi	sp,sp,8
    3f04:	f800283a 	ret

00003f08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3f08:	defffd04 	addi	sp,sp,-12
    3f0c:	dfc00215 	stw	ra,8(sp)
    3f10:	df000115 	stw	fp,4(sp)
    3f14:	df000104 	addi	fp,sp,4
    3f18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3f1c:	e13fff17 	ldw	r4,-4(fp)
    3f20:	01400074 	movhi	r5,1
    3f24:	296a0304 	addi	r5,r5,-22516
    3f28:	00053140 	call	5314 <alt_dev_llist_insert>
}
    3f2c:	e037883a 	mov	sp,fp
    3f30:	dfc00117 	ldw	ra,4(sp)
    3f34:	df000017 	ldw	fp,0(sp)
    3f38:	dec00204 	addi	sp,sp,8
    3f3c:	f800283a 	ret

00003f40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3f40:	defffa04 	addi	sp,sp,-24
    3f44:	dfc00515 	stw	ra,20(sp)
    3f48:	df000415 	stw	fp,16(sp)
    3f4c:	df000404 	addi	fp,sp,16
    3f50:	e13ffd15 	stw	r4,-12(fp)
    3f54:	e17ffe15 	stw	r5,-8(fp)
    3f58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f5c:	e0bffd17 	ldw	r2,-12(fp)
    3f60:	10800017 	ldw	r2,0(r2)
    3f64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3f68:	e0bffc17 	ldw	r2,-16(fp)
    3f6c:	11000a04 	addi	r4,r2,40
    3f70:	e0bffd17 	ldw	r2,-12(fp)
    3f74:	11c00217 	ldw	r7,8(r2)
    3f78:	e17ffe17 	ldw	r5,-8(fp)
    3f7c:	e1bfff17 	ldw	r6,-4(fp)
    3f80:	00045880 	call	4588 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3f84:	e037883a 	mov	sp,fp
    3f88:	dfc00117 	ldw	ra,4(sp)
    3f8c:	df000017 	ldw	fp,0(sp)
    3f90:	dec00204 	addi	sp,sp,8
    3f94:	f800283a 	ret

00003f98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3f98:	defffa04 	addi	sp,sp,-24
    3f9c:	dfc00515 	stw	ra,20(sp)
    3fa0:	df000415 	stw	fp,16(sp)
    3fa4:	df000404 	addi	fp,sp,16
    3fa8:	e13ffd15 	stw	r4,-12(fp)
    3fac:	e17ffe15 	stw	r5,-8(fp)
    3fb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3fb4:	e0bffd17 	ldw	r2,-12(fp)
    3fb8:	10800017 	ldw	r2,0(r2)
    3fbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3fc0:	e0bffc17 	ldw	r2,-16(fp)
    3fc4:	11000a04 	addi	r4,r2,40
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	11c00217 	ldw	r7,8(r2)
    3fd0:	e17ffe17 	ldw	r5,-8(fp)
    3fd4:	e1bfff17 	ldw	r6,-4(fp)
    3fd8:	00047ac0 	call	47ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3fdc:	e037883a 	mov	sp,fp
    3fe0:	dfc00117 	ldw	ra,4(sp)
    3fe4:	df000017 	ldw	fp,0(sp)
    3fe8:	dec00204 	addi	sp,sp,8
    3fec:	f800283a 	ret

00003ff0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3ff0:	defffc04 	addi	sp,sp,-16
    3ff4:	dfc00315 	stw	ra,12(sp)
    3ff8:	df000215 	stw	fp,8(sp)
    3ffc:	df000204 	addi	fp,sp,8
    4000:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	10800017 	ldw	r2,0(r2)
    400c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4010:	e0bffe17 	ldw	r2,-8(fp)
    4014:	11000a04 	addi	r4,r2,40
    4018:	e0bfff17 	ldw	r2,-4(fp)
    401c:	11400217 	ldw	r5,8(r2)
    4020:	00044200 	call	4420 <altera_avalon_jtag_uart_close>
}
    4024:	e037883a 	mov	sp,fp
    4028:	dfc00117 	ldw	ra,4(sp)
    402c:	df000017 	ldw	fp,0(sp)
    4030:	dec00204 	addi	sp,sp,8
    4034:	f800283a 	ret

00004038 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4038:	defffa04 	addi	sp,sp,-24
    403c:	dfc00515 	stw	ra,20(sp)
    4040:	df000415 	stw	fp,16(sp)
    4044:	df000404 	addi	fp,sp,16
    4048:	e13ffd15 	stw	r4,-12(fp)
    404c:	e17ffe15 	stw	r5,-8(fp)
    4050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4054:	e0bffd17 	ldw	r2,-12(fp)
    4058:	10800017 	ldw	r2,0(r2)
    405c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4060:	e0bffc17 	ldw	r2,-16(fp)
    4064:	11000a04 	addi	r4,r2,40
    4068:	e17ffe17 	ldw	r5,-8(fp)
    406c:	e1bfff17 	ldw	r6,-4(fp)
    4070:	00044940 	call	4494 <altera_avalon_jtag_uart_ioctl>
}
    4074:	e037883a 	mov	sp,fp
    4078:	dfc00117 	ldw	ra,4(sp)
    407c:	df000017 	ldw	fp,0(sp)
    4080:	dec00204 	addi	sp,sp,8
    4084:	f800283a 	ret

00004088 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4088:	defffa04 	addi	sp,sp,-24
    408c:	dfc00515 	stw	ra,20(sp)
    4090:	df000415 	stw	fp,16(sp)
    4094:	df000404 	addi	fp,sp,16
    4098:	e13ffd15 	stw	r4,-12(fp)
    409c:	e17ffe15 	stw	r5,-8(fp)
    40a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    40a4:	e0fffd17 	ldw	r3,-12(fp)
    40a8:	00800044 	movi	r2,1
    40ac:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    40b0:	e0bffd17 	ldw	r2,-12(fp)
    40b4:	10800017 	ldw	r2,0(r2)
    40b8:	11000104 	addi	r4,r2,4
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	10800817 	ldw	r2,32(r2)
    40c4:	1007883a 	mov	r3,r2
    40c8:	2005883a 	mov	r2,r4
    40cc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    40d0:	e13ffe17 	ldw	r4,-8(fp)
    40d4:	e17fff17 	ldw	r5,-4(fp)
    40d8:	d8000015 	stw	zero,0(sp)
    40dc:	01800034 	movhi	r6,0
    40e0:	31905204 	addi	r6,r6,16712
    40e4:	e1fffd17 	ldw	r7,-12(fp)
    40e8:	00055b40 	call	55b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    40ec:	e0bffd17 	ldw	r2,-12(fp)
    40f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    40fc:	00800074 	movhi	r2,1
    4100:	10b0af04 	addi	r2,r2,-15684
    4104:	10800017 	ldw	r2,0(r2)
    4108:	100b883a 	mov	r5,r2
    410c:	01800034 	movhi	r6,0
    4110:	3190dc04 	addi	r6,r6,17264
    4114:	e1fffd17 	ldw	r7,-12(fp)
    4118:	000501c0 	call	501c <alt_alarm_start>
    411c:	1004403a 	cmpge	r2,r2,zero
    4120:	1000041e 	bne	r2,zero,4134 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4124:	e0fffd17 	ldw	r3,-12(fp)
    4128:	00a00034 	movhi	r2,32768
    412c:	10bfffc4 	addi	r2,r2,-1
    4130:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4134:	e037883a 	mov	sp,fp
    4138:	dfc00117 	ldw	ra,4(sp)
    413c:	df000017 	ldw	fp,0(sp)
    4140:	dec00204 	addi	sp,sp,8
    4144:	f800283a 	ret

00004148 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4148:	defff804 	addi	sp,sp,-32
    414c:	df000715 	stw	fp,28(sp)
    4150:	df000704 	addi	fp,sp,28
    4154:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4158:	e0bfff17 	ldw	r2,-4(fp)
    415c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    4160:	e0bffe17 	ldw	r2,-8(fp)
    4164:	10800017 	ldw	r2,0(r2)
    4168:	e0bffd15 	stw	r2,-12(fp)
    416c:	00000006 	br	4170 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4170:	e0bffd17 	ldw	r2,-12(fp)
    4174:	10800104 	addi	r2,r2,4
    4178:	10800037 	ldwio	r2,0(r2)
    417c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4180:	e0bffc17 	ldw	r2,-16(fp)
    4184:	1080c00c 	andi	r2,r2,768
    4188:	1005003a 	cmpeq	r2,r2,zero
    418c:	1000741e 	bne	r2,zero,4360 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4190:	e0bffc17 	ldw	r2,-16(fp)
    4194:	1080400c 	andi	r2,r2,256
    4198:	1005003a 	cmpeq	r2,r2,zero
    419c:	1000351e 	bne	r2,zero,4274 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    41a0:	00800074 	movhi	r2,1
    41a4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    41a8:	e0bffe17 	ldw	r2,-8(fp)
    41ac:	10800a17 	ldw	r2,40(r2)
    41b0:	10800044 	addi	r2,r2,1
    41b4:	1081ffcc 	andi	r2,r2,2047
    41b8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    41bc:	e0bffe17 	ldw	r2,-8(fp)
    41c0:	10c00b17 	ldw	r3,44(r2)
    41c4:	e0bffa17 	ldw	r2,-24(fp)
    41c8:	18801626 	beq	r3,r2,4224 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800037 	ldwio	r2,0(r2)
    41d4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    41d8:	e0bffb17 	ldw	r2,-20(fp)
    41dc:	10a0000c 	andi	r2,r2,32768
    41e0:	1005003a 	cmpeq	r2,r2,zero
    41e4:	10000f1e 	bne	r2,zero,4224 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    41e8:	e0bffe17 	ldw	r2,-8(fp)
    41ec:	10c00a17 	ldw	r3,40(r2)
    41f0:	e0bffb17 	ldw	r2,-20(fp)
    41f4:	1009883a 	mov	r4,r2
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	1885883a 	add	r2,r3,r2
    4200:	10800e04 	addi	r2,r2,56
    4204:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4208:	e0bffe17 	ldw	r2,-8(fp)
    420c:	10800a17 	ldw	r2,40(r2)
    4210:	10800044 	addi	r2,r2,1
    4214:	10c1ffcc 	andi	r3,r2,2047
    4218:	e0bffe17 	ldw	r2,-8(fp)
    421c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4220:	003fe106 	br	41a8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4224:	e0bffb17 	ldw	r2,-20(fp)
    4228:	10bfffec 	andhi	r2,r2,65535
    422c:	1005003a 	cmpeq	r2,r2,zero
    4230:	1000101e 	bne	r2,zero,4274 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4234:	e0bffe17 	ldw	r2,-8(fp)
    4238:	10c00817 	ldw	r3,32(r2)
    423c:	00bfff84 	movi	r2,-2
    4240:	1886703a 	and	r3,r3,r2
    4244:	e0bffe17 	ldw	r2,-8(fp)
    4248:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    424c:	e0bffd17 	ldw	r2,-12(fp)
    4250:	11000104 	addi	r4,r2,4
    4254:	e0bffe17 	ldw	r2,-8(fp)
    4258:	10800817 	ldw	r2,32(r2)
    425c:	1007883a 	mov	r3,r2
    4260:	2005883a 	mov	r2,r4
    4264:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4268:	e0bffd17 	ldw	r2,-12(fp)
    426c:	10800104 	addi	r2,r2,4
    4270:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4274:	e0bffc17 	ldw	r2,-16(fp)
    4278:	1080800c 	andi	r2,r2,512
    427c:	1005003a 	cmpeq	r2,r2,zero
    4280:	103fbb1e 	bne	r2,zero,4170 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4284:	e0bffc17 	ldw	r2,-16(fp)
    4288:	10bfffec 	andhi	r2,r2,65535
    428c:	1004d43a 	srli	r2,r2,16
    4290:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4294:	00001506 	br	42ec <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4298:	e13ffd17 	ldw	r4,-12(fp)
    429c:	e0bffe17 	ldw	r2,-8(fp)
    42a0:	10c00d17 	ldw	r3,52(r2)
    42a4:	e0bffe17 	ldw	r2,-8(fp)
    42a8:	1885883a 	add	r2,r3,r2
    42ac:	10820e04 	addi	r2,r2,2104
    42b0:	10800003 	ldbu	r2,0(r2)
    42b4:	10c03fcc 	andi	r3,r2,255
    42b8:	18c0201c 	xori	r3,r3,128
    42bc:	18ffe004 	addi	r3,r3,-128
    42c0:	2005883a 	mov	r2,r4
    42c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    42c8:	e0bffe17 	ldw	r2,-8(fp)
    42cc:	10800d17 	ldw	r2,52(r2)
    42d0:	10800044 	addi	r2,r2,1
    42d4:	10c1ffcc 	andi	r3,r2,2047
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    42e0:	e0bff917 	ldw	r2,-28(fp)
    42e4:	10bfffc4 	addi	r2,r2,-1
    42e8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    42ec:	e0bff917 	ldw	r2,-28(fp)
    42f0:	1005003a 	cmpeq	r2,r2,zero
    42f4:	1000051e 	bne	r2,zero,430c <altera_avalon_jtag_uart_irq+0x1c4>
    42f8:	e0bffe17 	ldw	r2,-8(fp)
    42fc:	10c00d17 	ldw	r3,52(r2)
    4300:	e0bffe17 	ldw	r2,-8(fp)
    4304:	10800c17 	ldw	r2,48(r2)
    4308:	18bfe31e 	bne	r3,r2,4298 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    430c:	e0bff917 	ldw	r2,-28(fp)
    4310:	1005003a 	cmpeq	r2,r2,zero
    4314:	103f961e 	bne	r2,zero,4170 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	10c00817 	ldw	r3,32(r2)
    4320:	00bfff44 	movi	r2,-3
    4324:	1886703a 	and	r3,r3,r2
    4328:	e0bffe17 	ldw	r2,-8(fp)
    432c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4330:	e0bffe17 	ldw	r2,-8(fp)
    4334:	10800017 	ldw	r2,0(r2)
    4338:	11000104 	addi	r4,r2,4
    433c:	e0bffe17 	ldw	r2,-8(fp)
    4340:	10800817 	ldw	r2,32(r2)
    4344:	1007883a 	mov	r3,r2
    4348:	2005883a 	mov	r2,r4
    434c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4350:	e0bffd17 	ldw	r2,-12(fp)
    4354:	10800104 	addi	r2,r2,4
    4358:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    435c:	003f8406 	br	4170 <altera_avalon_jtag_uart_irq+0x28>
}
    4360:	e037883a 	mov	sp,fp
    4364:	df000017 	ldw	fp,0(sp)
    4368:	dec00104 	addi	sp,sp,4
    436c:	f800283a 	ret

00004370 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4370:	defffc04 	addi	sp,sp,-16
    4374:	df000315 	stw	fp,12(sp)
    4378:	df000304 	addi	fp,sp,12
    437c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	10800017 	ldw	r2,0(r2)
    4390:	10800104 	addi	r2,r2,4
    4394:	10800037 	ldwio	r2,0(r2)
    4398:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    439c:	e0bffd17 	ldw	r2,-12(fp)
    43a0:	1081000c 	andi	r2,r2,1024
    43a4:	1005003a 	cmpeq	r2,r2,zero
    43a8:	10000c1e 	bne	r2,zero,43dc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    43ac:	e0bffe17 	ldw	r2,-8(fp)
    43b0:	10800017 	ldw	r2,0(r2)
    43b4:	11000104 	addi	r4,r2,4
    43b8:	e0bffe17 	ldw	r2,-8(fp)
    43bc:	10800817 	ldw	r2,32(r2)
    43c0:	10810014 	ori	r2,r2,1024
    43c4:	1007883a 	mov	r3,r2
    43c8:	2005883a 	mov	r2,r4
    43cc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10000915 	stw	zero,36(r2)
    43d8:	00000a06 	br	4404 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    43dc:	e0bffe17 	ldw	r2,-8(fp)
    43e0:	10c00917 	ldw	r3,36(r2)
    43e4:	00a00034 	movhi	r2,32768
    43e8:	10bfff04 	addi	r2,r2,-4
    43ec:	10c00536 	bltu	r2,r3,4404 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    43f0:	e0bffe17 	ldw	r2,-8(fp)
    43f4:	10800917 	ldw	r2,36(r2)
    43f8:	10c00044 	addi	r3,r2,1
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10c00915 	stw	r3,36(r2)
    4404:	00800074 	movhi	r2,1
    4408:	10b0af04 	addi	r2,r2,-15684
    440c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4410:	e037883a 	mov	sp,fp
    4414:	df000017 	ldw	fp,0(sp)
    4418:	dec00104 	addi	sp,sp,4
    441c:	f800283a 	ret

00004420 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4420:	defffc04 	addi	sp,sp,-16
    4424:	df000315 	stw	fp,12(sp)
    4428:	df000304 	addi	fp,sp,12
    442c:	e13ffd15 	stw	r4,-12(fp)
    4430:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4434:	00000706 	br	4454 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    4438:	e0bffe17 	ldw	r2,-8(fp)
    443c:	1090000c 	andi	r2,r2,16384
    4440:	1005003a 	cmpeq	r2,r2,zero
    4444:	1000031e 	bne	r2,zero,4454 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    4448:	00bffd44 	movi	r2,-11
    444c:	e0bfff15 	stw	r2,-4(fp)
    4450:	00000b06 	br	4480 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	10c00d17 	ldw	r3,52(r2)
    445c:	e0bffd17 	ldw	r2,-12(fp)
    4460:	10800c17 	ldw	r2,48(r2)
    4464:	18800526 	beq	r3,r2,447c <altera_avalon_jtag_uart_close+0x5c>
    4468:	e0bffd17 	ldw	r2,-12(fp)
    446c:	10c00917 	ldw	r3,36(r2)
    4470:	e0bffd17 	ldw	r2,-12(fp)
    4474:	10800117 	ldw	r2,4(r2)
    4478:	18bfef36 	bltu	r3,r2,4438 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    447c:	e03fff15 	stw	zero,-4(fp)
    4480:	e0bfff17 	ldw	r2,-4(fp)
}
    4484:	e037883a 	mov	sp,fp
    4488:	df000017 	ldw	fp,0(sp)
    448c:	dec00104 	addi	sp,sp,4
    4490:	f800283a 	ret

00004494 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4494:	defff804 	addi	sp,sp,-32
    4498:	df000715 	stw	fp,28(sp)
    449c:	df000704 	addi	fp,sp,28
    44a0:	e13ffb15 	stw	r4,-20(fp)
    44a4:	e17ffc15 	stw	r5,-16(fp)
    44a8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    44ac:	00bff9c4 	movi	r2,-25
    44b0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    44b4:	e0bffc17 	ldw	r2,-16(fp)
    44b8:	e0bfff15 	stw	r2,-4(fp)
    44bc:	e0ffff17 	ldw	r3,-4(fp)
    44c0:	189a8060 	cmpeqi	r2,r3,27137
    44c4:	1000041e 	bne	r2,zero,44d8 <altera_avalon_jtag_uart_ioctl+0x44>
    44c8:	e0ffff17 	ldw	r3,-4(fp)
    44cc:	189a80a0 	cmpeqi	r2,r3,27138
    44d0:	10001b1e 	bne	r2,zero,4540 <altera_avalon_jtag_uart_ioctl+0xac>
    44d4:	00002706 	br	4574 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    44d8:	e0bffb17 	ldw	r2,-20(fp)
    44dc:	10c00117 	ldw	r3,4(r2)
    44e0:	00a00034 	movhi	r2,32768
    44e4:	10bfffc4 	addi	r2,r2,-1
    44e8:	18802226 	beq	r3,r2,4574 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    44ec:	e0bffd17 	ldw	r2,-12(fp)
    44f0:	10800017 	ldw	r2,0(r2)
    44f4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    44f8:	e0bff917 	ldw	r2,-28(fp)
    44fc:	10800090 	cmplti	r2,r2,2
    4500:	1000071e 	bne	r2,zero,4520 <altera_avalon_jtag_uart_ioctl+0x8c>
    4504:	e0fff917 	ldw	r3,-28(fp)
    4508:	00a00034 	movhi	r2,32768
    450c:	10bfffc4 	addi	r2,r2,-1
    4510:	18800326 	beq	r3,r2,4520 <altera_avalon_jtag_uart_ioctl+0x8c>
    4514:	e0bff917 	ldw	r2,-28(fp)
    4518:	e0bffe15 	stw	r2,-8(fp)
    451c:	00000306 	br	452c <altera_avalon_jtag_uart_ioctl+0x98>
    4520:	00e00034 	movhi	r3,32768
    4524:	18ffff84 	addi	r3,r3,-2
    4528:	e0fffe15 	stw	r3,-8(fp)
    452c:	e0bffb17 	ldw	r2,-20(fp)
    4530:	e0fffe17 	ldw	r3,-8(fp)
    4534:	10c00115 	stw	r3,4(r2)
      rc = 0;
    4538:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    453c:	00000d06 	br	4574 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4540:	e0bffb17 	ldw	r2,-20(fp)
    4544:	10c00117 	ldw	r3,4(r2)
    4548:	00a00034 	movhi	r2,32768
    454c:	10bfffc4 	addi	r2,r2,-1
    4550:	18800826 	beq	r3,r2,4574 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4554:	e13ffd17 	ldw	r4,-12(fp)
    4558:	e0bffb17 	ldw	r2,-20(fp)
    455c:	10c00917 	ldw	r3,36(r2)
    4560:	e0bffb17 	ldw	r2,-20(fp)
    4564:	10800117 	ldw	r2,4(r2)
    4568:	1885803a 	cmpltu	r2,r3,r2
    456c:	20800015 	stw	r2,0(r4)
      rc = 0;
    4570:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    4574:	e0bffa17 	ldw	r2,-24(fp)
}
    4578:	e037883a 	mov	sp,fp
    457c:	df000017 	ldw	fp,0(sp)
    4580:	dec00104 	addi	sp,sp,4
    4584:	f800283a 	ret

00004588 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4588:	defff204 	addi	sp,sp,-56
    458c:	dfc00d15 	stw	ra,52(sp)
    4590:	df000c15 	stw	fp,48(sp)
    4594:	df000c04 	addi	fp,sp,48
    4598:	e13ffb15 	stw	r4,-20(fp)
    459c:	e17ffc15 	stw	r5,-16(fp)
    45a0:	e1bffd15 	stw	r6,-12(fp)
    45a4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    45a8:	e0bffc17 	ldw	r2,-16(fp)
    45ac:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    45b0:	00004806 	br	46d4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    45b4:	e0bffb17 	ldw	r2,-20(fp)
    45b8:	10800a17 	ldw	r2,40(r2)
    45bc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    45c0:	e0bffb17 	ldw	r2,-20(fp)
    45c4:	10800b17 	ldw	r2,44(r2)
    45c8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    45cc:	e0fff717 	ldw	r3,-36(fp)
    45d0:	e0bff617 	ldw	r2,-40(fp)
    45d4:	18800536 	bltu	r3,r2,45ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    45d8:	e0bff717 	ldw	r2,-36(fp)
    45dc:	e0fff617 	ldw	r3,-40(fp)
    45e0:	10c5c83a 	sub	r2,r2,r3
    45e4:	e0bff815 	stw	r2,-32(fp)
    45e8:	00000406 	br	45fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    45ec:	00820004 	movi	r2,2048
    45f0:	e0fff617 	ldw	r3,-40(fp)
    45f4:	10c5c83a 	sub	r2,r2,r3
    45f8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    45fc:	e0bff817 	ldw	r2,-32(fp)
    4600:	1005003a 	cmpeq	r2,r2,zero
    4604:	10001f1e 	bne	r2,zero,4684 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    4608:	e0fffd17 	ldw	r3,-12(fp)
    460c:	e0bff817 	ldw	r2,-32(fp)
    4610:	1880022e 	bgeu	r3,r2,461c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    4614:	e0bffd17 	ldw	r2,-12(fp)
    4618:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    461c:	e0bffb17 	ldw	r2,-20(fp)
    4620:	10c00e04 	addi	r3,r2,56
    4624:	e0bff617 	ldw	r2,-40(fp)
    4628:	1887883a 	add	r3,r3,r2
    462c:	e0bffa17 	ldw	r2,-24(fp)
    4630:	1009883a 	mov	r4,r2
    4634:	180b883a 	mov	r5,r3
    4638:	e1bff817 	ldw	r6,-32(fp)
    463c:	00061cc0 	call	61cc <memcpy>
      ptr   += n;
    4640:	e0fff817 	ldw	r3,-32(fp)
    4644:	e0bffa17 	ldw	r2,-24(fp)
    4648:	10c5883a 	add	r2,r2,r3
    464c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    4650:	e0fffd17 	ldw	r3,-12(fp)
    4654:	e0bff817 	ldw	r2,-32(fp)
    4658:	1885c83a 	sub	r2,r3,r2
    465c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4660:	e0fff617 	ldw	r3,-40(fp)
    4664:	e0bff817 	ldw	r2,-32(fp)
    4668:	1885883a 	add	r2,r3,r2
    466c:	10c1ffcc 	andi	r3,r2,2047
    4670:	e0bffb17 	ldw	r2,-20(fp)
    4674:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4678:	e0bffd17 	ldw	r2,-12(fp)
    467c:	10800048 	cmpgei	r2,r2,1
    4680:	103fcc1e 	bne	r2,zero,45b4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    4684:	e0fffa17 	ldw	r3,-24(fp)
    4688:	e0bffc17 	ldw	r2,-16(fp)
    468c:	1880141e 	bne	r3,r2,46e0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4690:	e0bffe17 	ldw	r2,-8(fp)
    4694:	1090000c 	andi	r2,r2,16384
    4698:	1004c03a 	cmpne	r2,r2,zero
    469c:	1000101e 	bne	r2,zero,46e0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    46a0:	e0bffb17 	ldw	r2,-20(fp)
    46a4:	10c00a17 	ldw	r3,40(r2)
    46a8:	e0bff717 	ldw	r2,-36(fp)
    46ac:	1880051e 	bne	r3,r2,46c4 <altera_avalon_jtag_uart_read+0x13c>
    46b0:	e0bffb17 	ldw	r2,-20(fp)
    46b4:	10c00917 	ldw	r3,36(r2)
    46b8:	e0bffb17 	ldw	r2,-20(fp)
    46bc:	10800117 	ldw	r2,4(r2)
    46c0:	18bff736 	bltu	r3,r2,46a0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    46c4:	e0bffb17 	ldw	r2,-20(fp)
    46c8:	10c00a17 	ldw	r3,40(r2)
    46cc:	e0bff717 	ldw	r2,-36(fp)
    46d0:	18800326 	beq	r3,r2,46e0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    46d4:	e0bffd17 	ldw	r2,-12(fp)
    46d8:	10800048 	cmpgei	r2,r2,1
    46dc:	103fb51e 	bne	r2,zero,45b4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    46e0:	e0fffa17 	ldw	r3,-24(fp)
    46e4:	e0bffc17 	ldw	r2,-16(fp)
    46e8:	18801926 	beq	r3,r2,4750 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46ec:	0005303a 	rdctl	r2,status
    46f0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46f4:	e0fff517 	ldw	r3,-44(fp)
    46f8:	00bfff84 	movi	r2,-2
    46fc:	1884703a 	and	r2,r3,r2
    4700:	1001703a 	wrctl	status,r2
  
  return context;
    4704:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4708:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    470c:	e0bffb17 	ldw	r2,-20(fp)
    4710:	10800817 	ldw	r2,32(r2)
    4714:	10c00054 	ori	r3,r2,1
    4718:	e0bffb17 	ldw	r2,-20(fp)
    471c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4720:	e0bffb17 	ldw	r2,-20(fp)
    4724:	10800017 	ldw	r2,0(r2)
    4728:	11000104 	addi	r4,r2,4
    472c:	e0bffb17 	ldw	r2,-20(fp)
    4730:	10800817 	ldw	r2,32(r2)
    4734:	1007883a 	mov	r3,r2
    4738:	2005883a 	mov	r2,r4
    473c:	10c00035 	stwio	r3,0(r2)
    4740:	e0bff917 	ldw	r2,-28(fp)
    4744:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4748:	e0bff417 	ldw	r2,-48(fp)
    474c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4750:	e0fffa17 	ldw	r3,-24(fp)
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	18800526 	beq	r3,r2,4770 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    475c:	e0fffa17 	ldw	r3,-24(fp)
    4760:	e0bffc17 	ldw	r2,-16(fp)
    4764:	1887c83a 	sub	r3,r3,r2
    4768:	e0ffff15 	stw	r3,-4(fp)
    476c:	00000906 	br	4794 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4770:	e0bffe17 	ldw	r2,-8(fp)
    4774:	1090000c 	andi	r2,r2,16384
    4778:	1005003a 	cmpeq	r2,r2,zero
    477c:	1000031e 	bne	r2,zero,478c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4780:	00bffd44 	movi	r2,-11
    4784:	e0bfff15 	stw	r2,-4(fp)
    4788:	00000206 	br	4794 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    478c:	00bffec4 	movi	r2,-5
    4790:	e0bfff15 	stw	r2,-4(fp)
    4794:	e0bfff17 	ldw	r2,-4(fp)
}
    4798:	e037883a 	mov	sp,fp
    479c:	dfc00117 	ldw	ra,4(sp)
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00204 	addi	sp,sp,8
    47a8:	f800283a 	ret

000047ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    47ac:	defff204 	addi	sp,sp,-56
    47b0:	dfc00d15 	stw	ra,52(sp)
    47b4:	df000c15 	stw	fp,48(sp)
    47b8:	df000c04 	addi	fp,sp,48
    47bc:	e13ffb15 	stw	r4,-20(fp)
    47c0:	e17ffc15 	stw	r5,-16(fp)
    47c4:	e1bffd15 	stw	r6,-12(fp)
    47c8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    47cc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    47d0:	e0bffc17 	ldw	r2,-16(fp)
    47d4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    47d8:	00003a06 	br	48c4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    47dc:	e0bffb17 	ldw	r2,-20(fp)
    47e0:	10800c17 	ldw	r2,48(r2)
    47e4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    47e8:	e0bffb17 	ldw	r2,-20(fp)
    47ec:	10800d17 	ldw	r2,52(r2)
    47f0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    47f4:	e0fffa17 	ldw	r3,-24(fp)
    47f8:	e0bff917 	ldw	r2,-28(fp)
    47fc:	1880062e 	bgeu	r3,r2,4818 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4800:	e0fff917 	ldw	r3,-28(fp)
    4804:	e0bffa17 	ldw	r2,-24(fp)
    4808:	1885c83a 	sub	r2,r3,r2
    480c:	10bfffc4 	addi	r2,r2,-1
    4810:	e0bff815 	stw	r2,-32(fp)
    4814:	00000c06 	br	4848 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    4818:	e0bff917 	ldw	r2,-28(fp)
    481c:	1005003a 	cmpeq	r2,r2,zero
    4820:	1000051e 	bne	r2,zero,4838 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4824:	00820004 	movi	r2,2048
    4828:	e0fffa17 	ldw	r3,-24(fp)
    482c:	10c5c83a 	sub	r2,r2,r3
    4830:	e0bff815 	stw	r2,-32(fp)
    4834:	00000406 	br	4848 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4838:	0081ffc4 	movi	r2,2047
    483c:	e0fffa17 	ldw	r3,-24(fp)
    4840:	10c5c83a 	sub	r2,r2,r3
    4844:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4848:	e0bff817 	ldw	r2,-32(fp)
    484c:	1005003a 	cmpeq	r2,r2,zero
    4850:	10001f1e 	bne	r2,zero,48d0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    4854:	e0fffd17 	ldw	r3,-12(fp)
    4858:	e0bff817 	ldw	r2,-32(fp)
    485c:	1880022e 	bgeu	r3,r2,4868 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    4860:	e0bffd17 	ldw	r2,-12(fp)
    4864:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4868:	e0bffb17 	ldw	r2,-20(fp)
    486c:	10c20e04 	addi	r3,r2,2104
    4870:	e0bffa17 	ldw	r2,-24(fp)
    4874:	1885883a 	add	r2,r3,r2
    4878:	e0fffc17 	ldw	r3,-16(fp)
    487c:	1009883a 	mov	r4,r2
    4880:	180b883a 	mov	r5,r3
    4884:	e1bff817 	ldw	r6,-32(fp)
    4888:	00061cc0 	call	61cc <memcpy>
      ptr   += n;
    488c:	e0fff817 	ldw	r3,-32(fp)
    4890:	e0bffc17 	ldw	r2,-16(fp)
    4894:	10c5883a 	add	r2,r2,r3
    4898:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    489c:	e0fffd17 	ldw	r3,-12(fp)
    48a0:	e0bff817 	ldw	r2,-32(fp)
    48a4:	1885c83a 	sub	r2,r3,r2
    48a8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    48ac:	e0fffa17 	ldw	r3,-24(fp)
    48b0:	e0bff817 	ldw	r2,-32(fp)
    48b4:	1885883a 	add	r2,r3,r2
    48b8:	10c1ffcc 	andi	r3,r2,2047
    48bc:	e0bffb17 	ldw	r2,-20(fp)
    48c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    48c4:	e0bffd17 	ldw	r2,-12(fp)
    48c8:	10800048 	cmpgei	r2,r2,1
    48cc:	103fc31e 	bne	r2,zero,47dc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48d0:	0005303a 	rdctl	r2,status
    48d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48d8:	e0fff517 	ldw	r3,-44(fp)
    48dc:	00bfff84 	movi	r2,-2
    48e0:	1884703a 	and	r2,r3,r2
    48e4:	1001703a 	wrctl	status,r2
  
  return context;
    48e8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    48ec:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    48f0:	e0bffb17 	ldw	r2,-20(fp)
    48f4:	10800817 	ldw	r2,32(r2)
    48f8:	10c00094 	ori	r3,r2,2
    48fc:	e0bffb17 	ldw	r2,-20(fp)
    4900:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4904:	e0bffb17 	ldw	r2,-20(fp)
    4908:	10800017 	ldw	r2,0(r2)
    490c:	11000104 	addi	r4,r2,4
    4910:	e0bffb17 	ldw	r2,-20(fp)
    4914:	10800817 	ldw	r2,32(r2)
    4918:	1007883a 	mov	r3,r2
    491c:	2005883a 	mov	r2,r4
    4920:	10c00035 	stwio	r3,0(r2)
    4924:	e0bff717 	ldw	r2,-36(fp)
    4928:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    492c:	e0bff417 	ldw	r2,-48(fp)
    4930:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4934:	e0bffd17 	ldw	r2,-12(fp)
    4938:	10800050 	cmplti	r2,r2,1
    493c:	1000111e 	bne	r2,zero,4984 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    4940:	e0bffe17 	ldw	r2,-8(fp)
    4944:	1090000c 	andi	r2,r2,16384
    4948:	1004c03a 	cmpne	r2,r2,zero
    494c:	1000101e 	bne	r2,zero,4990 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4950:	e0bffb17 	ldw	r2,-20(fp)
    4954:	10c00d17 	ldw	r3,52(r2)
    4958:	e0bff917 	ldw	r2,-28(fp)
    495c:	1880051e 	bne	r3,r2,4974 <altera_avalon_jtag_uart_write+0x1c8>
    4960:	e0bffb17 	ldw	r2,-20(fp)
    4964:	10c00917 	ldw	r3,36(r2)
    4968:	e0bffb17 	ldw	r2,-20(fp)
    496c:	10800117 	ldw	r2,4(r2)
    4970:	18bff736 	bltu	r3,r2,4950 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    4974:	e0bffb17 	ldw	r2,-20(fp)
    4978:	10c00d17 	ldw	r3,52(r2)
    497c:	e0bff917 	ldw	r2,-28(fp)
    4980:	18800326 	beq	r3,r2,4990 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    4984:	e0bffd17 	ldw	r2,-12(fp)
    4988:	10800048 	cmpgei	r2,r2,1
    498c:	103fcd1e 	bne	r2,zero,48c4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4990:	e0fffc17 	ldw	r3,-16(fp)
    4994:	e0bff617 	ldw	r2,-40(fp)
    4998:	18800526 	beq	r3,r2,49b0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    499c:	e0fffc17 	ldw	r3,-16(fp)
    49a0:	e0bff617 	ldw	r2,-40(fp)
    49a4:	1887c83a 	sub	r3,r3,r2
    49a8:	e0ffff15 	stw	r3,-4(fp)
    49ac:	00000906 	br	49d4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    49b0:	e0bffe17 	ldw	r2,-8(fp)
    49b4:	1090000c 	andi	r2,r2,16384
    49b8:	1005003a 	cmpeq	r2,r2,zero
    49bc:	1000031e 	bne	r2,zero,49cc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    49c0:	00bffd44 	movi	r2,-11
    49c4:	e0bfff15 	stw	r2,-4(fp)
    49c8:	00000206 	br	49d4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    49cc:	00bffec4 	movi	r2,-5
    49d0:	e0bfff15 	stw	r2,-4(fp)
    49d4:	e0bfff17 	ldw	r2,-4(fp)
}
    49d8:	e037883a 	mov	sp,fp
    49dc:	dfc00117 	ldw	ra,4(sp)
    49e0:	df000017 	ldw	fp,0(sp)
    49e4:	dec00204 	addi	sp,sp,8
    49e8:	f800283a 	ret

000049ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    49ec:	defffa04 	addi	sp,sp,-24
    49f0:	dfc00515 	stw	ra,20(sp)
    49f4:	df000415 	stw	fp,16(sp)
    49f8:	df000404 	addi	fp,sp,16
    49fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4a00:	e0bfff17 	ldw	r2,-4(fp)
    4a04:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4a08:	e0bfff17 	ldw	r2,-4(fp)
    4a0c:	10800104 	addi	r2,r2,4
    4a10:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a14:	0005303a 	rdctl	r2,status
    4a18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a1c:	e0fffd17 	ldw	r3,-12(fp)
    4a20:	00bfff84 	movi	r2,-2
    4a24:	1884703a 	and	r2,r3,r2
    4a28:	1001703a 	wrctl	status,r2
  
  return context;
    4a2c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4a30:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    4a34:	0005d780 	call	5d78 <alt_tick>
    4a38:	e0bffe17 	ldw	r2,-8(fp)
    4a3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a40:	e0bffc17 	ldw	r2,-16(fp)
    4a44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4a48:	e037883a 	mov	sp,fp
    4a4c:	dfc00117 	ldw	ra,4(sp)
    4a50:	df000017 	ldw	fp,0(sp)
    4a54:	dec00204 	addi	sp,sp,8
    4a58:	f800283a 	ret

00004a5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4a5c:	defff804 	addi	sp,sp,-32
    4a60:	dfc00715 	stw	ra,28(sp)
    4a64:	df000615 	stw	fp,24(sp)
    4a68:	df000604 	addi	fp,sp,24
    4a6c:	e13ffc15 	stw	r4,-16(fp)
    4a70:	e17ffd15 	stw	r5,-12(fp)
    4a74:	e1bffe15 	stw	r6,-8(fp)
    4a78:	e1ffff15 	stw	r7,-4(fp)
    4a7c:	e0bfff17 	ldw	r2,-4(fp)
    4a80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4a84:	00800074 	movhi	r2,1
    4a88:	10b0af04 	addi	r2,r2,-15684
    4a8c:	10800017 	ldw	r2,0(r2)
    4a90:	1004c03a 	cmpne	r2,r2,zero
    4a94:	1000041e 	bne	r2,zero,4aa8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4a98:	00c00074 	movhi	r3,1
    4a9c:	18f0af04 	addi	r3,r3,-15684
    4aa0:	e0bffb17 	ldw	r2,-20(fp)
    4aa4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4aa8:	e0bffc17 	ldw	r2,-16(fp)
    4aac:	10800104 	addi	r2,r2,4
    4ab0:	1007883a 	mov	r3,r2
    4ab4:	008001c4 	movi	r2,7
    4ab8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4abc:	d8000015 	stw	zero,0(sp)
    4ac0:	e13ffd17 	ldw	r4,-12(fp)
    4ac4:	e17ffe17 	ldw	r5,-8(fp)
    4ac8:	01800034 	movhi	r6,0
    4acc:	31927b04 	addi	r6,r6,18924
    4ad0:	e1fffc17 	ldw	r7,-16(fp)
    4ad4:	00055b40 	call	55b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4ad8:	e037883a 	mov	sp,fp
    4adc:	dfc00117 	ldw	ra,4(sp)
    4ae0:	df000017 	ldw	fp,0(sp)
    4ae4:	dec00204 	addi	sp,sp,8
    4ae8:	f800283a 	ret

00004aec <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    4aec:	defffc04 	addi	sp,sp,-16
    4af0:	df000315 	stw	fp,12(sp)
    4af4:	df000304 	addi	fp,sp,12
    4af8:	e13ffe15 	stw	r4,-8(fp)
    4afc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    4b00:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    4b04:	e0bfff17 	ldw	r2,-4(fp)
    4b08:	1004c03a 	cmpne	r2,r2,zero
    4b0c:	1000061e 	bne	r2,zero,4b28 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    4b10:	e0bffe17 	ldw	r2,-8(fp)
    4b14:	1007883a 	mov	r3,r2
    4b18:	e0bffd03 	ldbu	r2,-12(fp)
    4b1c:	10c4b03a 	or	r2,r2,r3
    4b20:	e0bffd05 	stb	r2,-12(fp)
    4b24:	00000806 	br	4b48 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    4b28:	e0bffe17 	ldw	r2,-8(fp)
    4b2c:	1007883a 	mov	r3,r2
    4b30:	e0bffd03 	ldbu	r2,-12(fp)
    4b34:	10c4b03a 	or	r2,r2,r3
    4b38:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    4b3c:	e0bffd03 	ldbu	r2,-12(fp)
    4b40:	10801014 	ori	r2,r2,64
    4b44:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    4b48:	e0fffd03 	ldbu	r3,-12(fp)
    4b4c:	00bfe004 	movi	r2,-128
    4b50:	1884b03a 	or	r2,r3,r2
    4b54:	10803fcc 	andi	r2,r2,255
}
    4b58:	e037883a 	mov	sp,fp
    4b5c:	df000017 	ldw	fp,0(sp)
    4b60:	dec00104 	addi	sp,sp,4
    4b64:	f800283a 	ret

00004b68 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    4b68:	defffd04 	addi	sp,sp,-12
    4b6c:	df000215 	stw	fp,8(sp)
    4b70:	df000204 	addi	fp,sp,8
    4b74:	e13ffe15 	stw	r4,-8(fp)
    4b78:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4b7c:	e0bffe17 	ldw	r2,-8(fp)
    4b80:	10800a17 	ldw	r2,40(r2)
    4b84:	e0ffff03 	ldbu	r3,-4(fp)
    4b88:	10c00025 	stbio	r3,0(r2)
}
    4b8c:	e037883a 	mov	sp,fp
    4b90:	df000017 	ldw	fp,0(sp)
    4b94:	dec00104 	addi	sp,sp,4
    4b98:	f800283a 	ret

00004b9c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    4b9c:	defffe04 	addi	sp,sp,-8
    4ba0:	df000115 	stw	fp,4(sp)
    4ba4:	df000104 	addi	fp,sp,4
    4ba8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4bac:	e0bfff17 	ldw	r2,-4(fp)
    4bb0:	10800a17 	ldw	r2,40(r2)
    4bb4:	1007883a 	mov	r3,r2
    4bb8:	00800044 	movi	r2,1
    4bbc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4bc0:	e037883a 	mov	sp,fp
    4bc4:	df000017 	ldw	fp,0(sp)
    4bc8:	dec00104 	addi	sp,sp,4
    4bcc:	f800283a 	ret

00004bd0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    4bd0:	defffc04 	addi	sp,sp,-16
    4bd4:	dfc00315 	stw	ra,12(sp)
    4bd8:	df000215 	stw	fp,8(sp)
    4bdc:	df000204 	addi	fp,sp,8
    4be0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    4be4:	e13fff17 	ldw	r4,-4(fp)
    4be8:	01400074 	movhi	r5,1
    4bec:	296a0304 	addi	r5,r5,-22516
    4bf0:	00054f00 	call	54f0 <alt_find_dev>
    4bf4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4bf8:	e0bffe17 	ldw	r2,-8(fp)
}
    4bfc:	e037883a 	mov	sp,fp
    4c00:	dfc00117 	ldw	ra,4(sp)
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00204 	addi	sp,sp,8
    4c0c:	f800283a 	ret

00004c10 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    4c10:	defffb04 	addi	sp,sp,-20
    4c14:	df000415 	stw	fp,16(sp)
    4c18:	df000404 	addi	fp,sp,16
    4c1c:	e13ffd15 	stw	r4,-12(fp)
    4c20:	e17ffe15 	stw	r5,-8(fp)
    4c24:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    4c28:	e03ffc15 	stw	zero,-16(fp)
    4c2c:	00000f06 	br	4c6c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    4c30:	e0bffd17 	ldw	r2,-12(fp)
    4c34:	10800a17 	ldw	r2,40(r2)
    4c38:	11000044 	addi	r4,r2,1
    4c3c:	e0fffc17 	ldw	r3,-16(fp)
    4c40:	e0bffe17 	ldw	r2,-8(fp)
    4c44:	1885883a 	add	r2,r3,r2
    4c48:	10800003 	ldbu	r2,0(r2)
    4c4c:	10c03fcc 	andi	r3,r2,255
    4c50:	18c0201c 	xori	r3,r3,128
    4c54:	18ffe004 	addi	r3,r3,-128
    4c58:	2005883a 	mov	r2,r4
    4c5c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4c60:	e0bffc17 	ldw	r2,-16(fp)
    4c64:	10800044 	addi	r2,r2,1
    4c68:	e0bffc15 	stw	r2,-16(fp)
    4c6c:	e0fffc17 	ldw	r3,-16(fp)
    4c70:	e0bfff17 	ldw	r2,-4(fp)
    4c74:	18bfee36 	bltu	r3,r2,4c30 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    4c78:	e037883a 	mov	sp,fp
    4c7c:	df000017 	ldw	fp,0(sp)
    4c80:	dec00104 	addi	sp,sp,4
    4c84:	f800283a 	ret

00004c88 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    4c88:	defffd04 	addi	sp,sp,-12
    4c8c:	df000215 	stw	fp,8(sp)
    4c90:	df000204 	addi	fp,sp,8
    4c94:	e13ffe15 	stw	r4,-8(fp)
    4c98:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    4c9c:	00000d06 	br	4cd4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    4ca0:	e0bffe17 	ldw	r2,-8(fp)
    4ca4:	10800a17 	ldw	r2,40(r2)
    4ca8:	11000044 	addi	r4,r2,1
    4cac:	e0bfff17 	ldw	r2,-4(fp)
    4cb0:	10800003 	ldbu	r2,0(r2)
    4cb4:	10c03fcc 	andi	r3,r2,255
    4cb8:	18c0201c 	xori	r3,r3,128
    4cbc:	18ffe004 	addi	r3,r3,-128
    4cc0:	2005883a 	mov	r2,r4
    4cc4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    4cc8:	e0bfff17 	ldw	r2,-4(fp)
    4ccc:	10800044 	addi	r2,r2,1
    4cd0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    4cd4:	e0bfff17 	ldw	r2,-4(fp)
    4cd8:	10800003 	ldbu	r2,0(r2)
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	1080201c 	xori	r2,r2,128
    4ce4:	10bfe004 	addi	r2,r2,-128
    4ce8:	1004c03a 	cmpne	r2,r2,zero
    4cec:	103fec1e 	bne	r2,zero,4ca0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    4cf0:	e037883a 	mov	sp,fp
    4cf4:	df000017 	ldw	fp,0(sp)
    4cf8:	dec00104 	addi	sp,sp,4
    4cfc:	f800283a 	ret

00004d00 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    4d00:	defffb04 	addi	sp,sp,-20
    4d04:	dfc00415 	stw	ra,16(sp)
    4d08:	df000315 	stw	fp,12(sp)
    4d0c:	df000304 	addi	fp,sp,12
    4d10:	e13ffd15 	stw	r4,-12(fp)
    4d14:	e17ffe15 	stw	r5,-8(fp)
    4d18:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4d1c:	e0bffd17 	ldw	r2,-12(fp)
    4d20:	10800017 	ldw	r2,0(r2)
    4d24:	1009883a 	mov	r4,r2
    4d28:	e1bfff17 	ldw	r6,-4(fp)
    4d2c:	e17ffe17 	ldw	r5,-8(fp)
    4d30:	0004c100 	call	4c10 <alt_up_character_lcd_write>
	return 0;
    4d34:	0005883a 	mov	r2,zero
}
    4d38:	e037883a 	mov	sp,fp
    4d3c:	dfc00117 	ldw	ra,4(sp)
    4d40:	df000017 	ldw	fp,0(sp)
    4d44:	dec00204 	addi	sp,sp,8
    4d48:	f800283a 	ret

00004d4c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4d4c:	defff904 	addi	sp,sp,-28
    4d50:	dfc00615 	stw	ra,24(sp)
    4d54:	df000515 	stw	fp,20(sp)
    4d58:	df000504 	addi	fp,sp,20
    4d5c:	e13ffc15 	stw	r4,-16(fp)
    4d60:	e17ffd15 	stw	r5,-12(fp)
    4d64:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4d68:	e0bffd17 	ldw	r2,-12(fp)
    4d6c:	10800a28 	cmpgeui	r2,r2,40
    4d70:	1000031e 	bne	r2,zero,4d80 <alt_up_character_lcd_set_cursor_pos+0x34>
    4d74:	e0bffe17 	ldw	r2,-8(fp)
    4d78:	108000b0 	cmpltui	r2,r2,2
    4d7c:	1000031e 	bne	r2,zero,4d8c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    4d80:	00bfffc4 	movi	r2,-1
    4d84:	e0bfff15 	stw	r2,-4(fp)
    4d88:	00000806 	br	4dac <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4d8c:	e13ffd17 	ldw	r4,-12(fp)
    4d90:	e17ffe17 	ldw	r5,-8(fp)
    4d94:	0004aec0 	call	4aec <get_DDRAM_addr>
    4d98:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    4d9c:	e17ffb03 	ldbu	r5,-20(fp)
    4da0:	e13ffc17 	ldw	r4,-16(fp)
    4da4:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
	return 0;
    4da8:	e03fff15 	stw	zero,-4(fp)
    4dac:	e0bfff17 	ldw	r2,-4(fp)
}
    4db0:	e037883a 	mov	sp,fp
    4db4:	dfc00117 	ldw	ra,4(sp)
    4db8:	df000017 	ldw	fp,0(sp)
    4dbc:	dec00204 	addi	sp,sp,8
    4dc0:	f800283a 	ret

00004dc4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4dc4:	defff904 	addi	sp,sp,-28
    4dc8:	dfc00615 	stw	ra,24(sp)
    4dcc:	df000515 	stw	fp,20(sp)
    4dd0:	df000504 	addi	fp,sp,20
    4dd4:	e13ffc15 	stw	r4,-16(fp)
    4dd8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4ddc:	e0bffd17 	ldw	r2,-12(fp)
    4de0:	1005003a 	cmpeq	r2,r2,zero
    4de4:	10001e1e 	bne	r2,zero,4e60 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    4de8:	e0bffd17 	ldw	r2,-12(fp)
    4dec:	10800050 	cmplti	r2,r2,1
    4df0:	1000031e 	bne	r2,zero,4e00 <alt_up_character_lcd_shift_cursor+0x3c>
    4df4:	00800504 	movi	r2,20
    4df8:	e0bfff05 	stb	r2,-4(fp)
    4dfc:	00000206 	br	4e08 <alt_up_character_lcd_shift_cursor+0x44>
    4e00:	00c00404 	movi	r3,16
    4e04:	e0ffff05 	stb	r3,-4(fp)
    4e08:	e0bfff03 	ldbu	r2,-4(fp)
    4e0c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4e10:	e0fffd17 	ldw	r3,-12(fp)
    4e14:	e0fffe15 	stw	r3,-8(fp)
    4e18:	e0fffe17 	ldw	r3,-8(fp)
    4e1c:	1804403a 	cmpge	r2,r3,zero
    4e20:	1000031e 	bne	r2,zero,4e30 <alt_up_character_lcd_shift_cursor+0x6c>
    4e24:	e0bffe17 	ldw	r2,-8(fp)
    4e28:	0085c83a 	sub	r2,zero,r2
    4e2c:	e0bffe15 	stw	r2,-8(fp)
    4e30:	e0fffe17 	ldw	r3,-8(fp)
    4e34:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4e38:	00000306 	br	4e48 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4e3c:	e17ffb43 	ldbu	r5,-19(fp)
    4e40:	e13ffc17 	ldw	r4,-16(fp)
    4e44:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4e48:	e0bffb03 	ldbu	r2,-20(fp)
    4e4c:	10bfffc4 	addi	r2,r2,-1
    4e50:	e0bffb05 	stb	r2,-20(fp)
    4e54:	e0bffb03 	ldbu	r2,-20(fp)
    4e58:	10803fd8 	cmpnei	r2,r2,255
    4e5c:	103ff71e 	bne	r2,zero,4e3c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4e60:	e037883a 	mov	sp,fp
    4e64:	dfc00117 	ldw	ra,4(sp)
    4e68:	df000017 	ldw	fp,0(sp)
    4e6c:	dec00204 	addi	sp,sp,8
    4e70:	f800283a 	ret

00004e74 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4e74:	defff904 	addi	sp,sp,-28
    4e78:	dfc00615 	stw	ra,24(sp)
    4e7c:	df000515 	stw	fp,20(sp)
    4e80:	df000504 	addi	fp,sp,20
    4e84:	e13ffc15 	stw	r4,-16(fp)
    4e88:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4e8c:	e0bffd17 	ldw	r2,-12(fp)
    4e90:	1005003a 	cmpeq	r2,r2,zero
    4e94:	10001e1e 	bne	r2,zero,4f10 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    4e98:	e0bffd17 	ldw	r2,-12(fp)
    4e9c:	10800050 	cmplti	r2,r2,1
    4ea0:	1000031e 	bne	r2,zero,4eb0 <alt_up_character_lcd_shift_display+0x3c>
    4ea4:	00800704 	movi	r2,28
    4ea8:	e0bfff05 	stb	r2,-4(fp)
    4eac:	00000206 	br	4eb8 <alt_up_character_lcd_shift_display+0x44>
    4eb0:	00c00604 	movi	r3,24
    4eb4:	e0ffff05 	stb	r3,-4(fp)
    4eb8:	e0bfff03 	ldbu	r2,-4(fp)
    4ebc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4ec0:	e0fffd17 	ldw	r3,-12(fp)
    4ec4:	e0fffe15 	stw	r3,-8(fp)
    4ec8:	e0fffe17 	ldw	r3,-8(fp)
    4ecc:	1804403a 	cmpge	r2,r3,zero
    4ed0:	1000031e 	bne	r2,zero,4ee0 <alt_up_character_lcd_shift_display+0x6c>
    4ed4:	e0bffe17 	ldw	r2,-8(fp)
    4ed8:	0085c83a 	sub	r2,zero,r2
    4edc:	e0bffe15 	stw	r2,-8(fp)
    4ee0:	e0fffe17 	ldw	r3,-8(fp)
    4ee4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4ee8:	00000306 	br	4ef8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4eec:	e17ffb43 	ldbu	r5,-19(fp)
    4ef0:	e13ffc17 	ldw	r4,-16(fp)
    4ef4:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4ef8:	e0bffb03 	ldbu	r2,-20(fp)
    4efc:	10bfffc4 	addi	r2,r2,-1
    4f00:	e0bffb05 	stb	r2,-20(fp)
    4f04:	e0bffb03 	ldbu	r2,-20(fp)
    4f08:	10803fd8 	cmpnei	r2,r2,255
    4f0c:	103ff71e 	bne	r2,zero,4eec <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4f10:	e037883a 	mov	sp,fp
    4f14:	dfc00117 	ldw	ra,4(sp)
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00204 	addi	sp,sp,8
    4f20:	f800283a 	ret

00004f24 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4f24:	defff904 	addi	sp,sp,-28
    4f28:	dfc00615 	stw	ra,24(sp)
    4f2c:	df000515 	stw	fp,20(sp)
    4f30:	df000504 	addi	fp,sp,20
    4f34:	e13ffc15 	stw	r4,-16(fp)
    4f38:	e17ffd15 	stw	r5,-12(fp)
    4f3c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4f40:	e0bffd17 	ldw	r2,-12(fp)
    4f44:	10800a28 	cmpgeui	r2,r2,40
    4f48:	1000031e 	bne	r2,zero,4f58 <alt_up_character_lcd_erase_pos+0x34>
    4f4c:	e0bffe17 	ldw	r2,-8(fp)
    4f50:	108000b0 	cmpltui	r2,r2,2
    4f54:	1000031e 	bne	r2,zero,4f64 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    4f58:	00bfffc4 	movi	r2,-1
    4f5c:	e0bfff15 	stw	r2,-4(fp)
    4f60:	00000e06 	br	4f9c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4f64:	e13ffd17 	ldw	r4,-12(fp)
    4f68:	e17ffe17 	ldw	r5,-8(fp)
    4f6c:	0004aec0 	call	4aec <get_DDRAM_addr>
    4f70:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    4f74:	e17ffb03 	ldbu	r5,-20(fp)
    4f78:	e13ffc17 	ldw	r4,-16(fp)
    4f7c:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4f80:	e0bffc17 	ldw	r2,-16(fp)
    4f84:	10800a17 	ldw	r2,40(r2)
    4f88:	10800044 	addi	r2,r2,1
    4f8c:	1007883a 	mov	r3,r2
    4f90:	00800084 	movi	r2,2
    4f94:	18800025 	stbio	r2,0(r3)
	return 0;
    4f98:	e03fff15 	stw	zero,-4(fp)
    4f9c:	e0bfff17 	ldw	r2,-4(fp)
}
    4fa0:	e037883a 	mov	sp,fp
    4fa4:	dfc00117 	ldw	ra,4(sp)
    4fa8:	df000017 	ldw	fp,0(sp)
    4fac:	dec00204 	addi	sp,sp,8
    4fb0:	f800283a 	ret

00004fb4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    4fb4:	defffd04 	addi	sp,sp,-12
    4fb8:	dfc00215 	stw	ra,8(sp)
    4fbc:	df000115 	stw	fp,4(sp)
    4fc0:	df000104 	addi	fp,sp,4
    4fc4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4fc8:	e13fff17 	ldw	r4,-4(fp)
    4fcc:	01400304 	movi	r5,12
    4fd0:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
}
    4fd4:	e037883a 	mov	sp,fp
    4fd8:	dfc00117 	ldw	ra,4(sp)
    4fdc:	df000017 	ldw	fp,0(sp)
    4fe0:	dec00204 	addi	sp,sp,8
    4fe4:	f800283a 	ret

00004fe8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    4fe8:	defffd04 	addi	sp,sp,-12
    4fec:	dfc00215 	stw	ra,8(sp)
    4ff0:	df000115 	stw	fp,4(sp)
    4ff4:	df000104 	addi	fp,sp,4
    4ff8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4ffc:	e13fff17 	ldw	r4,-4(fp)
    5000:	014003c4 	movi	r5,15
    5004:	0004b680 	call	4b68 <alt_up_character_lcd_send_cmd>
}
    5008:	e037883a 	mov	sp,fp
    500c:	dfc00117 	ldw	ra,4(sp)
    5010:	df000017 	ldw	fp,0(sp)
    5014:	dec00204 	addi	sp,sp,8
    5018:	f800283a 	ret

0000501c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    501c:	defff404 	addi	sp,sp,-48
    5020:	df000b15 	stw	fp,44(sp)
    5024:	df000b04 	addi	fp,sp,44
    5028:	e13ffb15 	stw	r4,-20(fp)
    502c:	e17ffc15 	stw	r5,-16(fp)
    5030:	e1bffd15 	stw	r6,-12(fp)
    5034:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    5038:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    503c:	00800074 	movhi	r2,1
    5040:	10b0af04 	addi	r2,r2,-15684
    5044:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    5048:	1005003a 	cmpeq	r2,r2,zero
    504c:	1000411e 	bne	r2,zero,5154 <alt_alarm_start+0x138>
  {
    if (alarm)
    5050:	e0bffb17 	ldw	r2,-20(fp)
    5054:	1005003a 	cmpeq	r2,r2,zero
    5058:	10003b1e 	bne	r2,zero,5148 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    505c:	e0fffb17 	ldw	r3,-20(fp)
    5060:	e0bffd17 	ldw	r2,-12(fp)
    5064:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    5068:	e0fffb17 	ldw	r3,-20(fp)
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5074:	0005303a 	rdctl	r2,status
    5078:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    507c:	e0fff817 	ldw	r3,-32(fp)
    5080:	00bfff84 	movi	r2,-2
    5084:	1884703a 	and	r2,r3,r2
    5088:	1001703a 	wrctl	status,r2
  
  return context;
    508c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    5090:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5094:	00800074 	movhi	r2,1
    5098:	10b0b004 	addi	r2,r2,-15680
    509c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    50a0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    50a4:	e0fffc17 	ldw	r3,-16(fp)
    50a8:	e0bff917 	ldw	r2,-28(fp)
    50ac:	1885883a 	add	r2,r3,r2
    50b0:	10c00044 	addi	r3,r2,1
    50b4:	e0bffb17 	ldw	r2,-20(fp)
    50b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    50bc:	e0bffb17 	ldw	r2,-20(fp)
    50c0:	10c00217 	ldw	r3,8(r2)
    50c4:	e0bff917 	ldw	r2,-28(fp)
    50c8:	1880042e 	bgeu	r3,r2,50dc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    50cc:	e0fffb17 	ldw	r3,-20(fp)
    50d0:	00800044 	movi	r2,1
    50d4:	18800405 	stb	r2,16(r3)
    50d8:	00000206 	br	50e4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    50dc:	e0bffb17 	ldw	r2,-20(fp)
    50e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    50e4:	e0fffb17 	ldw	r3,-20(fp)
    50e8:	00800074 	movhi	r2,1
    50ec:	10aa0804 	addi	r2,r2,-22496
    50f0:	e0bff615 	stw	r2,-40(fp)
    50f4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    50f8:	e0fff717 	ldw	r3,-36(fp)
    50fc:	e0bff617 	ldw	r2,-40(fp)
    5100:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5104:	e0bff617 	ldw	r2,-40(fp)
    5108:	10c00017 	ldw	r3,0(r2)
    510c:	e0bff717 	ldw	r2,-36(fp)
    5110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5114:	e0bff617 	ldw	r2,-40(fp)
    5118:	10c00017 	ldw	r3,0(r2)
    511c:	e0bff717 	ldw	r2,-36(fp)
    5120:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5124:	e0fff617 	ldw	r3,-40(fp)
    5128:	e0bff717 	ldw	r2,-36(fp)
    512c:	18800015 	stw	r2,0(r3)
    5130:	e0bffa17 	ldw	r2,-24(fp)
    5134:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5138:	e0bff517 	ldw	r2,-44(fp)
    513c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5140:	e03fff15 	stw	zero,-4(fp)
    5144:	00000506 	br	515c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    5148:	00bffa84 	movi	r2,-22
    514c:	e0bfff15 	stw	r2,-4(fp)
    5150:	00000206 	br	515c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    5154:	00bfde84 	movi	r2,-134
    5158:	e0bfff15 	stw	r2,-4(fp)
    515c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    5160:	e037883a 	mov	sp,fp
    5164:	df000017 	ldw	fp,0(sp)
    5168:	dec00104 	addi	sp,sp,4
    516c:	f800283a 	ret

00005170 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5170:	defff804 	addi	sp,sp,-32
    5174:	dfc00715 	stw	ra,28(sp)
    5178:	df000615 	stw	fp,24(sp)
    517c:	df000604 	addi	fp,sp,24
    5180:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	1004803a 	cmplt	r2,r2,zero
    518c:	1000081e 	bne	r2,zero,51b0 <close+0x40>
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10800324 	muli	r2,r2,12
    5198:	1007883a 	mov	r3,r2
    519c:	00800074 	movhi	r2,1
    51a0:	10a89c04 	addi	r2,r2,-23952
    51a4:	1887883a 	add	r3,r3,r2
    51a8:	e0ffff15 	stw	r3,-4(fp)
    51ac:	00000106 	br	51b4 <close+0x44>
    51b0:	e03fff15 	stw	zero,-4(fp)
    51b4:	e0bfff17 	ldw	r2,-4(fp)
    51b8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    51bc:	e0bffb17 	ldw	r2,-20(fp)
    51c0:	1005003a 	cmpeq	r2,r2,zero
    51c4:	10001d1e 	bne	r2,zero,523c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    51c8:	e0bffb17 	ldw	r2,-20(fp)
    51cc:	10800017 	ldw	r2,0(r2)
    51d0:	10800417 	ldw	r2,16(r2)
    51d4:	1005003a 	cmpeq	r2,r2,zero
    51d8:	1000071e 	bne	r2,zero,51f8 <close+0x88>
    51dc:	e0bffb17 	ldw	r2,-20(fp)
    51e0:	10800017 	ldw	r2,0(r2)
    51e4:	10800417 	ldw	r2,16(r2)
    51e8:	e13ffb17 	ldw	r4,-20(fp)
    51ec:	103ee83a 	callr	r2
    51f0:	e0bffe15 	stw	r2,-8(fp)
    51f4:	00000106 	br	51fc <close+0x8c>
    51f8:	e03ffe15 	stw	zero,-8(fp)
    51fc:	e0bffe17 	ldw	r2,-8(fp)
    5200:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5204:	e13ffc17 	ldw	r4,-16(fp)
    5208:	0005c800 	call	5c80 <alt_release_fd>
    if (rval < 0)
    520c:	e0bffa17 	ldw	r2,-24(fp)
    5210:	1004403a 	cmpge	r2,r2,zero
    5214:	1000071e 	bne	r2,zero,5234 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    5218:	000526c0 	call	526c <alt_get_errno>
    521c:	e0fffa17 	ldw	r3,-24(fp)
    5220:	00c7c83a 	sub	r3,zero,r3
    5224:	10c00015 	stw	r3,0(r2)
      return -1;
    5228:	00bfffc4 	movi	r2,-1
    522c:	e0bffd15 	stw	r2,-12(fp)
    5230:	00000806 	br	5254 <close+0xe4>
    }
    return 0;
    5234:	e03ffd15 	stw	zero,-12(fp)
    5238:	00000606 	br	5254 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    523c:	000526c0 	call	526c <alt_get_errno>
    5240:	1007883a 	mov	r3,r2
    5244:	00801444 	movi	r2,81
    5248:	18800015 	stw	r2,0(r3)
    return -1;
    524c:	00bfffc4 	movi	r2,-1
    5250:	e0bffd15 	stw	r2,-12(fp)
    5254:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    5258:	e037883a 	mov	sp,fp
    525c:	dfc00117 	ldw	ra,4(sp)
    5260:	df000017 	ldw	fp,0(sp)
    5264:	dec00204 	addi	sp,sp,8
    5268:	f800283a 	ret

0000526c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    526c:	defffd04 	addi	sp,sp,-12
    5270:	dfc00215 	stw	ra,8(sp)
    5274:	df000115 	stw	fp,4(sp)
    5278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    527c:	00800074 	movhi	r2,1
    5280:	10aa0604 	addi	r2,r2,-22504
    5284:	10800017 	ldw	r2,0(r2)
    5288:	1005003a 	cmpeq	r2,r2,zero
    528c:	1000061e 	bne	r2,zero,52a8 <alt_get_errno+0x3c>
    5290:	00800074 	movhi	r2,1
    5294:	10aa0604 	addi	r2,r2,-22504
    5298:	10800017 	ldw	r2,0(r2)
    529c:	103ee83a 	callr	r2
    52a0:	e0bfff15 	stw	r2,-4(fp)
    52a4:	00000306 	br	52b4 <alt_get_errno+0x48>
    52a8:	00800074 	movhi	r2,1
    52ac:	10b0b104 	addi	r2,r2,-15676
    52b0:	e0bfff15 	stw	r2,-4(fp)
    52b4:	e0bfff17 	ldw	r2,-4(fp)
}
    52b8:	e037883a 	mov	sp,fp
    52bc:	dfc00117 	ldw	ra,4(sp)
    52c0:	df000017 	ldw	fp,0(sp)
    52c4:	dec00204 	addi	sp,sp,8
    52c8:	f800283a 	ret

000052cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    52cc:	deffff04 	addi	sp,sp,-4
    52d0:	df000015 	stw	fp,0(sp)
    52d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    52d8:	e037883a 	mov	sp,fp
    52dc:	df000017 	ldw	fp,0(sp)
    52e0:	dec00104 	addi	sp,sp,4
    52e4:	f800283a 	ret

000052e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    52e8:	defffc04 	addi	sp,sp,-16
    52ec:	df000315 	stw	fp,12(sp)
    52f0:	df000304 	addi	fp,sp,12
    52f4:	e13ffd15 	stw	r4,-12(fp)
    52f8:	e17ffe15 	stw	r5,-8(fp)
    52fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5300:	e0bfff17 	ldw	r2,-4(fp)
}
    5304:	e037883a 	mov	sp,fp
    5308:	df000017 	ldw	fp,0(sp)
    530c:	dec00104 	addi	sp,sp,4
    5310:	f800283a 	ret

00005314 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5314:	defff904 	addi	sp,sp,-28
    5318:	dfc00615 	stw	ra,24(sp)
    531c:	df000515 	stw	fp,20(sp)
    5320:	df000504 	addi	fp,sp,20
    5324:	e13ffd15 	stw	r4,-12(fp)
    5328:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    532c:	e0bffd17 	ldw	r2,-12(fp)
    5330:	1005003a 	cmpeq	r2,r2,zero
    5334:	1000041e 	bne	r2,zero,5348 <alt_dev_llist_insert+0x34>
    5338:	e0bffd17 	ldw	r2,-12(fp)
    533c:	10800217 	ldw	r2,8(r2)
    5340:	1004c03a 	cmpne	r2,r2,zero
    5344:	1000071e 	bne	r2,zero,5364 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    5348:	00053c80 	call	53c8 <alt_get_errno>
    534c:	1007883a 	mov	r3,r2
    5350:	00800584 	movi	r2,22
    5354:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5358:	00bffa84 	movi	r2,-22
    535c:	e0bfff15 	stw	r2,-4(fp)
    5360:	00001306 	br	53b0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5364:	e0fffd17 	ldw	r3,-12(fp)
    5368:	e0bffe17 	ldw	r2,-8(fp)
    536c:	e0bffb15 	stw	r2,-20(fp)
    5370:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5374:	e0fffc17 	ldw	r3,-16(fp)
    5378:	e0bffb17 	ldw	r2,-20(fp)
    537c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5380:	e0bffb17 	ldw	r2,-20(fp)
    5384:	10c00017 	ldw	r3,0(r2)
    5388:	e0bffc17 	ldw	r2,-16(fp)
    538c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5390:	e0bffb17 	ldw	r2,-20(fp)
    5394:	10c00017 	ldw	r3,0(r2)
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    53a0:	e0fffb17 	ldw	r3,-20(fp)
    53a4:	e0bffc17 	ldw	r2,-16(fp)
    53a8:	18800015 	stw	r2,0(r3)

  return 0;  
    53ac:	e03fff15 	stw	zero,-4(fp)
    53b0:	e0bfff17 	ldw	r2,-4(fp)
}
    53b4:	e037883a 	mov	sp,fp
    53b8:	dfc00117 	ldw	ra,4(sp)
    53bc:	df000017 	ldw	fp,0(sp)
    53c0:	dec00204 	addi	sp,sp,8
    53c4:	f800283a 	ret

000053c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53c8:	defffd04 	addi	sp,sp,-12
    53cc:	dfc00215 	stw	ra,8(sp)
    53d0:	df000115 	stw	fp,4(sp)
    53d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    53d8:	00800074 	movhi	r2,1
    53dc:	10aa0604 	addi	r2,r2,-22504
    53e0:	10800017 	ldw	r2,0(r2)
    53e4:	1005003a 	cmpeq	r2,r2,zero
    53e8:	1000061e 	bne	r2,zero,5404 <alt_get_errno+0x3c>
    53ec:	00800074 	movhi	r2,1
    53f0:	10aa0604 	addi	r2,r2,-22504
    53f4:	10800017 	ldw	r2,0(r2)
    53f8:	103ee83a 	callr	r2
    53fc:	e0bfff15 	stw	r2,-4(fp)
    5400:	00000306 	br	5410 <alt_get_errno+0x48>
    5404:	00800074 	movhi	r2,1
    5408:	10b0b104 	addi	r2,r2,-15676
    540c:	e0bfff15 	stw	r2,-4(fp)
    5410:	e0bfff17 	ldw	r2,-4(fp)
}
    5414:	e037883a 	mov	sp,fp
    5418:	dfc00117 	ldw	ra,4(sp)
    541c:	df000017 	ldw	fp,0(sp)
    5420:	dec00204 	addi	sp,sp,8
    5424:	f800283a 	ret

00005428 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5428:	defffd04 	addi	sp,sp,-12
    542c:	dfc00215 	stw	ra,8(sp)
    5430:	df000115 	stw	fp,4(sp)
    5434:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5438:	00bfff04 	movi	r2,-4
    543c:	00c00074 	movhi	r3,1
    5440:	18e2d804 	addi	r3,r3,-29856
    5444:	1885883a 	add	r2,r3,r2
    5448:	e0bfff15 	stw	r2,-4(fp)
    544c:	00000606 	br	5468 <_do_ctors+0x40>
        (*ctor) (); 
    5450:	e0bfff17 	ldw	r2,-4(fp)
    5454:	10800017 	ldw	r2,0(r2)
    5458:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    545c:	e0bfff17 	ldw	r2,-4(fp)
    5460:	10bfff04 	addi	r2,r2,-4
    5464:	e0bfff15 	stw	r2,-4(fp)
    5468:	e0ffff17 	ldw	r3,-4(fp)
    546c:	00800074 	movhi	r2,1
    5470:	10a2d704 	addi	r2,r2,-29860
    5474:	18bff62e 	bgeu	r3,r2,5450 <_do_ctors+0x28>
        (*ctor) (); 
}
    5478:	e037883a 	mov	sp,fp
    547c:	dfc00117 	ldw	ra,4(sp)
    5480:	df000017 	ldw	fp,0(sp)
    5484:	dec00204 	addi	sp,sp,8
    5488:	f800283a 	ret

0000548c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    548c:	defffd04 	addi	sp,sp,-12
    5490:	dfc00215 	stw	ra,8(sp)
    5494:	df000115 	stw	fp,4(sp)
    5498:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    549c:	00bfff04 	movi	r2,-4
    54a0:	00c00074 	movhi	r3,1
    54a4:	18e2d804 	addi	r3,r3,-29856
    54a8:	1885883a 	add	r2,r3,r2
    54ac:	e0bfff15 	stw	r2,-4(fp)
    54b0:	00000606 	br	54cc <_do_dtors+0x40>
        (*dtor) (); 
    54b4:	e0bfff17 	ldw	r2,-4(fp)
    54b8:	10800017 	ldw	r2,0(r2)
    54bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    54c0:	e0bfff17 	ldw	r2,-4(fp)
    54c4:	10bfff04 	addi	r2,r2,-4
    54c8:	e0bfff15 	stw	r2,-4(fp)
    54cc:	e0ffff17 	ldw	r3,-4(fp)
    54d0:	00800074 	movhi	r2,1
    54d4:	10a2d804 	addi	r2,r2,-29856
    54d8:	18bff62e 	bgeu	r3,r2,54b4 <_do_dtors+0x28>
        (*dtor) (); 
}
    54dc:	e037883a 	mov	sp,fp
    54e0:	dfc00117 	ldw	ra,4(sp)
    54e4:	df000017 	ldw	fp,0(sp)
    54e8:	dec00204 	addi	sp,sp,8
    54ec:	f800283a 	ret

000054f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    54f0:	defff904 	addi	sp,sp,-28
    54f4:	dfc00615 	stw	ra,24(sp)
    54f8:	df000515 	stw	fp,20(sp)
    54fc:	df000504 	addi	fp,sp,20
    5500:	e13ffd15 	stw	r4,-12(fp)
    5504:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5508:	e0bffe17 	ldw	r2,-8(fp)
    550c:	10800017 	ldw	r2,0(r2)
    5510:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5514:	e13ffd17 	ldw	r4,-12(fp)
    5518:	00064580 	call	6458 <strlen>
    551c:	10800044 	addi	r2,r2,1
    5520:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5524:	00000d06 	br	555c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5528:	e0bffc17 	ldw	r2,-16(fp)
    552c:	11000217 	ldw	r4,8(r2)
    5530:	e1bffb17 	ldw	r6,-20(fp)
    5534:	e17ffd17 	ldw	r5,-12(fp)
    5538:	00061580 	call	6158 <memcmp>
    553c:	1004c03a 	cmpne	r2,r2,zero
    5540:	1000031e 	bne	r2,zero,5550 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5544:	e0bffc17 	ldw	r2,-16(fp)
    5548:	e0bfff15 	stw	r2,-4(fp)
    554c:	00000706 	br	556c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5550:	e0bffc17 	ldw	r2,-16(fp)
    5554:	10800017 	ldw	r2,0(r2)
    5558:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    555c:	e0fffe17 	ldw	r3,-8(fp)
    5560:	e0bffc17 	ldw	r2,-16(fp)
    5564:	10fff01e 	bne	r2,r3,5528 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5568:	e03fff15 	stw	zero,-4(fp)
    556c:	e0bfff17 	ldw	r2,-4(fp)
}
    5570:	e037883a 	mov	sp,fp
    5574:	dfc00117 	ldw	ra,4(sp)
    5578:	df000017 	ldw	fp,0(sp)
    557c:	dec00204 	addi	sp,sp,8
    5580:	f800283a 	ret

00005584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5584:	defffe04 	addi	sp,sp,-8
    5588:	dfc00115 	stw	ra,4(sp)
    558c:	df000015 	stw	fp,0(sp)
    5590:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    5594:	0009883a 	mov	r4,zero
    5598:	01440004 	movi	r5,4096
    559c:	000607c0 	call	607c <alt_icache_flush>
#endif
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    55b4:	defff904 	addi	sp,sp,-28
    55b8:	dfc00615 	stw	ra,24(sp)
    55bc:	df000515 	stw	fp,20(sp)
    55c0:	df000504 	addi	fp,sp,20
    55c4:	e13ffc15 	stw	r4,-16(fp)
    55c8:	e17ffd15 	stw	r5,-12(fp)
    55cc:	e1bffe15 	stw	r6,-8(fp)
    55d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    55d4:	e0800217 	ldw	r2,8(fp)
    55d8:	d8800015 	stw	r2,0(sp)
    55dc:	e13ffc17 	ldw	r4,-16(fp)
    55e0:	e17ffd17 	ldw	r5,-12(fp)
    55e4:	e1bffe17 	ldw	r6,-8(fp)
    55e8:	e1ffff17 	ldw	r7,-4(fp)
    55ec:	00057880 	call	5788 <alt_iic_isr_register>
}  
    55f0:	e037883a 	mov	sp,fp
    55f4:	dfc00117 	ldw	ra,4(sp)
    55f8:	df000017 	ldw	fp,0(sp)
    55fc:	dec00204 	addi	sp,sp,8
    5600:	f800283a 	ret

00005604 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5604:	defff904 	addi	sp,sp,-28
    5608:	df000615 	stw	fp,24(sp)
    560c:	df000604 	addi	fp,sp,24
    5610:	e13ffe15 	stw	r4,-8(fp)
    5614:	e17fff15 	stw	r5,-4(fp)
    5618:	e0bfff17 	ldw	r2,-4(fp)
    561c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5620:	0005303a 	rdctl	r2,status
    5624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5628:	e0fffb17 	ldw	r3,-20(fp)
    562c:	00bfff84 	movi	r2,-2
    5630:	1884703a 	and	r2,r3,r2
    5634:	1001703a 	wrctl	status,r2
  
  return context;
    5638:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    563c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    5640:	e0fffc17 	ldw	r3,-16(fp)
    5644:	00800044 	movi	r2,1
    5648:	10c4983a 	sll	r2,r2,r3
    564c:	1007883a 	mov	r3,r2
    5650:	00800074 	movhi	r2,1
    5654:	10b0ae04 	addi	r2,r2,-15688
    5658:	10800017 	ldw	r2,0(r2)
    565c:	1886b03a 	or	r3,r3,r2
    5660:	00800074 	movhi	r2,1
    5664:	10b0ae04 	addi	r2,r2,-15688
    5668:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    566c:	00800074 	movhi	r2,1
    5670:	10b0ae04 	addi	r2,r2,-15688
    5674:	10800017 	ldw	r2,0(r2)
    5678:	100170fa 	wrctl	ienable,r2
    567c:	e0bffd17 	ldw	r2,-12(fp)
    5680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5684:	e0bffa17 	ldw	r2,-24(fp)
    5688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    568c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    5690:	e037883a 	mov	sp,fp
    5694:	df000017 	ldw	fp,0(sp)
    5698:	dec00104 	addi	sp,sp,4
    569c:	f800283a 	ret

000056a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    56a0:	defff904 	addi	sp,sp,-28
    56a4:	df000615 	stw	fp,24(sp)
    56a8:	df000604 	addi	fp,sp,24
    56ac:	e13ffe15 	stw	r4,-8(fp)
    56b0:	e17fff15 	stw	r5,-4(fp)
    56b4:	e0bfff17 	ldw	r2,-4(fp)
    56b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56bc:	0005303a 	rdctl	r2,status
    56c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56c4:	e0fffb17 	ldw	r3,-20(fp)
    56c8:	00bfff84 	movi	r2,-2
    56cc:	1884703a 	and	r2,r3,r2
    56d0:	1001703a 	wrctl	status,r2
  
  return context;
    56d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    56d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    56dc:	e0fffc17 	ldw	r3,-16(fp)
    56e0:	00800044 	movi	r2,1
    56e4:	10c4983a 	sll	r2,r2,r3
    56e8:	0084303a 	nor	r2,zero,r2
    56ec:	1007883a 	mov	r3,r2
    56f0:	00800074 	movhi	r2,1
    56f4:	10b0ae04 	addi	r2,r2,-15688
    56f8:	10800017 	ldw	r2,0(r2)
    56fc:	1886703a 	and	r3,r3,r2
    5700:	00800074 	movhi	r2,1
    5704:	10b0ae04 	addi	r2,r2,-15688
    5708:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    570c:	00800074 	movhi	r2,1
    5710:	10b0ae04 	addi	r2,r2,-15688
    5714:	10800017 	ldw	r2,0(r2)
    5718:	100170fa 	wrctl	ienable,r2
    571c:	e0bffd17 	ldw	r2,-12(fp)
    5720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5724:	e0bffa17 	ldw	r2,-24(fp)
    5728:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    572c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    5730:	e037883a 	mov	sp,fp
    5734:	df000017 	ldw	fp,0(sp)
    5738:	dec00104 	addi	sp,sp,4
    573c:	f800283a 	ret

00005740 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5740:	defffc04 	addi	sp,sp,-16
    5744:	df000315 	stw	fp,12(sp)
    5748:	df000304 	addi	fp,sp,12
    574c:	e13ffe15 	stw	r4,-8(fp)
    5750:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5754:	000530fa 	rdctl	r2,ienable
    5758:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    575c:	e0ffff17 	ldw	r3,-4(fp)
    5760:	00800044 	movi	r2,1
    5764:	10c4983a 	sll	r2,r2,r3
    5768:	1007883a 	mov	r3,r2
    576c:	e0bffd17 	ldw	r2,-12(fp)
    5770:	1884703a 	and	r2,r3,r2
    5774:	1004c03a 	cmpne	r2,r2,zero
}
    5778:	e037883a 	mov	sp,fp
    577c:	df000017 	ldw	fp,0(sp)
    5780:	dec00104 	addi	sp,sp,4
    5784:	f800283a 	ret

00005788 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5788:	defff404 	addi	sp,sp,-48
    578c:	dfc00b15 	stw	ra,44(sp)
    5790:	df000a15 	stw	fp,40(sp)
    5794:	df000a04 	addi	fp,sp,40
    5798:	e13ffb15 	stw	r4,-20(fp)
    579c:	e17ffc15 	stw	r5,-16(fp)
    57a0:	e1bffd15 	stw	r6,-12(fp)
    57a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    57a8:	00bffa84 	movi	r2,-22
    57ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    57b0:	e0bffc17 	ldw	r2,-16(fp)
    57b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    57b8:	e0bff917 	ldw	r2,-28(fp)
    57bc:	10800808 	cmpgei	r2,r2,32
    57c0:	1000291e 	bne	r2,zero,5868 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57c4:	0005303a 	rdctl	r2,status
    57c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57cc:	e0fff717 	ldw	r3,-36(fp)
    57d0:	00bfff84 	movi	r2,-2
    57d4:	1884703a 	and	r2,r3,r2
    57d8:	1001703a 	wrctl	status,r2
  
  return context;
    57dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    57e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    57e4:	e0bff917 	ldw	r2,-28(fp)
    57e8:	00c00074 	movhi	r3,1
    57ec:	18f0bf04 	addi	r3,r3,-15620
    57f0:	100490fa 	slli	r2,r2,3
    57f4:	10c7883a 	add	r3,r2,r3
    57f8:	e0bffd17 	ldw	r2,-12(fp)
    57fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    5800:	e0bff917 	ldw	r2,-28(fp)
    5804:	00c00074 	movhi	r3,1
    5808:	18f0bf04 	addi	r3,r3,-15620
    580c:	100490fa 	slli	r2,r2,3
    5810:	10c5883a 	add	r2,r2,r3
    5814:	10c00104 	addi	r3,r2,4
    5818:	e0bffe17 	ldw	r2,-8(fp)
    581c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5820:	e0bffd17 	ldw	r2,-12(fp)
    5824:	1005003a 	cmpeq	r2,r2,zero
    5828:	1000051e 	bne	r2,zero,5840 <alt_iic_isr_register+0xb8>
    582c:	e17ff917 	ldw	r5,-28(fp)
    5830:	e13ffb17 	ldw	r4,-20(fp)
    5834:	00056040 	call	5604 <alt_ic_irq_enable>
    5838:	e0bfff15 	stw	r2,-4(fp)
    583c:	00000406 	br	5850 <alt_iic_isr_register+0xc8>
    5840:	e17ff917 	ldw	r5,-28(fp)
    5844:	e13ffb17 	ldw	r4,-20(fp)
    5848:	00056a00 	call	56a0 <alt_ic_irq_disable>
    584c:	e0bfff15 	stw	r2,-4(fp)
    5850:	e0bfff17 	ldw	r2,-4(fp)
    5854:	e0bffa15 	stw	r2,-24(fp)
    5858:	e0bff817 	ldw	r2,-32(fp)
    585c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5860:	e0bff617 	ldw	r2,-40(fp)
    5864:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5868:	e0bffa17 	ldw	r2,-24(fp)
}
    586c:	e037883a 	mov	sp,fp
    5870:	dfc00117 	ldw	ra,4(sp)
    5874:	df000017 	ldw	fp,0(sp)
    5878:	dec00204 	addi	sp,sp,8
    587c:	f800283a 	ret

00005880 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5880:	defff904 	addi	sp,sp,-28
    5884:	dfc00615 	stw	ra,24(sp)
    5888:	df000515 	stw	fp,20(sp)
    588c:	df000504 	addi	fp,sp,20
    5890:	e13ffc15 	stw	r4,-16(fp)
    5894:	e17ffd15 	stw	r5,-12(fp)
    5898:	e1bffe15 	stw	r6,-8(fp)
    589c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    58a0:	e13ffd17 	ldw	r4,-12(fp)
    58a4:	e17ffe17 	ldw	r5,-8(fp)
    58a8:	e1bfff17 	ldw	r6,-4(fp)
    58ac:	0005a980 	call	5a98 <open>
    58b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    58b4:	e0bffb17 	ldw	r2,-20(fp)
    58b8:	1004803a 	cmplt	r2,r2,zero
    58bc:	10001c1e 	bne	r2,zero,5930 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    58c0:	e0bffb17 	ldw	r2,-20(fp)
    58c4:	00c00074 	movhi	r3,1
    58c8:	18e89c04 	addi	r3,r3,-23952
    58cc:	10800324 	muli	r2,r2,12
    58d0:	10c5883a 	add	r2,r2,r3
    58d4:	10c00017 	ldw	r3,0(r2)
    58d8:	e0bffc17 	ldw	r2,-16(fp)
    58dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    58e0:	e0bffb17 	ldw	r2,-20(fp)
    58e4:	00c00074 	movhi	r3,1
    58e8:	18e89c04 	addi	r3,r3,-23952
    58ec:	10800324 	muli	r2,r2,12
    58f0:	10c5883a 	add	r2,r2,r3
    58f4:	10800104 	addi	r2,r2,4
    58f8:	10c00017 	ldw	r3,0(r2)
    58fc:	e0bffc17 	ldw	r2,-16(fp)
    5900:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5904:	e0bffb17 	ldw	r2,-20(fp)
    5908:	00c00074 	movhi	r3,1
    590c:	18e89c04 	addi	r3,r3,-23952
    5910:	10800324 	muli	r2,r2,12
    5914:	10c5883a 	add	r2,r2,r3
    5918:	10800204 	addi	r2,r2,8
    591c:	10c00017 	ldw	r3,0(r2)
    5920:	e0bffc17 	ldw	r2,-16(fp)
    5924:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5928:	e13ffb17 	ldw	r4,-20(fp)
    592c:	0005c800 	call	5c80 <alt_release_fd>
  }
} 
    5930:	e037883a 	mov	sp,fp
    5934:	dfc00117 	ldw	ra,4(sp)
    5938:	df000017 	ldw	fp,0(sp)
    593c:	dec00204 	addi	sp,sp,8
    5940:	f800283a 	ret

00005944 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5944:	defffb04 	addi	sp,sp,-20
    5948:	dfc00415 	stw	ra,16(sp)
    594c:	df000315 	stw	fp,12(sp)
    5950:	df000304 	addi	fp,sp,12
    5954:	e13ffd15 	stw	r4,-12(fp)
    5958:	e17ffe15 	stw	r5,-8(fp)
    595c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5960:	01000074 	movhi	r4,1
    5964:	21289f04 	addi	r4,r4,-23940
    5968:	e17ffd17 	ldw	r5,-12(fp)
    596c:	01800044 	movi	r6,1
    5970:	01c07fc4 	movi	r7,511
    5974:	00058800 	call	5880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5978:	01000074 	movhi	r4,1
    597c:	21289c04 	addi	r4,r4,-23952
    5980:	e17ffe17 	ldw	r5,-8(fp)
    5984:	000d883a 	mov	r6,zero
    5988:	01c07fc4 	movi	r7,511
    598c:	00058800 	call	5880 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5990:	01000074 	movhi	r4,1
    5994:	2128a204 	addi	r4,r4,-23928
    5998:	e17fff17 	ldw	r5,-4(fp)
    599c:	01800044 	movi	r6,1
    59a0:	01c07fc4 	movi	r7,511
    59a4:	00058800 	call	5880 <alt_open_fd>
}  
    59a8:	e037883a 	mov	sp,fp
    59ac:	dfc00117 	ldw	ra,4(sp)
    59b0:	df000017 	ldw	fp,0(sp)
    59b4:	dec00204 	addi	sp,sp,8
    59b8:	f800283a 	ret

000059bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    59bc:	defffc04 	addi	sp,sp,-16
    59c0:	df000315 	stw	fp,12(sp)
    59c4:	df000304 	addi	fp,sp,12
    59c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    59cc:	e0bffe17 	ldw	r2,-8(fp)
    59d0:	10800217 	ldw	r2,8(r2)
    59d4:	10d00034 	orhi	r3,r2,16384
    59d8:	e0bffe17 	ldw	r2,-8(fp)
    59dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    59e0:	e03ffd15 	stw	zero,-12(fp)
    59e4:	00002006 	br	5a68 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    59e8:	e0bffd17 	ldw	r2,-12(fp)
    59ec:	00c00074 	movhi	r3,1
    59f0:	18e89c04 	addi	r3,r3,-23952
    59f4:	10800324 	muli	r2,r2,12
    59f8:	10c5883a 	add	r2,r2,r3
    59fc:	10c00017 	ldw	r3,0(r2)
    5a00:	e0bffe17 	ldw	r2,-8(fp)
    5a04:	10800017 	ldw	r2,0(r2)
    5a08:	1880141e 	bne	r3,r2,5a5c <alt_file_locked+0xa0>
    5a0c:	e0bffd17 	ldw	r2,-12(fp)
    5a10:	00c00074 	movhi	r3,1
    5a14:	18e89c04 	addi	r3,r3,-23952
    5a18:	10800324 	muli	r2,r2,12
    5a1c:	10c5883a 	add	r2,r2,r3
    5a20:	10800204 	addi	r2,r2,8
    5a24:	10800017 	ldw	r2,0(r2)
    5a28:	1004403a 	cmpge	r2,r2,zero
    5a2c:	10000b1e 	bne	r2,zero,5a5c <alt_file_locked+0xa0>
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	10800324 	muli	r2,r2,12
    5a38:	1007883a 	mov	r3,r2
    5a3c:	00800074 	movhi	r2,1
    5a40:	10a89c04 	addi	r2,r2,-23952
    5a44:	1887883a 	add	r3,r3,r2
    5a48:	e0bffe17 	ldw	r2,-8(fp)
    5a4c:	18800326 	beq	r3,r2,5a5c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5a50:	00bffcc4 	movi	r2,-13
    5a54:	e0bfff15 	stw	r2,-4(fp)
    5a58:	00000a06 	br	5a84 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5a5c:	e0bffd17 	ldw	r2,-12(fp)
    5a60:	10800044 	addi	r2,r2,1
    5a64:	e0bffd15 	stw	r2,-12(fp)
    5a68:	00800074 	movhi	r2,1
    5a6c:	10aa0504 	addi	r2,r2,-22508
    5a70:	10800017 	ldw	r2,0(r2)
    5a74:	1007883a 	mov	r3,r2
    5a78:	e0bffd17 	ldw	r2,-12(fp)
    5a7c:	18bfda2e 	bgeu	r3,r2,59e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5a80:	e03fff15 	stw	zero,-4(fp)
    5a84:	e0bfff17 	ldw	r2,-4(fp)
}
    5a88:	e037883a 	mov	sp,fp
    5a8c:	df000017 	ldw	fp,0(sp)
    5a90:	dec00104 	addi	sp,sp,4
    5a94:	f800283a 	ret

00005a98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5a98:	defff404 	addi	sp,sp,-48
    5a9c:	dfc00b15 	stw	ra,44(sp)
    5aa0:	df000a15 	stw	fp,40(sp)
    5aa4:	df000a04 	addi	fp,sp,40
    5aa8:	e13ffb15 	stw	r4,-20(fp)
    5aac:	e17ffc15 	stw	r5,-16(fp)
    5ab0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5ab4:	00bfffc4 	movi	r2,-1
    5ab8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    5abc:	00bffb44 	movi	r2,-19
    5ac0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    5ac4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5ac8:	e13ffb17 	ldw	r4,-20(fp)
    5acc:	01400074 	movhi	r5,1
    5ad0:	296a0304 	addi	r5,r5,-22516
    5ad4:	00054f00 	call	54f0 <alt_find_dev>
    5ad8:	e0bffa15 	stw	r2,-24(fp)
    5adc:	e0bffa17 	ldw	r2,-24(fp)
    5ae0:	1004c03a 	cmpne	r2,r2,zero
    5ae4:	1000051e 	bne	r2,zero,5afc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5ae8:	e13ffb17 	ldw	r4,-20(fp)
    5aec:	0005ea40 	call	5ea4 <alt_find_file>
    5af0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    5af4:	00800044 	movi	r2,1
    5af8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5afc:	e0bffa17 	ldw	r2,-24(fp)
    5b00:	1005003a 	cmpeq	r2,r2,zero
    5b04:	1000301e 	bne	r2,zero,5bc8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5b08:	e13ffa17 	ldw	r4,-24(fp)
    5b0c:	0005fc40 	call	5fc4 <alt_get_fd>
    5b10:	e0bff815 	stw	r2,-32(fp)
    5b14:	e0bff817 	ldw	r2,-32(fp)
    5b18:	1004403a 	cmpge	r2,r2,zero
    5b1c:	1000031e 	bne	r2,zero,5b2c <open+0x94>
    {
      status = index;
    5b20:	e0bff817 	ldw	r2,-32(fp)
    5b24:	e0bff715 	stw	r2,-36(fp)
    5b28:	00002906 	br	5bd0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    5b2c:	e0bff817 	ldw	r2,-32(fp)
    5b30:	10800324 	muli	r2,r2,12
    5b34:	1007883a 	mov	r3,r2
    5b38:	00800074 	movhi	r2,1
    5b3c:	10a89c04 	addi	r2,r2,-23952
    5b40:	1885883a 	add	r2,r3,r2
    5b44:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5b48:	e0fffc17 	ldw	r3,-16(fp)
    5b4c:	00900034 	movhi	r2,16384
    5b50:	10bfffc4 	addi	r2,r2,-1
    5b54:	1886703a 	and	r3,r3,r2
    5b58:	e0bff917 	ldw	r2,-28(fp)
    5b5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5b60:	e0bff617 	ldw	r2,-40(fp)
    5b64:	1004c03a 	cmpne	r2,r2,zero
    5b68:	1000061e 	bne	r2,zero,5b84 <open+0xec>
    5b6c:	e13ff917 	ldw	r4,-28(fp)
    5b70:	00059bc0 	call	59bc <alt_file_locked>
    5b74:	e0bff715 	stw	r2,-36(fp)
    5b78:	e0bff717 	ldw	r2,-36(fp)
    5b7c:	1004803a 	cmplt	r2,r2,zero
    5b80:	1000131e 	bne	r2,zero,5bd0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5b84:	e0bffa17 	ldw	r2,-24(fp)
    5b88:	10800317 	ldw	r2,12(r2)
    5b8c:	1005003a 	cmpeq	r2,r2,zero
    5b90:	1000091e 	bne	r2,zero,5bb8 <open+0x120>
    5b94:	e0bffa17 	ldw	r2,-24(fp)
    5b98:	10800317 	ldw	r2,12(r2)
    5b9c:	e13ff917 	ldw	r4,-28(fp)
    5ba0:	e17ffb17 	ldw	r5,-20(fp)
    5ba4:	e1bffc17 	ldw	r6,-16(fp)
    5ba8:	e1fffd17 	ldw	r7,-12(fp)
    5bac:	103ee83a 	callr	r2
    5bb0:	e0bfff15 	stw	r2,-4(fp)
    5bb4:	00000106 	br	5bbc <open+0x124>
    5bb8:	e03fff15 	stw	zero,-4(fp)
    5bbc:	e0bfff17 	ldw	r2,-4(fp)
    5bc0:	e0bff715 	stw	r2,-36(fp)
    5bc4:	00000206 	br	5bd0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5bc8:	00bffb44 	movi	r2,-19
    5bcc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5bd0:	e0bff717 	ldw	r2,-36(fp)
    5bd4:	1004403a 	cmpge	r2,r2,zero
    5bd8:	1000091e 	bne	r2,zero,5c00 <open+0x168>
  {
    alt_release_fd (index);  
    5bdc:	e13ff817 	ldw	r4,-32(fp)
    5be0:	0005c800 	call	5c80 <alt_release_fd>
    ALT_ERRNO = -status;
    5be4:	0005c200 	call	5c20 <alt_get_errno>
    5be8:	e0fff717 	ldw	r3,-36(fp)
    5bec:	00c7c83a 	sub	r3,zero,r3
    5bf0:	10c00015 	stw	r3,0(r2)
    return -1;
    5bf4:	00bfffc4 	movi	r2,-1
    5bf8:	e0bffe15 	stw	r2,-8(fp)
    5bfc:	00000206 	br	5c08 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    5c00:	e0bff817 	ldw	r2,-32(fp)
    5c04:	e0bffe15 	stw	r2,-8(fp)
    5c08:	e0bffe17 	ldw	r2,-8(fp)
}
    5c0c:	e037883a 	mov	sp,fp
    5c10:	dfc00117 	ldw	ra,4(sp)
    5c14:	df000017 	ldw	fp,0(sp)
    5c18:	dec00204 	addi	sp,sp,8
    5c1c:	f800283a 	ret

00005c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5c20:	defffd04 	addi	sp,sp,-12
    5c24:	dfc00215 	stw	ra,8(sp)
    5c28:	df000115 	stw	fp,4(sp)
    5c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5c30:	00800074 	movhi	r2,1
    5c34:	10aa0604 	addi	r2,r2,-22504
    5c38:	10800017 	ldw	r2,0(r2)
    5c3c:	1005003a 	cmpeq	r2,r2,zero
    5c40:	1000061e 	bne	r2,zero,5c5c <alt_get_errno+0x3c>
    5c44:	00800074 	movhi	r2,1
    5c48:	10aa0604 	addi	r2,r2,-22504
    5c4c:	10800017 	ldw	r2,0(r2)
    5c50:	103ee83a 	callr	r2
    5c54:	e0bfff15 	stw	r2,-4(fp)
    5c58:	00000306 	br	5c68 <alt_get_errno+0x48>
    5c5c:	00800074 	movhi	r2,1
    5c60:	10b0b104 	addi	r2,r2,-15676
    5c64:	e0bfff15 	stw	r2,-4(fp)
    5c68:	e0bfff17 	ldw	r2,-4(fp)
}
    5c6c:	e037883a 	mov	sp,fp
    5c70:	dfc00117 	ldw	ra,4(sp)
    5c74:	df000017 	ldw	fp,0(sp)
    5c78:	dec00204 	addi	sp,sp,8
    5c7c:	f800283a 	ret

00005c80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5c80:	defffe04 	addi	sp,sp,-8
    5c84:	df000115 	stw	fp,4(sp)
    5c88:	df000104 	addi	fp,sp,4
    5c8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    5c90:	e0bfff17 	ldw	r2,-4(fp)
    5c94:	108000d0 	cmplti	r2,r2,3
    5c98:	10000d1e 	bne	r2,zero,5cd0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    5c9c:	e0bfff17 	ldw	r2,-4(fp)
    5ca0:	00c00074 	movhi	r3,1
    5ca4:	18e89c04 	addi	r3,r3,-23952
    5ca8:	10800324 	muli	r2,r2,12
    5cac:	10c5883a 	add	r2,r2,r3
    5cb0:	10800204 	addi	r2,r2,8
    5cb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5cb8:	e0bfff17 	ldw	r2,-4(fp)
    5cbc:	00c00074 	movhi	r3,1
    5cc0:	18e89c04 	addi	r3,r3,-23952
    5cc4:	10800324 	muli	r2,r2,12
    5cc8:	10c5883a 	add	r2,r2,r3
    5ccc:	10000015 	stw	zero,0(r2)
  }
}
    5cd0:	e037883a 	mov	sp,fp
    5cd4:	df000017 	ldw	fp,0(sp)
    5cd8:	dec00104 	addi	sp,sp,4
    5cdc:	f800283a 	ret

00005ce0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5ce0:	defffa04 	addi	sp,sp,-24
    5ce4:	df000515 	stw	fp,20(sp)
    5ce8:	df000504 	addi	fp,sp,20
    5cec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cf0:	0005303a 	rdctl	r2,status
    5cf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cf8:	e0fffd17 	ldw	r3,-12(fp)
    5cfc:	00bfff84 	movi	r2,-2
    5d00:	1884703a 	and	r2,r3,r2
    5d04:	1001703a 	wrctl	status,r2
  
  return context;
    5d08:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5d0c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    5d10:	e0bfff17 	ldw	r2,-4(fp)
    5d14:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5d18:	e0bffc17 	ldw	r2,-16(fp)
    5d1c:	10c00017 	ldw	r3,0(r2)
    5d20:	e0bffc17 	ldw	r2,-16(fp)
    5d24:	10800117 	ldw	r2,4(r2)
    5d28:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    5d2c:	e0bffc17 	ldw	r2,-16(fp)
    5d30:	10c00117 	ldw	r3,4(r2)
    5d34:	e0bffc17 	ldw	r2,-16(fp)
    5d38:	10800017 	ldw	r2,0(r2)
    5d3c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5d40:	e0fffc17 	ldw	r3,-16(fp)
    5d44:	e0bffc17 	ldw	r2,-16(fp)
    5d48:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    5d4c:	e0fffc17 	ldw	r3,-16(fp)
    5d50:	e0bffc17 	ldw	r2,-16(fp)
    5d54:	18800015 	stw	r2,0(r3)
    5d58:	e0bffe17 	ldw	r2,-8(fp)
    5d5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d60:	e0bffb17 	ldw	r2,-20(fp)
    5d64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5d68:	e037883a 	mov	sp,fp
    5d6c:	df000017 	ldw	fp,0(sp)
    5d70:	dec00104 	addi	sp,sp,4
    5d74:	f800283a 	ret

00005d78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5d78:	defffb04 	addi	sp,sp,-20
    5d7c:	dfc00415 	stw	ra,16(sp)
    5d80:	df000315 	stw	fp,12(sp)
    5d84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5d88:	d0a00a17 	ldw	r2,-32728(gp)
    5d8c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5d90:	d0a6b217 	ldw	r2,-25912(gp)
    5d94:	10800044 	addi	r2,r2,1
    5d98:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5d9c:	00003106 	br	5e64 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    5da0:	e0bffe17 	ldw	r2,-8(fp)
    5da4:	10800017 	ldw	r2,0(r2)
    5da8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5dac:	e0bffe17 	ldw	r2,-8(fp)
    5db0:	10800403 	ldbu	r2,16(r2)
    5db4:	10803fcc 	andi	r2,r2,255
    5db8:	1005003a 	cmpeq	r2,r2,zero
    5dbc:	1000051e 	bne	r2,zero,5dd4 <alt_tick+0x5c>
    5dc0:	d0a6b217 	ldw	r2,-25912(gp)
    5dc4:	1004c03a 	cmpne	r2,r2,zero
    5dc8:	1000021e 	bne	r2,zero,5dd4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    5dcc:	e0bffe17 	ldw	r2,-8(fp)
    5dd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5dd4:	e0bffe17 	ldw	r2,-8(fp)
    5dd8:	10c00217 	ldw	r3,8(r2)
    5ddc:	d0a6b217 	ldw	r2,-25912(gp)
    5de0:	10c01e36 	bltu	r2,r3,5e5c <alt_tick+0xe4>
    5de4:	e0bffe17 	ldw	r2,-8(fp)
    5de8:	10800403 	ldbu	r2,16(r2)
    5dec:	10803fcc 	andi	r2,r2,255
    5df0:	1004c03a 	cmpne	r2,r2,zero
    5df4:	1000191e 	bne	r2,zero,5e5c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    5df8:	e0bffe17 	ldw	r2,-8(fp)
    5dfc:	10c00317 	ldw	r3,12(r2)
    5e00:	e0bffe17 	ldw	r2,-8(fp)
    5e04:	11000517 	ldw	r4,20(r2)
    5e08:	183ee83a 	callr	r3
    5e0c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5e10:	e0bffd17 	ldw	r2,-12(fp)
    5e14:	1004c03a 	cmpne	r2,r2,zero
    5e18:	1000031e 	bne	r2,zero,5e28 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    5e1c:	e13ffe17 	ldw	r4,-8(fp)
    5e20:	0005ce00 	call	5ce0 <alt_alarm_stop>
    5e24:	00000d06 	br	5e5c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    5e28:	e0bffe17 	ldw	r2,-8(fp)
    5e2c:	10c00217 	ldw	r3,8(r2)
    5e30:	e0bffd17 	ldw	r2,-12(fp)
    5e34:	1887883a 	add	r3,r3,r2
    5e38:	e0bffe17 	ldw	r2,-8(fp)
    5e3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5e40:	e0bffe17 	ldw	r2,-8(fp)
    5e44:	10c00217 	ldw	r3,8(r2)
    5e48:	d0a6b217 	ldw	r2,-25912(gp)
    5e4c:	1880032e 	bgeu	r3,r2,5e5c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    5e50:	e0fffe17 	ldw	r3,-8(fp)
    5e54:	00800044 	movi	r2,1
    5e58:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    5e5c:	e0bfff17 	ldw	r2,-4(fp)
    5e60:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5e64:	d0e00a04 	addi	r3,gp,-32728
    5e68:	e0bffe17 	ldw	r2,-8(fp)
    5e6c:	10ffcc1e 	bne	r2,r3,5da0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    5e70:	e037883a 	mov	sp,fp
    5e74:	dfc00117 	ldw	ra,4(sp)
    5e78:	df000017 	ldw	fp,0(sp)
    5e7c:	dec00204 	addi	sp,sp,8
    5e80:	f800283a 	ret

00005e84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    5e84:	deffff04 	addi	sp,sp,-4
    5e88:	df000015 	stw	fp,0(sp)
    5e8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5e90:	000170fa 	wrctl	ienable,zero
}
    5e94:	e037883a 	mov	sp,fp
    5e98:	df000017 	ldw	fp,0(sp)
    5e9c:	dec00104 	addi	sp,sp,4
    5ea0:	f800283a 	ret

00005ea4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5ea4:	defffa04 	addi	sp,sp,-24
    5ea8:	dfc00515 	stw	ra,20(sp)
    5eac:	df000415 	stw	fp,16(sp)
    5eb0:	df000404 	addi	fp,sp,16
    5eb4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5eb8:	00800074 	movhi	r2,1
    5ebc:	10aa0104 	addi	r2,r2,-22524
    5ec0:	10800017 	ldw	r2,0(r2)
    5ec4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5ec8:	00003306 	br	5f98 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    5ecc:	e0bffd17 	ldw	r2,-12(fp)
    5ed0:	11000217 	ldw	r4,8(r2)
    5ed4:	00064580 	call	6458 <strlen>
    5ed8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    5edc:	e0bffd17 	ldw	r2,-12(fp)
    5ee0:	10c00217 	ldw	r3,8(r2)
    5ee4:	e0bffc17 	ldw	r2,-16(fp)
    5ee8:	1885883a 	add	r2,r3,r2
    5eec:	10bfffc4 	addi	r2,r2,-1
    5ef0:	10800003 	ldbu	r2,0(r2)
    5ef4:	10803fcc 	andi	r2,r2,255
    5ef8:	1080201c 	xori	r2,r2,128
    5efc:	10bfe004 	addi	r2,r2,-128
    5f00:	10800bd8 	cmpnei	r2,r2,47
    5f04:	1000031e 	bne	r2,zero,5f14 <alt_find_file+0x70>
    {
      len -= 1;
    5f08:	e0bffc17 	ldw	r2,-16(fp)
    5f0c:	10bfffc4 	addi	r2,r2,-1
    5f10:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5f14:	e0bffc17 	ldw	r2,-16(fp)
    5f18:	1007883a 	mov	r3,r2
    5f1c:	e0bffe17 	ldw	r2,-8(fp)
    5f20:	1885883a 	add	r2,r3,r2
    5f24:	10800003 	ldbu	r2,0(r2)
    5f28:	10803fcc 	andi	r2,r2,255
    5f2c:	1080201c 	xori	r2,r2,128
    5f30:	10bfe004 	addi	r2,r2,-128
    5f34:	10800be0 	cmpeqi	r2,r2,47
    5f38:	10000a1e 	bne	r2,zero,5f64 <alt_find_file+0xc0>
    5f3c:	e0bffc17 	ldw	r2,-16(fp)
    5f40:	1007883a 	mov	r3,r2
    5f44:	e0bffe17 	ldw	r2,-8(fp)
    5f48:	1885883a 	add	r2,r3,r2
    5f4c:	10800003 	ldbu	r2,0(r2)
    5f50:	10803fcc 	andi	r2,r2,255
    5f54:	1080201c 	xori	r2,r2,128
    5f58:	10bfe004 	addi	r2,r2,-128
    5f5c:	1004c03a 	cmpne	r2,r2,zero
    5f60:	10000a1e 	bne	r2,zero,5f8c <alt_find_file+0xe8>
    5f64:	e0bffd17 	ldw	r2,-12(fp)
    5f68:	11000217 	ldw	r4,8(r2)
    5f6c:	e1bffc17 	ldw	r6,-16(fp)
    5f70:	e17ffe17 	ldw	r5,-8(fp)
    5f74:	00061580 	call	6158 <memcmp>
    5f78:	1004c03a 	cmpne	r2,r2,zero
    5f7c:	1000031e 	bne	r2,zero,5f8c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	e0bfff15 	stw	r2,-4(fp)
    5f88:	00000806 	br	5fac <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    5f8c:	e0bffd17 	ldw	r2,-12(fp)
    5f90:	10800017 	ldw	r2,0(r2)
    5f94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5f98:	00c00074 	movhi	r3,1
    5f9c:	18ea0104 	addi	r3,r3,-22524
    5fa0:	e0bffd17 	ldw	r2,-12(fp)
    5fa4:	10ffc91e 	bne	r2,r3,5ecc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5fa8:	e03fff15 	stw	zero,-4(fp)
    5fac:	e0bfff17 	ldw	r2,-4(fp)
}
    5fb0:	e037883a 	mov	sp,fp
    5fb4:	dfc00117 	ldw	ra,4(sp)
    5fb8:	df000017 	ldw	fp,0(sp)
    5fbc:	dec00204 	addi	sp,sp,8
    5fc0:	f800283a 	ret

00005fc4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5fc4:	defffc04 	addi	sp,sp,-16
    5fc8:	df000315 	stw	fp,12(sp)
    5fcc:	df000304 	addi	fp,sp,12
    5fd0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5fd4:	00bffa04 	movi	r2,-24
    5fd8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5fdc:	e03ffe15 	stw	zero,-8(fp)
    5fe0:	00001e06 	br	605c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    5fe4:	e0bffe17 	ldw	r2,-8(fp)
    5fe8:	00c00074 	movhi	r3,1
    5fec:	18e89c04 	addi	r3,r3,-23952
    5ff0:	10800324 	muli	r2,r2,12
    5ff4:	10c5883a 	add	r2,r2,r3
    5ff8:	10800017 	ldw	r2,0(r2)
    5ffc:	1004c03a 	cmpne	r2,r2,zero
    6000:	1000131e 	bne	r2,zero,6050 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    6004:	e0bffe17 	ldw	r2,-8(fp)
    6008:	00c00074 	movhi	r3,1
    600c:	18e89c04 	addi	r3,r3,-23952
    6010:	10800324 	muli	r2,r2,12
    6014:	10c7883a 	add	r3,r2,r3
    6018:	e0bfff17 	ldw	r2,-4(fp)
    601c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    6020:	00800074 	movhi	r2,1
    6024:	10aa0504 	addi	r2,r2,-22508
    6028:	10c00017 	ldw	r3,0(r2)
    602c:	e0bffe17 	ldw	r2,-8(fp)
    6030:	1880040e 	bge	r3,r2,6044 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    6034:	00c00074 	movhi	r3,1
    6038:	18ea0504 	addi	r3,r3,-22508
    603c:	e0bffe17 	ldw	r2,-8(fp)
    6040:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6044:	e0bffe17 	ldw	r2,-8(fp)
    6048:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    604c:	00000606 	br	6068 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6050:	e0bffe17 	ldw	r2,-8(fp)
    6054:	10800044 	addi	r2,r2,1
    6058:	e0bffe15 	stw	r2,-8(fp)
    605c:	e0bffe17 	ldw	r2,-8(fp)
    6060:	10800810 	cmplti	r2,r2,32
    6064:	103fdf1e 	bne	r2,zero,5fe4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6068:	e0bffd17 	ldw	r2,-12(fp)
}
    606c:	e037883a 	mov	sp,fp
    6070:	df000017 	ldw	fp,0(sp)
    6074:	dec00104 	addi	sp,sp,4
    6078:	f800283a 	ret

0000607c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    607c:	defffb04 	addi	sp,sp,-20
    6080:	df000415 	stw	fp,16(sp)
    6084:	df000404 	addi	fp,sp,16
    6088:	e13ffe15 	stw	r4,-8(fp)
    608c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6090:	e0bfff17 	ldw	r2,-4(fp)
    6094:	10840070 	cmpltui	r2,r2,4097
    6098:	1000021e 	bne	r2,zero,60a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    609c:	00840004 	movi	r2,4096
    60a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    60a4:	e0fffe17 	ldw	r3,-8(fp)
    60a8:	e0bfff17 	ldw	r2,-4(fp)
    60ac:	1885883a 	add	r2,r3,r2
    60b0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    60b4:	e0bffe17 	ldw	r2,-8(fp)
    60b8:	e0bffd15 	stw	r2,-12(fp)
    60bc:	00000506 	br	60d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    60c0:	e0bffd17 	ldw	r2,-12(fp)
    60c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    60c8:	e0bffd17 	ldw	r2,-12(fp)
    60cc:	10800804 	addi	r2,r2,32
    60d0:	e0bffd15 	stw	r2,-12(fp)
    60d4:	e0fffd17 	ldw	r3,-12(fp)
    60d8:	e0bffc17 	ldw	r2,-16(fp)
    60dc:	18bff836 	bltu	r3,r2,60c0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    60e0:	e0bffe17 	ldw	r2,-8(fp)
    60e4:	108007cc 	andi	r2,r2,31
    60e8:	1005003a 	cmpeq	r2,r2,zero
    60ec:	1000021e 	bne	r2,zero,60f8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    60f0:	e0bffd17 	ldw	r2,-12(fp)
    60f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    60f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    60fc:	e037883a 	mov	sp,fp
    6100:	df000017 	ldw	fp,0(sp)
    6104:	dec00104 	addi	sp,sp,4
    6108:	f800283a 	ret

0000610c <atexit>:
    610c:	200b883a 	mov	r5,r4
    6110:	000d883a 	mov	r6,zero
    6114:	0009883a 	mov	r4,zero
    6118:	000f883a 	mov	r7,zero
    611c:	00067541 	jmpi	6754 <__register_exitproc>

00006120 <exit>:
    6120:	defffe04 	addi	sp,sp,-8
    6124:	000b883a 	mov	r5,zero
    6128:	dc000015 	stw	r16,0(sp)
    612c:	dfc00115 	stw	ra,4(sp)
    6130:	2021883a 	mov	r16,r4
    6134:	000688c0 	call	688c <__call_exitprocs>
    6138:	00800074 	movhi	r2,1
    613c:	10aa0004 	addi	r2,r2,-22528
    6140:	11000017 	ldw	r4,0(r2)
    6144:	20800f17 	ldw	r2,60(r4)
    6148:	10000126 	beq	r2,zero,6150 <exit+0x30>
    614c:	103ee83a 	callr	r2
    6150:	8009883a 	mov	r4,r16
    6154:	000839c0 	call	839c <_exit>

00006158 <memcmp>:
    6158:	00c000c4 	movi	r3,3
    615c:	1980032e 	bgeu	r3,r6,616c <memcmp+0x14>
    6160:	2144b03a 	or	r2,r4,r5
    6164:	10c4703a 	and	r2,r2,r3
    6168:	10000f26 	beq	r2,zero,61a8 <memcmp+0x50>
    616c:	31ffffc4 	addi	r7,r6,-1
    6170:	3000061e 	bne	r6,zero,618c <memcmp+0x34>
    6174:	00000a06 	br	61a0 <memcmp+0x48>
    6178:	39ffffc4 	addi	r7,r7,-1
    617c:	00bfffc4 	movi	r2,-1
    6180:	21000044 	addi	r4,r4,1
    6184:	29400044 	addi	r5,r5,1
    6188:	38800526 	beq	r7,r2,61a0 <memcmp+0x48>
    618c:	20c00003 	ldbu	r3,0(r4)
    6190:	28800003 	ldbu	r2,0(r5)
    6194:	18bff826 	beq	r3,r2,6178 <memcmp+0x20>
    6198:	1885c83a 	sub	r2,r3,r2
    619c:	f800283a 	ret
    61a0:	0005883a 	mov	r2,zero
    61a4:	f800283a 	ret
    61a8:	180f883a 	mov	r7,r3
    61ac:	20c00017 	ldw	r3,0(r4)
    61b0:	28800017 	ldw	r2,0(r5)
    61b4:	18bfed1e 	bne	r3,r2,616c <memcmp+0x14>
    61b8:	31bfff04 	addi	r6,r6,-4
    61bc:	21000104 	addi	r4,r4,4
    61c0:	29400104 	addi	r5,r5,4
    61c4:	39bff936 	bltu	r7,r6,61ac <memcmp+0x54>
    61c8:	003fe806 	br	616c <memcmp+0x14>

000061cc <memcpy>:
    61cc:	01c003c4 	movi	r7,15
    61d0:	2007883a 	mov	r3,r4
    61d4:	3980032e 	bgeu	r7,r6,61e4 <memcpy+0x18>
    61d8:	2904b03a 	or	r2,r5,r4
    61dc:	108000cc 	andi	r2,r2,3
    61e0:	10000926 	beq	r2,zero,6208 <memcpy+0x3c>
    61e4:	30000626 	beq	r6,zero,6200 <memcpy+0x34>
    61e8:	30cd883a 	add	r6,r6,r3
    61ec:	28800003 	ldbu	r2,0(r5)
    61f0:	29400044 	addi	r5,r5,1
    61f4:	18800005 	stb	r2,0(r3)
    61f8:	18c00044 	addi	r3,r3,1
    61fc:	30fffb1e 	bne	r6,r3,61ec <memcpy+0x20>
    6200:	2005883a 	mov	r2,r4
    6204:	f800283a 	ret
    6208:	3811883a 	mov	r8,r7
    620c:	200f883a 	mov	r7,r4
    6210:	28c00017 	ldw	r3,0(r5)
    6214:	31bffc04 	addi	r6,r6,-16
    6218:	38c00015 	stw	r3,0(r7)
    621c:	28800117 	ldw	r2,4(r5)
    6220:	38800115 	stw	r2,4(r7)
    6224:	28c00217 	ldw	r3,8(r5)
    6228:	38c00215 	stw	r3,8(r7)
    622c:	28800317 	ldw	r2,12(r5)
    6230:	29400404 	addi	r5,r5,16
    6234:	38800315 	stw	r2,12(r7)
    6238:	39c00404 	addi	r7,r7,16
    623c:	41bff436 	bltu	r8,r6,6210 <memcpy+0x44>
    6240:	008000c4 	movi	r2,3
    6244:	1180072e 	bgeu	r2,r6,6264 <memcpy+0x98>
    6248:	1007883a 	mov	r3,r2
    624c:	28800017 	ldw	r2,0(r5)
    6250:	31bfff04 	addi	r6,r6,-4
    6254:	29400104 	addi	r5,r5,4
    6258:	38800015 	stw	r2,0(r7)
    625c:	39c00104 	addi	r7,r7,4
    6260:	19bffa36 	bltu	r3,r6,624c <memcpy+0x80>
    6264:	3807883a 	mov	r3,r7
    6268:	003fde06 	br	61e4 <memcpy+0x18>

0000626c <putc>:
    626c:	defffc04 	addi	sp,sp,-16
    6270:	dc800215 	stw	r18,8(sp)
    6274:	04800074 	movhi	r18,1
    6278:	94a9ff04 	addi	r18,r18,-22532
    627c:	90c00017 	ldw	r3,0(r18)
    6280:	dc400115 	stw	r17,4(sp)
    6284:	dc000015 	stw	r16,0(sp)
    6288:	dfc00315 	stw	ra,12(sp)
    628c:	2023883a 	mov	r17,r4
    6290:	2821883a 	mov	r16,r5
    6294:	18000226 	beq	r3,zero,62a0 <putc+0x34>
    6298:	18800e17 	ldw	r2,56(r3)
    629c:	10001126 	beq	r2,zero,62e4 <putc+0x78>
    62a0:	80800217 	ldw	r2,8(r16)
    62a4:	10ffffc4 	addi	r3,r2,-1
    62a8:	80c00215 	stw	r3,8(r16)
    62ac:	18001316 	blt	r3,zero,62fc <putc+0x90>
    62b0:	80800017 	ldw	r2,0(r16)
    62b4:	14400005 	stb	r17,0(r2)
    62b8:	80c00017 	ldw	r3,0(r16)
    62bc:	18800044 	addi	r2,r3,1
    62c0:	18c00003 	ldbu	r3,0(r3)
    62c4:	80800015 	stw	r2,0(r16)
    62c8:	1805883a 	mov	r2,r3
    62cc:	dfc00317 	ldw	ra,12(sp)
    62d0:	dc800217 	ldw	r18,8(sp)
    62d4:	dc400117 	ldw	r17,4(sp)
    62d8:	dc000017 	ldw	r16,0(sp)
    62dc:	dec00404 	addi	sp,sp,16
    62e0:	f800283a 	ret
    62e4:	1809883a 	mov	r4,r3
    62e8:	0006cd40 	call	6cd4 <__sinit>
    62ec:	80800217 	ldw	r2,8(r16)
    62f0:	10ffffc4 	addi	r3,r2,-1
    62f4:	80c00215 	stw	r3,8(r16)
    62f8:	183fed0e 	bge	r3,zero,62b0 <putc+0x44>
    62fc:	80800617 	ldw	r2,24(r16)
    6300:	18800f16 	blt	r3,r2,6340 <putc+0xd4>
    6304:	80800017 	ldw	r2,0(r16)
    6308:	14400005 	stb	r17,0(r2)
    630c:	81000017 	ldw	r4,0(r16)
    6310:	00800284 	movi	r2,10
    6314:	20c00003 	ldbu	r3,0(r4)
    6318:	18801226 	beq	r3,r2,6364 <putc+0xf8>
    631c:	20800044 	addi	r2,r4,1
    6320:	80800015 	stw	r2,0(r16)
    6324:	1805883a 	mov	r2,r3
    6328:	dfc00317 	ldw	ra,12(sp)
    632c:	dc800217 	ldw	r18,8(sp)
    6330:	dc400117 	ldw	r17,4(sp)
    6334:	dc000017 	ldw	r16,0(sp)
    6338:	dec00404 	addi	sp,sp,16
    633c:	f800283a 	ret
    6340:	91000017 	ldw	r4,0(r18)
    6344:	880b883a 	mov	r5,r17
    6348:	800d883a 	mov	r6,r16
    634c:	dfc00317 	ldw	ra,12(sp)
    6350:	dc800217 	ldw	r18,8(sp)
    6354:	dc400117 	ldw	r17,4(sp)
    6358:	dc000017 	ldw	r16,0(sp)
    635c:	dec00404 	addi	sp,sp,16
    6360:	00064cc1 	jmpi	64cc <__swbuf_r>
    6364:	91000017 	ldw	r4,0(r18)
    6368:	180b883a 	mov	r5,r3
    636c:	003ff606 	br	6348 <putc+0xdc>

00006370 <_putc_r>:
    6370:	defffc04 	addi	sp,sp,-16
    6374:	dc400215 	stw	r17,8(sp)
    6378:	dc000115 	stw	r16,4(sp)
    637c:	dfc00315 	stw	ra,12(sp)
    6380:	2021883a 	mov	r16,r4
    6384:	2823883a 	mov	r17,r5
    6388:	20000226 	beq	r4,zero,6394 <_putc_r+0x24>
    638c:	20800e17 	ldw	r2,56(r4)
    6390:	10001026 	beq	r2,zero,63d4 <_putc_r+0x64>
    6394:	30800217 	ldw	r2,8(r6)
    6398:	10ffffc4 	addi	r3,r2,-1
    639c:	30c00215 	stw	r3,8(r6)
    63a0:	18001316 	blt	r3,zero,63f0 <_putc_r+0x80>
    63a4:	30800017 	ldw	r2,0(r6)
    63a8:	14400005 	stb	r17,0(r2)
    63ac:	30c00017 	ldw	r3,0(r6)
    63b0:	18800044 	addi	r2,r3,1
    63b4:	18c00003 	ldbu	r3,0(r3)
    63b8:	30800015 	stw	r2,0(r6)
    63bc:	1805883a 	mov	r2,r3
    63c0:	dfc00317 	ldw	ra,12(sp)
    63c4:	dc400217 	ldw	r17,8(sp)
    63c8:	dc000117 	ldw	r16,4(sp)
    63cc:	dec00404 	addi	sp,sp,16
    63d0:	f800283a 	ret
    63d4:	d9800015 	stw	r6,0(sp)
    63d8:	0006cd40 	call	6cd4 <__sinit>
    63dc:	d9800017 	ldw	r6,0(sp)
    63e0:	30800217 	ldw	r2,8(r6)
    63e4:	10ffffc4 	addi	r3,r2,-1
    63e8:	30c00215 	stw	r3,8(r6)
    63ec:	183fed0e 	bge	r3,zero,63a4 <_putc_r+0x34>
    63f0:	30800617 	ldw	r2,24(r6)
    63f4:	18800e16 	blt	r3,r2,6430 <_putc_r+0xc0>
    63f8:	30800017 	ldw	r2,0(r6)
    63fc:	14400005 	stb	r17,0(r2)
    6400:	31000017 	ldw	r4,0(r6)
    6404:	00800284 	movi	r2,10
    6408:	20c00003 	ldbu	r3,0(r4)
    640c:	18800f26 	beq	r3,r2,644c <_putc_r+0xdc>
    6410:	20800044 	addi	r2,r4,1
    6414:	30800015 	stw	r2,0(r6)
    6418:	1805883a 	mov	r2,r3
    641c:	dfc00317 	ldw	ra,12(sp)
    6420:	dc400217 	ldw	r17,8(sp)
    6424:	dc000117 	ldw	r16,4(sp)
    6428:	dec00404 	addi	sp,sp,16
    642c:	f800283a 	ret
    6430:	8009883a 	mov	r4,r16
    6434:	880b883a 	mov	r5,r17
    6438:	dfc00317 	ldw	ra,12(sp)
    643c:	dc400217 	ldw	r17,8(sp)
    6440:	dc000117 	ldw	r16,4(sp)
    6444:	dec00404 	addi	sp,sp,16
    6448:	00064cc1 	jmpi	64cc <__swbuf_r>
    644c:	8009883a 	mov	r4,r16
    6450:	180b883a 	mov	r5,r3
    6454:	003ff806 	br	6438 <_putc_r+0xc8>

00006458 <strlen>:
    6458:	208000cc 	andi	r2,r4,3
    645c:	2011883a 	mov	r8,r4
    6460:	1000161e 	bne	r2,zero,64bc <strlen+0x64>
    6464:	20c00017 	ldw	r3,0(r4)
    6468:	017fbff4 	movhi	r5,65279
    646c:	297fbfc4 	addi	r5,r5,-257
    6470:	01e02074 	movhi	r7,32897
    6474:	39e02004 	addi	r7,r7,-32640
    6478:	1945883a 	add	r2,r3,r5
    647c:	11c4703a 	and	r2,r2,r7
    6480:	00c6303a 	nor	r3,zero,r3
    6484:	1886703a 	and	r3,r3,r2
    6488:	18000c1e 	bne	r3,zero,64bc <strlen+0x64>
    648c:	280d883a 	mov	r6,r5
    6490:	380b883a 	mov	r5,r7
    6494:	21000104 	addi	r4,r4,4
    6498:	20800017 	ldw	r2,0(r4)
    649c:	1187883a 	add	r3,r2,r6
    64a0:	1946703a 	and	r3,r3,r5
    64a4:	0084303a 	nor	r2,zero,r2
    64a8:	10c4703a 	and	r2,r2,r3
    64ac:	103ff926 	beq	r2,zero,6494 <strlen+0x3c>
    64b0:	20800007 	ldb	r2,0(r4)
    64b4:	10000326 	beq	r2,zero,64c4 <strlen+0x6c>
    64b8:	21000044 	addi	r4,r4,1
    64bc:	20800007 	ldb	r2,0(r4)
    64c0:	103ffd1e 	bne	r2,zero,64b8 <strlen+0x60>
    64c4:	2205c83a 	sub	r2,r4,r8
    64c8:	f800283a 	ret

000064cc <__swbuf_r>:
    64cc:	defffc04 	addi	sp,sp,-16
    64d0:	dc400215 	stw	r17,8(sp)
    64d4:	dc000115 	stw	r16,4(sp)
    64d8:	dfc00315 	stw	ra,12(sp)
    64dc:	2023883a 	mov	r17,r4
    64e0:	2821883a 	mov	r16,r5
    64e4:	20000226 	beq	r4,zero,64f0 <__swbuf_r+0x24>
    64e8:	20800e17 	ldw	r2,56(r4)
    64ec:	10002f26 	beq	r2,zero,65ac <__swbuf_r+0xe0>
    64f0:	3080030b 	ldhu	r2,12(r6)
    64f4:	30c00617 	ldw	r3,24(r6)
    64f8:	1080020c 	andi	r2,r2,8
    64fc:	30c00215 	stw	r3,8(r6)
    6500:	10002226 	beq	r2,zero,658c <__swbuf_r+0xc0>
    6504:	30c00417 	ldw	r3,16(r6)
    6508:	18002026 	beq	r3,zero,658c <__swbuf_r+0xc0>
    650c:	31000017 	ldw	r4,0(r6)
    6510:	30800517 	ldw	r2,20(r6)
    6514:	20c7c83a 	sub	r3,r4,r3
    6518:	18802f0e 	bge	r3,r2,65d8 <__swbuf_r+0x10c>
    651c:	19400044 	addi	r5,r3,1
    6520:	30800217 	ldw	r2,8(r6)
    6524:	84003fcc 	andi	r16,r16,255
    6528:	20c00044 	addi	r3,r4,1
    652c:	10bfffc4 	addi	r2,r2,-1
    6530:	30800215 	stw	r2,8(r6)
    6534:	24000005 	stb	r16,0(r4)
    6538:	30800517 	ldw	r2,20(r6)
    653c:	30c00015 	stw	r3,0(r6)
    6540:	11400c26 	beq	r2,r5,6574 <__swbuf_r+0xa8>
    6544:	3080030b 	ldhu	r2,12(r6)
    6548:	1080004c 	andi	r2,r2,1
    654c:	1005003a 	cmpeq	r2,r2,zero
    6550:	10000626 	beq	r2,zero,656c <__swbuf_r+0xa0>
    6554:	8005883a 	mov	r2,r16
    6558:	dfc00317 	ldw	ra,12(sp)
    655c:	dc400217 	ldw	r17,8(sp)
    6560:	dc000117 	ldw	r16,4(sp)
    6564:	dec00404 	addi	sp,sp,16
    6568:	f800283a 	ret
    656c:	00800284 	movi	r2,10
    6570:	80bff81e 	bne	r16,r2,6554 <__swbuf_r+0x88>
    6574:	8809883a 	mov	r4,r17
    6578:	300b883a 	mov	r5,r6
    657c:	0006a3c0 	call	6a3c <_fflush_r>
    6580:	103ff426 	beq	r2,zero,6554 <__swbuf_r+0x88>
    6584:	043fffc4 	movi	r16,-1
    6588:	003ff206 	br	6554 <__swbuf_r+0x88>
    658c:	300b883a 	mov	r5,r6
    6590:	8809883a 	mov	r4,r17
    6594:	d9800015 	stw	r6,0(sp)
    6598:	00066180 	call	6618 <__swsetup_r>
    659c:	d9800017 	ldw	r6,0(sp)
    65a0:	1000061e 	bne	r2,zero,65bc <__swbuf_r+0xf0>
    65a4:	30c00417 	ldw	r3,16(r6)
    65a8:	003fd806 	br	650c <__swbuf_r+0x40>
    65ac:	d9800015 	stw	r6,0(sp)
    65b0:	0006cd40 	call	6cd4 <__sinit>
    65b4:	d9800017 	ldw	r6,0(sp)
    65b8:	003fcd06 	br	64f0 <__swbuf_r+0x24>
    65bc:	3080030b 	ldhu	r2,12(r6)
    65c0:	00c00244 	movi	r3,9
    65c4:	043fffc4 	movi	r16,-1
    65c8:	10801014 	ori	r2,r2,64
    65cc:	3080030d 	sth	r2,12(r6)
    65d0:	88c00015 	stw	r3,0(r17)
    65d4:	003fdf06 	br	6554 <__swbuf_r+0x88>
    65d8:	300b883a 	mov	r5,r6
    65dc:	8809883a 	mov	r4,r17
    65e0:	d9800015 	stw	r6,0(sp)
    65e4:	0006a3c0 	call	6a3c <_fflush_r>
    65e8:	d9800017 	ldw	r6,0(sp)
    65ec:	103fe51e 	bne	r2,zero,6584 <__swbuf_r+0xb8>
    65f0:	31000017 	ldw	r4,0(r6)
    65f4:	01400044 	movi	r5,1
    65f8:	003fc906 	br	6520 <__swbuf_r+0x54>

000065fc <__swbuf>:
    65fc:	01800074 	movhi	r6,1
    6600:	31a9ff04 	addi	r6,r6,-22532
    6604:	2007883a 	mov	r3,r4
    6608:	31000017 	ldw	r4,0(r6)
    660c:	280d883a 	mov	r6,r5
    6610:	180b883a 	mov	r5,r3
    6614:	00064cc1 	jmpi	64cc <__swbuf_r>

00006618 <__swsetup_r>:
    6618:	00800074 	movhi	r2,1
    661c:	10a9ff04 	addi	r2,r2,-22532
    6620:	10c00017 	ldw	r3,0(r2)
    6624:	defffd04 	addi	sp,sp,-12
    6628:	dc400115 	stw	r17,4(sp)
    662c:	dc000015 	stw	r16,0(sp)
    6630:	dfc00215 	stw	ra,8(sp)
    6634:	2023883a 	mov	r17,r4
    6638:	2821883a 	mov	r16,r5
    663c:	18000226 	beq	r3,zero,6648 <__swsetup_r+0x30>
    6640:	18800e17 	ldw	r2,56(r3)
    6644:	10001f26 	beq	r2,zero,66c4 <__swsetup_r+0xac>
    6648:	8100030b 	ldhu	r4,12(r16)
    664c:	2080020c 	andi	r2,r4,8
    6650:	10002826 	beq	r2,zero,66f4 <__swsetup_r+0xdc>
    6654:	81400417 	ldw	r5,16(r16)
    6658:	28001d26 	beq	r5,zero,66d0 <__swsetup_r+0xb8>
    665c:	2080004c 	andi	r2,r4,1
    6660:	1005003a 	cmpeq	r2,r2,zero
    6664:	10000b26 	beq	r2,zero,6694 <__swsetup_r+0x7c>
    6668:	2080008c 	andi	r2,r4,2
    666c:	10001226 	beq	r2,zero,66b8 <__swsetup_r+0xa0>
    6670:	0005883a 	mov	r2,zero
    6674:	80800215 	stw	r2,8(r16)
    6678:	28000b26 	beq	r5,zero,66a8 <__swsetup_r+0x90>
    667c:	0005883a 	mov	r2,zero
    6680:	dfc00217 	ldw	ra,8(sp)
    6684:	dc400117 	ldw	r17,4(sp)
    6688:	dc000017 	ldw	r16,0(sp)
    668c:	dec00304 	addi	sp,sp,12
    6690:	f800283a 	ret
    6694:	80800517 	ldw	r2,20(r16)
    6698:	80000215 	stw	zero,8(r16)
    669c:	0085c83a 	sub	r2,zero,r2
    66a0:	80800615 	stw	r2,24(r16)
    66a4:	283ff51e 	bne	r5,zero,667c <__swsetup_r+0x64>
    66a8:	2080200c 	andi	r2,r4,128
    66ac:	103ff326 	beq	r2,zero,667c <__swsetup_r+0x64>
    66b0:	00bfffc4 	movi	r2,-1
    66b4:	003ff206 	br	6680 <__swsetup_r+0x68>
    66b8:	80800517 	ldw	r2,20(r16)
    66bc:	80800215 	stw	r2,8(r16)
    66c0:	003fed06 	br	6678 <__swsetup_r+0x60>
    66c4:	1809883a 	mov	r4,r3
    66c8:	0006cd40 	call	6cd4 <__sinit>
    66cc:	003fde06 	br	6648 <__swsetup_r+0x30>
    66d0:	20c0a00c 	andi	r3,r4,640
    66d4:	00808004 	movi	r2,512
    66d8:	18bfe026 	beq	r3,r2,665c <__swsetup_r+0x44>
    66dc:	8809883a 	mov	r4,r17
    66e0:	800b883a 	mov	r5,r16
    66e4:	00074ec0 	call	74ec <__smakebuf_r>
    66e8:	8100030b 	ldhu	r4,12(r16)
    66ec:	81400417 	ldw	r5,16(r16)
    66f0:	003fda06 	br	665c <__swsetup_r+0x44>
    66f4:	2080040c 	andi	r2,r4,16
    66f8:	103fed26 	beq	r2,zero,66b0 <__swsetup_r+0x98>
    66fc:	2080010c 	andi	r2,r4,4
    6700:	10001226 	beq	r2,zero,674c <__swsetup_r+0x134>
    6704:	81400c17 	ldw	r5,48(r16)
    6708:	28000526 	beq	r5,zero,6720 <__swsetup_r+0x108>
    670c:	80801004 	addi	r2,r16,64
    6710:	28800226 	beq	r5,r2,671c <__swsetup_r+0x104>
    6714:	8809883a 	mov	r4,r17
    6718:	00070580 	call	7058 <_free_r>
    671c:	80000c15 	stw	zero,48(r16)
    6720:	8080030b 	ldhu	r2,12(r16)
    6724:	81400417 	ldw	r5,16(r16)
    6728:	80000115 	stw	zero,4(r16)
    672c:	10bff6cc 	andi	r2,r2,65499
    6730:	8080030d 	sth	r2,12(r16)
    6734:	81400015 	stw	r5,0(r16)
    6738:	8080030b 	ldhu	r2,12(r16)
    673c:	10800214 	ori	r2,r2,8
    6740:	113fffcc 	andi	r4,r2,65535
    6744:	8080030d 	sth	r2,12(r16)
    6748:	003fc306 	br	6658 <__swsetup_r+0x40>
    674c:	81400417 	ldw	r5,16(r16)
    6750:	003ff906 	br	6738 <__swsetup_r+0x120>

00006754 <__register_exitproc>:
    6754:	defffa04 	addi	sp,sp,-24
    6758:	00800074 	movhi	r2,1
    675c:	10aa0004 	addi	r2,r2,-22528
    6760:	dc000015 	stw	r16,0(sp)
    6764:	14000017 	ldw	r16,0(r2)
    6768:	dd000415 	stw	r20,16(sp)
    676c:	2829883a 	mov	r20,r5
    6770:	81405217 	ldw	r5,328(r16)
    6774:	dcc00315 	stw	r19,12(sp)
    6778:	dc800215 	stw	r18,8(sp)
    677c:	dc400115 	stw	r17,4(sp)
    6780:	dfc00515 	stw	ra,20(sp)
    6784:	2023883a 	mov	r17,r4
    6788:	3027883a 	mov	r19,r6
    678c:	3825883a 	mov	r18,r7
    6790:	28002526 	beq	r5,zero,6828 <__register_exitproc+0xd4>
    6794:	29000117 	ldw	r4,4(r5)
    6798:	008007c4 	movi	r2,31
    679c:	11002716 	blt	r2,r4,683c <__register_exitproc+0xe8>
    67a0:	8800101e 	bne	r17,zero,67e4 <__register_exitproc+0x90>
    67a4:	2105883a 	add	r2,r4,r4
    67a8:	1085883a 	add	r2,r2,r2
    67ac:	20c00044 	addi	r3,r4,1
    67b0:	1145883a 	add	r2,r2,r5
    67b4:	0009883a 	mov	r4,zero
    67b8:	15000215 	stw	r20,8(r2)
    67bc:	28c00115 	stw	r3,4(r5)
    67c0:	2005883a 	mov	r2,r4
    67c4:	dfc00517 	ldw	ra,20(sp)
    67c8:	dd000417 	ldw	r20,16(sp)
    67cc:	dcc00317 	ldw	r19,12(sp)
    67d0:	dc800217 	ldw	r18,8(sp)
    67d4:	dc400117 	ldw	r17,4(sp)
    67d8:	dc000017 	ldw	r16,0(sp)
    67dc:	dec00604 	addi	sp,sp,24
    67e0:	f800283a 	ret
    67e4:	29802204 	addi	r6,r5,136
    67e8:	00800044 	movi	r2,1
    67ec:	110e983a 	sll	r7,r2,r4
    67f0:	30c04017 	ldw	r3,256(r6)
    67f4:	2105883a 	add	r2,r4,r4
    67f8:	1085883a 	add	r2,r2,r2
    67fc:	1185883a 	add	r2,r2,r6
    6800:	19c6b03a 	or	r3,r3,r7
    6804:	14802015 	stw	r18,128(r2)
    6808:	14c00015 	stw	r19,0(r2)
    680c:	00800084 	movi	r2,2
    6810:	30c04015 	stw	r3,256(r6)
    6814:	88bfe31e 	bne	r17,r2,67a4 <__register_exitproc+0x50>
    6818:	30804117 	ldw	r2,260(r6)
    681c:	11c4b03a 	or	r2,r2,r7
    6820:	30804115 	stw	r2,260(r6)
    6824:	003fdf06 	br	67a4 <__register_exitproc+0x50>
    6828:	00800074 	movhi	r2,1
    682c:	10b0ff04 	addi	r2,r2,-15364
    6830:	100b883a 	mov	r5,r2
    6834:	80805215 	stw	r2,328(r16)
    6838:	003fd606 	br	6794 <__register_exitproc+0x40>
    683c:	00800034 	movhi	r2,0
    6840:	10800004 	addi	r2,r2,0
    6844:	1000021e 	bne	r2,zero,6850 <__register_exitproc+0xfc>
    6848:	013fffc4 	movi	r4,-1
    684c:	003fdc06 	br	67c0 <__register_exitproc+0x6c>
    6850:	01006404 	movi	r4,400
    6854:	103ee83a 	callr	r2
    6858:	1007883a 	mov	r3,r2
    685c:	103ffa26 	beq	r2,zero,6848 <__register_exitproc+0xf4>
    6860:	80805217 	ldw	r2,328(r16)
    6864:	180b883a 	mov	r5,r3
    6868:	18000115 	stw	zero,4(r3)
    686c:	18800015 	stw	r2,0(r3)
    6870:	80c05215 	stw	r3,328(r16)
    6874:	18006215 	stw	zero,392(r3)
    6878:	18006315 	stw	zero,396(r3)
    687c:	0009883a 	mov	r4,zero
    6880:	883fc826 	beq	r17,zero,67a4 <__register_exitproc+0x50>
    6884:	003fd706 	br	67e4 <__register_exitproc+0x90>

00006888 <register_fini>:
    6888:	f800283a 	ret

0000688c <__call_exitprocs>:
    688c:	00800074 	movhi	r2,1
    6890:	10aa0004 	addi	r2,r2,-22528
    6894:	10800017 	ldw	r2,0(r2)
    6898:	defff304 	addi	sp,sp,-52
    689c:	df000b15 	stw	fp,44(sp)
    68a0:	d8800115 	stw	r2,4(sp)
    68a4:	00800034 	movhi	r2,0
    68a8:	10800004 	addi	r2,r2,0
    68ac:	1005003a 	cmpeq	r2,r2,zero
    68b0:	d8800215 	stw	r2,8(sp)
    68b4:	d8800117 	ldw	r2,4(sp)
    68b8:	dd400815 	stw	r21,32(sp)
    68bc:	dd000715 	stw	r20,28(sp)
    68c0:	10805204 	addi	r2,r2,328
    68c4:	dfc00c15 	stw	ra,48(sp)
    68c8:	ddc00a15 	stw	r23,40(sp)
    68cc:	dd800915 	stw	r22,36(sp)
    68d0:	dcc00615 	stw	r19,24(sp)
    68d4:	dc800515 	stw	r18,20(sp)
    68d8:	dc400415 	stw	r17,16(sp)
    68dc:	dc000315 	stw	r16,12(sp)
    68e0:	282b883a 	mov	r21,r5
    68e4:	2039883a 	mov	fp,r4
    68e8:	d8800015 	stw	r2,0(sp)
    68ec:	2829003a 	cmpeq	r20,r5,zero
    68f0:	d8800117 	ldw	r2,4(sp)
    68f4:	14405217 	ldw	r17,328(r2)
    68f8:	88001026 	beq	r17,zero,693c <__call_exitprocs+0xb0>
    68fc:	ddc00017 	ldw	r23,0(sp)
    6900:	88800117 	ldw	r2,4(r17)
    6904:	8c802204 	addi	r18,r17,136
    6908:	143fffc4 	addi	r16,r2,-1
    690c:	80000916 	blt	r16,zero,6934 <__call_exitprocs+0xa8>
    6910:	05bfffc4 	movi	r22,-1
    6914:	a000151e 	bne	r20,zero,696c <__call_exitprocs+0xe0>
    6918:	8409883a 	add	r4,r16,r16
    691c:	2105883a 	add	r2,r4,r4
    6920:	1485883a 	add	r2,r2,r18
    6924:	10c02017 	ldw	r3,128(r2)
    6928:	a8c01126 	beq	r21,r3,6970 <__call_exitprocs+0xe4>
    692c:	843fffc4 	addi	r16,r16,-1
    6930:	85bff81e 	bne	r16,r22,6914 <__call_exitprocs+0x88>
    6934:	d8800217 	ldw	r2,8(sp)
    6938:	10003126 	beq	r2,zero,6a00 <__call_exitprocs+0x174>
    693c:	dfc00c17 	ldw	ra,48(sp)
    6940:	df000b17 	ldw	fp,44(sp)
    6944:	ddc00a17 	ldw	r23,40(sp)
    6948:	dd800917 	ldw	r22,36(sp)
    694c:	dd400817 	ldw	r21,32(sp)
    6950:	dd000717 	ldw	r20,28(sp)
    6954:	dcc00617 	ldw	r19,24(sp)
    6958:	dc800517 	ldw	r18,20(sp)
    695c:	dc400417 	ldw	r17,16(sp)
    6960:	dc000317 	ldw	r16,12(sp)
    6964:	dec00d04 	addi	sp,sp,52
    6968:	f800283a 	ret
    696c:	8409883a 	add	r4,r16,r16
    6970:	88c00117 	ldw	r3,4(r17)
    6974:	2105883a 	add	r2,r4,r4
    6978:	1445883a 	add	r2,r2,r17
    697c:	18ffffc4 	addi	r3,r3,-1
    6980:	11800217 	ldw	r6,8(r2)
    6984:	1c001526 	beq	r3,r16,69dc <__call_exitprocs+0x150>
    6988:	10000215 	stw	zero,8(r2)
    698c:	303fe726 	beq	r6,zero,692c <__call_exitprocs+0xa0>
    6990:	00c00044 	movi	r3,1
    6994:	1c06983a 	sll	r3,r3,r16
    6998:	90804017 	ldw	r2,256(r18)
    699c:	8cc00117 	ldw	r19,4(r17)
    69a0:	1884703a 	and	r2,r3,r2
    69a4:	10001426 	beq	r2,zero,69f8 <__call_exitprocs+0x16c>
    69a8:	90804117 	ldw	r2,260(r18)
    69ac:	1884703a 	and	r2,r3,r2
    69b0:	10000c1e 	bne	r2,zero,69e4 <__call_exitprocs+0x158>
    69b4:	2105883a 	add	r2,r4,r4
    69b8:	1485883a 	add	r2,r2,r18
    69bc:	11400017 	ldw	r5,0(r2)
    69c0:	e009883a 	mov	r4,fp
    69c4:	303ee83a 	callr	r6
    69c8:	88800117 	ldw	r2,4(r17)
    69cc:	98bfc81e 	bne	r19,r2,68f0 <__call_exitprocs+0x64>
    69d0:	b8800017 	ldw	r2,0(r23)
    69d4:	147fd526 	beq	r2,r17,692c <__call_exitprocs+0xa0>
    69d8:	003fc506 	br	68f0 <__call_exitprocs+0x64>
    69dc:	8c000115 	stw	r16,4(r17)
    69e0:	003fea06 	br	698c <__call_exitprocs+0x100>
    69e4:	2105883a 	add	r2,r4,r4
    69e8:	1485883a 	add	r2,r2,r18
    69ec:	11000017 	ldw	r4,0(r2)
    69f0:	303ee83a 	callr	r6
    69f4:	003ff406 	br	69c8 <__call_exitprocs+0x13c>
    69f8:	303ee83a 	callr	r6
    69fc:	003ff206 	br	69c8 <__call_exitprocs+0x13c>
    6a00:	88800117 	ldw	r2,4(r17)
    6a04:	1000081e 	bne	r2,zero,6a28 <__call_exitprocs+0x19c>
    6a08:	89000017 	ldw	r4,0(r17)
    6a0c:	20000726 	beq	r4,zero,6a2c <__call_exitprocs+0x1a0>
    6a10:	b9000015 	stw	r4,0(r23)
    6a14:	8809883a 	mov	r4,r17
    6a18:	00000000 	call	0 <__alt_mem_SDRAM>
    6a1c:	bc400017 	ldw	r17,0(r23)
    6a20:	883fb71e 	bne	r17,zero,6900 <__call_exitprocs+0x74>
    6a24:	003fc506 	br	693c <__call_exitprocs+0xb0>
    6a28:	89000017 	ldw	r4,0(r17)
    6a2c:	882f883a 	mov	r23,r17
    6a30:	2023883a 	mov	r17,r4
    6a34:	883fb21e 	bne	r17,zero,6900 <__call_exitprocs+0x74>
    6a38:	003fc006 	br	693c <__call_exitprocs+0xb0>

00006a3c <_fflush_r>:
    6a3c:	defffb04 	addi	sp,sp,-20
    6a40:	dcc00315 	stw	r19,12(sp)
    6a44:	dc800215 	stw	r18,8(sp)
    6a48:	dfc00415 	stw	ra,16(sp)
    6a4c:	dc400115 	stw	r17,4(sp)
    6a50:	dc000015 	stw	r16,0(sp)
    6a54:	2027883a 	mov	r19,r4
    6a58:	2825883a 	mov	r18,r5
    6a5c:	20000226 	beq	r4,zero,6a68 <_fflush_r+0x2c>
    6a60:	20800e17 	ldw	r2,56(r4)
    6a64:	10005626 	beq	r2,zero,6bc0 <_fflush_r+0x184>
    6a68:	9100030b 	ldhu	r4,12(r18)
    6a6c:	20ffffcc 	andi	r3,r4,65535
    6a70:	18e0001c 	xori	r3,r3,32768
    6a74:	18e00004 	addi	r3,r3,-32768
    6a78:	1880020c 	andi	r2,r3,8
    6a7c:	1000261e 	bne	r2,zero,6b18 <_fflush_r+0xdc>
    6a80:	90c00117 	ldw	r3,4(r18)
    6a84:	20820014 	ori	r2,r4,2048
    6a88:	9080030d 	sth	r2,12(r18)
    6a8c:	1009883a 	mov	r4,r2
    6a90:	00c0400e 	bge	zero,r3,6b94 <_fflush_r+0x158>
    6a94:	92000a17 	ldw	r8,40(r18)
    6a98:	40004026 	beq	r8,zero,6b9c <_fflush_r+0x160>
    6a9c:	2084000c 	andi	r2,r4,4096
    6aa0:	10005326 	beq	r2,zero,6bf0 <_fflush_r+0x1b4>
    6aa4:	94001417 	ldw	r16,80(r18)
    6aa8:	9080030b 	ldhu	r2,12(r18)
    6aac:	1080010c 	andi	r2,r2,4
    6ab0:	1000481e 	bne	r2,zero,6bd4 <_fflush_r+0x198>
    6ab4:	91400717 	ldw	r5,28(r18)
    6ab8:	9809883a 	mov	r4,r19
    6abc:	800d883a 	mov	r6,r16
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	403ee83a 	callr	r8
    6ac8:	8080261e 	bne	r16,r2,6b64 <_fflush_r+0x128>
    6acc:	9080030b 	ldhu	r2,12(r18)
    6ad0:	91000417 	ldw	r4,16(r18)
    6ad4:	90000115 	stw	zero,4(r18)
    6ad8:	10bdffcc 	andi	r2,r2,63487
    6adc:	10ffffcc 	andi	r3,r2,65535
    6ae0:	18c4000c 	andi	r3,r3,4096
    6ae4:	9080030d 	sth	r2,12(r18)
    6ae8:	91000015 	stw	r4,0(r18)
    6aec:	18002b26 	beq	r3,zero,6b9c <_fflush_r+0x160>
    6af0:	0007883a 	mov	r3,zero
    6af4:	1805883a 	mov	r2,r3
    6af8:	94001415 	stw	r16,80(r18)
    6afc:	dfc00417 	ldw	ra,16(sp)
    6b00:	dcc00317 	ldw	r19,12(sp)
    6b04:	dc800217 	ldw	r18,8(sp)
    6b08:	dc400117 	ldw	r17,4(sp)
    6b0c:	dc000017 	ldw	r16,0(sp)
    6b10:	dec00504 	addi	sp,sp,20
    6b14:	f800283a 	ret
    6b18:	94400417 	ldw	r17,16(r18)
    6b1c:	88001f26 	beq	r17,zero,6b9c <_fflush_r+0x160>
    6b20:	90800017 	ldw	r2,0(r18)
    6b24:	18c000cc 	andi	r3,r3,3
    6b28:	94400015 	stw	r17,0(r18)
    6b2c:	1461c83a 	sub	r16,r2,r17
    6b30:	18002526 	beq	r3,zero,6bc8 <_fflush_r+0x18c>
    6b34:	0005883a 	mov	r2,zero
    6b38:	90800215 	stw	r2,8(r18)
    6b3c:	0400170e 	bge	zero,r16,6b9c <_fflush_r+0x160>
    6b40:	90c00917 	ldw	r3,36(r18)
    6b44:	91400717 	ldw	r5,28(r18)
    6b48:	880d883a 	mov	r6,r17
    6b4c:	800f883a 	mov	r7,r16
    6b50:	9809883a 	mov	r4,r19
    6b54:	183ee83a 	callr	r3
    6b58:	88a3883a 	add	r17,r17,r2
    6b5c:	80a1c83a 	sub	r16,r16,r2
    6b60:	00bff616 	blt	zero,r2,6b3c <_fflush_r+0x100>
    6b64:	9080030b 	ldhu	r2,12(r18)
    6b68:	00ffffc4 	movi	r3,-1
    6b6c:	10801014 	ori	r2,r2,64
    6b70:	9080030d 	sth	r2,12(r18)
    6b74:	1805883a 	mov	r2,r3
    6b78:	dfc00417 	ldw	ra,16(sp)
    6b7c:	dcc00317 	ldw	r19,12(sp)
    6b80:	dc800217 	ldw	r18,8(sp)
    6b84:	dc400117 	ldw	r17,4(sp)
    6b88:	dc000017 	ldw	r16,0(sp)
    6b8c:	dec00504 	addi	sp,sp,20
    6b90:	f800283a 	ret
    6b94:	90800f17 	ldw	r2,60(r18)
    6b98:	00bfbe16 	blt	zero,r2,6a94 <_fflush_r+0x58>
    6b9c:	0007883a 	mov	r3,zero
    6ba0:	1805883a 	mov	r2,r3
    6ba4:	dfc00417 	ldw	ra,16(sp)
    6ba8:	dcc00317 	ldw	r19,12(sp)
    6bac:	dc800217 	ldw	r18,8(sp)
    6bb0:	dc400117 	ldw	r17,4(sp)
    6bb4:	dc000017 	ldw	r16,0(sp)
    6bb8:	dec00504 	addi	sp,sp,20
    6bbc:	f800283a 	ret
    6bc0:	0006cd40 	call	6cd4 <__sinit>
    6bc4:	003fa806 	br	6a68 <_fflush_r+0x2c>
    6bc8:	90800517 	ldw	r2,20(r18)
    6bcc:	90800215 	stw	r2,8(r18)
    6bd0:	003fda06 	br	6b3c <_fflush_r+0x100>
    6bd4:	90800117 	ldw	r2,4(r18)
    6bd8:	90c00c17 	ldw	r3,48(r18)
    6bdc:	80a1c83a 	sub	r16,r16,r2
    6be0:	183fb426 	beq	r3,zero,6ab4 <_fflush_r+0x78>
    6be4:	90800f17 	ldw	r2,60(r18)
    6be8:	80a1c83a 	sub	r16,r16,r2
    6bec:	003fb106 	br	6ab4 <_fflush_r+0x78>
    6bf0:	91400717 	ldw	r5,28(r18)
    6bf4:	9809883a 	mov	r4,r19
    6bf8:	000d883a 	mov	r6,zero
    6bfc:	01c00044 	movi	r7,1
    6c00:	403ee83a 	callr	r8
    6c04:	1021883a 	mov	r16,r2
    6c08:	00bfffc4 	movi	r2,-1
    6c0c:	80800226 	beq	r16,r2,6c18 <_fflush_r+0x1dc>
    6c10:	92000a17 	ldw	r8,40(r18)
    6c14:	003fa406 	br	6aa8 <_fflush_r+0x6c>
    6c18:	98c00017 	ldw	r3,0(r19)
    6c1c:	00800744 	movi	r2,29
    6c20:	18bfde26 	beq	r3,r2,6b9c <_fflush_r+0x160>
    6c24:	9080030b 	ldhu	r2,12(r18)
    6c28:	8007883a 	mov	r3,r16
    6c2c:	10801014 	ori	r2,r2,64
    6c30:	9080030d 	sth	r2,12(r18)
    6c34:	003fcf06 	br	6b74 <_fflush_r+0x138>

00006c38 <fflush>:
    6c38:	01400034 	movhi	r5,0
    6c3c:	295a8f04 	addi	r5,r5,27196
    6c40:	2007883a 	mov	r3,r4
    6c44:	20000526 	beq	r4,zero,6c5c <fflush+0x24>
    6c48:	00800074 	movhi	r2,1
    6c4c:	10a9ff04 	addi	r2,r2,-22532
    6c50:	11000017 	ldw	r4,0(r2)
    6c54:	180b883a 	mov	r5,r3
    6c58:	0006a3c1 	jmpi	6a3c <_fflush_r>
    6c5c:	00800074 	movhi	r2,1
    6c60:	10aa0004 	addi	r2,r2,-22528
    6c64:	11000017 	ldw	r4,0(r2)
    6c68:	000736c1 	jmpi	736c <_fwalk_reent>

00006c6c <std>:
    6c6c:	00800034 	movhi	r2,0
    6c70:	109f8c04 	addi	r2,r2,32304
    6c74:	20800b15 	stw	r2,44(r4)
    6c78:	00800034 	movhi	r2,0
    6c7c:	109fc704 	addi	r2,r2,32540
    6c80:	20800815 	stw	r2,32(r4)
    6c84:	00c00034 	movhi	r3,0
    6c88:	18dfa804 	addi	r3,r3,32416
    6c8c:	00800034 	movhi	r2,0
    6c90:	109f8e04 	addi	r2,r2,32312
    6c94:	2140030d 	sth	r5,12(r4)
    6c98:	2180038d 	sth	r6,14(r4)
    6c9c:	20c00915 	stw	r3,36(r4)
    6ca0:	20800a15 	stw	r2,40(r4)
    6ca4:	20000015 	stw	zero,0(r4)
    6ca8:	20000115 	stw	zero,4(r4)
    6cac:	20000215 	stw	zero,8(r4)
    6cb0:	20000415 	stw	zero,16(r4)
    6cb4:	20000515 	stw	zero,20(r4)
    6cb8:	20000615 	stw	zero,24(r4)
    6cbc:	21000715 	stw	r4,28(r4)
    6cc0:	f800283a 	ret

00006cc4 <__sfp_lock_acquire>:
    6cc4:	f800283a 	ret

00006cc8 <__sfp_lock_release>:
    6cc8:	f800283a 	ret

00006ccc <__sinit_lock_acquire>:
    6ccc:	f800283a 	ret

00006cd0 <__sinit_lock_release>:
    6cd0:	f800283a 	ret

00006cd4 <__sinit>:
    6cd4:	20800e17 	ldw	r2,56(r4)
    6cd8:	defffd04 	addi	sp,sp,-12
    6cdc:	dc400115 	stw	r17,4(sp)
    6ce0:	dc000015 	stw	r16,0(sp)
    6ce4:	dfc00215 	stw	ra,8(sp)
    6ce8:	04400044 	movi	r17,1
    6cec:	01400104 	movi	r5,4
    6cf0:	000d883a 	mov	r6,zero
    6cf4:	2021883a 	mov	r16,r4
    6cf8:	2200bb04 	addi	r8,r4,748
    6cfc:	200f883a 	mov	r7,r4
    6d00:	10000526 	beq	r2,zero,6d18 <__sinit+0x44>
    6d04:	dfc00217 	ldw	ra,8(sp)
    6d08:	dc400117 	ldw	r17,4(sp)
    6d0c:	dc000017 	ldw	r16,0(sp)
    6d10:	dec00304 	addi	sp,sp,12
    6d14:	f800283a 	ret
    6d18:	21000117 	ldw	r4,4(r4)
    6d1c:	00800034 	movhi	r2,0
    6d20:	109b6e04 	addi	r2,r2,28088
    6d24:	00c000c4 	movi	r3,3
    6d28:	80800f15 	stw	r2,60(r16)
    6d2c:	80c0b915 	stw	r3,740(r16)
    6d30:	8200ba15 	stw	r8,744(r16)
    6d34:	84400e15 	stw	r17,56(r16)
    6d38:	8000b815 	stw	zero,736(r16)
    6d3c:	0006c6c0 	call	6c6c <std>
    6d40:	81000217 	ldw	r4,8(r16)
    6d44:	880d883a 	mov	r6,r17
    6d48:	800f883a 	mov	r7,r16
    6d4c:	01400284 	movi	r5,10
    6d50:	0006c6c0 	call	6c6c <std>
    6d54:	81000317 	ldw	r4,12(r16)
    6d58:	800f883a 	mov	r7,r16
    6d5c:	01400484 	movi	r5,18
    6d60:	01800084 	movi	r6,2
    6d64:	dfc00217 	ldw	ra,8(sp)
    6d68:	dc400117 	ldw	r17,4(sp)
    6d6c:	dc000017 	ldw	r16,0(sp)
    6d70:	dec00304 	addi	sp,sp,12
    6d74:	0006c6c1 	jmpi	6c6c <std>

00006d78 <__fp_lock>:
    6d78:	0005883a 	mov	r2,zero
    6d7c:	f800283a 	ret

00006d80 <__fp_unlock>:
    6d80:	0005883a 	mov	r2,zero
    6d84:	f800283a 	ret

00006d88 <__fp_unlock_all>:
    6d88:	00800074 	movhi	r2,1
    6d8c:	10a9ff04 	addi	r2,r2,-22532
    6d90:	11000017 	ldw	r4,0(r2)
    6d94:	01400034 	movhi	r5,0
    6d98:	295b6004 	addi	r5,r5,28032
    6d9c:	00074341 	jmpi	7434 <_fwalk>

00006da0 <__fp_lock_all>:
    6da0:	00800074 	movhi	r2,1
    6da4:	10a9ff04 	addi	r2,r2,-22532
    6da8:	11000017 	ldw	r4,0(r2)
    6dac:	01400034 	movhi	r5,0
    6db0:	295b5e04 	addi	r5,r5,28024
    6db4:	00074341 	jmpi	7434 <_fwalk>

00006db8 <_cleanup_r>:
    6db8:	01400074 	movhi	r5,1
    6dbc:	29605d04 	addi	r5,r5,-32396
    6dc0:	00074341 	jmpi	7434 <_fwalk>

00006dc4 <_cleanup>:
    6dc4:	00800074 	movhi	r2,1
    6dc8:	10aa0004 	addi	r2,r2,-22528
    6dcc:	11000017 	ldw	r4,0(r2)
    6dd0:	0006db81 	jmpi	6db8 <_cleanup_r>

00006dd4 <__sfmoreglue>:
    6dd4:	defffc04 	addi	sp,sp,-16
    6dd8:	dc400115 	stw	r17,4(sp)
    6ddc:	2c401724 	muli	r17,r5,92
    6de0:	dc800215 	stw	r18,8(sp)
    6de4:	2825883a 	mov	r18,r5
    6de8:	89400304 	addi	r5,r17,12
    6dec:	dc000015 	stw	r16,0(sp)
    6df0:	dfc00315 	stw	ra,12(sp)
    6df4:	00076800 	call	7680 <_malloc_r>
    6df8:	0021883a 	mov	r16,zero
    6dfc:	880d883a 	mov	r6,r17
    6e00:	000b883a 	mov	r5,zero
    6e04:	10000626 	beq	r2,zero,6e20 <__sfmoreglue+0x4c>
    6e08:	11000304 	addi	r4,r2,12
    6e0c:	14800115 	stw	r18,4(r2)
    6e10:	10000015 	stw	zero,0(r2)
    6e14:	11000215 	stw	r4,8(r2)
    6e18:	1021883a 	mov	r16,r2
    6e1c:	00039d80 	call	39d8 <memset>
    6e20:	8005883a 	mov	r2,r16
    6e24:	dfc00317 	ldw	ra,12(sp)
    6e28:	dc800217 	ldw	r18,8(sp)
    6e2c:	dc400117 	ldw	r17,4(sp)
    6e30:	dc000017 	ldw	r16,0(sp)
    6e34:	dec00404 	addi	sp,sp,16
    6e38:	f800283a 	ret

00006e3c <__sfp>:
    6e3c:	defffd04 	addi	sp,sp,-12
    6e40:	00800074 	movhi	r2,1
    6e44:	10aa0004 	addi	r2,r2,-22528
    6e48:	dc000015 	stw	r16,0(sp)
    6e4c:	14000017 	ldw	r16,0(r2)
    6e50:	dc400115 	stw	r17,4(sp)
    6e54:	dfc00215 	stw	ra,8(sp)
    6e58:	80800e17 	ldw	r2,56(r16)
    6e5c:	2023883a 	mov	r17,r4
    6e60:	10002626 	beq	r2,zero,6efc <__sfp+0xc0>
    6e64:	8400b804 	addi	r16,r16,736
    6e68:	80800117 	ldw	r2,4(r16)
    6e6c:	81000217 	ldw	r4,8(r16)
    6e70:	10ffffc4 	addi	r3,r2,-1
    6e74:	18000916 	blt	r3,zero,6e9c <__sfp+0x60>
    6e78:	2080030f 	ldh	r2,12(r4)
    6e7c:	10000b26 	beq	r2,zero,6eac <__sfp+0x70>
    6e80:	017fffc4 	movi	r5,-1
    6e84:	00000206 	br	6e90 <__sfp+0x54>
    6e88:	2080030f 	ldh	r2,12(r4)
    6e8c:	10000726 	beq	r2,zero,6eac <__sfp+0x70>
    6e90:	18ffffc4 	addi	r3,r3,-1
    6e94:	21001704 	addi	r4,r4,92
    6e98:	197ffb1e 	bne	r3,r5,6e88 <__sfp+0x4c>
    6e9c:	80800017 	ldw	r2,0(r16)
    6ea0:	10001926 	beq	r2,zero,6f08 <__sfp+0xcc>
    6ea4:	1021883a 	mov	r16,r2
    6ea8:	003fef06 	br	6e68 <__sfp+0x2c>
    6eac:	00bfffc4 	movi	r2,-1
    6eb0:	00c00044 	movi	r3,1
    6eb4:	2080038d 	sth	r2,14(r4)
    6eb8:	20c0030d 	sth	r3,12(r4)
    6ebc:	20000015 	stw	zero,0(r4)
    6ec0:	20000215 	stw	zero,8(r4)
    6ec4:	20000115 	stw	zero,4(r4)
    6ec8:	20000415 	stw	zero,16(r4)
    6ecc:	20000515 	stw	zero,20(r4)
    6ed0:	20000615 	stw	zero,24(r4)
    6ed4:	20000c15 	stw	zero,48(r4)
    6ed8:	20000d15 	stw	zero,52(r4)
    6edc:	20001115 	stw	zero,68(r4)
    6ee0:	20001215 	stw	zero,72(r4)
    6ee4:	2005883a 	mov	r2,r4
    6ee8:	dfc00217 	ldw	ra,8(sp)
    6eec:	dc400117 	ldw	r17,4(sp)
    6ef0:	dc000017 	ldw	r16,0(sp)
    6ef4:	dec00304 	addi	sp,sp,12
    6ef8:	f800283a 	ret
    6efc:	8009883a 	mov	r4,r16
    6f00:	0006cd40 	call	6cd4 <__sinit>
    6f04:	003fd706 	br	6e64 <__sfp+0x28>
    6f08:	8809883a 	mov	r4,r17
    6f0c:	01400104 	movi	r5,4
    6f10:	0006dd40 	call	6dd4 <__sfmoreglue>
    6f14:	80800015 	stw	r2,0(r16)
    6f18:	103fe21e 	bne	r2,zero,6ea4 <__sfp+0x68>
    6f1c:	00800304 	movi	r2,12
    6f20:	0009883a 	mov	r4,zero
    6f24:	88800015 	stw	r2,0(r17)
    6f28:	003fee06 	br	6ee4 <__sfp+0xa8>

00006f2c <_malloc_trim_r>:
    6f2c:	defffb04 	addi	sp,sp,-20
    6f30:	dcc00315 	stw	r19,12(sp)
    6f34:	04c00074 	movhi	r19,1
    6f38:	9ce8fc04 	addi	r19,r19,-23568
    6f3c:	dc800215 	stw	r18,8(sp)
    6f40:	dc400115 	stw	r17,4(sp)
    6f44:	dc000015 	stw	r16,0(sp)
    6f48:	2823883a 	mov	r17,r5
    6f4c:	2025883a 	mov	r18,r4
    6f50:	dfc00415 	stw	ra,16(sp)
    6f54:	00087600 	call	8760 <__malloc_lock>
    6f58:	98800217 	ldw	r2,8(r19)
    6f5c:	9009883a 	mov	r4,r18
    6f60:	000b883a 	mov	r5,zero
    6f64:	10c00117 	ldw	r3,4(r2)
    6f68:	00bfff04 	movi	r2,-4
    6f6c:	18a0703a 	and	r16,r3,r2
    6f70:	8463c83a 	sub	r17,r16,r17
    6f74:	8c43fbc4 	addi	r17,r17,4079
    6f78:	8822d33a 	srli	r17,r17,12
    6f7c:	0083ffc4 	movi	r2,4095
    6f80:	8c7fffc4 	addi	r17,r17,-1
    6f84:	8822933a 	slli	r17,r17,12
    6f88:	1440060e 	bge	r2,r17,6fa4 <_malloc_trim_r+0x78>
    6f8c:	0007dc00 	call	7dc0 <_sbrk_r>
    6f90:	98c00217 	ldw	r3,8(r19)
    6f94:	9009883a 	mov	r4,r18
    6f98:	044bc83a 	sub	r5,zero,r17
    6f9c:	80c7883a 	add	r3,r16,r3
    6fa0:	10c00926 	beq	r2,r3,6fc8 <_malloc_trim_r+0x9c>
    6fa4:	00087800 	call	8780 <__malloc_unlock>
    6fa8:	0005883a 	mov	r2,zero
    6fac:	dfc00417 	ldw	ra,16(sp)
    6fb0:	dcc00317 	ldw	r19,12(sp)
    6fb4:	dc800217 	ldw	r18,8(sp)
    6fb8:	dc400117 	ldw	r17,4(sp)
    6fbc:	dc000017 	ldw	r16,0(sp)
    6fc0:	dec00504 	addi	sp,sp,20
    6fc4:	f800283a 	ret
    6fc8:	9009883a 	mov	r4,r18
    6fcc:	0007dc00 	call	7dc0 <_sbrk_r>
    6fd0:	844dc83a 	sub	r6,r16,r17
    6fd4:	00ffffc4 	movi	r3,-1
    6fd8:	9009883a 	mov	r4,r18
    6fdc:	000b883a 	mov	r5,zero
    6fe0:	01c00074 	movhi	r7,1
    6fe4:	39f0b504 	addi	r7,r7,-15660
    6fe8:	31800054 	ori	r6,r6,1
    6fec:	10c00926 	beq	r2,r3,7014 <_malloc_trim_r+0xe8>
    6ff0:	38800017 	ldw	r2,0(r7)
    6ff4:	98c00217 	ldw	r3,8(r19)
    6ff8:	9009883a 	mov	r4,r18
    6ffc:	1445c83a 	sub	r2,r2,r17
    7000:	38800015 	stw	r2,0(r7)
    7004:	19800115 	stw	r6,4(r3)
    7008:	00087800 	call	8780 <__malloc_unlock>
    700c:	00800044 	movi	r2,1
    7010:	003fe606 	br	6fac <_malloc_trim_r+0x80>
    7014:	0007dc00 	call	7dc0 <_sbrk_r>
    7018:	99800217 	ldw	r6,8(r19)
    701c:	100f883a 	mov	r7,r2
    7020:	9009883a 	mov	r4,r18
    7024:	1187c83a 	sub	r3,r2,r6
    7028:	008003c4 	movi	r2,15
    702c:	19400054 	ori	r5,r3,1
    7030:	10ffdc0e 	bge	r2,r3,6fa4 <_malloc_trim_r+0x78>
    7034:	00800074 	movhi	r2,1
    7038:	10aa0b04 	addi	r2,r2,-22484
    703c:	10c00017 	ldw	r3,0(r2)
    7040:	00800074 	movhi	r2,1
    7044:	10b0b504 	addi	r2,r2,-15660
    7048:	31400115 	stw	r5,4(r6)
    704c:	38c7c83a 	sub	r3,r7,r3
    7050:	10c00015 	stw	r3,0(r2)
    7054:	003fd306 	br	6fa4 <_malloc_trim_r+0x78>

00007058 <_free_r>:
    7058:	defffd04 	addi	sp,sp,-12
    705c:	dc400115 	stw	r17,4(sp)
    7060:	dc000015 	stw	r16,0(sp)
    7064:	dfc00215 	stw	ra,8(sp)
    7068:	2821883a 	mov	r16,r5
    706c:	2023883a 	mov	r17,r4
    7070:	28005a26 	beq	r5,zero,71dc <_free_r+0x184>
    7074:	00087600 	call	8760 <__malloc_lock>
    7078:	823ffe04 	addi	r8,r16,-8
    707c:	41400117 	ldw	r5,4(r8)
    7080:	00bfff84 	movi	r2,-2
    7084:	02800074 	movhi	r10,1
    7088:	52a8fc04 	addi	r10,r10,-23568
    708c:	288e703a 	and	r7,r5,r2
    7090:	41cd883a 	add	r6,r8,r7
    7094:	30c00117 	ldw	r3,4(r6)
    7098:	51000217 	ldw	r4,8(r10)
    709c:	00bfff04 	movi	r2,-4
    70a0:	1892703a 	and	r9,r3,r2
    70a4:	5017883a 	mov	r11,r10
    70a8:	31006726 	beq	r6,r4,7248 <_free_r+0x1f0>
    70ac:	2880004c 	andi	r2,r5,1
    70b0:	1005003a 	cmpeq	r2,r2,zero
    70b4:	32400115 	stw	r9,4(r6)
    70b8:	10001a1e 	bne	r2,zero,7124 <_free_r+0xcc>
    70bc:	000b883a 	mov	r5,zero
    70c0:	3247883a 	add	r3,r6,r9
    70c4:	18800117 	ldw	r2,4(r3)
    70c8:	1080004c 	andi	r2,r2,1
    70cc:	1000231e 	bne	r2,zero,715c <_free_r+0x104>
    70d0:	280ac03a 	cmpne	r5,r5,zero
    70d4:	3a4f883a 	add	r7,r7,r9
    70d8:	2800451e 	bne	r5,zero,71f0 <_free_r+0x198>
    70dc:	31000217 	ldw	r4,8(r6)
    70e0:	00800074 	movhi	r2,1
    70e4:	10a8fe04 	addi	r2,r2,-23560
    70e8:	20807b26 	beq	r4,r2,72d8 <_free_r+0x280>
    70ec:	30800317 	ldw	r2,12(r6)
    70f0:	3a07883a 	add	r3,r7,r8
    70f4:	19c00015 	stw	r7,0(r3)
    70f8:	11000215 	stw	r4,8(r2)
    70fc:	20800315 	stw	r2,12(r4)
    7100:	38800054 	ori	r2,r7,1
    7104:	40800115 	stw	r2,4(r8)
    7108:	28001a26 	beq	r5,zero,7174 <_free_r+0x11c>
    710c:	8809883a 	mov	r4,r17
    7110:	dfc00217 	ldw	ra,8(sp)
    7114:	dc400117 	ldw	r17,4(sp)
    7118:	dc000017 	ldw	r16,0(sp)
    711c:	dec00304 	addi	sp,sp,12
    7120:	00087801 	jmpi	8780 <__malloc_unlock>
    7124:	80bffe17 	ldw	r2,-8(r16)
    7128:	50c00204 	addi	r3,r10,8
    712c:	4091c83a 	sub	r8,r8,r2
    7130:	41000217 	ldw	r4,8(r8)
    7134:	388f883a 	add	r7,r7,r2
    7138:	20c06126 	beq	r4,r3,72c0 <_free_r+0x268>
    713c:	40800317 	ldw	r2,12(r8)
    7140:	3247883a 	add	r3,r6,r9
    7144:	000b883a 	mov	r5,zero
    7148:	11000215 	stw	r4,8(r2)
    714c:	20800315 	stw	r2,12(r4)
    7150:	18800117 	ldw	r2,4(r3)
    7154:	1080004c 	andi	r2,r2,1
    7158:	103fdd26 	beq	r2,zero,70d0 <_free_r+0x78>
    715c:	38800054 	ori	r2,r7,1
    7160:	3a07883a 	add	r3,r7,r8
    7164:	280ac03a 	cmpne	r5,r5,zero
    7168:	40800115 	stw	r2,4(r8)
    716c:	19c00015 	stw	r7,0(r3)
    7170:	283fe61e 	bne	r5,zero,710c <_free_r+0xb4>
    7174:	00807fc4 	movi	r2,511
    7178:	11c01f2e 	bgeu	r2,r7,71f8 <_free_r+0x1a0>
    717c:	3806d27a 	srli	r3,r7,9
    7180:	1800481e 	bne	r3,zero,72a4 <_free_r+0x24c>
    7184:	3804d0fa 	srli	r2,r7,3
    7188:	100690fa 	slli	r3,r2,3
    718c:	1acd883a 	add	r6,r3,r11
    7190:	31400217 	ldw	r5,8(r6)
    7194:	31405926 	beq	r6,r5,72fc <_free_r+0x2a4>
    7198:	28800117 	ldw	r2,4(r5)
    719c:	00ffff04 	movi	r3,-4
    71a0:	10c4703a 	and	r2,r2,r3
    71a4:	3880022e 	bgeu	r7,r2,71b0 <_free_r+0x158>
    71a8:	29400217 	ldw	r5,8(r5)
    71ac:	317ffa1e 	bne	r6,r5,7198 <_free_r+0x140>
    71b0:	29800317 	ldw	r6,12(r5)
    71b4:	41800315 	stw	r6,12(r8)
    71b8:	41400215 	stw	r5,8(r8)
    71bc:	8809883a 	mov	r4,r17
    71c0:	2a000315 	stw	r8,12(r5)
    71c4:	32000215 	stw	r8,8(r6)
    71c8:	dfc00217 	ldw	ra,8(sp)
    71cc:	dc400117 	ldw	r17,4(sp)
    71d0:	dc000017 	ldw	r16,0(sp)
    71d4:	dec00304 	addi	sp,sp,12
    71d8:	00087801 	jmpi	8780 <__malloc_unlock>
    71dc:	dfc00217 	ldw	ra,8(sp)
    71e0:	dc400117 	ldw	r17,4(sp)
    71e4:	dc000017 	ldw	r16,0(sp)
    71e8:	dec00304 	addi	sp,sp,12
    71ec:	f800283a 	ret
    71f0:	31000217 	ldw	r4,8(r6)
    71f4:	003fbd06 	br	70ec <_free_r+0x94>
    71f8:	3806d0fa 	srli	r3,r7,3
    71fc:	00800044 	movi	r2,1
    7200:	51400117 	ldw	r5,4(r10)
    7204:	180890fa 	slli	r4,r3,3
    7208:	1807d0ba 	srai	r3,r3,2
    720c:	22c9883a 	add	r4,r4,r11
    7210:	21800217 	ldw	r6,8(r4)
    7214:	10c4983a 	sll	r2,r2,r3
    7218:	41000315 	stw	r4,12(r8)
    721c:	41800215 	stw	r6,8(r8)
    7220:	288ab03a 	or	r5,r5,r2
    7224:	22000215 	stw	r8,8(r4)
    7228:	8809883a 	mov	r4,r17
    722c:	51400115 	stw	r5,4(r10)
    7230:	32000315 	stw	r8,12(r6)
    7234:	dfc00217 	ldw	ra,8(sp)
    7238:	dc400117 	ldw	r17,4(sp)
    723c:	dc000017 	ldw	r16,0(sp)
    7240:	dec00304 	addi	sp,sp,12
    7244:	00087801 	jmpi	8780 <__malloc_unlock>
    7248:	2880004c 	andi	r2,r5,1
    724c:	3a4d883a 	add	r6,r7,r9
    7250:	1000071e 	bne	r2,zero,7270 <_free_r+0x218>
    7254:	80bffe17 	ldw	r2,-8(r16)
    7258:	4091c83a 	sub	r8,r8,r2
    725c:	41000317 	ldw	r4,12(r8)
    7260:	40c00217 	ldw	r3,8(r8)
    7264:	308d883a 	add	r6,r6,r2
    7268:	20c00215 	stw	r3,8(r4)
    726c:	19000315 	stw	r4,12(r3)
    7270:	00800074 	movhi	r2,1
    7274:	10aa0a04 	addi	r2,r2,-22488
    7278:	11000017 	ldw	r4,0(r2)
    727c:	30c00054 	ori	r3,r6,1
    7280:	52000215 	stw	r8,8(r10)
    7284:	40c00115 	stw	r3,4(r8)
    7288:	313fa036 	bltu	r6,r4,710c <_free_r+0xb4>
    728c:	00800074 	movhi	r2,1
    7290:	10b0b204 	addi	r2,r2,-15672
    7294:	11400017 	ldw	r5,0(r2)
    7298:	8809883a 	mov	r4,r17
    729c:	0006f2c0 	call	6f2c <_malloc_trim_r>
    72a0:	003f9a06 	br	710c <_free_r+0xb4>
    72a4:	00800104 	movi	r2,4
    72a8:	10c0072e 	bgeu	r2,r3,72c8 <_free_r+0x270>
    72ac:	00800504 	movi	r2,20
    72b0:	10c01936 	bltu	r2,r3,7318 <_free_r+0x2c0>
    72b4:	188016c4 	addi	r2,r3,91
    72b8:	100690fa 	slli	r3,r2,3
    72bc:	003fb306 	br	718c <_free_r+0x134>
    72c0:	01400044 	movi	r5,1
    72c4:	003f7e06 	br	70c0 <_free_r+0x68>
    72c8:	3804d1ba 	srli	r2,r7,6
    72cc:	10800e04 	addi	r2,r2,56
    72d0:	100690fa 	slli	r3,r2,3
    72d4:	003fad06 	br	718c <_free_r+0x134>
    72d8:	22000315 	stw	r8,12(r4)
    72dc:	22000215 	stw	r8,8(r4)
    72e0:	3a05883a 	add	r2,r7,r8
    72e4:	38c00054 	ori	r3,r7,1
    72e8:	11c00015 	stw	r7,0(r2)
    72ec:	41000215 	stw	r4,8(r8)
    72f0:	40c00115 	stw	r3,4(r8)
    72f4:	41000315 	stw	r4,12(r8)
    72f8:	003f8406 	br	710c <_free_r+0xb4>
    72fc:	1005d0ba 	srai	r2,r2,2
    7300:	00c00044 	movi	r3,1
    7304:	51000117 	ldw	r4,4(r10)
    7308:	1886983a 	sll	r3,r3,r2
    730c:	20c8b03a 	or	r4,r4,r3
    7310:	51000115 	stw	r4,4(r10)
    7314:	003fa706 	br	71b4 <_free_r+0x15c>
    7318:	00801504 	movi	r2,84
    731c:	10c00436 	bltu	r2,r3,7330 <_free_r+0x2d8>
    7320:	3804d33a 	srli	r2,r7,12
    7324:	10801b84 	addi	r2,r2,110
    7328:	100690fa 	slli	r3,r2,3
    732c:	003f9706 	br	718c <_free_r+0x134>
    7330:	00805504 	movi	r2,340
    7334:	10c00436 	bltu	r2,r3,7348 <_free_r+0x2f0>
    7338:	3804d3fa 	srli	r2,r7,15
    733c:	10801dc4 	addi	r2,r2,119
    7340:	100690fa 	slli	r3,r2,3
    7344:	003f9106 	br	718c <_free_r+0x134>
    7348:	00815504 	movi	r2,1364
    734c:	10c0032e 	bgeu	r2,r3,735c <_free_r+0x304>
    7350:	00801f84 	movi	r2,126
    7354:	00c0fc04 	movi	r3,1008
    7358:	003f8c06 	br	718c <_free_r+0x134>
    735c:	3804d4ba 	srli	r2,r7,18
    7360:	10801f04 	addi	r2,r2,124
    7364:	100690fa 	slli	r3,r2,3
    7368:	003f8806 	br	718c <_free_r+0x134>

0000736c <_fwalk_reent>:
    736c:	defff704 	addi	sp,sp,-36
    7370:	dcc00315 	stw	r19,12(sp)
    7374:	24c0b804 	addi	r19,r4,736
    7378:	dd800615 	stw	r22,24(sp)
    737c:	dd400515 	stw	r21,20(sp)
    7380:	dfc00815 	stw	ra,32(sp)
    7384:	ddc00715 	stw	r23,28(sp)
    7388:	dd000415 	stw	r20,16(sp)
    738c:	dc800215 	stw	r18,8(sp)
    7390:	dc400115 	stw	r17,4(sp)
    7394:	dc000015 	stw	r16,0(sp)
    7398:	202b883a 	mov	r21,r4
    739c:	282d883a 	mov	r22,r5
    73a0:	0006cc40 	call	6cc4 <__sfp_lock_acquire>
    73a4:	98002126 	beq	r19,zero,742c <_fwalk_reent+0xc0>
    73a8:	002f883a 	mov	r23,zero
    73ac:	9c800117 	ldw	r18,4(r19)
    73b0:	9c000217 	ldw	r16,8(r19)
    73b4:	90bfffc4 	addi	r2,r18,-1
    73b8:	10000d16 	blt	r2,zero,73f0 <_fwalk_reent+0x84>
    73bc:	0023883a 	mov	r17,zero
    73c0:	053fffc4 	movi	r20,-1
    73c4:	8080030f 	ldh	r2,12(r16)
    73c8:	8c400044 	addi	r17,r17,1
    73cc:	10000626 	beq	r2,zero,73e8 <_fwalk_reent+0x7c>
    73d0:	8080038f 	ldh	r2,14(r16)
    73d4:	800b883a 	mov	r5,r16
    73d8:	a809883a 	mov	r4,r21
    73dc:	15000226 	beq	r2,r20,73e8 <_fwalk_reent+0x7c>
    73e0:	b03ee83a 	callr	r22
    73e4:	b8aeb03a 	or	r23,r23,r2
    73e8:	84001704 	addi	r16,r16,92
    73ec:	947ff51e 	bne	r18,r17,73c4 <_fwalk_reent+0x58>
    73f0:	9cc00017 	ldw	r19,0(r19)
    73f4:	983fed1e 	bne	r19,zero,73ac <_fwalk_reent+0x40>
    73f8:	0006cc80 	call	6cc8 <__sfp_lock_release>
    73fc:	b805883a 	mov	r2,r23
    7400:	dfc00817 	ldw	ra,32(sp)
    7404:	ddc00717 	ldw	r23,28(sp)
    7408:	dd800617 	ldw	r22,24(sp)
    740c:	dd400517 	ldw	r21,20(sp)
    7410:	dd000417 	ldw	r20,16(sp)
    7414:	dcc00317 	ldw	r19,12(sp)
    7418:	dc800217 	ldw	r18,8(sp)
    741c:	dc400117 	ldw	r17,4(sp)
    7420:	dc000017 	ldw	r16,0(sp)
    7424:	dec00904 	addi	sp,sp,36
    7428:	f800283a 	ret
    742c:	002f883a 	mov	r23,zero
    7430:	003ff106 	br	73f8 <_fwalk_reent+0x8c>

00007434 <_fwalk>:
    7434:	defff804 	addi	sp,sp,-32
    7438:	dcc00315 	stw	r19,12(sp)
    743c:	24c0b804 	addi	r19,r4,736
    7440:	dd400515 	stw	r21,20(sp)
    7444:	dfc00715 	stw	ra,28(sp)
    7448:	dd800615 	stw	r22,24(sp)
    744c:	dd000415 	stw	r20,16(sp)
    7450:	dc800215 	stw	r18,8(sp)
    7454:	dc400115 	stw	r17,4(sp)
    7458:	dc000015 	stw	r16,0(sp)
    745c:	282b883a 	mov	r21,r5
    7460:	0006cc40 	call	6cc4 <__sfp_lock_acquire>
    7464:	98001f26 	beq	r19,zero,74e4 <_fwalk+0xb0>
    7468:	002d883a 	mov	r22,zero
    746c:	9c800117 	ldw	r18,4(r19)
    7470:	9c000217 	ldw	r16,8(r19)
    7474:	90bfffc4 	addi	r2,r18,-1
    7478:	10000c16 	blt	r2,zero,74ac <_fwalk+0x78>
    747c:	0023883a 	mov	r17,zero
    7480:	053fffc4 	movi	r20,-1
    7484:	8080030f 	ldh	r2,12(r16)
    7488:	8c400044 	addi	r17,r17,1
    748c:	10000526 	beq	r2,zero,74a4 <_fwalk+0x70>
    7490:	8080038f 	ldh	r2,14(r16)
    7494:	8009883a 	mov	r4,r16
    7498:	15000226 	beq	r2,r20,74a4 <_fwalk+0x70>
    749c:	a83ee83a 	callr	r21
    74a0:	b0acb03a 	or	r22,r22,r2
    74a4:	84001704 	addi	r16,r16,92
    74a8:	947ff61e 	bne	r18,r17,7484 <_fwalk+0x50>
    74ac:	9cc00017 	ldw	r19,0(r19)
    74b0:	983fee1e 	bne	r19,zero,746c <_fwalk+0x38>
    74b4:	0006cc80 	call	6cc8 <__sfp_lock_release>
    74b8:	b005883a 	mov	r2,r22
    74bc:	dfc00717 	ldw	ra,28(sp)
    74c0:	dd800617 	ldw	r22,24(sp)
    74c4:	dd400517 	ldw	r21,20(sp)
    74c8:	dd000417 	ldw	r20,16(sp)
    74cc:	dcc00317 	ldw	r19,12(sp)
    74d0:	dc800217 	ldw	r18,8(sp)
    74d4:	dc400117 	ldw	r17,4(sp)
    74d8:	dc000017 	ldw	r16,0(sp)
    74dc:	dec00804 	addi	sp,sp,32
    74e0:	f800283a 	ret
    74e4:	002d883a 	mov	r22,zero
    74e8:	003ff206 	br	74b4 <_fwalk+0x80>

000074ec <__smakebuf_r>:
    74ec:	2880030b 	ldhu	r2,12(r5)
    74f0:	deffed04 	addi	sp,sp,-76
    74f4:	dc401015 	stw	r17,64(sp)
    74f8:	1080008c 	andi	r2,r2,2
    74fc:	dc000f15 	stw	r16,60(sp)
    7500:	dfc01215 	stw	ra,72(sp)
    7504:	dc801115 	stw	r18,68(sp)
    7508:	2821883a 	mov	r16,r5
    750c:	2023883a 	mov	r17,r4
    7510:	10000b26 	beq	r2,zero,7540 <__smakebuf_r+0x54>
    7514:	28c010c4 	addi	r3,r5,67
    7518:	00800044 	movi	r2,1
    751c:	28800515 	stw	r2,20(r5)
    7520:	28c00415 	stw	r3,16(r5)
    7524:	28c00015 	stw	r3,0(r5)
    7528:	dfc01217 	ldw	ra,72(sp)
    752c:	dc801117 	ldw	r18,68(sp)
    7530:	dc401017 	ldw	r17,64(sp)
    7534:	dc000f17 	ldw	r16,60(sp)
    7538:	dec01304 	addi	sp,sp,76
    753c:	f800283a 	ret
    7540:	2940038f 	ldh	r5,14(r5)
    7544:	28002116 	blt	r5,zero,75cc <__smakebuf_r+0xe0>
    7548:	d80d883a 	mov	r6,sp
    754c:	00081880 	call	8188 <_fstat_r>
    7550:	10001e16 	blt	r2,zero,75cc <__smakebuf_r+0xe0>
    7554:	d8800117 	ldw	r2,4(sp)
    7558:	00e00014 	movui	r3,32768
    755c:	113c000c 	andi	r4,r2,61440
    7560:	20c03126 	beq	r4,r3,7628 <__smakebuf_r+0x13c>
    7564:	8080030b 	ldhu	r2,12(r16)
    7568:	00c80004 	movi	r3,8192
    756c:	10820014 	ori	r2,r2,2048
    7570:	8080030d 	sth	r2,12(r16)
    7574:	20c01e26 	beq	r4,r3,75f0 <__smakebuf_r+0x104>
    7578:	04810004 	movi	r18,1024
    757c:	8809883a 	mov	r4,r17
    7580:	900b883a 	mov	r5,r18
    7584:	00076800 	call	7680 <_malloc_r>
    7588:	1009883a 	mov	r4,r2
    758c:	10003126 	beq	r2,zero,7654 <__smakebuf_r+0x168>
    7590:	80c0030b 	ldhu	r3,12(r16)
    7594:	00800034 	movhi	r2,0
    7598:	109b6e04 	addi	r2,r2,28088
    759c:	88800f15 	stw	r2,60(r17)
    75a0:	18c02014 	ori	r3,r3,128
    75a4:	84800515 	stw	r18,20(r16)
    75a8:	80c0030d 	sth	r3,12(r16)
    75ac:	81000415 	stw	r4,16(r16)
    75b0:	81000015 	stw	r4,0(r16)
    75b4:	dfc01217 	ldw	ra,72(sp)
    75b8:	dc801117 	ldw	r18,68(sp)
    75bc:	dc401017 	ldw	r17,64(sp)
    75c0:	dc000f17 	ldw	r16,60(sp)
    75c4:	dec01304 	addi	sp,sp,76
    75c8:	f800283a 	ret
    75cc:	80c0030b 	ldhu	r3,12(r16)
    75d0:	1880200c 	andi	r2,r3,128
    75d4:	10000426 	beq	r2,zero,75e8 <__smakebuf_r+0xfc>
    75d8:	04801004 	movi	r18,64
    75dc:	18820014 	ori	r2,r3,2048
    75e0:	8080030d 	sth	r2,12(r16)
    75e4:	003fe506 	br	757c <__smakebuf_r+0x90>
    75e8:	04810004 	movi	r18,1024
    75ec:	003ffb06 	br	75dc <__smakebuf_r+0xf0>
    75f0:	8140038f 	ldh	r5,14(r16)
    75f4:	8809883a 	mov	r4,r17
    75f8:	00081fc0 	call	81fc <_isatty_r>
    75fc:	103fde26 	beq	r2,zero,7578 <__smakebuf_r+0x8c>
    7600:	8080030b 	ldhu	r2,12(r16)
    7604:	80c010c4 	addi	r3,r16,67
    7608:	04810004 	movi	r18,1024
    760c:	10800054 	ori	r2,r2,1
    7610:	8080030d 	sth	r2,12(r16)
    7614:	00800044 	movi	r2,1
    7618:	80c00415 	stw	r3,16(r16)
    761c:	80800515 	stw	r2,20(r16)
    7620:	80c00015 	stw	r3,0(r16)
    7624:	003fd506 	br	757c <__smakebuf_r+0x90>
    7628:	80c00a17 	ldw	r3,40(r16)
    762c:	00800034 	movhi	r2,0
    7630:	109f8e04 	addi	r2,r2,32312
    7634:	18bfcb1e 	bne	r3,r2,7564 <__smakebuf_r+0x78>
    7638:	8080030b 	ldhu	r2,12(r16)
    763c:	00c10004 	movi	r3,1024
    7640:	1825883a 	mov	r18,r3
    7644:	10c4b03a 	or	r2,r2,r3
    7648:	8080030d 	sth	r2,12(r16)
    764c:	80c01315 	stw	r3,76(r16)
    7650:	003fca06 	br	757c <__smakebuf_r+0x90>
    7654:	8100030b 	ldhu	r4,12(r16)
    7658:	2080800c 	andi	r2,r4,512
    765c:	103fb21e 	bne	r2,zero,7528 <__smakebuf_r+0x3c>
    7660:	80c010c4 	addi	r3,r16,67
    7664:	21000094 	ori	r4,r4,2
    7668:	00800044 	movi	r2,1
    766c:	80800515 	stw	r2,20(r16)
    7670:	8100030d 	sth	r4,12(r16)
    7674:	80c00415 	stw	r3,16(r16)
    7678:	80c00015 	stw	r3,0(r16)
    767c:	003faa06 	br	7528 <__smakebuf_r+0x3c>

00007680 <_malloc_r>:
    7680:	defff604 	addi	sp,sp,-40
    7684:	28c002c4 	addi	r3,r5,11
    7688:	00800584 	movi	r2,22
    768c:	dc800215 	stw	r18,8(sp)
    7690:	dfc00915 	stw	ra,36(sp)
    7694:	df000815 	stw	fp,32(sp)
    7698:	ddc00715 	stw	r23,28(sp)
    769c:	dd800615 	stw	r22,24(sp)
    76a0:	dd400515 	stw	r21,20(sp)
    76a4:	dd000415 	stw	r20,16(sp)
    76a8:	dcc00315 	stw	r19,12(sp)
    76ac:	dc400115 	stw	r17,4(sp)
    76b0:	dc000015 	stw	r16,0(sp)
    76b4:	2025883a 	mov	r18,r4
    76b8:	10c01236 	bltu	r2,r3,7704 <_malloc_r+0x84>
    76bc:	04400404 	movi	r17,16
    76c0:	8940142e 	bgeu	r17,r5,7714 <_malloc_r+0x94>
    76c4:	00800304 	movi	r2,12
    76c8:	0007883a 	mov	r3,zero
    76cc:	90800015 	stw	r2,0(r18)
    76d0:	1805883a 	mov	r2,r3
    76d4:	dfc00917 	ldw	ra,36(sp)
    76d8:	df000817 	ldw	fp,32(sp)
    76dc:	ddc00717 	ldw	r23,28(sp)
    76e0:	dd800617 	ldw	r22,24(sp)
    76e4:	dd400517 	ldw	r21,20(sp)
    76e8:	dd000417 	ldw	r20,16(sp)
    76ec:	dcc00317 	ldw	r19,12(sp)
    76f0:	dc800217 	ldw	r18,8(sp)
    76f4:	dc400117 	ldw	r17,4(sp)
    76f8:	dc000017 	ldw	r16,0(sp)
    76fc:	dec00a04 	addi	sp,sp,40
    7700:	f800283a 	ret
    7704:	00bffe04 	movi	r2,-8
    7708:	18a2703a 	and	r17,r3,r2
    770c:	883fed16 	blt	r17,zero,76c4 <_malloc_r+0x44>
    7710:	897fec36 	bltu	r17,r5,76c4 <_malloc_r+0x44>
    7714:	9009883a 	mov	r4,r18
    7718:	00087600 	call	8760 <__malloc_lock>
    771c:	00807dc4 	movi	r2,503
    7720:	14402b2e 	bgeu	r2,r17,77d0 <_malloc_r+0x150>
    7724:	8806d27a 	srli	r3,r17,9
    7728:	18003f1e 	bne	r3,zero,7828 <_malloc_r+0x1a8>
    772c:	880cd0fa 	srli	r6,r17,3
    7730:	300490fa 	slli	r2,r6,3
    7734:	02c00074 	movhi	r11,1
    7738:	5ae8fc04 	addi	r11,r11,-23568
    773c:	12cb883a 	add	r5,r2,r11
    7740:	2c000317 	ldw	r16,12(r5)
    7744:	580f883a 	mov	r7,r11
    7748:	2c00041e 	bne	r5,r16,775c <_malloc_r+0xdc>
    774c:	00000a06 	br	7778 <_malloc_r+0xf8>
    7750:	1800860e 	bge	r3,zero,796c <_malloc_r+0x2ec>
    7754:	84000317 	ldw	r16,12(r16)
    7758:	2c000726 	beq	r5,r16,7778 <_malloc_r+0xf8>
    775c:	80800117 	ldw	r2,4(r16)
    7760:	00ffff04 	movi	r3,-4
    7764:	10c8703a 	and	r4,r2,r3
    7768:	2447c83a 	sub	r3,r4,r17
    776c:	008003c4 	movi	r2,15
    7770:	10fff70e 	bge	r2,r3,7750 <_malloc_r+0xd0>
    7774:	31bfffc4 	addi	r6,r6,-1
    7778:	32400044 	addi	r9,r6,1
    777c:	02800074 	movhi	r10,1
    7780:	52a8fe04 	addi	r10,r10,-23560
    7784:	54000217 	ldw	r16,8(r10)
    7788:	8280a026 	beq	r16,r10,7a0c <_malloc_r+0x38c>
    778c:	80800117 	ldw	r2,4(r16)
    7790:	00ffff04 	movi	r3,-4
    7794:	10ca703a 	and	r5,r2,r3
    7798:	2c4dc83a 	sub	r6,r5,r17
    779c:	008003c4 	movi	r2,15
    77a0:	11808316 	blt	r2,r6,79b0 <_malloc_r+0x330>
    77a4:	52800315 	stw	r10,12(r10)
    77a8:	52800215 	stw	r10,8(r10)
    77ac:	30002916 	blt	r6,zero,7854 <_malloc_r+0x1d4>
    77b0:	8147883a 	add	r3,r16,r5
    77b4:	18800117 	ldw	r2,4(r3)
    77b8:	9009883a 	mov	r4,r18
    77bc:	10800054 	ori	r2,r2,1
    77c0:	18800115 	stw	r2,4(r3)
    77c4:	00087800 	call	8780 <__malloc_unlock>
    77c8:	80c00204 	addi	r3,r16,8
    77cc:	003fc006 	br	76d0 <_malloc_r+0x50>
    77d0:	02c00074 	movhi	r11,1
    77d4:	5ae8fc04 	addi	r11,r11,-23568
    77d8:	8ac5883a 	add	r2,r17,r11
    77dc:	14000317 	ldw	r16,12(r2)
    77e0:	580f883a 	mov	r7,r11
    77e4:	8806d0fa 	srli	r3,r17,3
    77e8:	14006c26 	beq	r2,r16,799c <_malloc_r+0x31c>
    77ec:	80c00117 	ldw	r3,4(r16)
    77f0:	00bfff04 	movi	r2,-4
    77f4:	81800317 	ldw	r6,12(r16)
    77f8:	1886703a 	and	r3,r3,r2
    77fc:	80c7883a 	add	r3,r16,r3
    7800:	18800117 	ldw	r2,4(r3)
    7804:	81400217 	ldw	r5,8(r16)
    7808:	9009883a 	mov	r4,r18
    780c:	10800054 	ori	r2,r2,1
    7810:	18800115 	stw	r2,4(r3)
    7814:	31400215 	stw	r5,8(r6)
    7818:	29800315 	stw	r6,12(r5)
    781c:	00087800 	call	8780 <__malloc_unlock>
    7820:	80c00204 	addi	r3,r16,8
    7824:	003faa06 	br	76d0 <_malloc_r+0x50>
    7828:	00800104 	movi	r2,4
    782c:	10c0052e 	bgeu	r2,r3,7844 <_malloc_r+0x1c4>
    7830:	00800504 	movi	r2,20
    7834:	10c07836 	bltu	r2,r3,7a18 <_malloc_r+0x398>
    7838:	198016c4 	addi	r6,r3,91
    783c:	300490fa 	slli	r2,r6,3
    7840:	003fbc06 	br	7734 <_malloc_r+0xb4>
    7844:	8804d1ba 	srli	r2,r17,6
    7848:	11800e04 	addi	r6,r2,56
    784c:	300490fa 	slli	r2,r6,3
    7850:	003fb806 	br	7734 <_malloc_r+0xb4>
    7854:	00807fc4 	movi	r2,511
    7858:	1140bb36 	bltu	r2,r5,7b48 <_malloc_r+0x4c8>
    785c:	2806d0fa 	srli	r3,r5,3
    7860:	573ffe04 	addi	fp,r10,-8
    7864:	00800044 	movi	r2,1
    7868:	180890fa 	slli	r4,r3,3
    786c:	1807d0ba 	srai	r3,r3,2
    7870:	e1c00117 	ldw	r7,4(fp)
    7874:	5909883a 	add	r4,r11,r4
    7878:	21400217 	ldw	r5,8(r4)
    787c:	10c4983a 	sll	r2,r2,r3
    7880:	81000315 	stw	r4,12(r16)
    7884:	81400215 	stw	r5,8(r16)
    7888:	388eb03a 	or	r7,r7,r2
    788c:	2c000315 	stw	r16,12(r5)
    7890:	24000215 	stw	r16,8(r4)
    7894:	e1c00115 	stw	r7,4(fp)
    7898:	4807883a 	mov	r3,r9
    789c:	4800cd16 	blt	r9,zero,7bd4 <_malloc_r+0x554>
    78a0:	1807d0ba 	srai	r3,r3,2
    78a4:	00800044 	movi	r2,1
    78a8:	10c8983a 	sll	r4,r2,r3
    78ac:	39004436 	bltu	r7,r4,79c0 <_malloc_r+0x340>
    78b0:	21c4703a 	and	r2,r4,r7
    78b4:	10000a1e 	bne	r2,zero,78e0 <_malloc_r+0x260>
    78b8:	2109883a 	add	r4,r4,r4
    78bc:	00bfff04 	movi	r2,-4
    78c0:	4884703a 	and	r2,r9,r2
    78c4:	3906703a 	and	r3,r7,r4
    78c8:	12400104 	addi	r9,r2,4
    78cc:	1800041e 	bne	r3,zero,78e0 <_malloc_r+0x260>
    78d0:	2109883a 	add	r4,r4,r4
    78d4:	3904703a 	and	r2,r7,r4
    78d8:	4a400104 	addi	r9,r9,4
    78dc:	103ffc26 	beq	r2,zero,78d0 <_malloc_r+0x250>
    78e0:	480490fa 	slli	r2,r9,3
    78e4:	4819883a 	mov	r12,r9
    78e8:	023fff04 	movi	r8,-4
    78ec:	589b883a 	add	r13,r11,r2
    78f0:	6807883a 	mov	r3,r13
    78f4:	014003c4 	movi	r5,15
    78f8:	1c000317 	ldw	r16,12(r3)
    78fc:	1c00041e 	bne	r3,r16,7910 <_malloc_r+0x290>
    7900:	0000a706 	br	7ba0 <_malloc_r+0x520>
    7904:	3000ab0e 	bge	r6,zero,7bb4 <_malloc_r+0x534>
    7908:	84000317 	ldw	r16,12(r16)
    790c:	1c00a426 	beq	r3,r16,7ba0 <_malloc_r+0x520>
    7910:	80800117 	ldw	r2,4(r16)
    7914:	1204703a 	and	r2,r2,r8
    7918:	144dc83a 	sub	r6,r2,r17
    791c:	29bff90e 	bge	r5,r6,7904 <_malloc_r+0x284>
    7920:	81000317 	ldw	r4,12(r16)
    7924:	80c00217 	ldw	r3,8(r16)
    7928:	89400054 	ori	r5,r17,1
    792c:	8445883a 	add	r2,r16,r17
    7930:	20c00215 	stw	r3,8(r4)
    7934:	19000315 	stw	r4,12(r3)
    7938:	81400115 	stw	r5,4(r16)
    793c:	1187883a 	add	r3,r2,r6
    7940:	31000054 	ori	r4,r6,1
    7944:	50800315 	stw	r2,12(r10)
    7948:	50800215 	stw	r2,8(r10)
    794c:	19800015 	stw	r6,0(r3)
    7950:	11000115 	stw	r4,4(r2)
    7954:	12800215 	stw	r10,8(r2)
    7958:	12800315 	stw	r10,12(r2)
    795c:	9009883a 	mov	r4,r18
    7960:	00087800 	call	8780 <__malloc_unlock>
    7964:	80c00204 	addi	r3,r16,8
    7968:	003f5906 	br	76d0 <_malloc_r+0x50>
    796c:	8109883a 	add	r4,r16,r4
    7970:	20800117 	ldw	r2,4(r4)
    7974:	80c00217 	ldw	r3,8(r16)
    7978:	81400317 	ldw	r5,12(r16)
    797c:	10800054 	ori	r2,r2,1
    7980:	20800115 	stw	r2,4(r4)
    7984:	28c00215 	stw	r3,8(r5)
    7988:	19400315 	stw	r5,12(r3)
    798c:	9009883a 	mov	r4,r18
    7990:	00087800 	call	8780 <__malloc_unlock>
    7994:	80c00204 	addi	r3,r16,8
    7998:	003f4d06 	br	76d0 <_malloc_r+0x50>
    799c:	80800204 	addi	r2,r16,8
    79a0:	14000317 	ldw	r16,12(r2)
    79a4:	143f911e 	bne	r2,r16,77ec <_malloc_r+0x16c>
    79a8:	1a400084 	addi	r9,r3,2
    79ac:	003f7306 	br	777c <_malloc_r+0xfc>
    79b0:	88c00054 	ori	r3,r17,1
    79b4:	8445883a 	add	r2,r16,r17
    79b8:	80c00115 	stw	r3,4(r16)
    79bc:	003fdf06 	br	793c <_malloc_r+0x2bc>
    79c0:	e4000217 	ldw	r16,8(fp)
    79c4:	00bfff04 	movi	r2,-4
    79c8:	80c00117 	ldw	r3,4(r16)
    79cc:	802d883a 	mov	r22,r16
    79d0:	18aa703a 	and	r21,r3,r2
    79d4:	ac401636 	bltu	r21,r17,7a30 <_malloc_r+0x3b0>
    79d8:	ac49c83a 	sub	r4,r21,r17
    79dc:	008003c4 	movi	r2,15
    79e0:	1100130e 	bge	r2,r4,7a30 <_malloc_r+0x3b0>
    79e4:	88800054 	ori	r2,r17,1
    79e8:	8447883a 	add	r3,r16,r17
    79ec:	80800115 	stw	r2,4(r16)
    79f0:	20800054 	ori	r2,r4,1
    79f4:	18800115 	stw	r2,4(r3)
    79f8:	e0c00215 	stw	r3,8(fp)
    79fc:	9009883a 	mov	r4,r18
    7a00:	00087800 	call	8780 <__malloc_unlock>
    7a04:	80c00204 	addi	r3,r16,8
    7a08:	003f3106 	br	76d0 <_malloc_r+0x50>
    7a0c:	39c00117 	ldw	r7,4(r7)
    7a10:	573ffe04 	addi	fp,r10,-8
    7a14:	003fa006 	br	7898 <_malloc_r+0x218>
    7a18:	00801504 	movi	r2,84
    7a1c:	10c06736 	bltu	r2,r3,7bbc <_malloc_r+0x53c>
    7a20:	8804d33a 	srli	r2,r17,12
    7a24:	11801b84 	addi	r6,r2,110
    7a28:	300490fa 	slli	r2,r6,3
    7a2c:	003f4106 	br	7734 <_malloc_r+0xb4>
    7a30:	d0a6b417 	ldw	r2,-25904(gp)
    7a34:	d0e00d17 	ldw	r3,-32716(gp)
    7a38:	053fffc4 	movi	r20,-1
    7a3c:	10800404 	addi	r2,r2,16
    7a40:	88a7883a 	add	r19,r17,r2
    7a44:	1d000326 	beq	r3,r20,7a54 <_malloc_r+0x3d4>
    7a48:	98c3ffc4 	addi	r3,r19,4095
    7a4c:	00bc0004 	movi	r2,-4096
    7a50:	18a6703a 	and	r19,r3,r2
    7a54:	9009883a 	mov	r4,r18
    7a58:	980b883a 	mov	r5,r19
    7a5c:	0007dc00 	call	7dc0 <_sbrk_r>
    7a60:	1009883a 	mov	r4,r2
    7a64:	15000426 	beq	r2,r20,7a78 <_malloc_r+0x3f8>
    7a68:	854b883a 	add	r5,r16,r21
    7a6c:	1029883a 	mov	r20,r2
    7a70:	11405a2e 	bgeu	r2,r5,7bdc <_malloc_r+0x55c>
    7a74:	87000c26 	beq	r16,fp,7aa8 <_malloc_r+0x428>
    7a78:	e4000217 	ldw	r16,8(fp)
    7a7c:	80c00117 	ldw	r3,4(r16)
    7a80:	00bfff04 	movi	r2,-4
    7a84:	1884703a 	and	r2,r3,r2
    7a88:	14400336 	bltu	r2,r17,7a98 <_malloc_r+0x418>
    7a8c:	1449c83a 	sub	r4,r2,r17
    7a90:	008003c4 	movi	r2,15
    7a94:	113fd316 	blt	r2,r4,79e4 <_malloc_r+0x364>
    7a98:	9009883a 	mov	r4,r18
    7a9c:	00087800 	call	8780 <__malloc_unlock>
    7aa0:	0007883a 	mov	r3,zero
    7aa4:	003f0a06 	br	76d0 <_malloc_r+0x50>
    7aa8:	05c00074 	movhi	r23,1
    7aac:	bdf0b504 	addi	r23,r23,-15660
    7ab0:	b8800017 	ldw	r2,0(r23)
    7ab4:	988d883a 	add	r6,r19,r2
    7ab8:	b9800015 	stw	r6,0(r23)
    7abc:	d0e00d17 	ldw	r3,-32716(gp)
    7ac0:	00bfffc4 	movi	r2,-1
    7ac4:	18808e26 	beq	r3,r2,7d00 <_malloc_r+0x680>
    7ac8:	2145c83a 	sub	r2,r4,r5
    7acc:	3085883a 	add	r2,r6,r2
    7ad0:	b8800015 	stw	r2,0(r23)
    7ad4:	20c001cc 	andi	r3,r4,7
    7ad8:	18005f1e 	bne	r3,zero,7c58 <_malloc_r+0x5d8>
    7adc:	000b883a 	mov	r5,zero
    7ae0:	a4c5883a 	add	r2,r20,r19
    7ae4:	1083ffcc 	andi	r2,r2,4095
    7ae8:	00c40004 	movi	r3,4096
    7aec:	1887c83a 	sub	r3,r3,r2
    7af0:	28e7883a 	add	r19,r5,r3
    7af4:	9009883a 	mov	r4,r18
    7af8:	980b883a 	mov	r5,r19
    7afc:	0007dc00 	call	7dc0 <_sbrk_r>
    7b00:	1007883a 	mov	r3,r2
    7b04:	00bfffc4 	movi	r2,-1
    7b08:	18807a26 	beq	r3,r2,7cf4 <_malloc_r+0x674>
    7b0c:	1d05c83a 	sub	r2,r3,r20
    7b10:	9885883a 	add	r2,r19,r2
    7b14:	10c00054 	ori	r3,r2,1
    7b18:	b8800017 	ldw	r2,0(r23)
    7b1c:	a021883a 	mov	r16,r20
    7b20:	a0c00115 	stw	r3,4(r20)
    7b24:	9885883a 	add	r2,r19,r2
    7b28:	b8800015 	stw	r2,0(r23)
    7b2c:	e5000215 	stw	r20,8(fp)
    7b30:	b7003626 	beq	r22,fp,7c0c <_malloc_r+0x58c>
    7b34:	018003c4 	movi	r6,15
    7b38:	35404b36 	bltu	r6,r21,7c68 <_malloc_r+0x5e8>
    7b3c:	00800044 	movi	r2,1
    7b40:	a0800115 	stw	r2,4(r20)
    7b44:	003fcd06 	br	7a7c <_malloc_r+0x3fc>
    7b48:	2808d27a 	srli	r4,r5,9
    7b4c:	2000371e 	bne	r4,zero,7c2c <_malloc_r+0x5ac>
    7b50:	2808d0fa 	srli	r4,r5,3
    7b54:	200690fa 	slli	r3,r4,3
    7b58:	1ad1883a 	add	r8,r3,r11
    7b5c:	41800217 	ldw	r6,8(r8)
    7b60:	41805b26 	beq	r8,r6,7cd0 <_malloc_r+0x650>
    7b64:	30800117 	ldw	r2,4(r6)
    7b68:	00ffff04 	movi	r3,-4
    7b6c:	10c4703a 	and	r2,r2,r3
    7b70:	2880022e 	bgeu	r5,r2,7b7c <_malloc_r+0x4fc>
    7b74:	31800217 	ldw	r6,8(r6)
    7b78:	41bffa1e 	bne	r8,r6,7b64 <_malloc_r+0x4e4>
    7b7c:	32000317 	ldw	r8,12(r6)
    7b80:	39c00117 	ldw	r7,4(r7)
    7b84:	82000315 	stw	r8,12(r16)
    7b88:	81800215 	stw	r6,8(r16)
    7b8c:	07000074 	movhi	fp,1
    7b90:	e728fc04 	addi	fp,fp,-23568
    7b94:	34000315 	stw	r16,12(r6)
    7b98:	44000215 	stw	r16,8(r8)
    7b9c:	003f3e06 	br	7898 <_malloc_r+0x218>
    7ba0:	63000044 	addi	r12,r12,1
    7ba4:	608000cc 	andi	r2,r12,3
    7ba8:	10005d26 	beq	r2,zero,7d20 <_malloc_r+0x6a0>
    7bac:	18c00204 	addi	r3,r3,8
    7bb0:	003f5106 	br	78f8 <_malloc_r+0x278>
    7bb4:	8089883a 	add	r4,r16,r2
    7bb8:	003f6d06 	br	7970 <_malloc_r+0x2f0>
    7bbc:	00805504 	movi	r2,340
    7bc0:	10c02036 	bltu	r2,r3,7c44 <_malloc_r+0x5c4>
    7bc4:	8804d3fa 	srli	r2,r17,15
    7bc8:	11801dc4 	addi	r6,r2,119
    7bcc:	300490fa 	slli	r2,r6,3
    7bd0:	003ed806 	br	7734 <_malloc_r+0xb4>
    7bd4:	48c000c4 	addi	r3,r9,3
    7bd8:	003f3106 	br	78a0 <_malloc_r+0x220>
    7bdc:	05c00074 	movhi	r23,1
    7be0:	bdf0b504 	addi	r23,r23,-15660
    7be4:	b8800017 	ldw	r2,0(r23)
    7be8:	988d883a 	add	r6,r19,r2
    7bec:	b9800015 	stw	r6,0(r23)
    7bf0:	293fb21e 	bne	r5,r4,7abc <_malloc_r+0x43c>
    7bf4:	2083ffcc 	andi	r2,r4,4095
    7bf8:	103fb01e 	bne	r2,zero,7abc <_malloc_r+0x43c>
    7bfc:	e4000217 	ldw	r16,8(fp)
    7c00:	9d45883a 	add	r2,r19,r21
    7c04:	10800054 	ori	r2,r2,1
    7c08:	80800115 	stw	r2,4(r16)
    7c0c:	b8c00017 	ldw	r3,0(r23)
    7c10:	d0a6b517 	ldw	r2,-25900(gp)
    7c14:	10c0012e 	bgeu	r2,r3,7c1c <_malloc_r+0x59c>
    7c18:	d0e6b515 	stw	r3,-25900(gp)
    7c1c:	d0a6b617 	ldw	r2,-25896(gp)
    7c20:	10ff962e 	bgeu	r2,r3,7a7c <_malloc_r+0x3fc>
    7c24:	d0e6b615 	stw	r3,-25896(gp)
    7c28:	003f9406 	br	7a7c <_malloc_r+0x3fc>
    7c2c:	00800104 	movi	r2,4
    7c30:	11001e36 	bltu	r2,r4,7cac <_malloc_r+0x62c>
    7c34:	2804d1ba 	srli	r2,r5,6
    7c38:	11000e04 	addi	r4,r2,56
    7c3c:	200690fa 	slli	r3,r4,3
    7c40:	003fc506 	br	7b58 <_malloc_r+0x4d8>
    7c44:	00815504 	movi	r2,1364
    7c48:	10c01d2e 	bgeu	r2,r3,7cc0 <_malloc_r+0x640>
    7c4c:	01801f84 	movi	r6,126
    7c50:	0080fc04 	movi	r2,1008
    7c54:	003eb706 	br	7734 <_malloc_r+0xb4>
    7c58:	00800204 	movi	r2,8
    7c5c:	10cbc83a 	sub	r5,r2,r3
    7c60:	2169883a 	add	r20,r4,r5
    7c64:	003f9e06 	br	7ae0 <_malloc_r+0x460>
    7c68:	00bffe04 	movi	r2,-8
    7c6c:	a93ffd04 	addi	r4,r21,-12
    7c70:	2088703a 	and	r4,r4,r2
    7c74:	b10b883a 	add	r5,r22,r4
    7c78:	00c00144 	movi	r3,5
    7c7c:	28c00215 	stw	r3,8(r5)
    7c80:	28c00115 	stw	r3,4(r5)
    7c84:	b0800117 	ldw	r2,4(r22)
    7c88:	1080004c 	andi	r2,r2,1
    7c8c:	2084b03a 	or	r2,r4,r2
    7c90:	b0800115 	stw	r2,4(r22)
    7c94:	313fdd2e 	bgeu	r6,r4,7c0c <_malloc_r+0x58c>
    7c98:	b1400204 	addi	r5,r22,8
    7c9c:	9009883a 	mov	r4,r18
    7ca0:	00070580 	call	7058 <_free_r>
    7ca4:	e4000217 	ldw	r16,8(fp)
    7ca8:	003fd806 	br	7c0c <_malloc_r+0x58c>
    7cac:	00800504 	movi	r2,20
    7cb0:	11001536 	bltu	r2,r4,7d08 <_malloc_r+0x688>
    7cb4:	210016c4 	addi	r4,r4,91
    7cb8:	200690fa 	slli	r3,r4,3
    7cbc:	003fa606 	br	7b58 <_malloc_r+0x4d8>
    7cc0:	8804d4ba 	srli	r2,r17,18
    7cc4:	11801f04 	addi	r6,r2,124
    7cc8:	300490fa 	slli	r2,r6,3
    7ccc:	003e9906 	br	7734 <_malloc_r+0xb4>
    7cd0:	2009d0ba 	srai	r4,r4,2
    7cd4:	01400074 	movhi	r5,1
    7cd8:	2968fc04 	addi	r5,r5,-23568
    7cdc:	00c00044 	movi	r3,1
    7ce0:	28800117 	ldw	r2,4(r5)
    7ce4:	1906983a 	sll	r3,r3,r4
    7ce8:	10c4b03a 	or	r2,r2,r3
    7cec:	28800115 	stw	r2,4(r5)
    7cf0:	003fa306 	br	7b80 <_malloc_r+0x500>
    7cf4:	0027883a 	mov	r19,zero
    7cf8:	00c00044 	movi	r3,1
    7cfc:	003f8606 	br	7b18 <_malloc_r+0x498>
    7d00:	d1200d15 	stw	r4,-32716(gp)
    7d04:	003f7306 	br	7ad4 <_malloc_r+0x454>
    7d08:	00801504 	movi	r2,84
    7d0c:	11001936 	bltu	r2,r4,7d74 <_malloc_r+0x6f4>
    7d10:	2804d33a 	srli	r2,r5,12
    7d14:	11001b84 	addi	r4,r2,110
    7d18:	200690fa 	slli	r3,r4,3
    7d1c:	003f8e06 	br	7b58 <_malloc_r+0x4d8>
    7d20:	480b883a 	mov	r5,r9
    7d24:	6807883a 	mov	r3,r13
    7d28:	288000cc 	andi	r2,r5,3
    7d2c:	18fffe04 	addi	r3,r3,-8
    7d30:	297fffc4 	addi	r5,r5,-1
    7d34:	10001526 	beq	r2,zero,7d8c <_malloc_r+0x70c>
    7d38:	18800217 	ldw	r2,8(r3)
    7d3c:	10fffa26 	beq	r2,r3,7d28 <_malloc_r+0x6a8>
    7d40:	2109883a 	add	r4,r4,r4
    7d44:	393f1e36 	bltu	r7,r4,79c0 <_malloc_r+0x340>
    7d48:	203f1d26 	beq	r4,zero,79c0 <_malloc_r+0x340>
    7d4c:	21c4703a 	and	r2,r4,r7
    7d50:	10000226 	beq	r2,zero,7d5c <_malloc_r+0x6dc>
    7d54:	6013883a 	mov	r9,r12
    7d58:	003ee106 	br	78e0 <_malloc_r+0x260>
    7d5c:	2109883a 	add	r4,r4,r4
    7d60:	3904703a 	and	r2,r7,r4
    7d64:	63000104 	addi	r12,r12,4
    7d68:	103ffc26 	beq	r2,zero,7d5c <_malloc_r+0x6dc>
    7d6c:	6013883a 	mov	r9,r12
    7d70:	003edb06 	br	78e0 <_malloc_r+0x260>
    7d74:	00805504 	movi	r2,340
    7d78:	11000836 	bltu	r2,r4,7d9c <_malloc_r+0x71c>
    7d7c:	2804d3fa 	srli	r2,r5,15
    7d80:	11001dc4 	addi	r4,r2,119
    7d84:	200690fa 	slli	r3,r4,3
    7d88:	003f7306 	br	7b58 <_malloc_r+0x4d8>
    7d8c:	0104303a 	nor	r2,zero,r4
    7d90:	388e703a 	and	r7,r7,r2
    7d94:	e1c00115 	stw	r7,4(fp)
    7d98:	003fe906 	br	7d40 <_malloc_r+0x6c0>
    7d9c:	00815504 	movi	r2,1364
    7da0:	1100032e 	bgeu	r2,r4,7db0 <_malloc_r+0x730>
    7da4:	01001f84 	movi	r4,126
    7da8:	00c0fc04 	movi	r3,1008
    7dac:	003f6a06 	br	7b58 <_malloc_r+0x4d8>
    7db0:	2804d4ba 	srli	r2,r5,18
    7db4:	11001f04 	addi	r4,r2,124
    7db8:	200690fa 	slli	r3,r4,3
    7dbc:	003f6606 	br	7b58 <_malloc_r+0x4d8>

00007dc0 <_sbrk_r>:
    7dc0:	defffd04 	addi	sp,sp,-12
    7dc4:	dc000015 	stw	r16,0(sp)
    7dc8:	04000074 	movhi	r16,1
    7dcc:	8430b104 	addi	r16,r16,-15676
    7dd0:	dc400115 	stw	r17,4(sp)
    7dd4:	80000015 	stw	zero,0(r16)
    7dd8:	2023883a 	mov	r17,r4
    7ddc:	2809883a 	mov	r4,r5
    7de0:	dfc00215 	stw	ra,8(sp)
    7de4:	00089200 	call	8920 <sbrk>
    7de8:	1007883a 	mov	r3,r2
    7dec:	00bfffc4 	movi	r2,-1
    7df0:	18800626 	beq	r3,r2,7e0c <_sbrk_r+0x4c>
    7df4:	1805883a 	mov	r2,r3
    7df8:	dfc00217 	ldw	ra,8(sp)
    7dfc:	dc400117 	ldw	r17,4(sp)
    7e00:	dc000017 	ldw	r16,0(sp)
    7e04:	dec00304 	addi	sp,sp,12
    7e08:	f800283a 	ret
    7e0c:	80800017 	ldw	r2,0(r16)
    7e10:	103ff826 	beq	r2,zero,7df4 <_sbrk_r+0x34>
    7e14:	88800015 	stw	r2,0(r17)
    7e18:	1805883a 	mov	r2,r3
    7e1c:	dfc00217 	ldw	ra,8(sp)
    7e20:	dc400117 	ldw	r17,4(sp)
    7e24:	dc000017 	ldw	r16,0(sp)
    7e28:	dec00304 	addi	sp,sp,12
    7e2c:	f800283a 	ret

00007e30 <__sclose>:
    7e30:	2940038f 	ldh	r5,14(r5)
    7e34:	0007ff41 	jmpi	7ff4 <_close_r>

00007e38 <__sseek>:
    7e38:	defffe04 	addi	sp,sp,-8
    7e3c:	dc000015 	stw	r16,0(sp)
    7e40:	2821883a 	mov	r16,r5
    7e44:	2940038f 	ldh	r5,14(r5)
    7e48:	dfc00115 	stw	ra,4(sp)
    7e4c:	000826c0 	call	826c <_lseek_r>
    7e50:	1007883a 	mov	r3,r2
    7e54:	00bfffc4 	movi	r2,-1
    7e58:	18800926 	beq	r3,r2,7e80 <__sseek+0x48>
    7e5c:	8080030b 	ldhu	r2,12(r16)
    7e60:	80c01415 	stw	r3,80(r16)
    7e64:	10840014 	ori	r2,r2,4096
    7e68:	8080030d 	sth	r2,12(r16)
    7e6c:	1805883a 	mov	r2,r3
    7e70:	dfc00117 	ldw	ra,4(sp)
    7e74:	dc000017 	ldw	r16,0(sp)
    7e78:	dec00204 	addi	sp,sp,8
    7e7c:	f800283a 	ret
    7e80:	8080030b 	ldhu	r2,12(r16)
    7e84:	10bbffcc 	andi	r2,r2,61439
    7e88:	8080030d 	sth	r2,12(r16)
    7e8c:	1805883a 	mov	r2,r3
    7e90:	dfc00117 	ldw	ra,4(sp)
    7e94:	dc000017 	ldw	r16,0(sp)
    7e98:	dec00204 	addi	sp,sp,8
    7e9c:	f800283a 	ret

00007ea0 <__swrite>:
    7ea0:	2880030b 	ldhu	r2,12(r5)
    7ea4:	defffb04 	addi	sp,sp,-20
    7ea8:	dcc00315 	stw	r19,12(sp)
    7eac:	1080400c 	andi	r2,r2,256
    7eb0:	dc800215 	stw	r18,8(sp)
    7eb4:	dc400115 	stw	r17,4(sp)
    7eb8:	dc000015 	stw	r16,0(sp)
    7ebc:	3027883a 	mov	r19,r6
    7ec0:	3825883a 	mov	r18,r7
    7ec4:	dfc00415 	stw	ra,16(sp)
    7ec8:	2821883a 	mov	r16,r5
    7ecc:	000d883a 	mov	r6,zero
    7ed0:	01c00084 	movi	r7,2
    7ed4:	2023883a 	mov	r17,r4
    7ed8:	10000226 	beq	r2,zero,7ee4 <__swrite+0x44>
    7edc:	2940038f 	ldh	r5,14(r5)
    7ee0:	000826c0 	call	826c <_lseek_r>
    7ee4:	8080030b 	ldhu	r2,12(r16)
    7ee8:	8140038f 	ldh	r5,14(r16)
    7eec:	8809883a 	mov	r4,r17
    7ef0:	10bbffcc 	andi	r2,r2,61439
    7ef4:	980d883a 	mov	r6,r19
    7ef8:	900f883a 	mov	r7,r18
    7efc:	8080030d 	sth	r2,12(r16)
    7f00:	dfc00417 	ldw	ra,16(sp)
    7f04:	dcc00317 	ldw	r19,12(sp)
    7f08:	dc800217 	ldw	r18,8(sp)
    7f0c:	dc400117 	ldw	r17,4(sp)
    7f10:	dc000017 	ldw	r16,0(sp)
    7f14:	dec00504 	addi	sp,sp,20
    7f18:	0007f7c1 	jmpi	7f7c <_write_r>

00007f1c <__sread>:
    7f1c:	defffe04 	addi	sp,sp,-8
    7f20:	dc000015 	stw	r16,0(sp)
    7f24:	2821883a 	mov	r16,r5
    7f28:	2940038f 	ldh	r5,14(r5)
    7f2c:	dfc00115 	stw	ra,4(sp)
    7f30:	00082e40 	call	82e4 <_read_r>
    7f34:	1007883a 	mov	r3,r2
    7f38:	10000816 	blt	r2,zero,7f5c <__sread+0x40>
    7f3c:	80801417 	ldw	r2,80(r16)
    7f40:	10c5883a 	add	r2,r2,r3
    7f44:	80801415 	stw	r2,80(r16)
    7f48:	1805883a 	mov	r2,r3
    7f4c:	dfc00117 	ldw	ra,4(sp)
    7f50:	dc000017 	ldw	r16,0(sp)
    7f54:	dec00204 	addi	sp,sp,8
    7f58:	f800283a 	ret
    7f5c:	8080030b 	ldhu	r2,12(r16)
    7f60:	10bbffcc 	andi	r2,r2,61439
    7f64:	8080030d 	sth	r2,12(r16)
    7f68:	1805883a 	mov	r2,r3
    7f6c:	dfc00117 	ldw	ra,4(sp)
    7f70:	dc000017 	ldw	r16,0(sp)
    7f74:	dec00204 	addi	sp,sp,8
    7f78:	f800283a 	ret

00007f7c <_write_r>:
    7f7c:	defffd04 	addi	sp,sp,-12
    7f80:	dc000015 	stw	r16,0(sp)
    7f84:	04000074 	movhi	r16,1
    7f88:	8430b104 	addi	r16,r16,-15676
    7f8c:	dc400115 	stw	r17,4(sp)
    7f90:	80000015 	stw	zero,0(r16)
    7f94:	2023883a 	mov	r17,r4
    7f98:	2809883a 	mov	r4,r5
    7f9c:	300b883a 	mov	r5,r6
    7fa0:	380d883a 	mov	r6,r7
    7fa4:	dfc00215 	stw	ra,8(sp)
    7fa8:	00089dc0 	call	89dc <write>
    7fac:	1007883a 	mov	r3,r2
    7fb0:	00bfffc4 	movi	r2,-1
    7fb4:	18800626 	beq	r3,r2,7fd0 <_write_r+0x54>
    7fb8:	1805883a 	mov	r2,r3
    7fbc:	dfc00217 	ldw	ra,8(sp)
    7fc0:	dc400117 	ldw	r17,4(sp)
    7fc4:	dc000017 	ldw	r16,0(sp)
    7fc8:	dec00304 	addi	sp,sp,12
    7fcc:	f800283a 	ret
    7fd0:	80800017 	ldw	r2,0(r16)
    7fd4:	103ff826 	beq	r2,zero,7fb8 <_write_r+0x3c>
    7fd8:	88800015 	stw	r2,0(r17)
    7fdc:	1805883a 	mov	r2,r3
    7fe0:	dfc00217 	ldw	ra,8(sp)
    7fe4:	dc400117 	ldw	r17,4(sp)
    7fe8:	dc000017 	ldw	r16,0(sp)
    7fec:	dec00304 	addi	sp,sp,12
    7ff0:	f800283a 	ret

00007ff4 <_close_r>:
    7ff4:	defffd04 	addi	sp,sp,-12
    7ff8:	dc000015 	stw	r16,0(sp)
    7ffc:	04000074 	movhi	r16,1
    8000:	8430b104 	addi	r16,r16,-15676
    8004:	dc400115 	stw	r17,4(sp)
    8008:	80000015 	stw	zero,0(r16)
    800c:	2023883a 	mov	r17,r4
    8010:	2809883a 	mov	r4,r5
    8014:	dfc00215 	stw	ra,8(sp)
    8018:	00051700 	call	5170 <close>
    801c:	1007883a 	mov	r3,r2
    8020:	00bfffc4 	movi	r2,-1
    8024:	18800626 	beq	r3,r2,8040 <_close_r+0x4c>
    8028:	1805883a 	mov	r2,r3
    802c:	dfc00217 	ldw	ra,8(sp)
    8030:	dc400117 	ldw	r17,4(sp)
    8034:	dc000017 	ldw	r16,0(sp)
    8038:	dec00304 	addi	sp,sp,12
    803c:	f800283a 	ret
    8040:	80800017 	ldw	r2,0(r16)
    8044:	103ff826 	beq	r2,zero,8028 <_close_r+0x34>
    8048:	88800015 	stw	r2,0(r17)
    804c:	1805883a 	mov	r2,r3
    8050:	dfc00217 	ldw	ra,8(sp)
    8054:	dc400117 	ldw	r17,4(sp)
    8058:	dc000017 	ldw	r16,0(sp)
    805c:	dec00304 	addi	sp,sp,12
    8060:	f800283a 	ret

00008064 <_fclose_r>:
    8064:	defffc04 	addi	sp,sp,-16
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
    8070:	dfc00315 	stw	ra,12(sp)
    8074:	dc800215 	stw	r18,8(sp)
    8078:	2821883a 	mov	r16,r5
    807c:	2023883a 	mov	r17,r4
    8080:	28002926 	beq	r5,zero,8128 <_fclose_r+0xc4>
    8084:	0006cc40 	call	6cc4 <__sfp_lock_acquire>
    8088:	88000226 	beq	r17,zero,8094 <_fclose_r+0x30>
    808c:	88800e17 	ldw	r2,56(r17)
    8090:	10002d26 	beq	r2,zero,8148 <_fclose_r+0xe4>
    8094:	8080030f 	ldh	r2,12(r16)
    8098:	10002226 	beq	r2,zero,8124 <_fclose_r+0xc0>
    809c:	8809883a 	mov	r4,r17
    80a0:	800b883a 	mov	r5,r16
    80a4:	0006a3c0 	call	6a3c <_fflush_r>
    80a8:	1025883a 	mov	r18,r2
    80ac:	80800b17 	ldw	r2,44(r16)
    80b0:	10000426 	beq	r2,zero,80c4 <_fclose_r+0x60>
    80b4:	81400717 	ldw	r5,28(r16)
    80b8:	8809883a 	mov	r4,r17
    80bc:	103ee83a 	callr	r2
    80c0:	10002a16 	blt	r2,zero,816c <_fclose_r+0x108>
    80c4:	8080030b 	ldhu	r2,12(r16)
    80c8:	1080200c 	andi	r2,r2,128
    80cc:	1000231e 	bne	r2,zero,815c <_fclose_r+0xf8>
    80d0:	81400c17 	ldw	r5,48(r16)
    80d4:	28000526 	beq	r5,zero,80ec <_fclose_r+0x88>
    80d8:	80801004 	addi	r2,r16,64
    80dc:	28800226 	beq	r5,r2,80e8 <_fclose_r+0x84>
    80e0:	8809883a 	mov	r4,r17
    80e4:	00070580 	call	7058 <_free_r>
    80e8:	80000c15 	stw	zero,48(r16)
    80ec:	81401117 	ldw	r5,68(r16)
    80f0:	28000326 	beq	r5,zero,8100 <_fclose_r+0x9c>
    80f4:	8809883a 	mov	r4,r17
    80f8:	00070580 	call	7058 <_free_r>
    80fc:	80001115 	stw	zero,68(r16)
    8100:	8000030d 	sth	zero,12(r16)
    8104:	0006cc80 	call	6cc8 <__sfp_lock_release>
    8108:	9005883a 	mov	r2,r18
    810c:	dfc00317 	ldw	ra,12(sp)
    8110:	dc800217 	ldw	r18,8(sp)
    8114:	dc400117 	ldw	r17,4(sp)
    8118:	dc000017 	ldw	r16,0(sp)
    811c:	dec00404 	addi	sp,sp,16
    8120:	f800283a 	ret
    8124:	0006cc80 	call	6cc8 <__sfp_lock_release>
    8128:	0025883a 	mov	r18,zero
    812c:	9005883a 	mov	r2,r18
    8130:	dfc00317 	ldw	ra,12(sp)
    8134:	dc800217 	ldw	r18,8(sp)
    8138:	dc400117 	ldw	r17,4(sp)
    813c:	dc000017 	ldw	r16,0(sp)
    8140:	dec00404 	addi	sp,sp,16
    8144:	f800283a 	ret
    8148:	8809883a 	mov	r4,r17
    814c:	0006cd40 	call	6cd4 <__sinit>
    8150:	8080030f 	ldh	r2,12(r16)
    8154:	103fd11e 	bne	r2,zero,809c <_fclose_r+0x38>
    8158:	003ff206 	br	8124 <_fclose_r+0xc0>
    815c:	81400417 	ldw	r5,16(r16)
    8160:	8809883a 	mov	r4,r17
    8164:	00070580 	call	7058 <_free_r>
    8168:	003fd906 	br	80d0 <_fclose_r+0x6c>
    816c:	04bfffc4 	movi	r18,-1
    8170:	003fd406 	br	80c4 <_fclose_r+0x60>

00008174 <fclose>:
    8174:	00800074 	movhi	r2,1
    8178:	10a9ff04 	addi	r2,r2,-22532
    817c:	200b883a 	mov	r5,r4
    8180:	11000017 	ldw	r4,0(r2)
    8184:	00080641 	jmpi	8064 <_fclose_r>

00008188 <_fstat_r>:
    8188:	defffd04 	addi	sp,sp,-12
    818c:	dc000015 	stw	r16,0(sp)
    8190:	04000074 	movhi	r16,1
    8194:	8430b104 	addi	r16,r16,-15676
    8198:	dc400115 	stw	r17,4(sp)
    819c:	80000015 	stw	zero,0(r16)
    81a0:	2023883a 	mov	r17,r4
    81a4:	2809883a 	mov	r4,r5
    81a8:	300b883a 	mov	r5,r6
    81ac:	dfc00215 	stw	ra,8(sp)
    81b0:	00083bc0 	call	83bc <fstat>
    81b4:	1007883a 	mov	r3,r2
    81b8:	00bfffc4 	movi	r2,-1
    81bc:	18800626 	beq	r3,r2,81d8 <_fstat_r+0x50>
    81c0:	1805883a 	mov	r2,r3
    81c4:	dfc00217 	ldw	ra,8(sp)
    81c8:	dc400117 	ldw	r17,4(sp)
    81cc:	dc000017 	ldw	r16,0(sp)
    81d0:	dec00304 	addi	sp,sp,12
    81d4:	f800283a 	ret
    81d8:	80800017 	ldw	r2,0(r16)
    81dc:	103ff826 	beq	r2,zero,81c0 <_fstat_r+0x38>
    81e0:	88800015 	stw	r2,0(r17)
    81e4:	1805883a 	mov	r2,r3
    81e8:	dfc00217 	ldw	ra,8(sp)
    81ec:	dc400117 	ldw	r17,4(sp)
    81f0:	dc000017 	ldw	r16,0(sp)
    81f4:	dec00304 	addi	sp,sp,12
    81f8:	f800283a 	ret

000081fc <_isatty_r>:
    81fc:	defffd04 	addi	sp,sp,-12
    8200:	dc000015 	stw	r16,0(sp)
    8204:	04000074 	movhi	r16,1
    8208:	8430b104 	addi	r16,r16,-15676
    820c:	dc400115 	stw	r17,4(sp)
    8210:	80000015 	stw	zero,0(r16)
    8214:	2023883a 	mov	r17,r4
    8218:	2809883a 	mov	r4,r5
    821c:	dfc00215 	stw	ra,8(sp)
    8220:	00084f00 	call	84f0 <isatty>
    8224:	1007883a 	mov	r3,r2
    8228:	00bfffc4 	movi	r2,-1
    822c:	18800626 	beq	r3,r2,8248 <_isatty_r+0x4c>
    8230:	1805883a 	mov	r2,r3
    8234:	dfc00217 	ldw	ra,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00304 	addi	sp,sp,12
    8244:	f800283a 	ret
    8248:	80800017 	ldw	r2,0(r16)
    824c:	103ff826 	beq	r2,zero,8230 <_isatty_r+0x34>
    8250:	88800015 	stw	r2,0(r17)
    8254:	1805883a 	mov	r2,r3
    8258:	dfc00217 	ldw	ra,8(sp)
    825c:	dc400117 	ldw	r17,4(sp)
    8260:	dc000017 	ldw	r16,0(sp)
    8264:	dec00304 	addi	sp,sp,12
    8268:	f800283a 	ret

0000826c <_lseek_r>:
    826c:	defffd04 	addi	sp,sp,-12
    8270:	dc000015 	stw	r16,0(sp)
    8274:	04000074 	movhi	r16,1
    8278:	8430b104 	addi	r16,r16,-15676
    827c:	dc400115 	stw	r17,4(sp)
    8280:	80000015 	stw	zero,0(r16)
    8284:	2023883a 	mov	r17,r4
    8288:	2809883a 	mov	r4,r5
    828c:	300b883a 	mov	r5,r6
    8290:	380d883a 	mov	r6,r7
    8294:	dfc00215 	stw	ra,8(sp)
    8298:	00086100 	call	8610 <lseek>
    829c:	1007883a 	mov	r3,r2
    82a0:	00bfffc4 	movi	r2,-1
    82a4:	18800626 	beq	r3,r2,82c0 <_lseek_r+0x54>
    82a8:	1805883a 	mov	r2,r3
    82ac:	dfc00217 	ldw	ra,8(sp)
    82b0:	dc400117 	ldw	r17,4(sp)
    82b4:	dc000017 	ldw	r16,0(sp)
    82b8:	dec00304 	addi	sp,sp,12
    82bc:	f800283a 	ret
    82c0:	80800017 	ldw	r2,0(r16)
    82c4:	103ff826 	beq	r2,zero,82a8 <_lseek_r+0x3c>
    82c8:	88800015 	stw	r2,0(r17)
    82cc:	1805883a 	mov	r2,r3
    82d0:	dfc00217 	ldw	ra,8(sp)
    82d4:	dc400117 	ldw	r17,4(sp)
    82d8:	dc000017 	ldw	r16,0(sp)
    82dc:	dec00304 	addi	sp,sp,12
    82e0:	f800283a 	ret

000082e4 <_read_r>:
    82e4:	defffd04 	addi	sp,sp,-12
    82e8:	dc000015 	stw	r16,0(sp)
    82ec:	04000074 	movhi	r16,1
    82f0:	8430b104 	addi	r16,r16,-15676
    82f4:	dc400115 	stw	r17,4(sp)
    82f8:	80000015 	stw	zero,0(r16)
    82fc:	2023883a 	mov	r17,r4
    8300:	2809883a 	mov	r4,r5
    8304:	300b883a 	mov	r5,r6
    8308:	380d883a 	mov	r6,r7
    830c:	dfc00215 	stw	ra,8(sp)
    8310:	00087a00 	call	87a0 <read>
    8314:	1007883a 	mov	r3,r2
    8318:	00bfffc4 	movi	r2,-1
    831c:	18800626 	beq	r3,r2,8338 <_read_r+0x54>
    8320:	1805883a 	mov	r2,r3
    8324:	dfc00217 	ldw	ra,8(sp)
    8328:	dc400117 	ldw	r17,4(sp)
    832c:	dc000017 	ldw	r16,0(sp)
    8330:	dec00304 	addi	sp,sp,12
    8334:	f800283a 	ret
    8338:	80800017 	ldw	r2,0(r16)
    833c:	103ff826 	beq	r2,zero,8320 <_read_r+0x3c>
    8340:	88800015 	stw	r2,0(r17)
    8344:	1805883a 	mov	r2,r3
    8348:	dfc00217 	ldw	ra,8(sp)
    834c:	dc400117 	ldw	r17,4(sp)
    8350:	dc000017 	ldw	r16,0(sp)
    8354:	dec00304 	addi	sp,sp,12
    8358:	f800283a 	ret

0000835c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    835c:	defffd04 	addi	sp,sp,-12
    8360:	df000215 	stw	fp,8(sp)
    8364:	df000204 	addi	fp,sp,8
    8368:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    836c:	e0bfff17 	ldw	r2,-4(fp)
    8370:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8374:	e0bffe17 	ldw	r2,-8(fp)
    8378:	1005003a 	cmpeq	r2,r2,zero
    837c:	1000021e 	bne	r2,zero,8388 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    8380:	002af070 	cmpltui	zero,zero,43969
    8384:	00000106 	br	838c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    8388:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    838c:	e037883a 	mov	sp,fp
    8390:	df000017 	ldw	fp,0(sp)
    8394:	dec00104 	addi	sp,sp,4
    8398:	f800283a 	ret

0000839c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    839c:	defffd04 	addi	sp,sp,-12
    83a0:	dfc00215 	stw	ra,8(sp)
    83a4:	df000115 	stw	fp,4(sp)
    83a8:	df000104 	addi	fp,sp,4
    83ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    83b0:	e13fff17 	ldw	r4,-4(fp)
    83b4:	000835c0 	call	835c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    83b8:	003fff06 	br	83b8 <_exit+0x1c>

000083bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    83bc:	defff904 	addi	sp,sp,-28
    83c0:	dfc00615 	stw	ra,24(sp)
    83c4:	df000515 	stw	fp,20(sp)
    83c8:	df000504 	addi	fp,sp,20
    83cc:	e13ffc15 	stw	r4,-16(fp)
    83d0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    83d4:	e0bffc17 	ldw	r2,-16(fp)
    83d8:	1004803a 	cmplt	r2,r2,zero
    83dc:	1000081e 	bne	r2,zero,8400 <fstat+0x44>
    83e0:	e0bffc17 	ldw	r2,-16(fp)
    83e4:	10800324 	muli	r2,r2,12
    83e8:	1007883a 	mov	r3,r2
    83ec:	00800074 	movhi	r2,1
    83f0:	10a89c04 	addi	r2,r2,-23952
    83f4:	1887883a 	add	r3,r3,r2
    83f8:	e0ffff15 	stw	r3,-4(fp)
    83fc:	00000106 	br	8404 <fstat+0x48>
    8400:	e03fff15 	stw	zero,-4(fp)
    8404:	e0bfff17 	ldw	r2,-4(fp)
    8408:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    840c:	e0bffb17 	ldw	r2,-20(fp)
    8410:	1005003a 	cmpeq	r2,r2,zero
    8414:	1000121e 	bne	r2,zero,8460 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    8418:	e0bffb17 	ldw	r2,-20(fp)
    841c:	10800017 	ldw	r2,0(r2)
    8420:	10800817 	ldw	r2,32(r2)
    8424:	1005003a 	cmpeq	r2,r2,zero
    8428:	1000081e 	bne	r2,zero,844c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    842c:	e0bffb17 	ldw	r2,-20(fp)
    8430:	10800017 	ldw	r2,0(r2)
    8434:	10800817 	ldw	r2,32(r2)
    8438:	e13ffb17 	ldw	r4,-20(fp)
    843c:	e17ffd17 	ldw	r5,-12(fp)
    8440:	103ee83a 	callr	r2
    8444:	e0bffe15 	stw	r2,-8(fp)
    8448:	00000b06 	br	8478 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    844c:	e0fffd17 	ldw	r3,-12(fp)
    8450:	00880004 	movi	r2,8192
    8454:	18800115 	stw	r2,4(r3)
      return 0;
    8458:	e03ffe15 	stw	zero,-8(fp)
    845c:	00000606 	br	8478 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8460:	00084900 	call	8490 <alt_get_errno>
    8464:	1007883a 	mov	r3,r2
    8468:	00801444 	movi	r2,81
    846c:	18800015 	stw	r2,0(r3)
    return -1;
    8470:	00bfffc4 	movi	r2,-1
    8474:	e0bffe15 	stw	r2,-8(fp)
    8478:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    847c:	e037883a 	mov	sp,fp
    8480:	dfc00117 	ldw	ra,4(sp)
    8484:	df000017 	ldw	fp,0(sp)
    8488:	dec00204 	addi	sp,sp,8
    848c:	f800283a 	ret

00008490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8490:	defffd04 	addi	sp,sp,-12
    8494:	dfc00215 	stw	ra,8(sp)
    8498:	df000115 	stw	fp,4(sp)
    849c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    84a0:	00800074 	movhi	r2,1
    84a4:	10aa0604 	addi	r2,r2,-22504
    84a8:	10800017 	ldw	r2,0(r2)
    84ac:	1005003a 	cmpeq	r2,r2,zero
    84b0:	1000061e 	bne	r2,zero,84cc <alt_get_errno+0x3c>
    84b4:	00800074 	movhi	r2,1
    84b8:	10aa0604 	addi	r2,r2,-22504
    84bc:	10800017 	ldw	r2,0(r2)
    84c0:	103ee83a 	callr	r2
    84c4:	e0bfff15 	stw	r2,-4(fp)
    84c8:	00000306 	br	84d8 <alt_get_errno+0x48>
    84cc:	00800074 	movhi	r2,1
    84d0:	10b0b104 	addi	r2,r2,-15676
    84d4:	e0bfff15 	stw	r2,-4(fp)
    84d8:	e0bfff17 	ldw	r2,-4(fp)
}
    84dc:	e037883a 	mov	sp,fp
    84e0:	dfc00117 	ldw	ra,4(sp)
    84e4:	df000017 	ldw	fp,0(sp)
    84e8:	dec00204 	addi	sp,sp,8
    84ec:	f800283a 	ret

000084f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    84f0:	deffeb04 	addi	sp,sp,-84
    84f4:	dfc01415 	stw	ra,80(sp)
    84f8:	df001315 	stw	fp,76(sp)
    84fc:	df001304 	addi	fp,sp,76
    8500:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	1004803a 	cmplt	r2,r2,zero
    850c:	1000081e 	bne	r2,zero,8530 <isatty+0x40>
    8510:	e0bffd17 	ldw	r2,-12(fp)
    8514:	10800324 	muli	r2,r2,12
    8518:	1007883a 	mov	r3,r2
    851c:	00800074 	movhi	r2,1
    8520:	10a89c04 	addi	r2,r2,-23952
    8524:	1887883a 	add	r3,r3,r2
    8528:	e0ffff15 	stw	r3,-4(fp)
    852c:	00000106 	br	8534 <isatty+0x44>
    8530:	e03fff15 	stw	zero,-4(fp)
    8534:	e0bfff17 	ldw	r2,-4(fp)
    8538:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    853c:	e0bfed17 	ldw	r2,-76(fp)
    8540:	1005003a 	cmpeq	r2,r2,zero
    8544:	10000f1e 	bne	r2,zero,8584 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    8548:	e0bfed17 	ldw	r2,-76(fp)
    854c:	10800017 	ldw	r2,0(r2)
    8550:	10800817 	ldw	r2,32(r2)
    8554:	1004c03a 	cmpne	r2,r2,zero
    8558:	1000031e 	bne	r2,zero,8568 <isatty+0x78>
    {
      return 1;
    855c:	00800044 	movi	r2,1
    8560:	e0bffe15 	stw	r2,-8(fp)
    8564:	00000c06 	br	8598 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    8568:	e17fee04 	addi	r5,fp,-72
    856c:	e13ffd17 	ldw	r4,-12(fp)
    8570:	00083bc0 	call	83bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    8574:	e0bfef17 	ldw	r2,-68(fp)
    8578:	10880020 	cmpeqi	r2,r2,8192
    857c:	e0bffe15 	stw	r2,-8(fp)
    8580:	00000506 	br	8598 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8584:	00085b00 	call	85b0 <alt_get_errno>
    8588:	1007883a 	mov	r3,r2
    858c:	00801444 	movi	r2,81
    8590:	18800015 	stw	r2,0(r3)
    return 0;
    8594:	e03ffe15 	stw	zero,-8(fp)
    8598:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    859c:	e037883a 	mov	sp,fp
    85a0:	dfc00117 	ldw	ra,4(sp)
    85a4:	df000017 	ldw	fp,0(sp)
    85a8:	dec00204 	addi	sp,sp,8
    85ac:	f800283a 	ret

000085b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    85b0:	defffd04 	addi	sp,sp,-12
    85b4:	dfc00215 	stw	ra,8(sp)
    85b8:	df000115 	stw	fp,4(sp)
    85bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    85c0:	00800074 	movhi	r2,1
    85c4:	10aa0604 	addi	r2,r2,-22504
    85c8:	10800017 	ldw	r2,0(r2)
    85cc:	1005003a 	cmpeq	r2,r2,zero
    85d0:	1000061e 	bne	r2,zero,85ec <alt_get_errno+0x3c>
    85d4:	00800074 	movhi	r2,1
    85d8:	10aa0604 	addi	r2,r2,-22504
    85dc:	10800017 	ldw	r2,0(r2)
    85e0:	103ee83a 	callr	r2
    85e4:	e0bfff15 	stw	r2,-4(fp)
    85e8:	00000306 	br	85f8 <alt_get_errno+0x48>
    85ec:	00800074 	movhi	r2,1
    85f0:	10b0b104 	addi	r2,r2,-15676
    85f4:	e0bfff15 	stw	r2,-4(fp)
    85f8:	e0bfff17 	ldw	r2,-4(fp)
}
    85fc:	e037883a 	mov	sp,fp
    8600:	dfc00117 	ldw	ra,4(sp)
    8604:	df000017 	ldw	fp,0(sp)
    8608:	dec00204 	addi	sp,sp,8
    860c:	f800283a 	ret

00008610 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    8610:	defff804 	addi	sp,sp,-32
    8614:	dfc00715 	stw	ra,28(sp)
    8618:	df000615 	stw	fp,24(sp)
    861c:	df000604 	addi	fp,sp,24
    8620:	e13ffc15 	stw	r4,-16(fp)
    8624:	e17ffd15 	stw	r5,-12(fp)
    8628:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    862c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	1004803a 	cmplt	r2,r2,zero
    8638:	1000081e 	bne	r2,zero,865c <lseek+0x4c>
    863c:	e0bffc17 	ldw	r2,-16(fp)
    8640:	10800324 	muli	r2,r2,12
    8644:	1007883a 	mov	r3,r2
    8648:	00800074 	movhi	r2,1
    864c:	10a89c04 	addi	r2,r2,-23952
    8650:	1887883a 	add	r3,r3,r2
    8654:	e0ffff15 	stw	r3,-4(fp)
    8658:	00000106 	br	8660 <lseek+0x50>
    865c:	e03fff15 	stw	zero,-4(fp)
    8660:	e0bfff17 	ldw	r2,-4(fp)
    8664:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    8668:	e0bffb17 	ldw	r2,-20(fp)
    866c:	1005003a 	cmpeq	r2,r2,zero
    8670:	1000111e 	bne	r2,zero,86b8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    8674:	e0bffb17 	ldw	r2,-20(fp)
    8678:	10800017 	ldw	r2,0(r2)
    867c:	10800717 	ldw	r2,28(r2)
    8680:	1005003a 	cmpeq	r2,r2,zero
    8684:	1000091e 	bne	r2,zero,86ac <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    8688:	e0bffb17 	ldw	r2,-20(fp)
    868c:	10800017 	ldw	r2,0(r2)
    8690:	10800717 	ldw	r2,28(r2)
    8694:	e13ffb17 	ldw	r4,-20(fp)
    8698:	e17ffd17 	ldw	r5,-12(fp)
    869c:	e1bffe17 	ldw	r6,-8(fp)
    86a0:	103ee83a 	callr	r2
    86a4:	e0bffa15 	stw	r2,-24(fp)
    86a8:	00000506 	br	86c0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    86ac:	00bfde84 	movi	r2,-134
    86b0:	e0bffa15 	stw	r2,-24(fp)
    86b4:	00000206 	br	86c0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    86b8:	00bfebc4 	movi	r2,-81
    86bc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    86c0:	e0bffa17 	ldw	r2,-24(fp)
    86c4:	1004403a 	cmpge	r2,r2,zero
    86c8:	1000071e 	bne	r2,zero,86e8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    86cc:	00087000 	call	8700 <alt_get_errno>
    86d0:	1007883a 	mov	r3,r2
    86d4:	e0bffa17 	ldw	r2,-24(fp)
    86d8:	0085c83a 	sub	r2,zero,r2
    86dc:	18800015 	stw	r2,0(r3)
    rc = -1;
    86e0:	00bfffc4 	movi	r2,-1
    86e4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    86e8:	e0bffa17 	ldw	r2,-24(fp)
}
    86ec:	e037883a 	mov	sp,fp
    86f0:	dfc00117 	ldw	ra,4(sp)
    86f4:	df000017 	ldw	fp,0(sp)
    86f8:	dec00204 	addi	sp,sp,8
    86fc:	f800283a 	ret

00008700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8700:	defffd04 	addi	sp,sp,-12
    8704:	dfc00215 	stw	ra,8(sp)
    8708:	df000115 	stw	fp,4(sp)
    870c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8710:	00800074 	movhi	r2,1
    8714:	10aa0604 	addi	r2,r2,-22504
    8718:	10800017 	ldw	r2,0(r2)
    871c:	1005003a 	cmpeq	r2,r2,zero
    8720:	1000061e 	bne	r2,zero,873c <alt_get_errno+0x3c>
    8724:	00800074 	movhi	r2,1
    8728:	10aa0604 	addi	r2,r2,-22504
    872c:	10800017 	ldw	r2,0(r2)
    8730:	103ee83a 	callr	r2
    8734:	e0bfff15 	stw	r2,-4(fp)
    8738:	00000306 	br	8748 <alt_get_errno+0x48>
    873c:	00800074 	movhi	r2,1
    8740:	10b0b104 	addi	r2,r2,-15676
    8744:	e0bfff15 	stw	r2,-4(fp)
    8748:	e0bfff17 	ldw	r2,-4(fp)
}
    874c:	e037883a 	mov	sp,fp
    8750:	dfc00117 	ldw	ra,4(sp)
    8754:	df000017 	ldw	fp,0(sp)
    8758:	dec00204 	addi	sp,sp,8
    875c:	f800283a 	ret

00008760 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    8760:	defffe04 	addi	sp,sp,-8
    8764:	df000115 	stw	fp,4(sp)
    8768:	df000104 	addi	fp,sp,4
    876c:	e13fff15 	stw	r4,-4(fp)
}
    8770:	e037883a 	mov	sp,fp
    8774:	df000017 	ldw	fp,0(sp)
    8778:	dec00104 	addi	sp,sp,4
    877c:	f800283a 	ret

00008780 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    8780:	defffe04 	addi	sp,sp,-8
    8784:	df000115 	stw	fp,4(sp)
    8788:	df000104 	addi	fp,sp,4
    878c:	e13fff15 	stw	r4,-4(fp)
}
    8790:	e037883a 	mov	sp,fp
    8794:	df000017 	ldw	fp,0(sp)
    8798:	dec00104 	addi	sp,sp,4
    879c:	f800283a 	ret

000087a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    87a0:	defff704 	addi	sp,sp,-36
    87a4:	dfc00815 	stw	ra,32(sp)
    87a8:	df000715 	stw	fp,28(sp)
    87ac:	df000704 	addi	fp,sp,28
    87b0:	e13ffb15 	stw	r4,-20(fp)
    87b4:	e17ffc15 	stw	r5,-16(fp)
    87b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    87bc:	e0bffb17 	ldw	r2,-20(fp)
    87c0:	1004803a 	cmplt	r2,r2,zero
    87c4:	1000081e 	bne	r2,zero,87e8 <read+0x48>
    87c8:	e0bffb17 	ldw	r2,-20(fp)
    87cc:	10800324 	muli	r2,r2,12
    87d0:	1007883a 	mov	r3,r2
    87d4:	00800074 	movhi	r2,1
    87d8:	10a89c04 	addi	r2,r2,-23952
    87dc:	1887883a 	add	r3,r3,r2
    87e0:	e0ffff15 	stw	r3,-4(fp)
    87e4:	00000106 	br	87ec <read+0x4c>
    87e8:	e03fff15 	stw	zero,-4(fp)
    87ec:	e0bfff17 	ldw	r2,-4(fp)
    87f0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    87f4:	e0bffa17 	ldw	r2,-24(fp)
    87f8:	1005003a 	cmpeq	r2,r2,zero
    87fc:	1000241e 	bne	r2,zero,8890 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    8800:	e0bffa17 	ldw	r2,-24(fp)
    8804:	10800217 	ldw	r2,8(r2)
    8808:	108000cc 	andi	r2,r2,3
    880c:	10800060 	cmpeqi	r2,r2,1
    8810:	10001a1e 	bne	r2,zero,887c <read+0xdc>
    8814:	e0bffa17 	ldw	r2,-24(fp)
    8818:	10800017 	ldw	r2,0(r2)
    881c:	10800517 	ldw	r2,20(r2)
    8820:	1005003a 	cmpeq	r2,r2,zero
    8824:	1000151e 	bne	r2,zero,887c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    8828:	e0bffa17 	ldw	r2,-24(fp)
    882c:	10800017 	ldw	r2,0(r2)
    8830:	10800517 	ldw	r2,20(r2)
    8834:	e17ffc17 	ldw	r5,-16(fp)
    8838:	e1bffd17 	ldw	r6,-12(fp)
    883c:	e13ffa17 	ldw	r4,-24(fp)
    8840:	103ee83a 	callr	r2
    8844:	e0bff915 	stw	r2,-28(fp)
    8848:	e0bff917 	ldw	r2,-28(fp)
    884c:	1004403a 	cmpge	r2,r2,zero
    8850:	1000071e 	bne	r2,zero,8870 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    8854:	00088c00 	call	88c0 <alt_get_errno>
    8858:	e0fff917 	ldw	r3,-28(fp)
    885c:	00c7c83a 	sub	r3,zero,r3
    8860:	10c00015 	stw	r3,0(r2)
          return -1;
    8864:	00bfffc4 	movi	r2,-1
    8868:	e0bffe15 	stw	r2,-8(fp)
    886c:	00000e06 	br	88a8 <read+0x108>
        }
        return rval;
    8870:	e0bff917 	ldw	r2,-28(fp)
    8874:	e0bffe15 	stw	r2,-8(fp)
    8878:	00000b06 	br	88a8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    887c:	00088c00 	call	88c0 <alt_get_errno>
    8880:	1007883a 	mov	r3,r2
    8884:	00800344 	movi	r2,13
    8888:	18800015 	stw	r2,0(r3)
    888c:	00000406 	br	88a0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    8890:	00088c00 	call	88c0 <alt_get_errno>
    8894:	1007883a 	mov	r3,r2
    8898:	00801444 	movi	r2,81
    889c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    88a0:	00bfffc4 	movi	r2,-1
    88a4:	e0bffe15 	stw	r2,-8(fp)
    88a8:	e0bffe17 	ldw	r2,-8(fp)
}
    88ac:	e037883a 	mov	sp,fp
    88b0:	dfc00117 	ldw	ra,4(sp)
    88b4:	df000017 	ldw	fp,0(sp)
    88b8:	dec00204 	addi	sp,sp,8
    88bc:	f800283a 	ret

000088c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    88c0:	defffd04 	addi	sp,sp,-12
    88c4:	dfc00215 	stw	ra,8(sp)
    88c8:	df000115 	stw	fp,4(sp)
    88cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    88d0:	00800074 	movhi	r2,1
    88d4:	10aa0604 	addi	r2,r2,-22504
    88d8:	10800017 	ldw	r2,0(r2)
    88dc:	1005003a 	cmpeq	r2,r2,zero
    88e0:	1000061e 	bne	r2,zero,88fc <alt_get_errno+0x3c>
    88e4:	00800074 	movhi	r2,1
    88e8:	10aa0604 	addi	r2,r2,-22504
    88ec:	10800017 	ldw	r2,0(r2)
    88f0:	103ee83a 	callr	r2
    88f4:	e0bfff15 	stw	r2,-4(fp)
    88f8:	00000306 	br	8908 <alt_get_errno+0x48>
    88fc:	00800074 	movhi	r2,1
    8900:	10b0b104 	addi	r2,r2,-15676
    8904:	e0bfff15 	stw	r2,-4(fp)
    8908:	e0bfff17 	ldw	r2,-4(fp)
}
    890c:	e037883a 	mov	sp,fp
    8910:	dfc00117 	ldw	ra,4(sp)
    8914:	df000017 	ldw	fp,0(sp)
    8918:	dec00204 	addi	sp,sp,8
    891c:	f800283a 	ret

00008920 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    8920:	defff804 	addi	sp,sp,-32
    8924:	df000715 	stw	fp,28(sp)
    8928:	df000704 	addi	fp,sp,28
    892c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8930:	0005303a 	rdctl	r2,status
    8934:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8938:	e0fffb17 	ldw	r3,-20(fp)
    893c:	00bfff84 	movi	r2,-2
    8940:	1884703a 	and	r2,r3,r2
    8944:	1001703a 	wrctl	status,r2
  
  return context;
    8948:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    894c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    8950:	d0a00e17 	ldw	r2,-32712(gp)
    8954:	10c000c4 	addi	r3,r2,3
    8958:	00bfff04 	movi	r2,-4
    895c:	1884703a 	and	r2,r3,r2
    8960:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    8964:	d0e00e17 	ldw	r3,-32712(gp)
    8968:	e0bffe17 	ldw	r2,-8(fp)
    896c:	1887883a 	add	r3,r3,r2
    8970:	00820034 	movhi	r2,2048
    8974:	10800004 	addi	r2,r2,0
    8978:	10c0072e 	bgeu	r2,r3,8998 <sbrk+0x78>
    897c:	e0bffd17 	ldw	r2,-12(fp)
    8980:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8984:	e0bffa17 	ldw	r2,-24(fp)
    8988:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    898c:	00bfffc4 	movi	r2,-1
    8990:	e0bfff15 	stw	r2,-4(fp)
    8994:	00000c06 	br	89c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    8998:	d0a00e17 	ldw	r2,-32712(gp)
    899c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    89a0:	d0e00e17 	ldw	r3,-32712(gp)
    89a4:	e0bffe17 	ldw	r2,-8(fp)
    89a8:	1885883a 	add	r2,r3,r2
    89ac:	d0a00e15 	stw	r2,-32712(gp)
    89b0:	e0bffd17 	ldw	r2,-12(fp)
    89b4:	e0bff915 	stw	r2,-28(fp)
    89b8:	e0bff917 	ldw	r2,-28(fp)
    89bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    89c0:	e0bffc17 	ldw	r2,-16(fp)
    89c4:	e0bfff15 	stw	r2,-4(fp)
    89c8:	e0bfff17 	ldw	r2,-4(fp)
} 
    89cc:	e037883a 	mov	sp,fp
    89d0:	df000017 	ldw	fp,0(sp)
    89d4:	dec00104 	addi	sp,sp,4
    89d8:	f800283a 	ret

000089dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    89dc:	defff704 	addi	sp,sp,-36
    89e0:	dfc00815 	stw	ra,32(sp)
    89e4:	df000715 	stw	fp,28(sp)
    89e8:	df000704 	addi	fp,sp,28
    89ec:	e13ffb15 	stw	r4,-20(fp)
    89f0:	e17ffc15 	stw	r5,-16(fp)
    89f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    89f8:	e0bffb17 	ldw	r2,-20(fp)
    89fc:	1004803a 	cmplt	r2,r2,zero
    8a00:	1000081e 	bne	r2,zero,8a24 <write+0x48>
    8a04:	e0bffb17 	ldw	r2,-20(fp)
    8a08:	10800324 	muli	r2,r2,12
    8a0c:	1007883a 	mov	r3,r2
    8a10:	00800074 	movhi	r2,1
    8a14:	10a89c04 	addi	r2,r2,-23952
    8a18:	1887883a 	add	r3,r3,r2
    8a1c:	e0ffff15 	stw	r3,-4(fp)
    8a20:	00000106 	br	8a28 <write+0x4c>
    8a24:	e03fff15 	stw	zero,-4(fp)
    8a28:	e0bfff17 	ldw	r2,-4(fp)
    8a2c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    8a30:	e0bffa17 	ldw	r2,-24(fp)
    8a34:	1005003a 	cmpeq	r2,r2,zero
    8a38:	1000241e 	bne	r2,zero,8acc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8a3c:	e0bffa17 	ldw	r2,-24(fp)
    8a40:	10800217 	ldw	r2,8(r2)
    8a44:	108000cc 	andi	r2,r2,3
    8a48:	1005003a 	cmpeq	r2,r2,zero
    8a4c:	10001a1e 	bne	r2,zero,8ab8 <write+0xdc>
    8a50:	e0bffa17 	ldw	r2,-24(fp)
    8a54:	10800017 	ldw	r2,0(r2)
    8a58:	10800617 	ldw	r2,24(r2)
    8a5c:	1005003a 	cmpeq	r2,r2,zero
    8a60:	1000151e 	bne	r2,zero,8ab8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8a64:	e0bffa17 	ldw	r2,-24(fp)
    8a68:	10800017 	ldw	r2,0(r2)
    8a6c:	10800617 	ldw	r2,24(r2)
    8a70:	e17ffc17 	ldw	r5,-16(fp)
    8a74:	e1bffd17 	ldw	r6,-12(fp)
    8a78:	e13ffa17 	ldw	r4,-24(fp)
    8a7c:	103ee83a 	callr	r2
    8a80:	e0bff915 	stw	r2,-28(fp)
    8a84:	e0bff917 	ldw	r2,-28(fp)
    8a88:	1004403a 	cmpge	r2,r2,zero
    8a8c:	1000071e 	bne	r2,zero,8aac <write+0xd0>
      {
        ALT_ERRNO = -rval;
    8a90:	0008afc0 	call	8afc <alt_get_errno>
    8a94:	e0fff917 	ldw	r3,-28(fp)
    8a98:	00c7c83a 	sub	r3,zero,r3
    8a9c:	10c00015 	stw	r3,0(r2)
        return -1;
    8aa0:	00bfffc4 	movi	r2,-1
    8aa4:	e0bffe15 	stw	r2,-8(fp)
    8aa8:	00000e06 	br	8ae4 <write+0x108>
      }
      return rval;
    8aac:	e0bff917 	ldw	r2,-28(fp)
    8ab0:	e0bffe15 	stw	r2,-8(fp)
    8ab4:	00000b06 	br	8ae4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8ab8:	0008afc0 	call	8afc <alt_get_errno>
    8abc:	1007883a 	mov	r3,r2
    8ac0:	00800344 	movi	r2,13
    8ac4:	18800015 	stw	r2,0(r3)
    8ac8:	00000406 	br	8adc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8acc:	0008afc0 	call	8afc <alt_get_errno>
    8ad0:	1007883a 	mov	r3,r2
    8ad4:	00801444 	movi	r2,81
    8ad8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8adc:	00bfffc4 	movi	r2,-1
    8ae0:	e0bffe15 	stw	r2,-8(fp)
    8ae4:	e0bffe17 	ldw	r2,-8(fp)
}
    8ae8:	e037883a 	mov	sp,fp
    8aec:	dfc00117 	ldw	ra,4(sp)
    8af0:	df000017 	ldw	fp,0(sp)
    8af4:	dec00204 	addi	sp,sp,8
    8af8:	f800283a 	ret

00008afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8afc:	defffd04 	addi	sp,sp,-12
    8b00:	dfc00215 	stw	ra,8(sp)
    8b04:	df000115 	stw	fp,4(sp)
    8b08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8b0c:	00800074 	movhi	r2,1
    8b10:	10aa0604 	addi	r2,r2,-22504
    8b14:	10800017 	ldw	r2,0(r2)
    8b18:	1005003a 	cmpeq	r2,r2,zero
    8b1c:	1000061e 	bne	r2,zero,8b38 <alt_get_errno+0x3c>
    8b20:	00800074 	movhi	r2,1
    8b24:	10aa0604 	addi	r2,r2,-22504
    8b28:	10800017 	ldw	r2,0(r2)
    8b2c:	103ee83a 	callr	r2
    8b30:	e0bfff15 	stw	r2,-4(fp)
    8b34:	00000306 	br	8b44 <alt_get_errno+0x48>
    8b38:	00800074 	movhi	r2,1
    8b3c:	10b0b104 	addi	r2,r2,-15676
    8b40:	e0bfff15 	stw	r2,-4(fp)
    8b44:	e0bfff17 	ldw	r2,-4(fp)
}
    8b48:	e037883a 	mov	sp,fp
    8b4c:	dfc00117 	ldw	ra,4(sp)
    8b50:	df000017 	ldw	fp,0(sp)
    8b54:	dec00204 	addi	sp,sp,8
    8b58:	f800283a 	ret
    8b5c:	00006888 	cmpgei	zero,zero,418
